{"version":3,"file":"scrolling.js","sources":["../../../../../../src/cdk/scrolling/virtual-scroll-strategy.ts","../../../../../../src/cdk/scrolling/fixed-size-virtual-scroll.ts","../../../../../../src/cdk/scrolling/scroll-dispatcher.ts","../../../../../../src/cdk/scrolling/scrollable.ts","../../../../../../src/cdk/scrolling/viewport-ruler.ts","../../../../../../src/cdk/scrolling/virtual-scroll-viewport.ts","../../../../../../src/cdk/scrolling/virtual-for-of.ts","../../../../../../src/cdk/scrolling/scrolling-module.ts","../../../../../../src/cdk/scrolling/public-api.ts","../../../../../../src/cdk/scrolling/index.ts"],"names":["observableOf"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {CdkVirtualScrollViewport} from './virtual-scroll-viewport';\n\n\n/** The injection token used to specify the virtual scrolling strategy. */\nexport const VIRTUAL_SCROLL_STRATEGY =\n    new InjectionToken<VirtualScrollStrategy>('VIRTUAL_SCROLL_STRATEGY');\n\n\n/** A strategy that dictates which items should be rendered in the viewport. */\nexport interface VirtualScrollStrategy {\n  /** Emits when the index of the first element visible in the viewport changes. */\n  scrolledIndexChange: Observable<number>;\n\n  /**\n   * Attaches this scroll strategy to a viewport.\n   * @param viewport The viewport to attach this strategy to.\n   */\n  attach(viewport: CdkVirtualScrollViewport): void;\n\n  /** Detaches this scroll strategy from the currently attached viewport. */\n  detach(): void;\n\n  /** Called when the viewport is scrolled (debounced using requestAnimationFrame). */\n  onContentScrolled(): void;\n\n  /** Called when the length of the data changes. */\n  onDataLengthChanged(): void;\n\n  /** Called when the range of items rendered in the DOM has changed. */\n  onContentRendered(): void;\n\n  /** Called when the offset of the rendered items changed. */\n  onRenderedOffsetChanged(): void;\n\n  /**\n   * Scroll to the offset for the given index.\n   * @param index The index of the element to scroll to.\n   * @param behavior The ScrollBehavior to use when scrolling.\n   */\n  scrollToIndex(index: number, behavior: ScrollBehavior): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, NumberInput} from '@angular/cdk/coercion';\nimport {Directive, forwardRef, Input, OnChanges} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {distinctUntilChanged} from 'rxjs/operators';\nimport {VIRTUAL_SCROLL_STRATEGY, VirtualScrollStrategy} from './virtual-scroll-strategy';\nimport {CdkVirtualScrollViewport} from './virtual-scroll-viewport';\n\n\n/** Virtual scrolling strategy for lists with items of known fixed size. */\nexport class FixedSizeVirtualScrollStrategy implements VirtualScrollStrategy {\n  private _scrolledIndexChange = new Subject<number>();\n\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n  scrolledIndexChange: Observable<number> = this._scrolledIndexChange.pipe(distinctUntilChanged());\n\n  /** The attached viewport. */\n  private _viewport: CdkVirtualScrollViewport | null = null;\n\n  /** The size of the items in the virtually scrolling list. */\n  private _itemSize: number;\n\n  /** The minimum amount of buffer rendered beyond the viewport (in pixels). */\n  private _minBufferPx: number;\n\n  /** The number of buffer items to render beyond the edge of the viewport (in pixels). */\n  private _maxBufferPx: number;\n\n  /**\n   * @param itemSize The size of the items in the virtually scrolling list.\n   * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n   * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n   */\n  constructor(itemSize: number, minBufferPx: number, maxBufferPx: number) {\n    this._itemSize = itemSize;\n    this._minBufferPx = minBufferPx;\n    this._maxBufferPx = maxBufferPx;\n  }\n\n  /**\n   * Attaches this scroll strategy to a viewport.\n   * @param viewport The viewport to attach this strategy to.\n   */\n  attach(viewport: CdkVirtualScrollViewport) {\n    this._viewport = viewport;\n    this._updateTotalContentSize();\n    this._updateRenderedRange();\n  }\n\n  /** Detaches this scroll strategy from the currently attached viewport. */\n  detach() {\n    this._scrolledIndexChange.complete();\n    this._viewport = null;\n  }\n\n  /**\n   * Update the item size and buffer size.\n   * @param itemSize The size of the items in the virtually scrolling list.\n   * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n   * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n   */\n  updateItemAndBufferSize(itemSize: number, minBufferPx: number, maxBufferPx: number) {\n    if (maxBufferPx < minBufferPx) {\n      throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\n    }\n    this._itemSize = itemSize;\n    this._minBufferPx = minBufferPx;\n    this._maxBufferPx = maxBufferPx;\n    this._updateTotalContentSize();\n    this._updateRenderedRange();\n  }\n\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n  onContentScrolled() {\n    this._updateRenderedRange();\n  }\n\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n  onDataLengthChanged() {\n    this._updateTotalContentSize();\n    this._updateRenderedRange();\n  }\n\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n  onContentRendered() { /* no-op */ }\n\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n  onRenderedOffsetChanged() { /* no-op */ }\n\n  /**\n   * Scroll to the offset for the given index.\n   * @param index The index of the element to scroll to.\n   * @param behavior The ScrollBehavior to use when scrolling.\n   */\n  scrollToIndex(index: number, behavior: ScrollBehavior): void {\n    if (this._viewport) {\n      this._viewport.scrollToOffset(index * this._itemSize, behavior);\n    }\n  }\n\n  /** Update the viewport's total content size. */\n  private _updateTotalContentSize() {\n    if (!this._viewport) {\n      return;\n    }\n\n    this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\n  }\n\n  /** Update the viewport's rendered range. */\n  private _updateRenderedRange() {\n    if (!this._viewport) {\n      return;\n    }\n\n    const renderedRange = this._viewport.getRenderedRange();\n    const newRange = {start: renderedRange.start, end: renderedRange.end};\n    const viewportSize = this._viewport.getViewportSize();\n    const dataLength = this._viewport.getDataLength();\n    let scrollOffset = this._viewport.measureScrollOffset();\n    let firstVisibleIndex = scrollOffset / this._itemSize;\n\n    // If user scrolls to the bottom of the list and data changes to a smaller list\n    if (newRange.end > dataLength) {\n      // We have to recalculate the first visible index based on new data length and viewport size.\n      const maxVisibleItems = Math.ceil(viewportSize / this._itemSize);\n      const newVisibleIndex = Math.max(0,\n          Math.min(firstVisibleIndex, dataLength - maxVisibleItems));\n\n      // If first visible index changed we must update scroll offset to handle start/end buffers\n      // Current range must also be adjusted to cover the new position (bottom of new list).\n      if (firstVisibleIndex != newVisibleIndex) {\n        firstVisibleIndex = newVisibleIndex;\n        scrollOffset = newVisibleIndex * this._itemSize;\n        newRange.start = Math.floor(firstVisibleIndex);\n      }\n\n      newRange.end = Math.max(0, Math.min(dataLength, newRange.start + maxVisibleItems));\n    }\n\n    const startBuffer = scrollOffset - newRange.start * this._itemSize;\n    if (startBuffer < this._minBufferPx && newRange.start != 0) {\n      const expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);\n      newRange.start = Math.max(0, newRange.start - expandStart);\n      newRange.end = Math.min(dataLength,\n          Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));\n    } else {\n      const endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);\n      if (endBuffer < this._minBufferPx && newRange.end != dataLength) {\n        const expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);\n        if (expandEnd > 0) {\n          newRange.end = Math.min(dataLength, newRange.end + expandEnd);\n          newRange.start = Math.max(0,\n              Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));\n        }\n      }\n    }\n\n    this._viewport.setRenderedRange(newRange);\n    this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);\n    this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));\n  }\n}\n\n\n/**\n * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\n * `FixedSizeVirtualScrollStrategy` from the given directive.\n * @param fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\n *     `FixedSizeVirtualScrollStrategy` from.\n */\nexport function _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir: CdkFixedSizeVirtualScroll) {\n  return fixedSizeDir._scrollStrategy;\n}\n\n\n/** A virtual scroll strategy that supports fixed-size items. */\n@Directive({\n  selector: 'cdk-virtual-scroll-viewport[itemSize]',\n  providers: [{\n    provide: VIRTUAL_SCROLL_STRATEGY,\n    useFactory: _fixedSizeVirtualScrollStrategyFactory,\n    deps: [forwardRef(() => CdkFixedSizeVirtualScroll)],\n  }],\n})\nexport class CdkFixedSizeVirtualScroll implements OnChanges {\n  /** The size of the items in the list (in pixels). */\n  @Input()\n  get itemSize(): number { return this._itemSize; }\n  set itemSize(value: number) { this._itemSize = coerceNumberProperty(value); }\n  _itemSize = 20;\n\n  /**\n   * The minimum amount of buffer rendered beyond the viewport (in pixels).\n   * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\n   */\n  @Input()\n  get minBufferPx(): number { return this._minBufferPx; }\n  set minBufferPx(value: number) { this._minBufferPx = coerceNumberProperty(value); }\n  _minBufferPx = 100;\n\n  /**\n   * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\n   */\n  @Input()\n  get maxBufferPx(): number { return this._maxBufferPx; }\n  set maxBufferPx(value: number) { this._maxBufferPx = coerceNumberProperty(value); }\n  _maxBufferPx = 200;\n\n  /** The scroll strategy used by this directive. */\n  _scrollStrategy =\n      new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);\n\n  ngOnChanges() {\n    this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);\n  }\n\n  static ngAcceptInputType_itemSize: NumberInput;\n  static ngAcceptInputType_minBufferPx: NumberInput;\n  static ngAcceptInputType_maxBufferPx: NumberInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {ElementRef, Injectable, NgZone, OnDestroy, Optional, Inject} from '@angular/core';\nimport {fromEvent, of as observableOf, Subject, Subscription, Observable, Observer} from 'rxjs';\nimport {auditTime, filter} from 'rxjs/operators';\nimport {CdkScrollable} from './scrollable';\nimport {DOCUMENT} from '@angular/common';\n\n/** Time in ms to throttle the scrolling events by default. */\nexport const DEFAULT_SCROLL_TIME = 20;\n\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\n@Injectable({providedIn: 'root'})\nexport class ScrollDispatcher implements OnDestroy {\n  /** Used to reference correct document/window */\n  protected _document?: Document;\n\n  constructor(private _ngZone: NgZone,\n              private _platform: Platform,\n              /** @breaking-change 11.0.0 make document required */\n              @Optional() @Inject(DOCUMENT) document?: any) {\n    this._document = document;\n  }\n\n  /** Subject for notifying that a registered scrollable reference element has been scrolled. */\n  private _scrolled = new Subject<CdkScrollable|void>();\n\n  /** Keeps track of the global `scroll` and `resize` subscriptions. */\n  _globalSubscription: Subscription | null = null;\n\n  /** Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards. */\n  private _scrolledCount = 0;\n\n  /**\n   * Map of all the scrollable references that are registered with the service and their\n   * scroll event subscriptions.\n   */\n  scrollContainers: Map<CdkScrollable, Subscription> = new Map();\n\n  /**\n   * Registers a scrollable instance with the service and listens for its scrolled events. When the\n   * scrollable is scrolled, the service emits the event to its scrolled observable.\n   * @param scrollable Scrollable instance to be registered.\n   */\n  register(scrollable: CdkScrollable): void {\n    if (!this.scrollContainers.has(scrollable)) {\n      this.scrollContainers.set(scrollable, scrollable.elementScrolled()\n          .subscribe(() => this._scrolled.next(scrollable)));\n    }\n  }\n\n  /**\n   * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n   * @param scrollable Scrollable instance to be deregistered.\n   */\n  deregister(scrollable: CdkScrollable): void {\n    const scrollableReference = this.scrollContainers.get(scrollable);\n\n    if (scrollableReference) {\n      scrollableReference.unsubscribe();\n      this.scrollContainers.delete(scrollable);\n    }\n  }\n\n  /**\n   * Returns an observable that emits an event whenever any of the registered Scrollable\n   * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n   * to override the default \"throttle\" time.\n   *\n   * **Note:** in order to avoid hitting change detection for every scroll event,\n   * all of the events emitted from this stream will be run outside the Angular zone.\n   * If you need to update any data bindings as a result of a scroll event, you have\n   * to run the callback using `NgZone.run`.\n   */\n  scrolled(auditTimeInMs: number = DEFAULT_SCROLL_TIME): Observable<CdkScrollable|void> {\n    if (!this._platform.isBrowser) {\n      return observableOf<void>();\n    }\n\n    return new Observable((observer: Observer<CdkScrollable|void>) => {\n      if (!this._globalSubscription) {\n        this._addGlobalListener();\n      }\n\n      // In the case of a 0ms delay, use an observable without auditTime\n      // since it does add a perceptible delay in processing overhead.\n      const subscription = auditTimeInMs > 0 ?\n        this._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer) :\n        this._scrolled.subscribe(observer);\n\n      this._scrolledCount++;\n\n      return () => {\n        subscription.unsubscribe();\n        this._scrolledCount--;\n\n        if (!this._scrolledCount) {\n          this._removeGlobalListener();\n        }\n      };\n    });\n  }\n\n  ngOnDestroy() {\n    this._removeGlobalListener();\n    this.scrollContainers.forEach((_, container) => this.deregister(container));\n    this._scrolled.complete();\n  }\n\n  /**\n   * Returns an observable that emits whenever any of the\n   * scrollable ancestors of an element are scrolled.\n   * @param elementRef Element whose ancestors to listen for.\n   * @param auditTimeInMs Time to throttle the scroll events.\n   */\n  ancestorScrolled(elementRef: ElementRef, auditTimeInMs?: number): Observable<CdkScrollable|void> {\n    const ancestors = this.getAncestorScrollContainers(elementRef);\n\n    return this.scrolled(auditTimeInMs).pipe(filter(target => {\n      return !target || ancestors.indexOf(target) > -1;\n    }));\n  }\n\n  /** Returns all registered Scrollables that contain the provided element. */\n  getAncestorScrollContainers(elementRef: ElementRef): CdkScrollable[] {\n    const scrollingContainers: CdkScrollable[] = [];\n\n    this.scrollContainers.forEach((_subscription: Subscription, scrollable: CdkScrollable) => {\n      if (this._scrollableContainsElement(scrollable, elementRef)) {\n        scrollingContainers.push(scrollable);\n      }\n    });\n\n    return scrollingContainers;\n  }\n\n  /** Access injected document if available or fallback to global document reference */\n  private _getDocument(): Document {\n    return this._document || document;\n  }\n\n  /** Use defaultView of injected document if available or fallback to global window reference */\n  private _getWindow(): Window {\n    const doc = this._getDocument();\n    return doc.defaultView || window;\n  }\n\n  /** Returns true if the element is contained within the provided Scrollable. */\n  private _scrollableContainsElement(scrollable: CdkScrollable, elementRef: ElementRef): boolean {\n    let element: HTMLElement | null = elementRef.nativeElement;\n    let scrollableElement = scrollable.getElementRef().nativeElement;\n\n    // Traverse through the element parents until we reach null, checking if any of the elements\n    // are the scrollable's element.\n    do {\n      if (element == scrollableElement) { return true; }\n    } while (element = element!.parentElement);\n\n    return false;\n  }\n\n  /** Sets up the global scroll listeners. */\n  private _addGlobalListener() {\n    this._globalSubscription = this._ngZone.runOutsideAngular(() => {\n      const window = this._getWindow();\n      return fromEvent(window.document, 'scroll').subscribe(() => this._scrolled.next());\n    });\n  }\n\n  /** Cleans up the global scroll listener. */\n  private _removeGlobalListener() {\n    if (this._globalSubscription) {\n      this._globalSubscription.unsubscribe();\n      this._globalSubscription = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  getRtlScrollAxisType,\n  RtlScrollAxisType,\n  supportsScrollBehavior\n} from '@angular/cdk/platform';\nimport {Directive, ElementRef, NgZone, OnDestroy, OnInit, Optional} from '@angular/core';\nimport {fromEvent, Observable, Subject, Observer} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {ScrollDispatcher} from './scroll-dispatcher';\n\nexport type _Without<T> = {[P in keyof T]?: never};\nexport type _XOR<T, U> = (_Without<T> & U) | (_Without<U> & T);\nexport type _Top = {top?: number};\nexport type _Bottom = {bottom?: number};\nexport type _Left = {left?: number};\nexport type _Right = {right?: number};\nexport type _Start = {start?: number};\nexport type _End = {end?: number};\nexport type _XAxis = _XOR<_XOR<_Left, _Right>, _XOR<_Start, _End>>;\nexport type _YAxis = _XOR<_Top, _Bottom>;\n\n/**\n * An extended version of ScrollToOptions that allows expressing scroll offsets relative to the\n * top, bottom, left, right, start, or end of the viewport rather than just the top and left.\n * Please note: the top and bottom properties are mutually exclusive, as are the left, right,\n * start, and end properties.\n */\nexport type ExtendedScrollToOptions = _XAxis & _YAxis & ScrollOptions;\n\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\n@Directive({\n  selector: '[cdk-scrollable], [cdkScrollable]'\n})\nexport class CdkScrollable implements OnInit, OnDestroy {\n  private _destroyed = new Subject();\n\n  private _elementScrolled: Observable<Event> = new Observable((observer: Observer<Event>) =>\n      this.ngZone.runOutsideAngular(() =>\n          fromEvent(this.elementRef.nativeElement, 'scroll').pipe(takeUntil(this._destroyed))\n              .subscribe(observer)));\n\n  constructor(protected elementRef: ElementRef<HTMLElement>,\n              protected scrollDispatcher: ScrollDispatcher,\n              protected ngZone: NgZone,\n              @Optional() protected dir?: Directionality) {}\n\n  ngOnInit() {\n    this.scrollDispatcher.register(this);\n  }\n\n  ngOnDestroy() {\n    this.scrollDispatcher.deregister(this);\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Returns observable that emits when a scroll event is fired on the host element. */\n  elementScrolled(): Observable<Event> {\n    return this._elementScrolled;\n  }\n\n  /** Gets the ElementRef for the viewport. */\n  getElementRef(): ElementRef<HTMLElement> {\n    return this.elementRef;\n  }\n\n  /**\n   * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n   * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n   * left and right always refer to the left and right side of the scrolling container irrespective\n   * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n   * in an RTL context.\n   * @param options specified the offsets to scroll to.\n   */\n  scrollTo(options: ExtendedScrollToOptions): void {\n    const el = this.elementRef.nativeElement;\n    const isRtl = this.dir && this.dir.value == 'rtl';\n\n    // Rewrite start & end offsets as right or left offsets.\n    if (options.left == null) {\n      options.left = isRtl ? options.end : options.start;\n    }\n\n    if (options.right == null) {\n      options.right = isRtl ? options.start : options.end;\n    }\n\n    // Rewrite the bottom offset as a top offset.\n    if (options.bottom != null) {\n      (options as _Without<_Bottom> & _Top).top =\n          el.scrollHeight - el.clientHeight - options.bottom;\n    }\n\n    // Rewrite the right offset as a left offset.\n    if (isRtl && getRtlScrollAxisType() != RtlScrollAxisType.NORMAL) {\n      if (options.left != null) {\n        (options as _Without<_Left> & _Right).right =\n            el.scrollWidth - el.clientWidth - options.left;\n      }\n\n      if (getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {\n        options.left = options.right;\n      } else if (getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {\n        options.left = options.right ? -options.right : options.right;\n      }\n    } else {\n      if (options.right != null) {\n        (options as _Without<_Right> & _Left).left =\n            el.scrollWidth - el.clientWidth - options.right;\n      }\n    }\n\n    this._applyScrollToOptions(options);\n  }\n\n  private _applyScrollToOptions(options: ScrollToOptions): void {\n    const el = this.elementRef.nativeElement;\n\n    if (supportsScrollBehavior()) {\n      el.scrollTo(options);\n    } else {\n      if (options.top != null) {\n        el.scrollTop = options.top;\n      }\n      if (options.left != null) {\n        el.scrollLeft = options.left;\n      }\n    }\n  }\n\n  /**\n   * Measures the scroll offset relative to the specified edge of the viewport. This method can be\n   * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\n   * about what scrollLeft means in RTL. The values returned by this method are normalized such that\n   * left and right always refer to the left and right side of the scrolling container irrespective\n   * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n   * in an RTL context.\n   * @param from The edge to measure from.\n   */\n  measureScrollOffset(from: 'top' | 'left' | 'right' | 'bottom' | 'start' | 'end'): number {\n    const LEFT = 'left';\n    const RIGHT = 'right';\n    const el = this.elementRef.nativeElement;\n    if (from == 'top') {\n      return el.scrollTop;\n    }\n    if (from == 'bottom') {\n      return el.scrollHeight - el.clientHeight - el.scrollTop;\n    }\n\n    // Rewrite start & end as left or right offsets.\n    const isRtl = this.dir && this.dir.value == 'rtl';\n    if (from == 'start') {\n      from = isRtl ? RIGHT : LEFT;\n    } else if (from == 'end') {\n      from = isRtl ? LEFT : RIGHT;\n    }\n\n    if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {\n      // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and\n      // 0 when scrolled all the way right.\n      if (from == LEFT) {\n        return el.scrollWidth - el.clientWidth - el.scrollLeft;\n      } else {\n        return el.scrollLeft;\n      }\n    } else if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {\n      // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and\n      // 0 when scrolled all the way right.\n      if (from == LEFT) {\n        return el.scrollLeft + el.scrollWidth - el.clientWidth;\n      } else {\n        return -el.scrollLeft;\n      }\n    } else {\n      // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and\n      // (scrollWidth - clientWidth) when scrolled all the way right.\n      if (from == LEFT) {\n        return el.scrollLeft;\n      } else {\n        return el.scrollWidth - el.clientWidth - el.scrollLeft;\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Injectable, NgZone, OnDestroy, Optional, Inject} from '@angular/core';\nimport {merge, of as observableOf, fromEvent, Observable, Subscription} from 'rxjs';\nimport {auditTime} from 'rxjs/operators';\nimport {DOCUMENT} from '@angular/common';\n\n/** Time in ms to throttle the resize events by default. */\nexport const DEFAULT_RESIZE_TIME = 20;\n\n/** Object that holds the scroll position of the viewport in each direction. */\nexport interface ViewportScrollPosition {\n  top: number;\n  left: number;\n}\n\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * @docs-private\n */\n@Injectable({providedIn: 'root'})\nexport class ViewportRuler implements OnDestroy {\n  /** Cached viewport dimensions. */\n  private _viewportSize: {width: number; height: number};\n\n  /** Stream of viewport change events. */\n  private _change: Observable<Event>;\n\n  /** Subscription to streams that invalidate the cached viewport dimensions. */\n  private _invalidateCache: Subscription;\n\n  /** Used to reference correct document/window */\n  protected _document?: Document;\n\n  constructor(private _platform: Platform,\n              ngZone: NgZone,\n              /** @breaking-change 11.0.0 make document required */\n              @Optional() @Inject(DOCUMENT) document?: any) {\n    this._document = document;\n\n    ngZone.runOutsideAngular(() => {\n      const window = this._getWindow();\n\n      this._change = _platform.isBrowser ?\n          merge(fromEvent(window, 'resize'), fromEvent(window, 'orientationchange')) :\n          observableOf();\n\n      // Note that we need to do the subscription inside `runOutsideAngular`\n      // since subscribing is what causes the event listener to be added.\n      this._invalidateCache = this.change().subscribe(() => this._updateViewportSize());\n    });\n  }\n\n  ngOnDestroy() {\n    this._invalidateCache.unsubscribe();\n  }\n\n  /** Returns the viewport's width and height. */\n  getViewportSize(): Readonly<{width: number, height: number}> {\n    if (!this._viewportSize) {\n      this._updateViewportSize();\n    }\n\n    const output = {width: this._viewportSize.width, height: this._viewportSize.height};\n\n    // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n    if (!this._platform.isBrowser) {\n      this._viewportSize = null!;\n    }\n\n    return output;\n  }\n\n  /** Gets a ClientRect for the viewport's bounds. */\n  getViewportRect(): ClientRect {\n    // Use the document element's bounding rect rather than the window scroll properties\n    // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n    // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n    // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n    // can disagree when the page is pinch-zoomed (on devices that support touch).\n    // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n    // We use the documentElement instead of the body because, by default (without a css reset)\n    // browsers typically give the document body an 8px margin, which is not included in\n    // getBoundingClientRect().\n    const scrollPosition = this.getViewportScrollPosition();\n    const {width, height} = this.getViewportSize();\n\n    return {\n      top: scrollPosition.top,\n      left: scrollPosition.left,\n      bottom: scrollPosition.top + height,\n      right: scrollPosition.left + width,\n      height,\n      width,\n    };\n  }\n\n  /** Gets the (top, left) scroll position of the viewport. */\n  getViewportScrollPosition(): ViewportScrollPosition {\n    // While we can get a reference to the fake document\n    // during SSR, it doesn't have getBoundingClientRect.\n    if (!this._platform.isBrowser) {\n      return {top: 0, left: 0};\n    }\n\n    // The top-left-corner of the viewport is determined by the scroll position of the document\n    // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n    // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n    // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n    // `document.documentElement` works consistently, where the `top` and `left` values will\n    // equal negative the scroll position.\n    const document = this._getDocument();\n    const window = this._getWindow();\n    const documentElement = document.documentElement!;\n    const documentRect = documentElement.getBoundingClientRect();\n\n    const top = -documentRect.top || document.body.scrollTop || window.scrollY ||\n                 documentElement.scrollTop || 0;\n\n    const left = -documentRect.left || document.body.scrollLeft || window.scrollX ||\n                  documentElement.scrollLeft || 0;\n\n    return {top, left};\n  }\n\n  /**\n   * Returns a stream that emits whenever the size of the viewport changes.\n   * @param throttleTime Time in milliseconds to throttle the stream.\n   */\n  change(throttleTime: number = DEFAULT_RESIZE_TIME): Observable<Event> {\n    return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\n  }\n\n  /** Access injected document if available or fallback to global document reference */\n  private _getDocument(): Document {\n    return this._document || document;\n  }\n\n  /** Use defaultView of injected document if available or fallback to global window reference */\n  private _getWindow(): Window {\n    const doc = this._getDocument();\n    return doc.defaultView || window;\n  }\n\n  /** Updates the cached viewport size. */\n  private _updateViewportSize() {\n    const window = this._getWindow();\n    this._viewportSize = this._platform.isBrowser ?\n        {width: window.innerWidth, height: window.innerHeight} :\n        {width: 0, height: 0};\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {ListRange} from '@angular/cdk/collections';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  animationFrameScheduler,\n  asapScheduler,\n  Observable,\n  Subject,\n  Observer,\n  Subscription,\n} from 'rxjs';\nimport {auditTime, startWith, takeUntil} from 'rxjs/operators';\nimport {ScrollDispatcher} from './scroll-dispatcher';\nimport {CdkScrollable, ExtendedScrollToOptions} from './scrollable';\nimport {CdkVirtualForOf} from './virtual-for-of';\nimport {VIRTUAL_SCROLL_STRATEGY, VirtualScrollStrategy} from './virtual-scroll-strategy';\nimport {ViewportRuler} from './viewport-ruler';\n\n/** Checks if the given ranges are equal. */\nfunction rangesEqual(r1: ListRange, r2: ListRange): boolean {\n  return r1.start == r2.start && r1.end == r2.end;\n}\n\n/**\n * Scheduler to be used for scroll events. Needs to fall back to\n * something that doesn't rely on requestAnimationFrame on environments\n * that don't support it (e.g. server-side rendering).\n */\nconst SCROLL_SCHEDULER =\n    typeof requestAnimationFrame !== 'undefined' ? animationFrameScheduler : asapScheduler;\n\n\n/** A viewport that virtualizes its scrolling with the help of `CdkVirtualForOf`. */\n@Component({\n  selector: 'cdk-virtual-scroll-viewport',\n  templateUrl: 'virtual-scroll-viewport.html',\n  styleUrls: ['virtual-scroll-viewport.css'],\n  host: {\n    'class': 'cdk-virtual-scroll-viewport',\n    '[class.cdk-virtual-scroll-orientation-horizontal]': 'orientation === \"horizontal\"',\n    '[class.cdk-virtual-scroll-orientation-vertical]': 'orientation !== \"horizontal\"',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{\n    provide: CdkScrollable,\n    useExisting: CdkVirtualScrollViewport,\n  }]\n})\nexport class CdkVirtualScrollViewport extends CdkScrollable implements OnInit, OnDestroy {\n  /** Emits when the viewport is detached from a CdkVirtualForOf. */\n  private _detachedSubject = new Subject<void>();\n\n  /** Emits when the rendered range changes. */\n  private _renderedRangeSubject = new Subject<ListRange>();\n\n  /** The direction the viewport scrolls. */\n  @Input()\n  get orientation() {\n    return this._orientation;\n  }\n  set orientation(orientation: 'horizontal' | 'vertical') {\n    if (this._orientation !== orientation) {\n      this._orientation = orientation;\n      this._calculateSpacerSize();\n    }\n  }\n  private _orientation: 'horizontal' | 'vertical' = 'vertical';\n\n  // Note: we don't use the typical EventEmitter here because we need to subscribe to the scroll\n  // strategy lazily (i.e. only if the user is actually listening to the events). We do this because\n  // depending on how the strategy calculates the scrolled index, it may come at a cost to\n  // performance.\n  /** Emits when the index of the first element visible in the viewport changes. */\n  @Output() scrolledIndexChange: Observable<number> =\n      new Observable((observer: Observer<number>) =>\n        this._scrollStrategy.scrolledIndexChange.subscribe(index =>\n            Promise.resolve().then(() => this.ngZone.run(() => observer.next(index)))));\n\n  /** The element that wraps the rendered content. */\n  @ViewChild('contentWrapper', {static: true}) _contentWrapper: ElementRef<HTMLElement>;\n\n  /** A stream that emits whenever the rendered range changes. */\n  renderedRangeStream: Observable<ListRange> = this._renderedRangeSubject.asObservable();\n\n  /**\n   * The total size of all content (in pixels), including content that is not currently rendered.\n   */\n  private _totalContentSize = 0;\n\n  /** A string representing the `style.width` property value to be used for the spacer element. */\n  _totalContentWidth = '';\n\n  /** A string representing the `style.height` property value to be used for the spacer element. */\n  _totalContentHeight = '';\n\n  /**\n   * The CSS transform applied to the rendered subset of items so that they appear within the bounds\n   * of the visible viewport.\n   */\n  private _renderedContentTransform: string;\n\n  /** The currently rendered range of indices. */\n  private _renderedRange: ListRange = {start: 0, end: 0};\n\n  /** The length of the data bound to this viewport (in number of items). */\n  private _dataLength = 0;\n\n  /** The size of the viewport (in pixels). */\n  private _viewportSize = 0;\n\n  /** the currently attached CdkVirtualForOf. */\n  private _forOf: CdkVirtualForOf<any> | null;\n\n  /** The last rendered content offset that was set. */\n  private _renderedContentOffset = 0;\n\n  /**\n   * Whether the last rendered content offset was to the end of the content (and therefore needs to\n   * be rewritten as an offset to the start of the content).\n   */\n  private _renderedContentOffsetNeedsRewrite = false;\n\n  /** Whether there is a pending change detection cycle. */\n  private _isChangeDetectionPending = false;\n\n  /** A list of functions to run after the next change detection cycle. */\n  private _runAfterChangeDetection: Function[] = [];\n\n  /** Subscription to changes in the viewport size. */\n  private _viewportChanges = Subscription.EMPTY;\n\n  constructor(public elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              ngZone: NgZone,\n              @Optional() @Inject(VIRTUAL_SCROLL_STRATEGY)\n                  private _scrollStrategy: VirtualScrollStrategy,\n              @Optional() dir: Directionality,\n              scrollDispatcher: ScrollDispatcher,\n              /**\n               * @deprecated `viewportRuler` parameter to become required.\n               * @breaking-change 11.0.0\n               */\n              @Optional() viewportRuler?: ViewportRuler) {\n    super(elementRef, scrollDispatcher, ngZone, dir);\n\n    if (!_scrollStrategy) {\n      throw Error('Error: cdk-virtual-scroll-viewport requires the \"itemSize\" property to be set.');\n    }\n\n    // @breaking-change 11.0.0 Remove null check for `viewportRuler`.\n    if (viewportRuler) {\n      this._viewportChanges = viewportRuler.change().subscribe(() => {\n        this.checkViewportSize();\n      });\n    }\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n\n    // It's still too early to measure the viewport at this point. Deferring with a promise allows\n    // the Viewport to be rendered with the correct size before we measure. We run this outside the\n    // zone to avoid causing more change detection cycles. We handle the change detection loop\n    // ourselves instead.\n    this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n      this._measureViewportSize();\n      this._scrollStrategy.attach(this);\n\n      this.elementScrolled()\n          .pipe(\n              // Start off with a fake scroll event so we properly detect our initial position.\n              startWith(null!),\n              // Collect multiple events into one until the next animation frame. This way if\n              // there are multiple scroll events in the same frame we only need to recheck\n              // our layout once.\n              auditTime(0, SCROLL_SCHEDULER))\n          .subscribe(() => this._scrollStrategy.onContentScrolled());\n\n      this._markChangeDetectionNeeded();\n    }));\n  }\n\n  ngOnDestroy() {\n    this.detach();\n    this._scrollStrategy.detach();\n\n    // Complete all subjects\n    this._renderedRangeSubject.complete();\n    this._detachedSubject.complete();\n    this._viewportChanges.unsubscribe();\n\n    super.ngOnDestroy();\n  }\n\n  /** Attaches a `CdkVirtualForOf` to this viewport. */\n  attach(forOf: CdkVirtualForOf<any>) {\n    if (this._forOf) {\n      throw Error('CdkVirtualScrollViewport is already attached.');\n    }\n\n    // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length\n    // changes. Run outside the zone to avoid triggering change detection, since we're managing the\n    // change detection loop ourselves.\n    this.ngZone.runOutsideAngular(() => {\n      this._forOf = forOf;\n      this._forOf.dataStream.pipe(takeUntil(this._detachedSubject)).subscribe(data => {\n        const newLength = data.length;\n        if (newLength !== this._dataLength) {\n          this._dataLength = newLength;\n          this._scrollStrategy.onDataLengthChanged();\n        }\n        this._doChangeDetection();\n      });\n    });\n  }\n\n  /** Detaches the current `CdkVirtualForOf`. */\n  detach() {\n    this._forOf = null;\n    this._detachedSubject.next();\n  }\n\n  /** Gets the length of the data bound to this viewport (in number of items). */\n  getDataLength(): number {\n    return this._dataLength;\n  }\n\n  /** Gets the size of the viewport (in pixels). */\n  getViewportSize(): number {\n    return this._viewportSize;\n  }\n\n  // TODO(mmalerba): This is technically out of sync with what's really rendered until a render\n  // cycle happens. I'm being careful to only call it after the render cycle is complete and before\n  // setting it to something else, but its error prone and should probably be split into\n  // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.\n\n  /** Get the current rendered range of items. */\n  getRenderedRange(): ListRange {\n    return this._renderedRange;\n  }\n\n  /**\n   * Sets the total size of all content (in pixels), including content that is not currently\n   * rendered.\n   */\n  setTotalContentSize(size: number) {\n    if (this._totalContentSize !== size) {\n      this._totalContentSize = size;\n      this._calculateSpacerSize();\n      this._markChangeDetectionNeeded();\n    }\n  }\n\n  /** Sets the currently rendered range of indices. */\n  setRenderedRange(range: ListRange) {\n    if (!rangesEqual(this._renderedRange, range)) {\n      this._renderedRangeSubject.next(this._renderedRange = range);\n      this._markChangeDetectionNeeded(() => this._scrollStrategy.onContentRendered());\n    }\n  }\n\n  /**\n   * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\n   */\n  getOffsetToRenderedContentStart(): number | null {\n    return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;\n  }\n\n  /**\n   * Sets the offset from the start of the viewport to either the start or end of the rendered data\n   * (in pixels).\n   */\n  setRenderedContentOffset(offset: number, to: 'to-start' | 'to-end' = 'to-start') {\n    // For a horizontal viewport in a right-to-left language we need to translate along the x-axis\n    // in the negative direction.\n    const isRtl = this.dir && this.dir.value == 'rtl';\n    const isHorizontal = this.orientation == 'horizontal';\n    const axis = isHorizontal ? 'X' : 'Y';\n    const axisDirection = isHorizontal && isRtl ? -1 : 1;\n    let transform = `translate${axis}(${Number(axisDirection * offset)}px)`;\n    this._renderedContentOffset = offset;\n    if (to === 'to-end') {\n      transform += ` translate${axis}(-100%)`;\n      // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise\n      // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would\n      // expand upward).\n      this._renderedContentOffsetNeedsRewrite = true;\n    }\n    if (this._renderedContentTransform != transform) {\n      // We know this value is safe because we parse `offset` with `Number()` before passing it\n      // into the string.\n      this._renderedContentTransform = transform;\n      this._markChangeDetectionNeeded(() => {\n        if (this._renderedContentOffsetNeedsRewrite) {\n          this._renderedContentOffset -= this.measureRenderedContentSize();\n          this._renderedContentOffsetNeedsRewrite = false;\n          this.setRenderedContentOffset(this._renderedContentOffset);\n        } else {\n          this._scrollStrategy.onRenderedOffsetChanged();\n        }\n      });\n    }\n  }\n\n  /**\n   * Scrolls to the given offset from the start of the viewport. Please note that this is not always\n   * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left\n   * direction, this would be the equivalent of setting a fictional `scrollRight` property.\n   * @param offset The offset to scroll to.\n   * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n   */\n  scrollToOffset(offset: number, behavior: ScrollBehavior = 'auto') {\n    const options: ExtendedScrollToOptions = {behavior};\n    if (this.orientation === 'horizontal') {\n      options.start = offset;\n    } else {\n      options.top = offset;\n    }\n    this.scrollTo(options);\n  }\n\n  /**\n   * Scrolls to the offset for the given index.\n   * @param index The index of the element to scroll to.\n   * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n   */\n  scrollToIndex(index: number,  behavior: ScrollBehavior = 'auto') {\n    this._scrollStrategy.scrollToIndex(index, behavior);\n  }\n\n  /**\n   * Gets the current scroll offset from the start of the viewport (in pixels).\n   * @param from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'\n   *     in horizontal mode.\n   */\n  measureScrollOffset(from?: 'top' | 'left' | 'right' | 'bottom' | 'start' | 'end'): number {\n    return from ?\n      super.measureScrollOffset(from) :\n      super.measureScrollOffset(this.orientation === 'horizontal' ? 'start' : 'top');\n  }\n\n  /** Measure the combined size of all of the rendered items. */\n  measureRenderedContentSize(): number {\n    const contentEl = this._contentWrapper.nativeElement;\n    return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;\n  }\n\n  /**\n   * Measure the total combined size of the given range. Throws if the range includes items that are\n   * not rendered.\n   */\n  measureRangeSize(range: ListRange): number {\n    if (!this._forOf) {\n      return 0;\n    }\n    return this._forOf.measureRangeSize(range, this.orientation);\n  }\n\n  /** Update the viewport dimensions and re-render. */\n  checkViewportSize() {\n    // TODO: Cleanup later when add logic for handling content resize\n    this._measureViewportSize();\n    this._scrollStrategy.onDataLengthChanged();\n  }\n\n  /** Measure the viewport size. */\n  private _measureViewportSize() {\n    const viewportEl = this.elementRef.nativeElement;\n    this._viewportSize = this.orientation === 'horizontal' ?\n        viewportEl.clientWidth : viewportEl.clientHeight;\n  }\n\n  /** Queue up change detection to run. */\n  private _markChangeDetectionNeeded(runAfter?: Function) {\n    if (runAfter) {\n      this._runAfterChangeDetection.push(runAfter);\n    }\n\n    // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of\n    // properties sequentially we only have to run `_doChangeDetection` once at the end.\n    if (!this._isChangeDetectionPending) {\n      this._isChangeDetectionPending = true;\n      this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n        this._doChangeDetection();\n      }));\n    }\n  }\n\n  /** Run change detection. */\n  private _doChangeDetection() {\n    this._isChangeDetectionPending = false;\n\n    // Apply the content transform. The transform can't be set via an Angular binding because\n    // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of\n    // string literals, a variable that can only be 'X' or 'Y', and user input that is run through\n    // the `Number` function first to coerce it to a numeric value.\n    this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform;\n    // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection\n    // from the root, since the repeated items are content projected in. Calling `detectChanges`\n    // instead does not properly check the projected content.\n    this.ngZone.run(() => this._changeDetectorRef.markForCheck());\n\n    const runAfterChangeDetection = this._runAfterChangeDetection;\n    this._runAfterChangeDetection = [];\n    for (const fn of runAfterChangeDetection) {\n      fn();\n    }\n  }\n\n  /** Calculates the `style.width` and `style.height` for the spacer element. */\n  private _calculateSpacerSize() {\n    this._totalContentHeight =\n        this.orientation === 'horizontal' ? '' : `${this._totalContentSize}px`;\n    this._totalContentWidth =\n        this.orientation === 'horizontal' ? `${this._totalContentSize}px` : '';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ArrayDataSource,\n  CollectionViewer,\n  DataSource,\n  ListRange,\n  isDataSource,\n} from '@angular/cdk/collections';\nimport {\n  Directive,\n  DoCheck,\n  EmbeddedViewRef,\n  Input,\n  IterableChangeRecord,\n  IterableChanges,\n  IterableDiffer,\n  IterableDiffers,\n  NgIterable,\n  NgZone,\n  OnDestroy,\n  SkipSelf,\n  TemplateRef,\n  TrackByFunction,\n  ViewContainerRef,\n} from '@angular/core';\nimport {Observable, Subject, of as observableOf, isObservable} from 'rxjs';\nimport {pairwise, shareReplay, startWith, switchMap, takeUntil} from 'rxjs/operators';\nimport {CdkVirtualScrollViewport} from './virtual-scroll-viewport';\n\n\n/** The context for an item rendered by `CdkVirtualForOf` */\nexport type CdkVirtualForOfContext<T> = {\n  /** The item value. */\n  $implicit: T;\n  /** The DataSource, Observable, or NgIterable that was passed to *cdkVirtualFor. */\n  cdkVirtualForOf: DataSource<T> | Observable<T[]> | NgIterable<T>;\n  /** The index of the item in the DataSource. */\n  index: number;\n  /** The number of items in the DataSource. */\n  count: number;\n  /** Whether this is the first item in the DataSource. */\n  first: boolean;\n  /** Whether this is the last item in the DataSource. */\n  last: boolean;\n  /** Whether the index is even. */\n  even: boolean;\n  /** Whether the index is odd. */\n  odd: boolean;\n};\n\n\n/** Helper to extract size from a DOM Node. */\nfunction getSize(orientation: 'horizontal' | 'vertical', node: Node): number {\n  const el = node as Element;\n  if (!el.getBoundingClientRect) {\n    return 0;\n  }\n  const rect = el.getBoundingClientRect();\n  return orientation == 'horizontal' ? rect.width : rect.height;\n}\n\n\n/**\n * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\n * container.\n */\n@Directive({\n  selector: '[cdkVirtualFor][cdkVirtualForOf]',\n})\nexport class CdkVirtualForOf<T> implements CollectionViewer, DoCheck, OnDestroy {\n  /** Emits when the rendered view of the data changes. */\n  viewChange = new Subject<ListRange>();\n\n  /** Subject that emits when a new DataSource instance is given. */\n  private _dataSourceChanges = new Subject<DataSource<T>>();\n\n  /** The DataSource to display. */\n  @Input()\n  get cdkVirtualForOf(): DataSource<T> | Observable<T[]> | NgIterable<T> | null | undefined {\n    return this._cdkVirtualForOf;\n  }\n  set cdkVirtualForOf(value: DataSource<T> | Observable<T[]> | NgIterable<T> | null | undefined) {\n    this._cdkVirtualForOf = value;\n    if (isDataSource(value)) {\n      this._dataSourceChanges.next(value);\n    } else {\n      // Slice the value if its an NgIterable to ensure we're working with an array.\n      this._dataSourceChanges.next(new ArrayDataSource<T>(\n          isObservable(value) ? value : Array.prototype.slice.call(value || [])));\n    }\n  }\n  _cdkVirtualForOf: DataSource<T> | Observable<T[]> | NgIterable<T> | null | undefined;\n\n  /**\n   * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\n   * the item and produces a value to be used as the item's identity when tracking changes.\n   */\n  @Input()\n  get cdkVirtualForTrackBy(): TrackByFunction<T> | undefined {\n    return this._cdkVirtualForTrackBy;\n  }\n  set cdkVirtualForTrackBy(fn: TrackByFunction<T> | undefined) {\n    this._needsUpdate = true;\n    this._cdkVirtualForTrackBy = fn ?\n        (index, item) => fn(index + (this._renderedRange ? this._renderedRange.start : 0), item) :\n        undefined;\n  }\n  private _cdkVirtualForTrackBy: TrackByFunction<T> | undefined;\n\n  /** The template used to stamp out new elements. */\n  @Input()\n  set cdkVirtualForTemplate(value: TemplateRef<CdkVirtualForOfContext<T>>) {\n    if (value) {\n      this._needsUpdate = true;\n      this._template = value;\n    }\n  }\n\n  /**\n   * The size of the cache used to store templates that are not being used for re-use later.\n   * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n   */\n  @Input() cdkVirtualForTemplateCacheSize: number = 20;\n\n  /** Emits whenever the data in the current DataSource changes. */\n  dataStream: Observable<T[] | ReadonlyArray<T>> = this._dataSourceChanges\n      .pipe(\n          // Start off with null `DataSource`.\n          startWith(null!),\n          // Bundle up the previous and current data sources so we can work with both.\n          pairwise(),\n          // Use `_changeDataSource` to disconnect from the previous data source and connect to the\n          // new one, passing back a stream of data changes which we run through `switchMap` to give\n          // us a data stream that emits the latest data from whatever the current `DataSource` is.\n          switchMap(([prev, cur]) => this._changeDataSource(prev, cur)),\n          // Replay the last emitted data when someone subscribes.\n          shareReplay(1));\n\n  /** The differ used to calculate changes to the data. */\n  private _differ: IterableDiffer<T> | null = null;\n\n  /** The most recent data emitted from the DataSource. */\n  private _data: T[] | ReadonlyArray<T>;\n\n  /** The currently rendered items. */\n  private _renderedItems: T[];\n\n  /** The currently rendered range of indices. */\n  private _renderedRange: ListRange;\n\n  /**\n   * The template cache used to hold on ot template instancess that have been stamped out, but don't\n   * currently need to be rendered. These instances will be reused in the future rather than\n   * stamping out brand new ones.\n   */\n  private _templateCache: EmbeddedViewRef<CdkVirtualForOfContext<T>>[] = [];\n\n  /** Whether the rendered data should be updated during the next ngDoCheck cycle. */\n  private _needsUpdate = false;\n\n  private _destroyed = new Subject<void>();\n\n  constructor(\n      /** The view container to add items to. */\n      private _viewContainerRef: ViewContainerRef,\n      /** The template to use when stamping out new items. */\n      private _template: TemplateRef<CdkVirtualForOfContext<T>>,\n      /** The set of available differs. */\n      private _differs: IterableDiffers,\n      /** The virtual scrolling viewport that these items are being rendered in. */\n      @SkipSelf() private _viewport: CdkVirtualScrollViewport,\n      ngZone: NgZone) {\n    this.dataStream.subscribe(data => {\n      this._data = data;\n      this._onRenderedDataChange();\n    });\n    this._viewport.renderedRangeStream.pipe(takeUntil(this._destroyed)).subscribe(range => {\n      this._renderedRange = range;\n      ngZone.run(() => this.viewChange.next(this._renderedRange));\n      this._onRenderedDataChange();\n    });\n    this._viewport.attach(this);\n  }\n\n  /**\n   * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n   * in the specified range. Throws an error if the range includes items that are not currently\n   * rendered.\n   */\n  measureRangeSize(range: ListRange, orientation: 'horizontal' | 'vertical'): number {\n    if (range.start >= range.end) {\n      return 0;\n    }\n    if (range.start < this._renderedRange.start || range.end > this._renderedRange.end) {\n      throw Error(`Error: attempted to measure an item that isn't rendered.`);\n    }\n\n    // The index into the list of rendered views for the first item in the range.\n    const renderedStartIndex = range.start - this._renderedRange.start;\n    // The length of the range we're measuring.\n    const rangeLen = range.end - range.start;\n\n    // Loop over all root nodes for all items in the range and sum up their size.\n    let totalSize = 0;\n    let i = rangeLen;\n    while (i--) {\n      const view = this._viewContainerRef.get(i + renderedStartIndex) as\n          EmbeddedViewRef<CdkVirtualForOfContext<T>> | null;\n      let j = view ? view.rootNodes.length : 0;\n      while (j--) {\n        totalSize += getSize(orientation, view!.rootNodes[j]);\n      }\n    }\n\n    return totalSize;\n  }\n\n  ngDoCheck() {\n    if (this._differ && this._needsUpdate) {\n      // TODO(mmalerba): We should differentiate needs update due to scrolling and a new portion of\n      // this list being rendered (can use simpler algorithm) vs needs update due to data actually\n      // changing (need to do this diff).\n      const changes = this._differ.diff(this._renderedItems);\n      if (!changes) {\n        this._updateContext();\n      } else {\n        this._applyChanges(changes);\n      }\n      this._needsUpdate = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._viewport.detach();\n\n    this._dataSourceChanges.next();\n    this._dataSourceChanges.complete();\n    this.viewChange.complete();\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    for (let view of this._templateCache) {\n      view.destroy();\n    }\n  }\n\n  /** React to scroll state changes in the viewport. */\n  private _onRenderedDataChange() {\n    if (!this._renderedRange) {\n      return;\n    }\n    this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\n    if (!this._differ) {\n      this._differ = this._differs.find(this._renderedItems).create(this.cdkVirtualForTrackBy);\n    }\n    this._needsUpdate = true;\n  }\n\n  /** Swap out one `DataSource` for another. */\n  private _changeDataSource(oldDs: DataSource<T> | null, newDs: DataSource<T> | null):\n    Observable<T[] | ReadonlyArray<T>> {\n\n    if (oldDs) {\n      oldDs.disconnect(this);\n    }\n\n    this._needsUpdate = true;\n    return newDs ? newDs.connect(this) : observableOf();\n  }\n\n  /** Update the `CdkVirtualForOfContext` for all views. */\n  private _updateContext() {\n    const count = this._data.length;\n    let i = this._viewContainerRef.length;\n    while (i--) {\n      let view = this._viewContainerRef.get(i) as EmbeddedViewRef<CdkVirtualForOfContext<T>>;\n      view.context.index = this._renderedRange.start + i;\n      view.context.count = count;\n      this._updateComputedContextProperties(view.context);\n      view.detectChanges();\n    }\n  }\n\n  /** Apply changes to the DOM. */\n  private _applyChanges(changes: IterableChanges<T>) {\n    // Rearrange the views to put them in the right location.\n    changes.forEachOperation((record: IterableChangeRecord<T>,\n                              adjustedPreviousIndex: number | null,\n                              currentIndex: number | null) => {\n      if (record.previousIndex == null) {  // Item added.\n        const view = this._insertViewForNewItem(currentIndex!);\n        view.context.$implicit = record.item;\n      } else if (currentIndex == null) {  // Item removed.\n        this._cacheView(this._detachView(adjustedPreviousIndex !));\n      } else {  // Item moved.\n        const view = this._viewContainerRef.get(adjustedPreviousIndex!) as\n            EmbeddedViewRef<CdkVirtualForOfContext<T>>;\n        this._viewContainerRef.move(view, currentIndex);\n        view.context.$implicit = record.item;\n      }\n    });\n\n    // Update $implicit for any items that had an identity change.\n    changes.forEachIdentityChange((record: IterableChangeRecord<T>) => {\n      const view = this._viewContainerRef.get(record.currentIndex!) as\n          EmbeddedViewRef<CdkVirtualForOfContext<T>>;\n      view.context.$implicit = record.item;\n    });\n\n    // Update the context variables on all items.\n    const count = this._data.length;\n    let i = this._viewContainerRef.length;\n    while (i--) {\n      const view = this._viewContainerRef.get(i) as EmbeddedViewRef<CdkVirtualForOfContext<T>>;\n      view.context.index = this._renderedRange.start + i;\n      view.context.count = count;\n      this._updateComputedContextProperties(view.context);\n    }\n  }\n\n  /** Cache the given detached view. */\n  private _cacheView(view: EmbeddedViewRef<CdkVirtualForOfContext<T>>) {\n    if (this._templateCache.length < this.cdkVirtualForTemplateCacheSize) {\n      this._templateCache.push(view);\n    } else {\n      const index = this._viewContainerRef.indexOf(view);\n\n      // It's very unlikely that the index will ever be -1, but just in case,\n      // destroy the view on its own, otherwise destroy it through the\n      // container to ensure that all the references are removed.\n      if (index === -1) {\n        view.destroy();\n      } else {\n        this._viewContainerRef.remove(index);\n      }\n    }\n  }\n\n  /** Inserts a view for a new item, either from the cache or by creating a new one. */\n  private _insertViewForNewItem(index: number): EmbeddedViewRef<CdkVirtualForOfContext<T>> {\n    return this._insertViewFromCache(index) || this._createEmbeddedViewAt(index);\n  }\n\n  /** Update the computed properties on the `CdkVirtualForOfContext`. */\n  private _updateComputedContextProperties(context: CdkVirtualForOfContext<any>) {\n    context.first = context.index === 0;\n    context.last = context.index === context.count - 1;\n    context.even = context.index % 2 === 0;\n    context.odd = !context.even;\n  }\n\n  /** Creates a new embedded view and moves it to the given index */\n  private _createEmbeddedViewAt(index: number): EmbeddedViewRef<CdkVirtualForOfContext<T>> {\n    // Note that it's important that we insert the item directly at the proper index,\n    // rather than inserting it and the moving it in place, because if there's a directive\n    // on the same node that injects the `ViewContainerRef`, Angular will insert another\n    // comment node which can throw off the move when it's being repeated for all items.\n    return this._viewContainerRef.createEmbeddedView(this._template, {\n      $implicit: null!,\n      // It's guaranteed that the iterable is not \"undefined\" or \"null\" because we only\n      // generate views for elements if the \"cdkVirtualForOf\" iterable has elements.\n      cdkVirtualForOf: this._cdkVirtualForOf!,\n      index: -1,\n      count: -1,\n      first: false,\n      last: false,\n      odd: false,\n      even: false\n    }, index);\n  }\n\n  /** Inserts a recycled view from the cache at the given index. */\n  private _insertViewFromCache(index: number): EmbeddedViewRef<CdkVirtualForOfContext<T>>|null {\n    const cachedView = this._templateCache.pop();\n    if (cachedView) {\n      this._viewContainerRef.insert(cachedView, index);\n    }\n    return cachedView || null;\n  }\n\n  /** Detaches the embedded view at the given index. */\n  private _detachView(index: number): EmbeddedViewRef<CdkVirtualForOfContext<T>> {\n    return this._viewContainerRef.detach(index) as\n        EmbeddedViewRef<CdkVirtualForOfContext<T>>;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {CdkFixedSizeVirtualScroll} from './fixed-size-virtual-scroll';\nimport {CdkScrollable} from './scrollable';\nimport {CdkVirtualForOf} from './virtual-for-of';\nimport {CdkVirtualScrollViewport} from './virtual-scroll-viewport';\n\n@NgModule({\n  exports: [CdkScrollable],\n  declarations: [CdkScrollable]\n})\nexport class CdkScrollableModule {}\n\n@NgModule({\n  imports: [\n    BidiModule,\n    PlatformModule,\n    CdkScrollableModule\n  ],\n  exports: [\n    BidiModule,\n    CdkScrollableModule,\n    CdkFixedSizeVirtualScroll,\n    CdkVirtualForOf,\n    CdkVirtualScrollViewport,\n  ],\n  declarations: [\n    CdkFixedSizeVirtualScroll,\n    CdkVirtualForOf,\n    CdkVirtualScrollViewport,\n  ],\n})\nexport class ScrollingModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './fixed-size-virtual-scroll';\nexport * from './scroll-dispatcher';\nexport * from './scrollable';\nexport * from './scrolling-module';\nexport * from './viewport-ruler';\nexport * from './virtual-for-of';\nexport * from './virtual-scroll-strategy';\nexport * from './virtual-scroll-viewport';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}