{"version":3,"file":"clipboard.js","sources":["../../../../../../src/cdk/clipboard/pending-copy.ts","../../../../../../src/cdk/clipboard/clipboard.ts","../../../../../../src/cdk/clipboard/copy-to-clipboard.ts","../../../../../../src/cdk/clipboard/clipboard-module.ts","../../../../../../src/cdk/clipboard/public-api.ts","../../../../../../src/cdk/clipboard/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A pending copy-to-clipboard operation.\n *\n * The implementation of copying text to the clipboard modifies the DOM and\n * forces a relayout. This relayout can take too long if the string is large,\n * causing the execCommand('copy') to happen too long after the user clicked.\n * This results in the browser refusing to copy. This object lets the\n * relayout happen in a separate tick from copying by providing a copy function\n * that can be called later.\n *\n * Destroy must be called when no longer in use, regardless of whether `copy` is\n * called.\n */\nexport class PendingCopy {\n  private _textarea: HTMLTextAreaElement|undefined;\n\n  constructor(text: string, private readonly _document: Document) {\n    const textarea = this._textarea = this._document.createElement('textarea');\n    const styles = textarea.style;\n\n    // Hide the element for display and accessibility. Set an\n    // absolute position so the page layout isn't affected.\n    styles.opacity = '0';\n    styles.position = 'absolute';\n    styles.left = styles.top = '-999em';\n    textarea.setAttribute('aria-hidden', 'true');\n    textarea.value = text;\n    this._document.body.appendChild(textarea);\n  }\n\n  /** Finishes copying the text. */\n  copy(): boolean {\n    const textarea = this._textarea;\n    let successful = false;\n\n    try {  // Older browsers could throw if copy is not supported.\n      if (textarea) {\n        const currentFocus = this._document.activeElement as HTMLOrSVGElement | null;\n\n        textarea.select();\n        textarea.setSelectionRange(0, textarea.value.length);\n        successful = this._document.execCommand('copy');\n\n        if (currentFocus) {\n          currentFocus.focus();\n        }\n      }\n    } catch {\n      // Discard error.\n      // Initial setting of {@code successful} will represent failure here.\n    }\n\n    return successful;\n  }\n\n  /** Cleans up DOM changes used to perform the copy operation. */\n  destroy() {\n    const textarea = this._textarea;\n\n    if (textarea) {\n      if (textarea.parentNode) {\n        textarea.parentNode.removeChild(textarea);\n      }\n\n      this._textarea = undefined;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable} from '@angular/core';\nimport {PendingCopy} from './pending-copy';\n\n\n/**\n * A service for copying text to the clipboard.\n */\n@Injectable({providedIn: 'root'})\nexport class Clipboard {\n  private readonly _document: Document;\n\n  constructor(@Inject(DOCUMENT) document: any) {\n    this._document = document;\n  }\n\n  /**\n   * Copies the provided text into the user's clipboard.\n   *\n   * @param text The string to copy.\n   * @returns Whether the operation was successful.\n   */\n  copy(text: string): boolean {\n    const pendingCopy = this.beginCopy(text);\n    const successful = pendingCopy.copy();\n    pendingCopy.destroy();\n\n    return successful;\n  }\n\n  /**\n   * Prepares a string to be copied later. This is useful for large strings\n   * which take too long to successfully render and be copied in the same tick.\n   *\n   * The caller must call `destroy` on the returned `PendingCopy`.\n   *\n   * @param text The string to copy.\n   * @returns the pending copy operation.\n   */\n  beginCopy(text: string): PendingCopy {\n    return new PendingCopy(text, this._document);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  Output,\n  NgZone,\n  InjectionToken,\n  Inject,\n  Optional,\n  OnDestroy,\n} from '@angular/core';\nimport {Clipboard} from './clipboard';\nimport {PendingCopy} from './pending-copy';\n\n/** Object that can be used to configure the default options for `CdkCopyToClipboard`. */\nexport interface CdkCopyToClipboardConfig {\n  /** Default number of attempts to make when copying text to the clipboard. */\n  attempts?: number;\n}\n\n/** Injection token that can be used to provide the default options to `CdkCopyToClipboard`. */\nexport const CKD_COPY_TO_CLIPBOARD_CONFIG =\n    new InjectionToken<CdkCopyToClipboardConfig>('CKD_COPY_TO_CLIPBOARD_CONFIG');\n\n/**\n * Provides behavior for a button that when clicked copies content into user's\n * clipboard.\n */\n@Directive({\n  selector: '[cdkCopyToClipboard]',\n  host: {\n    '(click)': 'copy()',\n  }\n})\nexport class CdkCopyToClipboard implements OnDestroy {\n  /** Content to be copied. */\n  @Input('cdkCopyToClipboard') text: string = '';\n\n  /**\n   * How many times to attempt to copy the text. This may be necessary for longer text, because\n   * the browser needs time to fill an intermediate textarea element and copy the content.\n   */\n  @Input('cdkCopyToClipboardAttempts') attempts: number = 1;\n\n  /**\n   * Emits when some text is copied to the clipboard. The\n   * emitted value indicates whether copying was successful.\n   */\n  @Output('cdkCopyToClipboardCopied') copied = new EventEmitter<boolean>();\n\n  /** Copies that are currently being attempted. */\n  private _pending = new Set<PendingCopy>();\n\n  /** Whether the directive has been destroyed. */\n  private _destroyed: boolean;\n\n  /** Timeout for the current copy attempt. */\n  private _currentTimeout: any;\n\n  constructor(\n    private _clipboard: Clipboard,\n    private _ngZone: NgZone,\n    @Optional() @Inject(CKD_COPY_TO_CLIPBOARD_CONFIG) config?: CdkCopyToClipboardConfig) {\n\n    if (config && config.attempts != null) {\n      this.attempts = config.attempts;\n    }\n  }\n\n  /** Copies the current text to the clipboard. */\n  copy(attempts: number = this.attempts): void {\n    if (attempts > 1) {\n      let remainingAttempts = attempts;\n      const pending = this._clipboard.beginCopy(this.text);\n      this._pending.add(pending);\n\n      const attempt = () => {\n        const successful = pending.copy();\n        if (!successful && --remainingAttempts && !this._destroyed) {\n          // We use 1 for the timeout since it's more predictable when flushing in unit tests.\n          this._currentTimeout = this._ngZone.runOutsideAngular(() => setTimeout(attempt, 1));\n        } else {\n          this._currentTimeout = null;\n          this._pending.delete(pending);\n          pending.destroy();\n          this.copied.emit(successful);\n        }\n      };\n      attempt();\n    } else {\n      this.copied.emit(this._clipboard.copy(this.text));\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._currentTimeout) {\n      clearTimeout(this._currentTimeout);\n    }\n\n    this._pending.forEach(copy => copy.destroy());\n    this._pending.clear();\n    this._destroyed = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkCopyToClipboard} from './copy-to-clipboard';\n\n@NgModule({\n  declarations: [CdkCopyToClipboard],\n  exports: [CdkCopyToClipboard],\n})\nexport class ClipboardModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './clipboard';\nexport * from './clipboard-module';\nexport * from './copy-to-clipboard';\nexport * from './pending-copy';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}