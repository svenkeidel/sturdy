{"version":3,"file":"observers.js","sources":["../../../../../../src/cdk/observers/observe-content.ts","../../../../../../src/cdk/observers/public-api.ts","../../../../../../src/cdk/observers/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  coerceBooleanProperty,\n  coerceNumberProperty,\n  coerceElement,\n  BooleanInput\n} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Injectable,\n  Input,\n  NgModule,\n  NgZone,\n  OnDestroy,\n  Output,\n} from '@angular/core';\nimport {Observable, Subject, Subscription, Observer} from 'rxjs';\nimport {debounceTime} from 'rxjs/operators';\n\n/**\n * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.\n * @docs-private\n */\n@Injectable({providedIn: 'root'})\nexport class MutationObserverFactory {\n  create(callback: MutationCallback): MutationObserver | null {\n    return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);\n  }\n}\n\n\n/** An injectable service that allows watching elements for changes to their content. */\n@Injectable({providedIn: 'root'})\nexport class ContentObserver implements OnDestroy {\n  /** Keeps track of the existing MutationObservers so they can be reused. */\n  private _observedElements = new Map<Element, {\n    observer: MutationObserver | null,\n    stream: Subject<MutationRecord[]>,\n    count: number\n  }>();\n\n  constructor(private _mutationObserverFactory: MutationObserverFactory) {}\n\n  ngOnDestroy() {\n    this._observedElements.forEach((_, element) => this._cleanupObserver(element));\n  }\n\n  /**\n   * Observe content changes on an element.\n   * @param element The element to observe for content changes.\n   */\n  observe(element: Element): Observable<MutationRecord[]>;\n\n  /**\n   * Observe content changes on an element.\n   * @param element The element to observe for content changes.\n   */\n  observe(element: ElementRef<Element>): Observable<MutationRecord[]>;\n\n  observe(elementOrRef: Element | ElementRef<Element>): Observable<MutationRecord[]> {\n    const element = coerceElement(elementOrRef);\n\n    return new Observable((observer: Observer<MutationRecord[]>) => {\n      const stream = this._observeElement(element);\n      const subscription = stream.subscribe(observer);\n\n      return () => {\n        subscription.unsubscribe();\n        this._unobserveElement(element);\n      };\n    });\n  }\n\n  /**\n   * Observes the given element by using the existing MutationObserver if available, or creating a\n   * new one if not.\n   */\n  private _observeElement(element: Element): Subject<MutationRecord[]> {\n    if (!this._observedElements.has(element)) {\n      const stream = new Subject<MutationRecord[]>();\n      const observer = this._mutationObserverFactory.create(mutations => stream.next(mutations));\n      if (observer) {\n        observer.observe(element, {\n          characterData: true,\n          childList: true,\n          subtree: true\n        });\n      }\n      this._observedElements.set(element, {observer, stream, count: 1});\n    } else {\n      this._observedElements.get(element)!.count++;\n    }\n    return this._observedElements.get(element)!.stream;\n  }\n\n  /**\n   * Un-observes the given element and cleans up the underlying MutationObserver if nobody else is\n   * observing this element.\n   */\n  private _unobserveElement(element: Element) {\n    if (this._observedElements.has(element)) {\n      this._observedElements.get(element)!.count--;\n      if (!this._observedElements.get(element)!.count) {\n        this._cleanupObserver(element);\n      }\n    }\n  }\n\n  /** Clean up the underlying MutationObserver for the specified element. */\n  private _cleanupObserver(element: Element) {\n    if (this._observedElements.has(element)) {\n      const {observer, stream} = this._observedElements.get(element)!;\n      if (observer) {\n        observer.disconnect();\n      }\n      stream.complete();\n      this._observedElements.delete(element);\n    }\n  }\n}\n\n\n/**\n * Directive that triggers a callback whenever the content of\n * its associated element has changed.\n */\n@Directive({\n  selector: '[cdkObserveContent]',\n  exportAs: 'cdkObserveContent',\n})\nexport class CdkObserveContent implements AfterContentInit, OnDestroy {\n  /** Event emitted for each change in the element's content. */\n  @Output('cdkObserveContent') event = new EventEmitter<MutationRecord[]>();\n\n  /**\n   * Whether observing content is disabled. This option can be used\n   * to disconnect the underlying MutationObserver until it is needed.\n   */\n  @Input('cdkObserveContentDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    this._disabled = coerceBooleanProperty(value);\n    this._disabled ? this._unsubscribe() : this._subscribe();\n  }\n  private _disabled = false;\n\n  /** Debounce interval for emitting the changes. */\n  @Input()\n  get debounce(): number { return this._debounce; }\n  set debounce(value: number) {\n    this._debounce = coerceNumberProperty(value);\n    this._subscribe();\n  }\n  private _debounce: number;\n\n  private _currentSubscription: Subscription | null = null;\n\n  constructor(private _contentObserver: ContentObserver,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _ngZone: NgZone) {}\n\n  ngAfterContentInit() {\n    if (!this._currentSubscription && !this.disabled) {\n      this._subscribe();\n    }\n  }\n\n  ngOnDestroy() {\n    this._unsubscribe();\n  }\n\n  private _subscribe() {\n    this._unsubscribe();\n    const stream = this._contentObserver.observe(this._elementRef);\n\n    // TODO(mmalerba): We shouldn't be emitting on this @Output() outside the zone.\n    // Consider brining it back inside the zone next time we're making breaking changes.\n    // Bringing it back inside can cause things like infinite change detection loops and changed\n    // after checked errors if people's code isn't handling it properly.\n    this._ngZone.runOutsideAngular(() => {\n      this._currentSubscription =\n          (this.debounce ? stream.pipe(debounceTime(this.debounce)) : stream).subscribe(this.event);\n    });\n  }\n\n  private _unsubscribe() {\n    if (this._currentSubscription) {\n      this._currentSubscription.unsubscribe();\n    }\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_debounce: BooleanInput;\n}\n\n\n@NgModule({\n  exports: [CdkObserveContent],\n  declarations: [CdkObserveContent],\n  providers: [MutationObserverFactory]\n})\nexport class ObserversModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './observe-content';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}