{"version":3,"file":"table.js","sources":["../../../../../../src/cdk/table/can-stick.ts","../../../../../../src/cdk/table/tokens.ts","../../../../../../src/cdk/table/cell.ts","../../../../../../src/cdk/table/row.ts","../../../../../../src/cdk/table/sticky-styler.ts","../../../../../../src/cdk/table/table-errors.ts","../../../../../../src/cdk/table/table.ts","../../../../../../src/cdk/table/text-column.ts","../../../../../../src/cdk/table/table-module.ts","../../../../../../src/cdk/table/public-api.ts","../../../../../../src/cdk/table/index.ts"],"names":["observableOf"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n/** @docs-private */\nexport type Constructor<T> = new(...args: any[]) => T;\n\n/**\n * Interface for a mixin to provide a directive with a function that checks if the sticky input has\n * been changed since the last time the function was called. Essentially adds a dirty-check to the\n * sticky value.\n * @docs-private\n */\nexport interface CanStick {\n  /** Whether sticky positioning should be applied. */\n  sticky: boolean;\n\n  /** Whether the sticky input has changed since it was last checked. */\n  _hasStickyChanged: boolean;\n\n  /** Whether the sticky value has changed since this was last called. */\n  hasStickyChanged(): boolean;\n\n  /** Resets the dirty check for cases where the sticky state has been used without checking. */\n  resetStickyChanged(): void;\n}\n\n/** @docs-private */\nexport type CanStickCtor = Constructor<CanStick>;\n\n/**\n * Mixin to provide a directive with a function that checks if the sticky input has been\n * changed since the last time the function was called. Essentially adds a dirty-check to the\n * sticky value.\n * @docs-private\n */\nexport function mixinHasStickyInput<T extends Constructor<{}>>(base: T): CanStickCtor & T {\n  return class extends base {\n    /** Whether sticky positioning should be applied. */\n    get sticky(): boolean { return this._sticky; }\n    set sticky(v: boolean) {\n      const prevValue = this._sticky;\n      this._sticky = coerceBooleanProperty(v);\n      this._hasStickyChanged = prevValue !== this._sticky;\n    }\n    _sticky: boolean = false;\n\n    /** Whether the sticky input has changed since it was last checked. */\n    _hasStickyChanged: boolean = false;\n\n    /** Whether the sticky value has changed since this was last called. */\n    hasStickyChanged(): boolean {\n      const hasStickyChanged = this._hasStickyChanged;\n      this._hasStickyChanged = false;\n      return hasStickyChanged;\n    }\n\n    /** Resets the dirty check for cases where the sticky state has been used without checking. */\n    resetStickyChanged() {\n      this._hasStickyChanged = false;\n    }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Used to provide a table to some of the sub-components without causing a circular dependency.\n * @docs-private\n */\nexport const CDK_TABLE = new InjectionToken<any>('CDK_TABLE');\n\n/** Configurable options for `CdkTextColumn`. */\nexport interface TextColumnOptions<T> {\n  /**\n   * Default function that provides the header text based on the column name if a header\n   * text is not provided.\n   */\n  defaultHeaderTextTransform?: (name: string) => string;\n\n  /** Default data accessor to use if one is not provided. */\n  defaultDataAccessor?: (data: T, name: string) => string;\n}\n\n/** Injection token that can be used to specify the text column options. */\nexport const TEXT_COLUMN_OPTIONS =\n    new InjectionToken<TextColumnOptions<any>>('text-column-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  Input,\n  TemplateRef,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {CanStick, CanStickCtor, mixinHasStickyInput} from './can-stick';\nimport {CDK_TABLE} from './tokens';\n\n\n/** Base interface for a cell definition. Captures a column's cell template definition. */\nexport interface CellDef {\n  template: TemplateRef<any>;\n}\n\n/**\n * Cell definition for a CDK table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({selector: '[cdkCellDef]'})\nexport class CdkCellDef implements CellDef {\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {}\n}\n\n/**\n * Header cell definition for a CDK table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({selector: '[cdkHeaderCellDef]'})\nexport class CdkHeaderCellDef implements CellDef {\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {}\n}\n\n/**\n * Footer cell definition for a CDK table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({selector: '[cdkFooterCellDef]'})\nexport class CdkFooterCellDef implements CellDef {\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {}\n}\n\n// Boilerplate for applying mixins to CdkColumnDef.\n/** @docs-private */\nclass CdkColumnDefBase {}\nconst _CdkColumnDefBase: CanStickCtor&typeof CdkColumnDefBase =\n    mixinHasStickyInput(CdkColumnDefBase);\n\n/**\n * Column definition for the CDK table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[cdkColumnDef]',\n  inputs: ['sticky'],\n  providers: [{provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: CdkColumnDef}],\n})\nexport class CdkColumnDef extends _CdkColumnDefBase implements CanStick {\n  /** Unique name for this column. */\n  @Input('cdkColumnDef')\n  get name(): string {\n    return this._name;\n  }\n  set name(name: string) {\n    // If the directive is set without a name (updated programatically), then this setter will\n    // trigger with an empty string and should not overwrite the programatically set value.\n    if (name) {\n      this._name = name;\n      this.cssClassFriendlyName = name.replace(/[^a-z0-9_-]/ig, '-');\n    }\n  }\n  _name: string;\n\n  /**\n   * Whether this column should be sticky positioned on the end of the row. Should make sure\n   * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value\n   * has been changed.\n   */\n  @Input('stickyEnd')\n  get stickyEnd(): boolean {\n    return this._stickyEnd;\n  }\n  set stickyEnd(v: boolean) {\n    const prevValue = this._stickyEnd;\n    this._stickyEnd = coerceBooleanProperty(v);\n    this._hasStickyChanged = prevValue !== this._stickyEnd;\n  }\n  _stickyEnd: boolean = false;\n\n  /** @docs-private */\n  @ContentChild(CdkCellDef) cell: CdkCellDef;\n\n  /** @docs-private */\n  @ContentChild(CdkHeaderCellDef) headerCell: CdkHeaderCellDef;\n\n  /** @docs-private */\n  @ContentChild(CdkFooterCellDef) footerCell: CdkFooterCellDef;\n\n  /**\n   * Transformed version of the column name that can be used as part of a CSS classname. Excludes\n   * all non-alphanumeric characters and the special characters '-' and '_'. Any characters that\n   * do not match are replaced by the '-' character.\n   */\n  cssClassFriendlyName: string;\n\n  constructor(@Inject(CDK_TABLE) @Optional() public _table?: any) {\n    super();\n  }\n\n  static ngAcceptInputType_sticky: BooleanInput;\n  static ngAcceptInputType_stickyEnd: BooleanInput;\n}\n\n/** Base class for the cells. Adds a CSS classname that identifies the column it renders in. */\nexport class BaseCdkCell {\n  constructor(columnDef: CdkColumnDef, elementRef: ElementRef) {\n    const columnClassName = `cdk-column-${columnDef.cssClassFriendlyName}`;\n    elementRef.nativeElement.classList.add(columnClassName);\n  }\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'cdk-header-cell, th[cdk-header-cell]',\n  host: {\n    'class': 'cdk-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class CdkHeaderCell extends BaseCdkCell {\n  constructor(columnDef: CdkColumnDef, elementRef: ElementRef) {\n    super(columnDef, elementRef);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'cdk-footer-cell, td[cdk-footer-cell]',\n  host: {\n    'class': 'cdk-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class CdkFooterCell extends BaseCdkCell {\n  constructor(columnDef: CdkColumnDef, elementRef: ElementRef) {\n    super(columnDef, elementRef);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'cdk-cell, td[cdk-cell]',\n  host: {\n    'class': 'cdk-cell',\n    'role': 'gridcell',\n  },\n})\nexport class CdkCell extends BaseCdkCell {\n  constructor(columnDef: CdkColumnDef, elementRef: ElementRef) {\n    super(columnDef, elementRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  IterableChanges,\n  IterableDiffer,\n  IterableDiffers,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n  ViewEncapsulation,\n  Inject,\n  Optional\n} from '@angular/core';\nimport {CanStick, CanStickCtor, mixinHasStickyInput} from './can-stick';\nimport {CdkCellDef, CdkColumnDef} from './cell';\nimport {CDK_TABLE} from './tokens';\n\n/**\n * The row template that can be used by the mat-table. Should not be used outside of the\n * material library.\n */\nexport const CDK_ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\n\n/**\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\n * for changes and notifying the table.\n */\n@Directive()\nexport abstract class BaseRowDef implements OnChanges {\n  /** The columns to be displayed on this row. */\n  columns: Iterable<string>;\n\n  /** Differ used to check if any changes were made to the columns. */\n  protected _columnsDiffer: IterableDiffer<any>;\n\n  constructor(\n      /** @docs-private */ public template: TemplateRef<any>, protected _differs: IterableDiffers) {\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    // Create a new columns differ if one does not yet exist. Initialize it based on initial value\n    // of the columns property or an empty array if none is provided.\n    if (!this._columnsDiffer) {\n      const columns = (changes['columns'] && changes['columns'].currentValue) || [];\n      this._columnsDiffer = this._differs.find(columns).create();\n      this._columnsDiffer.diff(columns);\n    }\n  }\n\n  /**\n   * Returns the difference between the current columns and the columns from the last diff, or null\n   * if there is no difference.\n   */\n  getColumnsDiff(): IterableChanges<any>|null {\n    return this._columnsDiffer.diff(this.columns);\n  }\n\n  /** Gets this row def's relevant cell template from the provided column def. */\n  extractCellTemplate(column: CdkColumnDef): TemplateRef<any> {\n    if (this instanceof CdkHeaderRowDef) {\n      return column.headerCell.template;\n    }\n    if (this instanceof CdkFooterRowDef) {\n      return column.footerCell.template;\n    } else {\n      return column.cell.template;\n    }\n  }\n}\n\n// Boilerplate for applying mixins to CdkHeaderRowDef.\n/** @docs-private */\nclass CdkHeaderRowDefBase extends BaseRowDef {}\nconst _CdkHeaderRowDefBase: CanStickCtor&typeof CdkHeaderRowDefBase =\n    mixinHasStickyInput(CdkHeaderRowDefBase);\n\n/**\n * Header row definition for the CDK table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[cdkHeaderRowDef]',\n  inputs: ['columns: cdkHeaderRowDef', 'sticky: cdkHeaderRowDefSticky'],\n})\nexport class CdkHeaderRowDef extends _CdkHeaderRowDefBase implements CanStick, OnChanges {\n  constructor(\n    template: TemplateRef<any>,\n    _differs: IterableDiffers,\n    @Inject(CDK_TABLE) @Optional() public _table?: any) {\n    super(template, _differs);\n  }\n\n  // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n  // Explicitly define it so that the method is called as part of the Angular lifecycle.\n  ngOnChanges(changes: SimpleChanges): void {\n    super.ngOnChanges(changes);\n  }\n\n  static ngAcceptInputType_sticky: BooleanInput;\n}\n\n// Boilerplate for applying mixins to CdkFooterRowDef.\n/** @docs-private */\nclass CdkFooterRowDefBase extends BaseRowDef {}\nconst _CdkFooterRowDefBase: CanStickCtor&typeof CdkFooterRowDefBase =\n    mixinHasStickyInput(CdkFooterRowDefBase);\n\n/**\n * Footer row definition for the CDK table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[cdkFooterRowDef]',\n  inputs: ['columns: cdkFooterRowDef', 'sticky: cdkFooterRowDefSticky'],\n})\nexport class CdkFooterRowDef extends _CdkFooterRowDefBase implements CanStick, OnChanges {\n  constructor(\n    template: TemplateRef<any>,\n    _differs: IterableDiffers,\n    @Inject(CDK_TABLE) @Optional() public _table?: any) {\n    super(template, _differs);\n  }\n\n  // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n  // Explicitly define it so that the method is called as part of the Angular lifecycle.\n  ngOnChanges(changes: SimpleChanges): void {\n    super.ngOnChanges(changes);\n  }\n\n  static ngAcceptInputType_sticky: BooleanInput;\n}\n\n/**\n * Data row definition for the CDK table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[cdkRowDef]',\n  inputs: ['columns: cdkRowDefColumns', 'when: cdkRowDefWhen'],\n})\nexport class CdkRowDef<T> extends BaseRowDef {\n  /**\n   * Function that should return true if this row template should be used for the provided index\n   * and row data. If left undefined, this row will be considered the default row template to use\n   * when no other when functions return true for the data.\n   * For every row, there must be at least one when function that passes or an undefined to default.\n   */\n  when: (index: number, rowData: T) => boolean;\n\n  // TODO(andrewseguin): Add an input for providing a switch function to determine\n  //   if this template should be used.\n  constructor(\n    template: TemplateRef<any>,\n    _differs: IterableDiffers,\n    @Inject(CDK_TABLE) @Optional() public _table?: any) {\n    super(template, _differs);\n  }\n}\n\n/** Context provided to the row cells when `multiTemplateDataRows` is false */\nexport interface CdkCellOutletRowContext<T> {\n  /** Data for the row that this cell is located within. */\n  $implicit?: T;\n\n  /** Index of the data object in the provided data array. */\n  index?: number;\n\n  /** Length of the number of total rows. */\n  count?: number;\n\n  /** True if this cell is contained in the first row. */\n  first?: boolean;\n\n  /** True if this cell is contained in the last row. */\n  last?: boolean;\n\n  /** True if this cell is contained in a row with an even-numbered index. */\n  even?: boolean;\n\n  /** True if this cell is contained in a row with an odd-numbered index. */\n  odd?: boolean;\n}\n\n/**\n * Context provided to the row cells when `multiTemplateDataRows` is true. This context is the same\n * as CdkCellOutletRowContext except that the single `index` value is replaced by `dataIndex` and\n * `renderIndex`.\n */\nexport interface CdkCellOutletMultiRowContext<T> {\n  /** Data for the row that this cell is located within. */\n  $implicit?: T;\n\n  /** Index of the data object in the provided data array. */\n  dataIndex?: number;\n\n  /** Index location of the rendered row that this cell is located within. */\n  renderIndex?: number;\n\n  /** Length of the number of total rows. */\n  count?: number;\n\n  /** True if this cell is contained in the first row. */\n  first?: boolean;\n\n  /** True if this cell is contained in the last row. */\n  last?: boolean;\n\n  /** True if this cell is contained in a row with an even-numbered index. */\n  even?: boolean;\n\n  /** True if this cell is contained in a row with an odd-numbered index. */\n  odd?: boolean;\n}\n\n/**\n * Outlet for rendering cells inside of a row or header row.\n * @docs-private\n */\n@Directive({selector: '[cdkCellOutlet]'})\nexport class CdkCellOutlet implements OnDestroy {\n  /** The ordered list of cells to render within this outlet's view container */\n  cells: CdkCellDef[];\n\n  /** The data context to be provided to each cell */\n  context: any;\n\n  /**\n   * Static property containing the latest constructed instance of this class.\n   * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n   * createEmbeddedView. After one of these components are created, this property will provide\n   * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n   * construct the cells with the provided context.\n   */\n  static mostRecentCellOutlet: CdkCellOutlet|null = null;\n\n  constructor(public _viewContainer: ViewContainerRef) {\n    CdkCellOutlet.mostRecentCellOutlet = this;\n  }\n\n  ngOnDestroy() {\n    // If this was the last outlet being rendered in the view, remove the reference\n    // from the static property after it has been destroyed to avoid leaking memory.\n    if (CdkCellOutlet.mostRecentCellOutlet === this) {\n      CdkCellOutlet.mostRecentCellOutlet = null;\n    }\n  }\n}\n\n/** Header template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  selector: 'cdk-header-row, tr[cdk-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'cdk-header-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CdkHeaderRow {\n}\n\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  selector: 'cdk-footer-row, tr[cdk-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'cdk-footer-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CdkFooterRow {\n}\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  selector: 'cdk-row, tr[cdk-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'cdk-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CdkRow {\n}\n\n/** Row that can be used to display a message when no data is shown in the table. */\n@Directive({\n  selector: 'ng-template[cdkNoDataRow]'\n})\nexport class CdkNoDataRow {\n  constructor(public templateRef: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Directions that can be used when setting sticky positioning.\n * @docs-private\n */\nimport {Direction} from '@angular/cdk/bidi';\n\nexport type StickyDirection = 'top' | 'bottom' | 'left' | 'right';\n\n/**\n * List of all possible directions that can be used for sticky positioning.\n * @docs-private\n */\nexport const STICKY_DIRECTIONS: StickyDirection[] = ['top', 'bottom', 'left', 'right'];\n\n/**\n * Applies and removes sticky positioning styles to the `CdkTable` rows and columns cells.\n * @docs-private\n */\nexport class StickyStyler {\n  /**\n   * @param _isNativeHtmlTable Whether the sticky logic should be based on a table\n   *     that uses the native `<table>` element.\n   * @param _stickCellCss The CSS class that will be applied to every row/cell that has\n   *     sticky positioning applied.\n   * @param direction The directionality context of the table (ltr/rtl); affects column positioning\n   *     by reversing left/right positions.\n   * @param _isBrowser Whether the table is currently being rendered on the server or the client.\n   */\n  constructor(private _isNativeHtmlTable: boolean,\n              private _stickCellCss: string,\n              public direction: Direction,\n              private _isBrowser = true) { }\n\n  /**\n   * Clears the sticky positioning styles from the row and its cells by resetting the `position`\n   * style, setting the zIndex to 0, and unsetting each provided sticky direction.\n   * @param rows The list of rows that should be cleared from sticking in the provided directions\n   * @param stickyDirections The directions that should no longer be set as sticky on the rows.\n   */\n  clearStickyPositioning(rows: HTMLElement[], stickyDirections: StickyDirection[]) {\n    for (const row of rows) {\n      // If the row isn't an element (e.g. if it's an `ng-container`),\n      // it won't have inline styles or `children` so we skip it.\n      if (row.nodeType !== row.ELEMENT_NODE) {\n        continue;\n      }\n\n      this._removeStickyStyle(row, stickyDirections);\n\n      for (let i = 0; i < row.children.length; i++) {\n        const cell = row.children[i] as HTMLElement;\n        this._removeStickyStyle(cell, stickyDirections);\n      }\n    }\n  }\n\n  /**\n   * Applies sticky left and right positions to the cells of each row according to the sticky\n   * states of the rendered column definitions.\n   * @param rows The rows that should have its set of cells stuck according to the sticky states.\n   * @param stickyStartStates A list of boolean states where each state represents whether the cell\n   *     in this index position should be stuck to the start of the row.\n   * @param stickyEndStates A list of boolean states where each state represents whether the cell\n   *     in this index position should be stuck to the end of the row.\n   */\n  updateStickyColumns(\n      rows: HTMLElement[], stickyStartStates: boolean[], stickyEndStates: boolean[]) {\n    const hasStickyColumns =\n        stickyStartStates.some(state => state) || stickyEndStates.some(state => state);\n    if (!rows.length || !hasStickyColumns || !this._isBrowser) {\n      return;\n    }\n\n    const firstRow = rows[0];\n    const numCells = firstRow.children.length;\n    const cellWidths: number[] = this._getCellWidths(firstRow);\n\n    const startPositions = this._getStickyStartColumnPositions(cellWidths, stickyStartStates);\n    const endPositions = this._getStickyEndColumnPositions(cellWidths, stickyEndStates);\n    const isRtl = this.direction === 'rtl';\n\n    for (const row of rows) {\n      for (let i = 0; i < numCells; i++) {\n        const cell = row.children[i] as HTMLElement;\n        if (stickyStartStates[i]) {\n          this._addStickyStyle(cell, isRtl ? 'right' : 'left', startPositions[i]);\n        }\n\n        if (stickyEndStates[i]) {\n          this._addStickyStyle(cell, isRtl ? 'left' : 'right', endPositions[i]);\n        }\n      }\n    }\n  }\n\n  /**\n   * Applies sticky positioning to the row's cells if using the native table layout, and to the\n   * row itself otherwise.\n   * @param rowsToStick The list of rows that should be stuck according to their corresponding\n   *     sticky state and to the provided top or bottom position.\n   * @param stickyStates A list of boolean states where each state represents whether the row\n   *     should be stuck in the particular top or bottom position.\n   * @param position The position direction in which the row should be stuck if that row should be\n   *     sticky.\n   *\n   */\n  stickRows(rowsToStick: HTMLElement[], stickyStates: boolean[], position: 'top' | 'bottom') {\n    // Since we can't measure the rows on the server, we can't stick the rows properly.\n    if (!this._isBrowser) {\n      return;\n    }\n\n    // If positioning the rows to the bottom, reverse their order when evaluating the sticky\n    // position such that the last row stuck will be \"bottom: 0px\" and so on. Note that the\n    // sticky states need to be reversed as well.\n    const rows = position === 'bottom' ? rowsToStick.slice().reverse() : rowsToStick;\n    const states = position === 'bottom' ? stickyStates.slice().reverse() : stickyStates;\n\n    let stickyHeight = 0;\n    for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n      if (!states[rowIndex]) {\n        continue;\n      }\n\n      const row = rows[rowIndex];\n      if (this._isNativeHtmlTable) {\n        for (let j = 0; j < row.children.length; j++) {\n          const cell = row.children[j] as HTMLElement;\n          this._addStickyStyle(cell, position, stickyHeight);\n        }\n      } else {\n        // Flex does not respect the stick positioning on the cells, needs to be applied to the row.\n        // If this is applied on a native table, Safari causes the header to fly in wrong direction.\n        this._addStickyStyle(row, position, stickyHeight);\n      }\n\n      if (rowIndex === rows.length - 1) {\n        // prevent unnecessary reflow from getBoundingClientRect()\n        return;\n      }\n      stickyHeight += row.getBoundingClientRect().height;\n    }\n  }\n\n  /**\n   * When using the native table in Safari, sticky footer cells do not stick. The only way to stick\n   * footer rows is to apply sticky styling to the tfoot container. This should only be done if\n   * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from\n   * the tfoot element.\n   */\n  updateStickyFooterContainer(tableElement: Element, stickyStates: boolean[]) {\n    if (!this._isNativeHtmlTable) {\n      return;\n    }\n\n    const tfoot = tableElement.querySelector('tfoot')!;\n    if (stickyStates.some(state => !state)) {\n      this._removeStickyStyle(tfoot, ['bottom']);\n    } else {\n      this._addStickyStyle(tfoot, 'bottom', 0);\n    }\n  }\n\n  /**\n   * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating\n   * the zIndex, removing each of the provided sticky directions, and removing the\n   * sticky position if there are no more directions.\n   */\n  _removeStickyStyle(element: HTMLElement, stickyDirections: StickyDirection[]) {\n    for (const dir of stickyDirections) {\n      element.style[dir] = '';\n    }\n    element.style.zIndex = this._getCalculatedZIndex(element);\n\n    // If the element no longer has any more sticky directions, remove sticky positioning and\n    // the sticky CSS class.\n    const hasDirection = STICKY_DIRECTIONS.some(dir => !!element.style[dir]);\n    if (!hasDirection) {\n      element.style.position = '';\n      element.classList.remove(this._stickCellCss);\n    }\n  }\n\n  /**\n   * Adds the sticky styling to the element by adding the sticky style class, changing position\n   * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky\n   * direction and value.\n   */\n  _addStickyStyle(element: HTMLElement, dir: StickyDirection, dirValue: number) {\n    element.classList.add(this._stickCellCss);\n    element.style[dir] = `${dirValue}px`;\n    element.style.cssText += 'position: -webkit-sticky; position: sticky; ';\n    element.style.zIndex = this._getCalculatedZIndex(element);\n  }\n\n  /**\n   * Calculate what the z-index should be for the element, depending on what directions (top,\n   * bottom, left, right) have been set. It should be true that elements with a top direction\n   * should have the highest index since these are elements like a table header. If any of those\n   * elements are also sticky in another direction, then they should appear above other elements\n   * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements\n   * (e.g. footer rows) should then be next in the ordering such that they are below the header\n   * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)\n   * should minimally increment so that they are above non-sticky elements but below top and bottom\n   * elements.\n   */\n  _getCalculatedZIndex(element: HTMLElement): string {\n    const zIndexIncrements = {\n      top: 100,\n      bottom: 10,\n      left: 1,\n      right: 1,\n    };\n\n    let zIndex = 0;\n    // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n    // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n    // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n    for (const dir of STICKY_DIRECTIONS as Iterable<StickyDirection> & StickyDirection[]) {\n      if (element.style[dir]) {\n        zIndex += zIndexIncrements[dir];\n      }\n    }\n\n    return zIndex ? `${zIndex}` : '';\n  }\n\n  /** Gets the widths for each cell in the provided row. */\n  _getCellWidths(row: HTMLElement): number[] {\n    const cellWidths: number[] = [];\n    const firstRowCells = row.children;\n    for (let i = 0; i < firstRowCells.length; i++) {\n      let cell: HTMLElement = firstRowCells[i] as HTMLElement;\n      cellWidths.push(cell.getBoundingClientRect().width);\n    }\n\n    return cellWidths;\n  }\n\n  /**\n   * Determines the left and right positions of each sticky column cell, which will be the\n   * accumulation of all sticky column cell widths to the left and right, respectively.\n   * Non-sticky cells do not need to have a value set since their positions will not be applied.\n   */\n  _getStickyStartColumnPositions(widths: number[], stickyStates: boolean[]): number[] {\n    const positions: number[] = [];\n    let nextPosition = 0;\n\n    for (let i = 0; i < widths.length; i++) {\n      if (stickyStates[i]) {\n        positions[i] = nextPosition;\n        nextPosition += widths[i];\n      }\n    }\n\n    return positions;\n  }\n\n  /**\n   * Determines the left and right positions of each sticky column cell, which will be the\n   * accumulation of all sticky column cell widths to the left and right, respectively.\n   * Non-sticky cells do not need to have a value set since their positions will not be applied.\n   */\n  _getStickyEndColumnPositions(widths: number[], stickyStates: boolean[]): number[] {\n    const positions: number[] = [];\n    let nextPosition = 0;\n\n    for (let i = widths.length; i > 0; i--) {\n      if (stickyStates[i]) {\n        positions[i] = nextPosition;\n        nextPosition += widths[i];\n      }\n    }\n\n    return positions;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an error to be thrown when attempting to find an unexisting column.\n * @param id Id whose lookup failed.\n * @docs-private\n */\nexport function getTableUnknownColumnError(id: string) {\n  return Error(`Could not find column with id \"${id}\".`);\n}\n\n/**\n * Returns an error to be thrown when two column definitions have the same name.\n * @docs-private\n */\nexport function getTableDuplicateColumnNameError(name: string) {\n  return Error(`Duplicate column definition name provided: \"${name}\".`);\n}\n\n/**\n * Returns an error to be thrown when there are multiple rows that are missing a when function.\n * @docs-private\n */\nexport function getTableMultipleDefaultRowDefsError() {\n  return Error(`There can only be one default row without a when predicate function.`);\n}\n\n/**\n * Returns an error to be thrown when there are no matching row defs for a particular set of data.\n * @docs-private\n */\nexport function getTableMissingMatchingRowDefError(data: any) {\n  return Error(`Could not find a matching row definition for the` +\n      `provided row data: ${JSON.stringify(data)}`);\n}\n\n/**\n * Returns an error to be thrown when there is no row definitions present in the content.\n * @docs-private\n */\nexport function getTableMissingRowDefsError() {\n  return Error('Missing definitions for header, footer, and row; ' +\n      'cannot determine which columns should be rendered.');\n}\n\n/**\n * Returns an error to be thrown when the data source does not match the compatible types.\n * @docs-private\n */\nexport function getTableUnknownDataSourceError() {\n  return Error(`Provided data source did not match an array, Observable, or DataSource`);\n}\n\n/**\n * Returns an error to be thrown when the text column cannot find a parent table to inject.\n * @docs-private\n */\nexport function getTableTextColumnMissingParentTableError() {\n  return Error(`Text column could not find a parent table for registration.`);\n}\n\n/**\n * Returns an error to be thrown when a table text column doesn't have a name.\n * @docs-private\n */\nexport function getTableTextColumnMissingNameError() {\n  return Error(`Table text column must have a name.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CollectionViewer, DataSource, isDataSource} from '@angular/cdk/collections';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EmbeddedViewRef,\n  Inject,\n  Input,\n  isDevMode,\n  IterableChangeRecord,\n  IterableDiffer,\n  IterableDiffers,\n  OnDestroy,\n  OnInit,\n  Optional,\n  QueryList,\n  TemplateRef,\n  TrackByFunction,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ContentChild\n} from '@angular/core';\nimport {\n  BehaviorSubject,\n  Observable,\n  of as observableOf,\n  Subject,\n  Subscription,\n  isObservable,\n} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {CdkColumnDef} from './cell';\nimport {\n  BaseRowDef,\n  CdkCellOutlet,\n  CdkCellOutletMultiRowContext,\n  CdkCellOutletRowContext,\n  CdkFooterRowDef,\n  CdkHeaderRowDef,\n  CdkRowDef,\n  CdkNoDataRow\n} from './row';\nimport {StickyStyler} from './sticky-styler';\nimport {\n  getTableDuplicateColumnNameError,\n  getTableMissingMatchingRowDefError,\n  getTableMissingRowDefsError,\n  getTableMultipleDefaultRowDefsError,\n  getTableUnknownColumnError,\n  getTableUnknownDataSourceError\n} from './table-errors';\nimport {CDK_TABLE} from './tokens';\n\n/** Interface used to provide an outlet for rows to be inserted into. */\nexport interface RowOutlet {\n  viewContainer: ViewContainerRef;\n}\n\n/**\n * Union of the types that can be set as the data source for a `CdkTable`.\n * @docs-private\n */\ntype CdkTableDataSourceInput<T> =\n    DataSource<T>|Observable<ReadonlyArray<T>|T[]>|ReadonlyArray<T>|T[];\n\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\n * @docs-private\n */\n@Directive({selector: '[rowOutlet]'})\nexport class DataRowOutlet implements RowOutlet {\n  constructor(public viewContainer: ViewContainerRef, public elementRef: ElementRef) {}\n}\n\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\n * @docs-private\n */\n@Directive({selector: '[headerRowOutlet]'})\nexport class HeaderRowOutlet implements RowOutlet {\n  constructor(public viewContainer: ViewContainerRef, public elementRef: ElementRef) {}\n}\n\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the footer.\n * @docs-private\n */\n@Directive({selector: '[footerRowOutlet]'})\nexport class FooterRowOutlet implements RowOutlet {\n  constructor(public viewContainer: ViewContainerRef, public elementRef: ElementRef) {}\n}\n\n/**\n * Provides a handle for the table to grab the view\n * container's ng-container to insert the no data row.\n * @docs-private\n */\n@Directive({selector: '[noDataRowOutlet]'})\nexport class NoDataRowOutlet implements RowOutlet {\n  constructor(public viewContainer: ViewContainerRef, public elementRef: ElementRef) {}\n}\n\n/**\n * The table template that can be used by the mat-table. Should not be used outside of the\n * material library.\n * @docs-private\n */\nexport const CDK_TABLE_TEMPLATE =\n    // Note that according to MDN, the `caption` element has to be projected as the **first**\n    // element in the table. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption\n    `\n  <ng-content select=\"caption\"></ng-content>\n  <ng-content select=\"colgroup, col\"></ng-content>\n  <ng-container headerRowOutlet></ng-container>\n  <ng-container rowOutlet></ng-container>\n  <ng-container noDataRowOutlet></ng-container>\n  <ng-container footerRowOutlet></ng-container>\n`;\n\n/**\n * Interface used to conveniently type the possible context interfaces for the render row.\n * @docs-private\n */\nexport interface RowContext<T> extends CdkCellOutletMultiRowContext<T>,\n                                       CdkCellOutletRowContext<T> {}\n\n/**\n * Class used to conveniently type the embedded view ref for rows with a context.\n * @docs-private\n */\nabstract class RowViewRef<T> extends EmbeddedViewRef<RowContext<T>> {}\n\n/**\n * Set of properties that represents the identity of a single rendered row.\n *\n * When the table needs to determine the list of rows to render, it will do so by iterating through\n * each data object and evaluating its list of row templates to display (when multiTemplateDataRows\n * is false, there is only one template per data object). For each pair of data object and row\n * template, a `RenderRow` is added to the list of rows to render. If the data object and row\n * template pair has already been rendered, the previously used `RenderRow` is added; else a new\n * `RenderRow` is * created. Once the list is complete and all data objects have been itereated\n * through, a diff is performed to determine the changes that need to be made to the rendered rows.\n *\n * @docs-private\n */\nexport interface RenderRow<T> {\n  data: T;\n  dataIndex: number;\n  rowDef: CdkRowDef<T>;\n}\n\n/**\n * A data table that can render a header row, data rows, and a footer row.\n * Uses the dataSource input to determine the data to be rendered. The data can be provided either\n * as a data array, an Observable stream that emits the data array to render, or a DataSource with a\n * connect function that will return an Observable stream that emits the data array to render.\n */\n@Component({\n  selector: 'cdk-table, table[cdk-table]',\n  exportAs: 'cdkTable',\n  template: CDK_TABLE_TEMPLATE,\n  host: {\n    'class': 'cdk-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  // The \"OnPush\" status for the `MatTable` component is effectively a noop, so we are removing it.\n  // The view for `MatTable` consists entirely of templates declared in other views. As they are\n  // declared elsewhere, they are checked when their declaration points are checked.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  providers: [{provide: CDK_TABLE, useExisting: CdkTable}]\n})\nexport class CdkTable<T> implements AfterContentChecked, CollectionViewer, OnDestroy, OnInit {\n  private _document: Document;\n\n  /** Latest data provided by the data source. */\n  protected _data: T[]|ReadonlyArray<T>;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _onDestroy = new Subject<void>();\n\n  /** List of the rendered rows as identified by their `RenderRow` object. */\n  private _renderRows: RenderRow<T>[];\n\n  /** Subscription that listens for the data provided by the data source. */\n  private _renderChangeSubscription: Subscription|null;\n\n  /**\n   * Map of all the user's defined columns (header, data, and footer cell template) identified by\n   * name. Collection populated by the column definitions gathered by `ContentChildren` as well as\n   * any custom column definitions added to `_customColumnDefs`.\n   */\n  private _columnDefsByName = new Map<string, CdkColumnDef>();\n\n  /**\n   * Set of all row definitions that can be used by this table. Populated by the rows gathered by\n   * using `ContentChildren` as well as any custom row definitions added to `_customRowDefs`.\n   */\n  private _rowDefs: CdkRowDef<T>[];\n\n  /**\n   * Set of all header row definitions that can be used by this table. Populated by the rows\n   * gathered by using `ContentChildren` as well as any custom row definitions added to\n   * `_customHeaderRowDefs`.\n   */\n  private _headerRowDefs: CdkHeaderRowDef[];\n\n  /**\n   * Set of all row definitions that can be used by this table. Populated by the rows gathered by\n   * using `ContentChildren` as well as any custom row definitions added to\n   * `_customFooterRowDefs`.\n   */\n  private _footerRowDefs: CdkFooterRowDef[];\n\n  /** Differ used to find the changes in the data provided by the data source. */\n  private _dataDiffer: IterableDiffer<RenderRow<T>>;\n\n  /** Stores the row definition that does not have a when predicate. */\n  private _defaultRowDef: CdkRowDef<T>|null;\n\n  /**\n   * Column definitions that were defined outside of the direct content children of the table.\n   * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n   * column definitions as *its* content child.\n   */\n  private _customColumnDefs = new Set<CdkColumnDef>();\n\n  /**\n   * Data row definitions that were defined outside of the direct content children of the table.\n   * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n   * built-in data rows as *its* content child.\n   */\n  private _customRowDefs = new Set<CdkRowDef<T>>();\n\n  /**\n   * Header row definitions that were defined outside of the direct content children of the table.\n   * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n   * built-in header rows as *its* content child.\n   */\n  private _customHeaderRowDefs = new Set<CdkHeaderRowDef>();\n\n  /**\n   * Footer row definitions that were defined outside of the direct content children of the table.\n   * These will be defined when, e.g., creating a wrapper around the cdkTable that has a\n   * built-in footer row as *its* content child.\n   */\n  private _customFooterRowDefs = new Set<CdkFooterRowDef>();\n\n  /**\n   * Whether the header row definition has been changed. Triggers an update to the header row after\n   * content is checked. Initialized as true so that the table renders the initial set of rows.\n   */\n  private _headerRowDefChanged = true;\n\n  /**\n   * Whether the footer row definition has been changed. Triggers an update to the footer row after\n   * content is checked. Initialized as true so that the table renders the initial set of rows.\n   */\n  private _footerRowDefChanged = true;\n\n  /**\n   * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing\n   * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with\n   * the cached `RenderRow` objects when possible, the row identity is preserved when the data\n   * and row template matches, which allows the `IterableDiffer` to check rows by reference\n   * and understand which rows are added/moved/removed.\n   *\n   * Implemented as a map of maps where the first key is the `data: T` object and the second is the\n   * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that\n   * contains an array of created pairs. The array is necessary to handle cases where the data\n   * array contains multiple duplicate data objects and each instantiated `RenderRow` must be\n   * stored.\n   */\n  private _cachedRenderRowsMap = new Map<T, WeakMap<CdkRowDef<T>, RenderRow<T>[]>>();\n\n  /** Whether the table is applied to a native `<table>`. */\n  private _isNativeHtmlTable: boolean;\n\n  /**\n   * Utility class that is responsible for applying the appropriate sticky positioning styles to\n   * the table's rows and cells.\n   */\n  private _stickyStyler: StickyStyler;\n\n  /**\n   * CSS class added to any row or cell that has sticky positioning applied. May be overriden by\n   * table subclasses.\n   */\n  protected stickyCssClass: string = 'cdk-table-sticky';\n\n  /** Whether the no data row is currently showing anything. */\n  private _isShowingNoDataRow = false;\n\n  /**\n   * Tracking function that will be used to check the differences in data changes. Used similarly\n   * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\n   * relative to the function to know if a row should be added/removed/moved.\n   * Accepts a function that takes two parameters, `index` and `item`.\n   */\n  @Input()\n  get trackBy(): TrackByFunction<T> {\n    return this._trackByFn;\n  }\n  set trackBy(fn: TrackByFunction<T>) {\n    if (isDevMode() && fn != null && typeof fn !== 'function' && <any>console &&\n        <any>console.warn) {\n      console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}.`);\n    }\n    this._trackByFn = fn;\n  }\n  private _trackByFn: TrackByFunction<T>;\n\n  /**\n   * The table's source of data, which can be provided in three ways (in order of complexity):\n   *   - Simple data array (each object represents one table row)\n   *   - Stream that emits a data array each time the array changes\n   *   - `DataSource` object that implements the connect/disconnect interface.\n   *\n   * If a data array is provided, the table must be notified when the array's objects are\n   * added, removed, or moved. This can be done by calling the `renderRows()` function which will\n   * render the diff since the last table render. If the data array reference is changed, the table\n   * will automatically trigger an update to the rows.\n   *\n   * When providing an Observable stream, the table will trigger an update automatically when the\n   * stream emits a new array of data.\n   *\n   * Finally, when providing a `DataSource` object, the table will use the Observable stream\n   * provided by the connect function and trigger updates when that stream emits new data array\n   * values. During the table's ngOnDestroy or when the data source is removed from the table, the\n   * table will call the DataSource's `disconnect` function (may be useful for cleaning up any\n   * subscriptions registered during the connect process).\n   */\n  @Input()\n  get dataSource(): CdkTableDataSourceInput<T> {\n    return this._dataSource;\n  }\n  set dataSource(dataSource: CdkTableDataSourceInput<T>) {\n    if (this._dataSource !== dataSource) {\n      this._switchDataSource(dataSource);\n    }\n  }\n  private _dataSource: CdkTableDataSourceInput<T>;\n\n  /**\n   * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'\n   * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each\n   * dataobject will render the first row that evaluates its when predicate to true, in the order\n   * defined in the table, or otherwise the default row which does not have a when predicate.\n   */\n  @Input()\n  get multiTemplateDataRows(): boolean {\n    return this._multiTemplateDataRows;\n  }\n  set multiTemplateDataRows(v: boolean) {\n    this._multiTemplateDataRows = coerceBooleanProperty(v);\n\n    // In Ivy if this value is set via a static attribute (e.g. <table multiTemplateDataRows>),\n    // this setter will be invoked before the row outlet has been defined hence the null check.\n    if (this._rowOutlet && this._rowOutlet.viewContainer.length) {\n      this._forceRenderDataRows();\n    }\n  }\n  _multiTemplateDataRows: boolean = false;\n\n  // TODO(andrewseguin): Remove max value as the end index\n  //   and instead calculate the view on init and scroll.\n  /**\n   * Stream containing the latest information on what rows are being displayed on screen.\n   * Can be used by the data source to as a heuristic of what data should be provided.\n   *\n   * @docs-private\n   */\n  viewChange: BehaviorSubject<{start: number, end: number}> =\n      new BehaviorSubject<{start: number, end: number}>({start: 0, end: Number.MAX_VALUE});\n\n  // Outlets in the table's template where the header, data rows, and footer will be inserted.\n  @ViewChild(DataRowOutlet, {static: true}) _rowOutlet: DataRowOutlet;\n  @ViewChild(HeaderRowOutlet, {static: true}) _headerRowOutlet: HeaderRowOutlet;\n  @ViewChild(FooterRowOutlet, {static: true}) _footerRowOutlet: FooterRowOutlet;\n  @ViewChild(NoDataRowOutlet, {static: true}) _noDataRowOutlet: NoDataRowOutlet;\n\n  /**\n   * The column definitions provided by the user that contain what the header, data, and footer\n   * cells should render for each column.\n   */\n  @ContentChildren(CdkColumnDef, {descendants: true}) _contentColumnDefs: QueryList<CdkColumnDef>;\n\n  /** Set of data row definitions that were provided to the table as content children. */\n  @ContentChildren(CdkRowDef, {descendants: true}) _contentRowDefs: QueryList<CdkRowDef<T>>;\n\n  /** Set of header row definitions that were provided to the table as content children. */\n  @ContentChildren(CdkHeaderRowDef, {\n    descendants: true\n  }) _contentHeaderRowDefs: QueryList<CdkHeaderRowDef>;\n\n  /** Set of footer row definitions that were provided to the table as content children. */\n  @ContentChildren(CdkFooterRowDef, {\n    descendants: true\n  }) _contentFooterRowDefs: QueryList<CdkFooterRowDef>;\n\n  /** Row definition that will only be rendered if there's no data in the table. */\n  @ContentChild(CdkNoDataRow) _noDataRow: CdkNoDataRow;\n\n  constructor(\n      protected readonly _differs: IterableDiffers,\n      protected readonly _changeDetectorRef: ChangeDetectorRef,\n      protected readonly _elementRef: ElementRef, @Attribute('role') role: string,\n      @Optional() protected readonly _dir: Directionality, @Inject(DOCUMENT) _document: any,\n      private _platform: Platform) {\n    if (!role) {\n      this._elementRef.nativeElement.setAttribute('role', 'grid');\n    }\n\n    this._document = _document;\n    this._isNativeHtmlTable = this._elementRef.nativeElement.nodeName === 'TABLE';\n  }\n\n  ngOnInit() {\n    this._setupStickyStyler();\n\n    if (this._isNativeHtmlTable) {\n      this._applyNativeTableSections();\n    }\n\n    // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If\n    // the user has provided a custom trackBy, return the result of that function as evaluated\n    // with the values of the `RenderRow`'s data and index.\n    this._dataDiffer = this._differs.find([]).create((_i: number, dataRow: RenderRow<T>) => {\n      return this.trackBy ? this.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;\n    });\n  }\n\n  ngAfterContentChecked() {\n    // Cache the row and column definitions gathered by ContentChildren and programmatic injection.\n    this._cacheRowDefs();\n    this._cacheColumnDefs();\n\n    // Make sure that the user has at least added header, footer, or data row def.\n    if (!this._headerRowDefs.length && !this._footerRowDefs.length && !this._rowDefs.length) {\n      throw getTableMissingRowDefsError();\n    }\n\n    // Render updates if the list of columns have been changed for the header, row, or footer defs.\n    this._renderUpdatedColumns();\n\n    // If the header row definition has been changed, trigger a render to the header row.\n    if (this._headerRowDefChanged) {\n      this._forceRenderHeaderRows();\n      this._headerRowDefChanged = false;\n    }\n\n    // If the footer row definition has been changed, trigger a render to the footer row.\n    if (this._footerRowDefChanged) {\n      this._forceRenderFooterRows();\n      this._footerRowDefChanged = false;\n    }\n\n    // If there is a data source and row definitions, connect to the data source unless a\n    // connection has already been made.\n    if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {\n      this._observeRenderChanges();\n    }\n\n    this._checkStickyStates();\n  }\n\n  ngOnDestroy() {\n    this._rowOutlet.viewContainer.clear();\n    this._noDataRowOutlet.viewContainer.clear();\n    this._headerRowOutlet.viewContainer.clear();\n    this._footerRowOutlet.viewContainer.clear();\n\n    this._cachedRenderRowsMap.clear();\n\n    this._onDestroy.next();\n    this._onDestroy.complete();\n\n    if (isDataSource(this.dataSource)) {\n      this.dataSource.disconnect(this);\n    }\n  }\n\n  /**\n   * Renders rows based on the table's latest set of data, which was either provided directly as an\n   * input or retrieved through an Observable stream (directly or from a DataSource).\n   * Checks for differences in the data since the last diff to perform only the necessary\n   * changes (add/remove/move rows).\n   *\n   * If the table's data source is a DataSource or Observable, this will be invoked automatically\n   * each time the provided Observable stream emits a new data array. Otherwise if your data is\n   * an array, this function will need to be called to render any changes.\n   */\n  renderRows() {\n    this._renderRows = this._getAllRenderRows();\n    const changes = this._dataDiffer.diff(this._renderRows);\n    if (!changes) {\n      return;\n    }\n\n    const viewContainer = this._rowOutlet.viewContainer;\n\n    changes.forEachOperation(\n        (record: IterableChangeRecord<RenderRow<T>>, prevIndex: number|null,\n         currentIndex: number|null) => {\n          if (record.previousIndex == null) {\n            this._insertRow(record.item, currentIndex!);\n          } else if (currentIndex == null) {\n            viewContainer.remove(prevIndex!);\n          } else {\n            const view = <RowViewRef<T>>viewContainer.get(prevIndex!);\n            viewContainer.move(view!, currentIndex);\n          }\n        });\n\n    // Update the meta context of a row's context data (index, count, first, last, ...)\n    this._updateRowIndexContext();\n\n    // Update rows that did not get added/removed/moved but may have had their identity changed,\n    // e.g. if trackBy matched data on some property but the actual data reference changed.\n    changes.forEachIdentityChange((record: IterableChangeRecord<RenderRow<T>>) => {\n      const rowView = <RowViewRef<T>>viewContainer.get(record.currentIndex!);\n      rowView.context.$implicit = record.item.data;\n    });\n\n    this._updateNoDataRow();\n    this.updateStickyColumnStyles();\n  }\n\n  /** Adds a column definition that was not included as part of the content children. */\n  addColumnDef(columnDef: CdkColumnDef) {\n    this._customColumnDefs.add(columnDef);\n  }\n\n  /** Removes a column definition that was not included as part of the content children. */\n  removeColumnDef(columnDef: CdkColumnDef) {\n    this._customColumnDefs.delete(columnDef);\n  }\n\n  /** Adds a row definition that was not included as part of the content children. */\n  addRowDef(rowDef: CdkRowDef<T>) {\n    this._customRowDefs.add(rowDef);\n  }\n\n  /** Removes a row definition that was not included as part of the content children. */\n  removeRowDef(rowDef: CdkRowDef<T>) {\n    this._customRowDefs.delete(rowDef);\n  }\n\n  /** Adds a header row definition that was not included as part of the content children. */\n  addHeaderRowDef(headerRowDef: CdkHeaderRowDef) {\n    this._customHeaderRowDefs.add(headerRowDef);\n    this._headerRowDefChanged = true;\n  }\n\n  /** Removes a header row definition that was not included as part of the content children. */\n  removeHeaderRowDef(headerRowDef: CdkHeaderRowDef) {\n    this._customHeaderRowDefs.delete(headerRowDef);\n    this._headerRowDefChanged = true;\n  }\n\n  /** Adds a footer row definition that was not included as part of the content children. */\n  addFooterRowDef(footerRowDef: CdkFooterRowDef) {\n    this._customFooterRowDefs.add(footerRowDef);\n    this._footerRowDefChanged = true;\n  }\n\n  /** Removes a footer row definition that was not included as part of the content children. */\n  removeFooterRowDef(footerRowDef: CdkFooterRowDef) {\n    this._customFooterRowDefs.delete(footerRowDef);\n    this._footerRowDefChanged = true;\n  }\n\n  /**\n   * Updates the header sticky styles. First resets all applied styles with respect to the cells\n   * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is\n   * automatically called when the header row changes its displayed set of columns, or if its\n   * sticky input changes. May be called manually for cases where the cell content changes outside\n   * of these events.\n   */\n  updateStickyHeaderRowStyles(): void {\n    const headerRows = this._getRenderedRows(this._headerRowOutlet);\n    const tableElement = this._elementRef.nativeElement as HTMLElement;\n\n    // Hide the thead element if there are no header rows. This is necessary to satisfy\n    // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n    // required child `row`.\n    const thead = tableElement.querySelector('thead');\n    if (thead) {\n      thead.style.display = headerRows.length ? '' : 'none';\n    }\n\n    const stickyStates = this._headerRowDefs.map(def => def.sticky);\n    this._stickyStyler.clearStickyPositioning(headerRows, ['top']);\n    this._stickyStyler.stickRows(headerRows, stickyStates, 'top');\n\n    // Reset the dirty state of the sticky input change since it has been used.\n    this._headerRowDefs.forEach(def => def.resetStickyChanged());\n  }\n\n  /**\n   * Updates the footer sticky styles. First resets all applied styles with respect to the cells\n   * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is\n   * automatically called when the footer row changes its displayed set of columns, or if its\n   * sticky input changes. May be called manually for cases where the cell content changes outside\n   * of these events.\n   */\n  updateStickyFooterRowStyles(): void {\n    const footerRows = this._getRenderedRows(this._footerRowOutlet);\n    const tableElement = this._elementRef.nativeElement as HTMLElement;\n\n    // Hide the tfoot element if there are no footer rows. This is necessary to satisfy\n    // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n    // required child `row`.\n    const tfoot = tableElement.querySelector('tfoot');\n    if (tfoot) {\n      tfoot.style.display = footerRows.length ? '' : 'none';\n    }\n\n    const stickyStates = this._footerRowDefs.map(def => def.sticky);\n    this._stickyStyler.clearStickyPositioning(footerRows, ['bottom']);\n    this._stickyStyler.stickRows(footerRows, stickyStates, 'bottom');\n    this._stickyStyler.updateStickyFooterContainer(this._elementRef.nativeElement, stickyStates);\n\n    // Reset the dirty state of the sticky input change since it has been used.\n    this._footerRowDefs.forEach(def => def.resetStickyChanged());\n  }\n\n  /**\n   * Updates the column sticky styles. First resets all applied styles with respect to the cells\n   * sticking to the left and right. Then sticky styles are added for the left and right according\n   * to the column definitions for each cell in each row. This is automatically called when\n   * the data source provides a new set of data or when a column definition changes its sticky\n   * input. May be called manually for cases where the cell content changes outside of these events.\n   */\n  updateStickyColumnStyles() {\n    const headerRows = this._getRenderedRows(this._headerRowOutlet);\n    const dataRows = this._getRenderedRows(this._rowOutlet);\n    const footerRows = this._getRenderedRows(this._footerRowOutlet);\n\n    // Clear the left and right positioning from all columns in the table across all rows since\n    // sticky columns span across all table sections (header, data, footer)\n    this._stickyStyler.clearStickyPositioning(\n        [...headerRows, ...dataRows, ...footerRows], ['left', 'right']);\n\n    // Update the sticky styles for each header row depending on the def's sticky state\n    headerRows.forEach((headerRow, i) => {\n      this._addStickyColumnStyles([headerRow], this._headerRowDefs[i]);\n    });\n\n    // Update the sticky styles for each data row depending on its def's sticky state\n    this._rowDefs.forEach(rowDef => {\n      // Collect all the rows rendered with this row definition.\n      const rows: HTMLElement[] = [];\n      for (let i = 0; i < dataRows.length; i++) {\n        if (this._renderRows[i].rowDef === rowDef) {\n          rows.push(dataRows[i]);\n        }\n      }\n\n      this._addStickyColumnStyles(rows, rowDef);\n    });\n\n    // Update the sticky styles for each footer row depending on the def's sticky state\n    footerRows.forEach((footerRow, i) => {\n      this._addStickyColumnStyles([footerRow], this._footerRowDefs[i]);\n    });\n\n    // Reset the dirty state of the sticky input change since it has been used.\n    Array.from(this._columnDefsByName.values()).forEach(def => def.resetStickyChanged());\n  }\n\n  /**\n   * Get the list of RenderRow objects to render according to the current list of data and defined\n   * row definitions. If the previous list already contained a particular pair, it should be reused\n   * so that the differ equates their references.\n   */\n  private _getAllRenderRows(): RenderRow<T>[] {\n    const renderRows: RenderRow<T>[] = [];\n\n    // Store the cache and create a new one. Any re-used RenderRow objects will be moved into the\n    // new cache while unused ones can be picked up by garbage collection.\n    const prevCachedRenderRows = this._cachedRenderRowsMap;\n    this._cachedRenderRowsMap = new Map();\n\n    // For each data object, get the list of rows that should be rendered, represented by the\n    // respective `RenderRow` object which is the pair of `data` and `CdkRowDef`.\n    for (let i = 0; i < this._data.length; i++) {\n      let data = this._data[i];\n      const renderRowsForData = this._getRenderRowsForData(data, i, prevCachedRenderRows.get(data));\n\n      if (!this._cachedRenderRowsMap.has(data)) {\n        this._cachedRenderRowsMap.set(data, new WeakMap());\n      }\n\n      for (let j = 0; j < renderRowsForData.length; j++) {\n        let renderRow = renderRowsForData[j];\n\n        const cache = this._cachedRenderRowsMap.get(renderRow.data)!;\n        if (cache.has(renderRow.rowDef)) {\n          cache.get(renderRow.rowDef)!.push(renderRow);\n        } else {\n          cache.set(renderRow.rowDef, [renderRow]);\n        }\n        renderRows.push(renderRow);\n      }\n    }\n\n    return renderRows;\n  }\n\n  /**\n   * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that\n   * should be rendered for this data. Reuses the cached RenderRow objects if they match the same\n   * `(T, CdkRowDef)` pair.\n   */\n  private _getRenderRowsForData(\n      data: T, dataIndex: number, cache?: WeakMap<CdkRowDef<T>, RenderRow<T>[]>): RenderRow<T>[] {\n    const rowDefs = this._getRowDefs(data, dataIndex);\n\n    return rowDefs.map(rowDef => {\n      const cachedRenderRows = (cache && cache.has(rowDef)) ? cache.get(rowDef)! : [];\n      if (cachedRenderRows.length) {\n        const dataRow = cachedRenderRows.shift()!;\n        dataRow.dataIndex = dataIndex;\n        return dataRow;\n      } else {\n        return {data, rowDef, dataIndex};\n      }\n    });\n  }\n\n  /** Update the map containing the content's column definitions. */\n  private _cacheColumnDefs() {\n    this._columnDefsByName.clear();\n\n    const columnDefs = mergeArrayAndSet(\n        this._getOwnDefs(this._contentColumnDefs), this._customColumnDefs);\n    columnDefs.forEach(columnDef => {\n      if (this._columnDefsByName.has(columnDef.name)) {\n        throw getTableDuplicateColumnNameError(columnDef.name);\n      }\n      this._columnDefsByName.set(columnDef.name, columnDef);\n    });\n  }\n\n  /** Update the list of all available row definitions that can be used. */\n  private _cacheRowDefs() {\n    this._headerRowDefs = mergeArrayAndSet(\n        this._getOwnDefs(this._contentHeaderRowDefs), this._customHeaderRowDefs);\n    this._footerRowDefs = mergeArrayAndSet(\n        this._getOwnDefs(this._contentFooterRowDefs), this._customFooterRowDefs);\n    this._rowDefs = mergeArrayAndSet(\n        this._getOwnDefs(this._contentRowDefs), this._customRowDefs);\n\n    // After all row definitions are determined, find the row definition to be considered default.\n    const defaultRowDefs = this._rowDefs.filter(def => !def.when);\n    if (!this.multiTemplateDataRows && defaultRowDefs.length > 1) {\n      throw getTableMultipleDefaultRowDefsError();\n    }\n    this._defaultRowDef = defaultRowDefs[0];\n  }\n\n  /**\n   * Check if the header, data, or footer rows have changed what columns they want to display or\n   * whether the sticky states have changed for the header or footer. If there is a diff, then\n   * re-render that section.\n   */\n  private _renderUpdatedColumns() {\n    const columnsDiffReducer = (acc: boolean, def: BaseRowDef) => acc || !!def.getColumnsDiff();\n\n    // Force re-render data rows if the list of column definitions have changed.\n    if (this._rowDefs.reduce(columnsDiffReducer, false)) {\n      this._forceRenderDataRows();\n    }\n\n    // Force re-render header/footer rows if the list of column definitions have changed..\n    if (this._headerRowDefs.reduce(columnsDiffReducer, false)) {\n      this._forceRenderHeaderRows();\n    }\n\n    if (this._footerRowDefs.reduce(columnsDiffReducer, false)) {\n      this._forceRenderFooterRows();\n    }\n  }\n\n  /**\n   * Switch to the provided data source by resetting the data and unsubscribing from the current\n   * render change subscription if one exists. If the data source is null, interpret this by\n   * clearing the row outlet. Otherwise start listening for new data.\n   */\n  private _switchDataSource(dataSource: CdkTableDataSourceInput<T>) {\n    this._data = [];\n\n    if (isDataSource(this.dataSource)) {\n      this.dataSource.disconnect(this);\n    }\n\n    // Stop listening for data from the previous data source.\n    if (this._renderChangeSubscription) {\n      this._renderChangeSubscription.unsubscribe();\n      this._renderChangeSubscription = null;\n    }\n\n    if (!dataSource) {\n      if (this._dataDiffer) {\n        this._dataDiffer.diff([]);\n      }\n      this._rowOutlet.viewContainer.clear();\n    }\n\n    this._dataSource = dataSource;\n  }\n\n  /** Set up a subscription for the data provided by the data source. */\n  private _observeRenderChanges() {\n    // If no data source has been set, there is nothing to observe for changes.\n    if (!this.dataSource) {\n      return;\n    }\n\n    let dataStream: Observable<T[]|ReadonlyArray<T>>|undefined;\n\n    if (isDataSource(this.dataSource)) {\n      dataStream = this.dataSource.connect(this);\n    } else if (isObservable(this.dataSource)) {\n      dataStream = this.dataSource;\n    } else if (Array.isArray(this.dataSource)) {\n      dataStream = observableOf(this.dataSource);\n    }\n\n    if (dataStream === undefined) {\n      throw getTableUnknownDataSourceError();\n    }\n\n    this._renderChangeSubscription = dataStream.pipe(takeUntil(this._onDestroy)).subscribe(data => {\n      this._data = data || [];\n      this.renderRows();\n    });\n  }\n\n  /**\n   * Clears any existing content in the header row outlet and creates a new embedded view\n   * in the outlet using the header row definition.\n   */\n  private _forceRenderHeaderRows() {\n    // Clear the header row outlet if any content exists.\n    if (this._headerRowOutlet.viewContainer.length > 0) {\n      this._headerRowOutlet.viewContainer.clear();\n    }\n\n    this._headerRowDefs.forEach((def, i) => this._renderRow(this._headerRowOutlet, def, i));\n    this.updateStickyHeaderRowStyles();\n    this.updateStickyColumnStyles();\n  }\n  /**\n   * Clears any existing content in the footer row outlet and creates a new embedded view\n   * in the outlet using the footer row definition.\n   */\n  private _forceRenderFooterRows() {\n    // Clear the footer row outlet if any content exists.\n    if (this._footerRowOutlet.viewContainer.length > 0) {\n      this._footerRowOutlet.viewContainer.clear();\n    }\n\n    this._footerRowDefs.forEach((def, i) => this._renderRow(this._footerRowOutlet, def, i));\n    this.updateStickyFooterRowStyles();\n    this.updateStickyColumnStyles();\n  }\n\n  /** Adds the sticky column styles for the rows according to the columns' stick states. */\n  private _addStickyColumnStyles(rows: HTMLElement[], rowDef: BaseRowDef) {\n    const columnDefs = Array.from(rowDef.columns || []).map(columnName => {\n      const columnDef = this._columnDefsByName.get(columnName);\n      if (!columnDef) {\n        throw getTableUnknownColumnError(columnName);\n      }\n      return columnDef!;\n    });\n    const stickyStartStates = columnDefs.map(columnDef => columnDef.sticky);\n    const stickyEndStates = columnDefs.map(columnDef => columnDef.stickyEnd);\n    this._stickyStyler.updateStickyColumns(rows, stickyStartStates, stickyEndStates);\n  }\n\n  /** Gets the list of rows that have been rendered in the row outlet. */\n  _getRenderedRows(rowOutlet: RowOutlet): HTMLElement[] {\n    const renderedRows: HTMLElement[] = [];\n\n    for (let i = 0; i < rowOutlet.viewContainer.length; i++) {\n      const viewRef = (rowOutlet.viewContainer.get(i)! as EmbeddedViewRef<any>);\n      renderedRows.push(viewRef.rootNodes[0]);\n    }\n\n    return renderedRows;\n  }\n\n  /**\n   * Get the matching row definitions that should be used for this row data. If there is only\n   * one row definition, it is returned. Otherwise, find the row definitions that has a when\n   * predicate that returns true with the data. If none return true, return the default row\n   * definition.\n   */\n  _getRowDefs(data: T, dataIndex: number): CdkRowDef<T>[] {\n    if (this._rowDefs.length == 1) {\n      return [this._rowDefs[0]];\n    }\n\n    let rowDefs: CdkRowDef<T>[] = [];\n    if (this.multiTemplateDataRows) {\n      rowDefs = this._rowDefs.filter(def => !def.when || def.when(dataIndex, data));\n    } else {\n      let rowDef =\n          this._rowDefs.find(def => def.when && def.when(dataIndex, data)) || this._defaultRowDef;\n      if (rowDef) {\n        rowDefs.push(rowDef);\n      }\n    }\n\n    if (!rowDefs.length) {\n      throw getTableMissingMatchingRowDefError(data);\n    }\n\n    return rowDefs;\n  }\n\n  /**\n   * Create the embedded view for the data row template and place it in the correct index location\n   * within the data row view container.\n   */\n  private _insertRow(renderRow: RenderRow<T>, renderIndex: number) {\n    const rowDef = renderRow.rowDef;\n    const context: RowContext<T> = {$implicit: renderRow.data};\n    this._renderRow(this._rowOutlet, rowDef, renderIndex, context);\n  }\n\n  /**\n   * Creates a new row template in the outlet and fills it with the set of cell templates.\n   * Optionally takes a context to provide to the row and cells, as well as an optional index\n   * of where to place the new row template in the outlet.\n   */\n  private _renderRow(\n      outlet: RowOutlet, rowDef: BaseRowDef, index: number, context: RowContext<T> = {}) {\n    // TODO(andrewseguin): enforce that one outlet was instantiated from createEmbeddedView\n    outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);\n\n    for (let cellTemplate of this._getCellTemplates(rowDef)) {\n      if (CdkCellOutlet.mostRecentCellOutlet) {\n        CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updates the index-related context for each row to reflect any changes in the index of the rows,\n   * e.g. first/last/even/odd.\n   */\n  private _updateRowIndexContext() {\n    const viewContainer = this._rowOutlet.viewContainer;\n    for (let renderIndex = 0, count = viewContainer.length; renderIndex < count; renderIndex++) {\n      const viewRef = viewContainer.get(renderIndex) as RowViewRef<T>;\n      const context = viewRef.context as RowContext<T>;\n      context.count = count;\n      context.first = renderIndex === 0;\n      context.last = renderIndex === count - 1;\n      context.even = renderIndex % 2 === 0;\n      context.odd = !context.even;\n\n      if (this.multiTemplateDataRows) {\n        context.dataIndex = this._renderRows[renderIndex].dataIndex;\n        context.renderIndex = renderIndex;\n      } else {\n        context.index = this._renderRows[renderIndex].dataIndex;\n      }\n    }\n  }\n\n  /** Gets the column definitions for the provided row def. */\n  private _getCellTemplates(rowDef: BaseRowDef): TemplateRef<any>[] {\n    if (!rowDef || !rowDef.columns) {\n      return [];\n    }\n    return Array.from(rowDef.columns, columnId => {\n      const column = this._columnDefsByName.get(columnId);\n\n      if (!column) {\n        throw getTableUnknownColumnError(columnId);\n      }\n\n      return rowDef.extractCellTemplate(column);\n    });\n  }\n\n  /** Adds native table sections (e.g. tbody) and moves the row outlets into them. */\n  private _applyNativeTableSections() {\n    const documentFragment = this._document.createDocumentFragment();\n    const sections = [\n      {tag: 'thead', outlets: [this._headerRowOutlet]},\n      {tag: 'tbody', outlets: [this._rowOutlet, this._noDataRowOutlet]},\n      {tag: 'tfoot', outlets: [this._footerRowOutlet]},\n    ];\n\n    for (const section of sections) {\n      const element = this._document.createElement(section.tag);\n      element.setAttribute('role', 'rowgroup');\n\n      for (const outlet of section.outlets) {\n        element.appendChild(outlet.elementRef.nativeElement);\n      }\n\n      documentFragment.appendChild(element);\n    }\n\n    // Use a DocumentFragment so we don't hit the DOM on each iteration.\n    this._elementRef.nativeElement.appendChild(documentFragment);\n  }\n\n  /**\n   * Forces a re-render of the data rows. Should be called in cases where there has been an input\n   * change that affects the evaluation of which rows should be rendered, e.g. toggling\n   * `multiTemplateDataRows` or adding/removing row definitions.\n   */\n  private _forceRenderDataRows() {\n    this._dataDiffer.diff([]);\n    this._rowOutlet.viewContainer.clear();\n    this.renderRows();\n    this.updateStickyColumnStyles();\n  }\n\n  /**\n   * Checks if there has been a change in sticky states since last check and applies the correct\n   * sticky styles. Since checking resets the \"dirty\" state, this should only be performed once\n   * during a change detection and after the inputs are settled (after content check).\n   */\n  private _checkStickyStates() {\n    const stickyCheckReducer = (acc: boolean, d: CdkHeaderRowDef|CdkFooterRowDef|CdkColumnDef) => {\n      return acc || d.hasStickyChanged();\n    };\n\n    // Note that the check needs to occur for every definition since it notifies the definition\n    // that it can reset its dirty state. Using another operator like `some` may short-circuit\n    // remaining definitions and leave them in an unchecked state.\n\n    if (this._headerRowDefs.reduce(stickyCheckReducer, false)) {\n      this.updateStickyHeaderRowStyles();\n    }\n\n    if (this._footerRowDefs.reduce(stickyCheckReducer, false)) {\n      this.updateStickyFooterRowStyles();\n    }\n\n    if (Array.from(this._columnDefsByName.values()).reduce(stickyCheckReducer, false)) {\n      this.updateStickyColumnStyles();\n    }\n  }\n\n  /**\n   * Creates the sticky styler that will be used for sticky rows and columns. Listens\n   * for directionality changes and provides the latest direction to the styler. Re-applies column\n   * stickiness when directionality changes.\n   */\n  private _setupStickyStyler() {\n    const direction: Direction = this._dir ? this._dir.value : 'ltr';\n    this._stickyStyler = new StickyStyler(\n        this._isNativeHtmlTable, this.stickyCssClass, direction, this._platform.isBrowser);\n    (this._dir ? this._dir.change : observableOf<Direction>())\n        .pipe(takeUntil(this._onDestroy))\n        .subscribe(value => {\n          this._stickyStyler.direction = value;\n          this.updateStickyColumnStyles();\n        });\n  }\n\n  /** Filters definitions that belong to this table from a QueryList. */\n  private _getOwnDefs<I extends {_table?: any}>(items: QueryList<I>): I[] {\n    return items.filter(item => !item._table || item._table === this);\n  }\n\n  /** Creates or removes the no data row, depending on whether any data is being shown. */\n  private _updateNoDataRow() {\n    if (this._noDataRow) {\n      const shouldShow = this._rowOutlet.viewContainer.length === 0;\n\n      if (shouldShow !== this._isShowingNoDataRow) {\n        const container = this._noDataRowOutlet.viewContainer;\n        shouldShow ? container.createEmbeddedView(this._noDataRow.templateRef) : container.clear();\n        this._isShowingNoDataRow = shouldShow;\n      }\n    }\n  }\n\n  static ngAcceptInputType_multiTemplateDataRows: BooleanInput;\n}\n\n/** Utility function that gets a merged list of the entries in an array and values of a Set. */\nfunction mergeArrayAndSet<T>(array: T[], set: Set<T>): T[] {\n  return array.concat(Array.from(set));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewChild,\n  ViewEncapsulation,\n  isDevMode,\n} from '@angular/core';\nimport {CdkCellDef, CdkColumnDef, CdkHeaderCellDef} from './cell';\nimport {CdkTable} from './table';\nimport {\n  getTableTextColumnMissingParentTableError,\n  getTableTextColumnMissingNameError,\n} from './table-errors';\nimport {TEXT_COLUMN_OPTIONS, TextColumnOptions} from './tokens';\n\n\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\n@Component({\n  selector: 'cdk-text-column',\n  template: `\n    <ng-container cdkColumnDef>\n      <th cdk-header-cell *cdkHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td cdk-cell *cdkCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n  encapsulation: ViewEncapsulation.None,\n  // Change detection is intentionally not set to OnPush. This component's template will be provided\n  // to the table to be inserted into its view. This is problematic when change detection runs since\n  // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n  // mean's the template in the table's view will not have the updated value (and in fact will cause\n  // an ExpressionChangedAfterItHasBeenCheckedError).\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class CdkTextColumn<T> implements OnDestroy, OnInit {\n  /** Column name that should be used to reference this column. */\n  @Input()\n  get name(): string {\n    return this._name;\n  }\n  set name(name: string) {\n    this._name = name;\n\n    // With Ivy, inputs can be initialized before static query results are\n    // available. In that case, we defer the synchronization until \"ngOnInit\" fires.\n    this._syncColumnDefName();\n  }\n  _name: string;\n\n  /**\n   * Text label that should be used for the column header. If this property is not\n   * set, the header text will default to the column name with its first letter capitalized.\n   */\n  @Input() headerText: string;\n\n  /**\n   * Accessor function to retrieve the data rendered for each cell. If this\n   * property is not set, the data cells will render the value found in the data's property matching\n   * the column's name. For example, if the column is named `id`, then the rendered value will be\n   * value defined by the data's `id` property.\n   */\n  @Input() dataAccessor: (data: T, name: string) => string;\n\n  /** Alignment of the cell values. */\n  @Input() justify: 'start'|'end' = 'start';\n\n  /** @docs-private */\n  @ViewChild(CdkColumnDef, {static: true}) columnDef: CdkColumnDef;\n\n  /**\n   * The column cell is provided to the column during `ngOnInit` with a static query.\n   * Normally, this will be retrieved by the column using `ContentChild`, but that assumes the\n   * column definition was provided in the same view as the table, which is not the case with this\n   * component.\n   * @docs-private\n   */\n  @ViewChild(CdkCellDef, {static: true}) cell: CdkCellDef;\n\n  /**\n   * The column headerCell is provided to the column during `ngOnInit` with a static query.\n   * Normally, this will be retrieved by the column using `ContentChild`, but that assumes the\n   * column definition was provided in the same view as the table, which is not the case with this\n   * component.\n   * @docs-private\n   */\n  @ViewChild(CdkHeaderCellDef, {static: true}) headerCell: CdkHeaderCellDef;\n\n  constructor(\n      @Optional() private _table: CdkTable<T>,\n      @Optional() @Inject(TEXT_COLUMN_OPTIONS) private _options: TextColumnOptions<T>) {\n    this._options = _options || {};\n  }\n\n  ngOnInit() {\n    this._syncColumnDefName();\n\n    if (this.headerText === undefined) {\n      this.headerText = this._createDefaultHeaderText();\n    }\n\n    if (!this.dataAccessor) {\n      this.dataAccessor =\n          this._options.defaultDataAccessor || ((data: T, name: string) => (data as any)[name]);\n    }\n\n    if (this._table) {\n      // Provide the cell and headerCell directly to the table with the static `ViewChild` query,\n      // since the columnDef will not pick up its content by the time the table finishes checking\n      // its content and initializing the rows.\n      this.columnDef.cell = this.cell;\n      this.columnDef.headerCell = this.headerCell;\n      this._table.addColumnDef(this.columnDef);\n    } else {\n      throw getTableTextColumnMissingParentTableError();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._table) {\n      this._table.removeColumnDef(this.columnDef);\n    }\n  }\n\n  /**\n   * Creates a default header text. Use the options' header text transformation function if one\n   * has been provided. Otherwise simply capitalize the column name.\n   */\n  _createDefaultHeaderText() {\n    const name = this.name;\n\n    if (isDevMode() && !name) {\n      throw getTableTextColumnMissingNameError();\n    }\n\n    if (this._options && this._options.defaultHeaderTextTransform) {\n      return this._options.defaultHeaderTextTransform(name);\n    }\n\n    return name[0].toUpperCase() + name.slice(1);\n  }\n\n  /** Synchronizes the column definition name with the text column name. */\n  private _syncColumnDefName() {\n    if (this.columnDef) {\n      this.columnDef.name = this.name;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {HeaderRowOutlet, DataRowOutlet, CdkTable, FooterRowOutlet, NoDataRowOutlet} from './table';\nimport {\n  CdkCellOutlet, CdkFooterRow, CdkFooterRowDef, CdkHeaderRow, CdkHeaderRowDef, CdkRow,\n  CdkRowDef,\n  CdkNoDataRow\n} from './row';\nimport {\n  CdkColumnDef, CdkHeaderCellDef, CdkHeaderCell, CdkCell, CdkCellDef,\n  CdkFooterCellDef, CdkFooterCell\n} from './cell';\nimport {CdkTextColumn} from './text-column';\n\nconst EXPORTED_DECLARATIONS = [\n  CdkTable,\n  CdkRowDef,\n  CdkCellDef,\n  CdkCellOutlet,\n  CdkHeaderCellDef,\n  CdkFooterCellDef,\n  CdkColumnDef,\n  CdkCell,\n  CdkRow,\n  CdkHeaderCell,\n  CdkFooterCell,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkFooterRow,\n  CdkFooterRowDef,\n  DataRowOutlet,\n  HeaderRowOutlet,\n  FooterRowOutlet,\n  CdkTextColumn,\n  CdkNoDataRow,\n  NoDataRowOutlet,\n];\n\n@NgModule({\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS\n\n})\nexport class CdkTableModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './table';\nexport * from './cell';\nexport * from './row';\nexport * from './table-module';\nexport * from './sticky-styler';\nexport * from './can-stick';\nexport * from './text-column';\nexport * from './tokens';\n\n/** Re-export DataSource for a more intuitive experience for users of just the table. */\nexport {DataSource} from '@angular/cdk/collections';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}