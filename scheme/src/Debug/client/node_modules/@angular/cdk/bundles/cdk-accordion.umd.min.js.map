{"version":3,"sources":["src/cdk/cdk-accordion.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","cdk","accordion","core","collections","coercion","rxjs","this","nextId","CdkAccordion","_stateChanges","Subject","_openCloseAllActions","id","_multi","Object","defineProperty","prototype","get","set","multi","coerceBooleanProperty","enumerable","configurable","openAll","_openCloseAll","closeAll","ngOnChanges","changes","next","ngOnDestroy","complete","expanded","decorators","type","Directive","args","selector","exportAs","propDecorators","Input","nextId$1","CdkAccordionItem","_changeDetectorRef","_expansionDispatcher","_this","_openCloseAllSubscription","Subscription","EMPTY","closed","EventEmitter","opened","destroyed","expandedChange","_expanded","_disabled","_removeUniqueSelectionListener","listen","accordionId","_subscribeToOpenCloseAllActions","emit","notify","markForCheck","disabled","unsubscribe","toggle","close","open","subscribe","providers","provide","useValue","undefined","ctorParameters","Optional","SkipSelf","ChangeDetectorRef","UniqueSelectionDispatcher","Output","CdkAccordionModule","NgModule","declarations","value"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/cdk/collections'), require('@angular/cdk/coercion'), require('rxjs')) :\n    typeof define === 'function' && define.amd ? define('@angular/cdk/accordion', ['exports', '@angular/core', '@angular/cdk/collections', '@angular/cdk/coercion', 'rxjs'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.cdk = global.ng.cdk || {}, global.ng.cdk.accordion = {}), global.ng.core, global.ng.cdk.collections, global.ng.cdk.coercion, global.rxjs));\n}(this, (function (exports, core, collections, coercion, rxjs) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Used to generate unique ID for each accordion. */\n    var nextId = 0;\n    /**\n     * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n     */\n    var CdkAccordion = /** @class */ (function () {\n        function CdkAccordion() {\n            /** Emits when the state of the accordion changes */\n            this._stateChanges = new rxjs.Subject();\n            /** Stream that emits true/false when openAll/closeAll is triggered. */\n            this._openCloseAllActions = new rxjs.Subject();\n            /** A readonly id value to use for unique selection coordination. */\n            this.id = \"cdk-accordion-\" + nextId++;\n            this._multi = false;\n        }\n        Object.defineProperty(CdkAccordion.prototype, \"multi\", {\n            /** Whether the accordion should allow multiple expanded accordion items simultaneously. */\n            get: function () { return this._multi; },\n            set: function (multi) { this._multi = coercion.coerceBooleanProperty(multi); },\n            enumerable: false,\n            configurable: true\n        });\n        /** Opens all enabled accordion items in an accordion where multi is enabled. */\n        CdkAccordion.prototype.openAll = function () {\n            this._openCloseAll(true);\n        };\n        /** Closes all enabled accordion items in an accordion where multi is enabled. */\n        CdkAccordion.prototype.closeAll = function () {\n            this._openCloseAll(false);\n        };\n        CdkAccordion.prototype.ngOnChanges = function (changes) {\n            this._stateChanges.next(changes);\n        };\n        CdkAccordion.prototype.ngOnDestroy = function () {\n            this._stateChanges.complete();\n        };\n        CdkAccordion.prototype._openCloseAll = function (expanded) {\n            if (this.multi) {\n                this._openCloseAllActions.next(expanded);\n            }\n        };\n        CdkAccordion.decorators = [\n            { type: core.Directive, args: [{\n                        selector: 'cdk-accordion, [cdkAccordion]',\n                        exportAs: 'cdkAccordion',\n                    },] }\n        ];\n        CdkAccordion.propDecorators = {\n            multi: [{ type: core.Input }]\n        };\n        return CdkAccordion;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Used to generate unique ID for each accordion item. */\n    var nextId$1 = 0;\n    var Éµ0 = undefined;\n    /**\n     * An basic directive expected to be extended and decorated as a component.  Sets up all\n     * events and attributes needed to be managed by a CdkAccordion parent.\n     */\n    var CdkAccordionItem = /** @class */ (function () {\n        function CdkAccordionItem(accordion, _changeDetectorRef, _expansionDispatcher) {\n            var _this = this;\n            this.accordion = accordion;\n            this._changeDetectorRef = _changeDetectorRef;\n            this._expansionDispatcher = _expansionDispatcher;\n            /** Subscription to openAll/closeAll events. */\n            this._openCloseAllSubscription = rxjs.Subscription.EMPTY;\n            /** Event emitted every time the AccordionItem is closed. */\n            this.closed = new core.EventEmitter();\n            /** Event emitted every time the AccordionItem is opened. */\n            this.opened = new core.EventEmitter();\n            /** Event emitted when the AccordionItem is destroyed. */\n            this.destroyed = new core.EventEmitter();\n            /**\n             * Emits whenever the expanded state of the accordion changes.\n             * Primarily used to facilitate two-way binding.\n             * @docs-private\n             */\n            this.expandedChange = new core.EventEmitter();\n            /** The unique AccordionItem id. */\n            this.id = \"cdk-accordion-child-\" + nextId$1++;\n            this._expanded = false;\n            this._disabled = false;\n            /** Unregister function for _expansionDispatcher. */\n            this._removeUniqueSelectionListener = function () { };\n            this._removeUniqueSelectionListener =\n                _expansionDispatcher.listen(function (id, accordionId) {\n                    if (_this.accordion && !_this.accordion.multi &&\n                        _this.accordion.id === accordionId && _this.id !== id) {\n                        _this.expanded = false;\n                    }\n                });\n            // When an accordion item is hosted in an accordion, subscribe to open/close events.\n            if (this.accordion) {\n                this._openCloseAllSubscription = this._subscribeToOpenCloseAllActions();\n            }\n        }\n        Object.defineProperty(CdkAccordionItem.prototype, \"expanded\", {\n            /** Whether the AccordionItem is expanded. */\n            get: function () { return this._expanded; },\n            set: function (expanded) {\n                expanded = coercion.coerceBooleanProperty(expanded);\n                // Only emit events and update the internal value if the value changes.\n                if (this._expanded !== expanded) {\n                    this._expanded = expanded;\n                    this.expandedChange.emit(expanded);\n                    if (expanded) {\n                        this.opened.emit();\n                        /**\n                         * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\n                         * the name value is the id of the accordion.\n                         */\n                        var accordionId = this.accordion ? this.accordion.id : this.id;\n                        this._expansionDispatcher.notify(this.id, accordionId);\n                    }\n                    else {\n                        this.closed.emit();\n                    }\n                    // Ensures that the animation will run when the value is set outside of an `@Input`.\n                    // This includes cases like the open, close and toggle methods.\n                    this._changeDetectorRef.markForCheck();\n                }\n            },\n            enumerable: false,\n            configurable: true\n        });\n        Object.defineProperty(CdkAccordionItem.prototype, \"disabled\", {\n            /** Whether the AccordionItem is disabled. */\n            get: function () { return this._disabled; },\n            set: function (disabled) { this._disabled = coercion.coerceBooleanProperty(disabled); },\n            enumerable: false,\n            configurable: true\n        });\n        /** Emits an event for the accordion item being destroyed. */\n        CdkAccordionItem.prototype.ngOnDestroy = function () {\n            this.opened.complete();\n            this.closed.complete();\n            this.destroyed.emit();\n            this.destroyed.complete();\n            this._removeUniqueSelectionListener();\n            this._openCloseAllSubscription.unsubscribe();\n        };\n        /** Toggles the expanded state of the accordion item. */\n        CdkAccordionItem.prototype.toggle = function () {\n            if (!this.disabled) {\n                this.expanded = !this.expanded;\n            }\n        };\n        /** Sets the expanded state of the accordion item to false. */\n        CdkAccordionItem.prototype.close = function () {\n            if (!this.disabled) {\n                this.expanded = false;\n            }\n        };\n        /** Sets the expanded state of the accordion item to true. */\n        CdkAccordionItem.prototype.open = function () {\n            if (!this.disabled) {\n                this.expanded = true;\n            }\n        };\n        CdkAccordionItem.prototype._subscribeToOpenCloseAllActions = function () {\n            var _this = this;\n            return this.accordion._openCloseAllActions.subscribe(function (expanded) {\n                // Only change expanded state if item is enabled\n                if (!_this.disabled) {\n                    _this.expanded = expanded;\n                }\n            });\n        };\n        CdkAccordionItem.decorators = [\n            { type: core.Directive, args: [{\n                        selector: 'cdk-accordion-item, [cdkAccordionItem]',\n                        exportAs: 'cdkAccordionItem',\n                        providers: [\n                            // Provide CdkAccordion as undefined to prevent nested accordion items from registering\n                            // to the same accordion.\n                            { provide: CdkAccordion, useValue: Éµ0 },\n                        ],\n                    },] }\n        ];\n        CdkAccordionItem.ctorParameters = function () { return [\n            { type: CdkAccordion, decorators: [{ type: core.Optional }, { type: core.SkipSelf }] },\n            { type: core.ChangeDetectorRef },\n            { type: collections.UniqueSelectionDispatcher }\n        ]; };\n        CdkAccordionItem.propDecorators = {\n            closed: [{ type: core.Output }],\n            opened: [{ type: core.Output }],\n            destroyed: [{ type: core.Output }],\n            expandedChange: [{ type: core.Output }],\n            expanded: [{ type: core.Input }],\n            disabled: [{ type: core.Input }]\n        };\n        return CdkAccordionItem;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var CdkAccordionModule = /** @class */ (function () {\n        function CdkAccordionModule() {\n        }\n        CdkAccordionModule.decorators = [\n            { type: core.NgModule, args: [{\n                        exports: [CdkAccordion, CdkAccordionItem],\n                        declarations: [CdkAccordion, CdkAccordionItem],\n                    },] }\n        ];\n        return CdkAccordionModule;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.CdkAccordion = CdkAccordion;\n    exports.CdkAccordionItem = CdkAccordionItem;\n    exports.CdkAccordionModule = CdkAccordionModule;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=cdk-accordion.umd.js.map\n"]}