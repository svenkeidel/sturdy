{"version":3,"file":"button.js","sources":["../../../../../../src/material/button/button.ts","../../../../../../src/material/button/button-module.ts","../../../../../../src/material/button/public-api.ts","../../../../../../src/material/button/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {BooleanInput} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n  AfterViewInit,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  CanColorCtor,\n  CanDisableCtor,\n  CanDisableRippleCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nclass MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nconst _MatButtonMixinBase: CanDisableRippleCtor & CanDisableCtor & CanColorCtor &\n    typeof MatButtonBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n/**\n * Material design button.\n */\n@Component({\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[attr.disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    'class': 'mat-focus-indicator',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements AfterViewInit, OnDestroy, CanDisable, CanColor, CanDisableRipple, FocusableOption {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is present in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (this._getHostElement() as HTMLElement).classList.add(attr);\n      }\n    }\n\n    // Add a class that applies to all buttons. This makes it easier to target if somebody\n    // wants to target all Material buttons. We do it here rather than `host` to ensure that\n    // the class is applied to derived classes.\n    elementRef.nativeElement.classList.add('mat-button-base');\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(origin: FocusOrigin = 'program', options?: FocusOptions): void {\n    this._focusMonitor.focusVia(this._getHostElement(), origin, options);\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_disableRipple: BooleanInput;\n}\n\n/**\n * Material design anchor button.\n */\n@Component({\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    'class': 'mat-focus-indicator',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string) {\n    super(elementRef, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './button-module';\nexport * from './button';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}