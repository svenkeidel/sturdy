{"version":3,"file":"expansion.js","sources":["../../../../../../src/material/expansion/accordion-base.ts","../../../../../../src/material/expansion/expansion-animations.ts","../../../../../../src/material/expansion/expansion-panel-content.ts","../../../../../../src/material/expansion/expansion-panel.ts","../../../../../../src/material/expansion/expansion-panel-header.ts","../../../../../../src/material/expansion/accordion.ts","../../../../../../src/material/expansion/expansion-module.ts","../../../../../../src/material/expansion/public-api.ts","../../../../../../src/material/expansion/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/** MatAccordion's toggle positions. */\nexport type MatAccordionTogglePosition = 'before' | 'after';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** The position of the expansion indicator. */\n  togglePosition: MatAccordionTogglePosition;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\n// Note: Keep this in sync with the Sass variable for the panel header animation.\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ViewChild,\n  InjectionToken,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take, distinctUntilChanged} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {MAT_ACCORDION, MatAccordionBase, MatAccordionTogglePosition} from './accordion-base';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * Object that can be used to override the default options\n * for all of the expansion panels in a module.\n */\nexport interface MatExpansionPanelDefaultOptions {\n  /** Height of the header while the panel is expanded. */\n  expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  collapsedHeight: string;\n\n  /** Whether the toggle indicator should be hidden. */\n  hideToggle: boolean;\n}\n\n/**\n * Injection token that can be used to configure the defalt\n * options for the expansion panel component.\n */\nexport const MAT_EXPANSION_PANEL_DEFAULT_OPTIONS =\n    new InjectionToken<MatExpansionPanelDefaultOptions>('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n  private _document: Document;\n  private _hideToggle = false;\n  private _togglePosition: MatAccordionTogglePosition;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n\n  /** The position of the expansion indicator. */\n  @Input()\n  get togglePosition(): MatAccordionTogglePosition {\n    return this._togglePosition || (this.accordion && this.accordion.togglePosition);\n  }\n  set togglePosition(value: MatAccordionTogglePosition) {\n    this._togglePosition = value;\n  }\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body') _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  /** Stream of body animation done events. */\n  _bodyAnimationDone = new Subject<AnimationEvent>();\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(DOCUMENT) _document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode: string,\n              @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n                  defaultOptions?: MatExpansionPanelDefaultOptions) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      if (event.fromState !== 'void') {\n        if (event.toState === 'expanded') {\n          this.afterExpand.emit();\n        } else if (event.toState === 'collapsed') {\n          this.afterCollapse.emit();\n        }\n      }\n    });\n\n    if (defaultOptions) {\n      this.hideToggle = defaultOptions.hideToggle;\n    }\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return this.expanded && this.accordion.displayMode === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  /** Toggles the expanded state of the expansion panel. */\n  toggle(): void {\n    this.expanded = !this.expanded;\n  }\n\n  /** Sets the expanded state of the expansion panel to false. */\n  close(): void {\n    this.expanded = false;\n  }\n\n  /** Sets the expanded state of the expansion panel to true. */\n  open(): void {\n    this.expanded = true;\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._bodyAnimationDone.complete();\n    this._inputChanges.complete();\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n\n  static ngAcceptInputType_hideToggle: BooleanInput;\n  static ngAcceptInputType_expanded: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  AfterViewInit,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelDefaultOptions,\n  MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,\n} from './expansion-panel';\nimport {MatAccordionTogglePosition} from './accordion-base';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header mat-focus-indicator',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '[class.mat-expansion-toggle-indicator-after]': `_getTogglePosition() === 'after'`,\n    '[class.mat-expansion-toggle-indicator-before]': `_getTogglePosition() === 'before'`,\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[style.height]': '_getHeaderHeight()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n  },\n})\nexport class MatExpansionPanelHeader implements AfterViewInit, OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n          defaultOptions?: MatExpansionPanelDefaultOptions,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    const accordionHideToggleChange = panel.accordion ?\n        panel.accordion._stateChanges.pipe(\n            filter(changes => !!(changes['hideToggle'] || changes['togglePosition']))) :\n        EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription =\n        merge(\n            panel.opened, panel.closed, accordionHideToggleChange,\n            panel._inputChanges.pipe(filter(\n                changes => {\n                  return !!(\n                    changes['hideToggle'] ||\n                    changes['disabled'] ||\n                    changes['togglePosition']);\n                  })))\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    if (defaultOptions) {\n      this.expandedHeight = defaultOptions.expandedHeight;\n      this.collapsedHeight = defaultOptions.collapsedHeight;\n    }\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    if (!this.disabled) {\n      this.panel.toggle();\n    }\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets the toggle position for the header. */\n  _getTogglePosition(): MatAccordionTogglePosition {\n    return this.panel.togglePosition;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /**\n   * Gets the current height of the header. Null if no custom height has been\n   * specified, and if the default height from the stylesheet should be used.\n   */\n  _getHeaderHeight(): string|null {\n    const isExpanded = this._isExpanded();\n    if (isExpanded && this.expandedHeight) {\n      return this.expandedHeight;\n    } else if (!isExpanded && this.collapsedHeight) {\n      return this.collapsedHeight;\n    }\n    return null;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this._toggle();\n        }\n\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program', options?: FocusOptions) {\n    this._focusMonitor.focusVia(this._element, origin, options);\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor.monitor(this._element).subscribe(origin => {\n      if (origin && this.panel.accordion) {\n        this.panel.accordion._handleHeaderFocus(this);\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {HOME, END, hasModifierKey} from '@angular/cdk/keycodes';\nimport {startWith} from 'rxjs/operators';\nimport {\n  MAT_ACCORDION,\n  MatAccordionBase,\n  MatAccordionDisplayMode,\n  MatAccordionTogglePosition\n} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion',\n    // Class binding which is only used by the test harness as there is no other\n    // way for the harness to detect if multiple panel support is enabled.\n    '[class.mat-accordion-multi]': 'this.multi',\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  /** Headers belonging to this accordion. */\n  private _ownHeaders = new QueryList<MatExpansionPanelHeader>();\n\n  /** All headers inside the accordion. Includes headers inside nested accordions. */\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  /** The position of the expansion indicator. */\n  @Input() togglePosition: MatAccordionTogglePosition = 'after';\n\n  ngAfterContentInit() {\n    this._headers.changes\n      .pipe(startWith(this._headers))\n      .subscribe((headers: QueryList<MatExpansionPanelHeader>) => {\n        this._ownHeaders.reset(headers.filter(header => header.panel.accordion === this));\n        this._ownHeaders.notifyOnChanges();\n      });\n\n    this._keyManager = new FocusKeyManager(this._ownHeaders).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const {keyCode} = event;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME) {\n      if (!hasModifierKey(event)) {\n        manager.setFirstItemActive();\n        event.preventDefault();\n      }\n    } else if (keyCode === END) {\n      if (!hasModifierKey(event)) {\n        manager.setLastItemActive();\n        event.preventDefault();\n      }\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n\n  static ngAcceptInputType_hideToggle: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './expansion-module';\nexport * from './accordion';\nexport * from './accordion-base';\nexport * from './expansion-panel';\nexport * from './expansion-panel-header';\nexport * from './expansion-panel-content';\nexport * from './expansion-animations';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}