{"version":3,"file":"slide-toggle.js","sources":["../../../../../../src/material/slide-toggle/slide-toggle-config.ts","../../../../../../src/material/slide-toggle/slide-toggle.ts","../../../../../../src/material/slide-toggle/slide-toggle-required-validator.ts","../../../../../../src/material/slide-toggle/slide-toggle-module.ts","../../../../../../src/material/slide-toggle/public-api.ts","../../../../../../src/material/slide-toggle/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HasTabIndex, HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\n/** @docs-private */\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nclass MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatSlideToggleMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatSlideToggleBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    // Needs to be `-1` so it can still receive programmatic focus.\n    '[attr.tabindex]': 'disabled ? null : -1',\n    '[attr.aria-label]': 'null',\n    '[attr.aria-labelledby]': 'null',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n                                                                        ControlValueAccessor,\n                                                                        CanDisable, CanColor,\n                                                                        HasTabIndex,\n                                                                        CanDisableRipple {\n  private _onChange = (_: any) => {};\n  private _onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef;\n\n  /** Name value will be applied to the input element if present. */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event is always emitted when the user toggles the slide toggle, but this does not mean\n   * the slide toggle's value has changed.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        // Only forward focus manually when it was received programmatically or through the\n        // keyboard. We should not do this for mouse/touch focus for two reasons:\n        // 1. It can prevent clicks from landing in Chrome (see #18269).\n        // 2. They're already handled by the wrapping `label` element.\n        if (focusOrigin === 'keyboard' || focusOrigin === 'program') {\n          this._inputElement.nativeElement.focus();\n        } else if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this._onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n    this.toggleChange.emit();\n\n    // When the slide toggle's config disables toggle change event by setting\n    // `disableToggleValue: true`, the slide toggle's value does not change, and the\n    // checked state of the underlying input needs to be changed back.\n    if (this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this._onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(options?: FocusOptions): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard', options);\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this._onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this._onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n    // slide-toggle component will be only marked for check, but no actual change detection runs\n    // automatically. Instead of going back into the zone in order to trigger a change detection\n    // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n    // we only trigger an explicit change detection for the slide-toggle view and its children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  static ngAcceptInputType_required: BooleanInput;\n  static ngAcceptInputType_checked: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_disableRipple: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatSlideToggleRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material slide-toggle components with the required attribute in a\n * template-driven form. The default validator for required form controls asserts\n * that the control value is not undefined but that is not appropriate for a slide-toggle\n * where the value is always defined.\n *\n * Required slide-toggle form controls are valid when checked.\n */\n@Directive({\n  selector: `mat-slide-toggle[required][formControlName],\n             mat-slide-toggle[required][formControl], mat-slide-toggle[required][ngModel]`,\n  providers: [MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR],\n})\nexport class MatSlideToggleRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatSlideToggle} from './slide-toggle';\nimport {MatSlideToggleRequiredValidator} from './slide-toggle-required-validator';\n\n/** This module is used by both original and MDC-based slide-toggle implementations. */\n@NgModule({\n  exports: [MatSlideToggleRequiredValidator],\n  declarations: [MatSlideToggleRequiredValidator],\n})\n// tslint:disable-next-line:class-name\nexport class _MatSlideToggleRequiredValidatorModule {\n}\n\n@NgModule({\n  imports: [\n    _MatSlideToggleRequiredValidatorModule,\n    MatRippleModule,\n    MatCommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    _MatSlideToggleRequiredValidatorModule,\n    MatSlideToggle,\n    MatCommonModule\n  ],\n  declarations: [MatSlideToggle],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './slide-toggle-module';\nexport * from './slide-toggle';\nexport * from './slide-toggle-config';\nexport * from './slide-toggle-required-validator';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}