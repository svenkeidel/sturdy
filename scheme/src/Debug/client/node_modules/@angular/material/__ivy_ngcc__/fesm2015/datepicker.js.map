{"version":3,"file":"datepicker.js","sources":["../../../../../../src/material/datepicker/datepicker-errors.ts","../../../../../../src/material/datepicker/datepicker-intl.ts","../../../../../../src/material/datepicker/calendar-body.ts","../../../../../../src/material/datepicker/date-selection-model.ts","../../../../../../src/material/datepicker/date-range-selection-strategy.ts","../../../../../../src/material/datepicker/month-view.ts","../../../../../../src/material/datepicker/multi-year-view.ts","../../../../../../src/material/datepicker/year-view.ts","../../../../../../src/material/datepicker/calendar.ts","../../../../../../src/material/datepicker/datepicker-animations.ts","../../../../../../src/material/datepicker/datepicker-base.ts","../../../../../../src/material/datepicker/datepicker.ts","../../../../../../src/material/datepicker/datepicker-input-base.ts","../../../../../../src/material/datepicker/datepicker-input.ts","../../../../../../src/material/datepicker/datepicker-toggle.ts","../../../../../../src/material/datepicker/date-range-input-parts.ts","../../../../../../src/material/datepicker/date-range-picker.ts","../../../../../../src/material/datepicker/date-range-input.ts","../../../../../../src/material/datepicker/datepicker-module.ts","../../../../../../src/material/datepicker/public-api.ts","../../../../../../src/material/datepicker/index.ts"],"names":["observableOf"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n\n  /** Formats a range of years. */\n  formatYearRange(start: string, end: string): string {\n    return `${start} \\u2013 ${end}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n  OnDestroy,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * Extra CSS classes that can be associated with a calendar cell.\n */\nexport type MatCalendarCellCssClasses = string | string[] | Set<string> | {[key: string]: any};\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell<D = any> {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean,\n              public cssClasses: MatCalendarCellCssClasses = {},\n              public compareValue = value,\n              public rawValue?: D) {}\n}\n\n/** Event emitted when a date inside the calendar is triggered as a result of a user action. */\nexport interface MatCalendarUserEvent<D> {\n  value: D;\n  event: Event;\n}\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody implements OnChanges, OnDestroy {\n  /**\n   * Used to skip the next focus event when rendering the preview range.\n   * We need a flag like this, because some browsers fire focus events asynchronously.\n   */\n  private _skipNextFocus: boolean;\n\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** Start value of the selected date range. */\n  @Input() startValue: number;\n\n  /** End value of the selected date range. */\n  @Input() endValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols: number = 7;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell: number = 0;\n\n  /** Whether a range is being selected. */\n  @Input() isRange: boolean = false;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio: number = 1;\n\n  /** Start of the comparison range. */\n  @Input() comparisonStart: number | null;\n\n  /** End of the comparison range. */\n  @Input() comparisonEnd: number | null;\n\n  /** Start of the preview range. */\n  @Input() previewStart: number | null = null;\n\n  /** End of the preview range. */\n  @Input() previewEnd: number | null = null;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<MatCalendarUserEvent<number>> =\n      new EventEmitter<MatCalendarUserEvent<number>>();\n\n  /** Emits when the preview has changed as a result of a user action. */\n  @Output() previewChange = new EventEmitter<MatCalendarUserEvent<MatCalendarCell | null>>();\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  _firstRowOffset: number;\n\n  /** Padding for the individual date cells. */\n  _cellPadding: string;\n\n  /** Width of an individual cell. */\n  _cellWidth: string;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) {\n    _ngZone.runOutsideAngular(() => {\n      const element = _elementRef.nativeElement;\n      element.addEventListener('mouseenter', this._enterHandler, true);\n      element.addEventListener('focus', this._enterHandler, true);\n      element.addEventListener('mouseleave', this._leaveHandler, true);\n      element.addEventListener('blur', this._leaveHandler, true);\n    });\n  }\n\n  /** Called when a cell is clicked. */\n  _cellClicked(cell: MatCalendarCell, event: MouseEvent): void {\n    if (cell.enabled) {\n      this.selectedValueChange.emit({value: cell.value, event});\n    }\n  }\n\n  /** Returns whether a cell should be marked as selected. */\n  _isSelected(cell: MatCalendarCell) {\n    return this.startValue === cell.compareValue || this.endValue === cell.compareValue;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const columnChanges = changes['numCols'];\n    const {rows, numCols} = this;\n\n    if (changes['rows'] || columnChanges) {\n      this._firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n    }\n\n    if (changes['cellAspectRatio'] || columnChanges || !this._cellPadding) {\n      this._cellPadding = `${50 * this.cellAspectRatio / numCols}%`;\n    }\n\n    if (columnChanges || !this._cellWidth) {\n      this._cellWidth = `${100 / numCols}%`;\n    }\n  }\n\n  ngOnDestroy() {\n    const element = this._elementRef.nativeElement;\n    element.removeEventListener('mouseenter', this._enterHandler, true);\n    element.removeEventListener('focus', this._enterHandler, true);\n    element.removeEventListener('mouseleave', this._leaveHandler, true);\n    element.removeEventListener('blur', this._leaveHandler, true);\n  }\n\n  /** Returns whether a cell is active. */\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell(movePreview = true) {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        const activeCell: HTMLElement | null =\n            this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n        if (activeCell) {\n          if (!movePreview) {\n            this._skipNextFocus = true;\n          }\n\n          activeCell.focus();\n        }\n      });\n    });\n  }\n\n  /** Gets whether a value is the start of the main range. */\n  _isRangeStart(value: number) {\n    return isStart(value, this.startValue, this.endValue);\n  }\n\n  /** Gets whether a value is the end of the main range. */\n  _isRangeEnd(value: number) {\n    return isEnd(value, this.startValue, this.endValue);\n  }\n\n  /** Gets whether a value is within the currently-selected range. */\n  _isInRange(value: number): boolean {\n    return isInRange(value, this.startValue, this.endValue, this.isRange);\n  }\n\n  /** Gets whether a value is the start of the comparison range. */\n  _isComparisonStart(value: number) {\n    return isStart(value, this.comparisonStart, this.comparisonEnd);\n  }\n\n  /** Whether the cell is a start bridge cell between the main and comparison ranges. */\n  _isComparisonBridgeStart(value: number, rowIndex: number, colIndex: number) {\n    if (!this._isComparisonStart(value) || this._isRangeStart(value) || !this._isInRange(value)) {\n      return false;\n    }\n\n    let previousCell: MatCalendarCell | undefined = this.rows[rowIndex][colIndex - 1];\n\n    if (!previousCell) {\n      const previousRow = this.rows[rowIndex - 1];\n      previousCell = previousRow && previousRow[previousRow.length - 1];\n    }\n\n    return previousCell && !this._isRangeEnd(previousCell.compareValue);\n  }\n\n  /** Whether the cell is an end bridge cell between the main and comparison ranges. */\n  _isComparisonBridgeEnd(value: number, rowIndex: number, colIndex: number) {\n    if (!this._isComparisonEnd(value) || this._isRangeEnd(value) || !this._isInRange(value)) {\n      return false;\n    }\n\n    let nextCell: MatCalendarCell | undefined = this.rows[rowIndex][colIndex + 1];\n\n    if (!nextCell) {\n      const nextRow = this.rows[rowIndex + 1];\n      nextCell = nextRow && nextRow[0];\n    }\n\n    return nextCell && !this._isRangeStart(nextCell.compareValue);\n  }\n\n  /** Gets whether a value is the end of the comparison range. */\n  _isComparisonEnd(value: number) {\n    return isEnd(value, this.comparisonStart, this.comparisonEnd);\n  }\n\n  /** Gets whether a value is within the current comparison range. */\n  _isInComparisonRange(value: number) {\n    return isInRange(value, this.comparisonStart, this.comparisonEnd, this.isRange);\n  }\n\n  /** Gets whether a value is the start of the preview range. */\n  _isPreviewStart(value: number) {\n    return isStart(value, this.previewStart, this.previewEnd);\n  }\n\n  /** Gets whether a value is the end of the preview range. */\n  _isPreviewEnd(value: number) {\n    return isEnd(value, this.previewStart, this.previewEnd);\n  }\n\n  /** Gets whether a value is inside the preview range. */\n  _isInPreview(value: number) {\n    return isInRange(value, this.previewStart, this.previewEnd, this.isRange);\n  }\n\n  /**\n   * Event handler for when the user enters an element\n   * inside the calendar body (e.g. by hovering in or focus).\n   */\n  private _enterHandler = (event: Event) => {\n    if (this._skipNextFocus && event.type === 'focus') {\n      this._skipNextFocus = false;\n      return;\n    }\n\n    // We only need to hit the zone when we're selecting a range.\n    if (event.target && this.isRange) {\n      const cell = this._getCellFromElement(event.target as HTMLElement);\n\n      if (cell) {\n        this._ngZone.run(() => this.previewChange.emit({value: cell.enabled ? cell : null, event}));\n      }\n    }\n  }\n\n  /**\n   * Event handler for when the user's pointer leaves an element\n   * inside the calendar body (e.g. by hovering out or blurring).\n   */\n  private _leaveHandler = (event: Event) => {\n    // We only need to hit the zone when we're selecting a range.\n    if (this.previewEnd !== null && this.isRange) {\n      // Only reset the preview end value when leaving cells. This looks better, because\n      // we have a gap between the cells and the rows and we don't want to remove the\n      // range just for it to show up again when the user moves a few pixels to the side.\n      if (event.target && isTableCell(event.target as HTMLElement)) {\n        this._ngZone.run(() => this.previewChange.emit({value: null, event}));\n      }\n    }\n  }\n\n  /** Finds the MatCalendarCell that corresponds to a DOM node. */\n  private _getCellFromElement(element: HTMLElement): MatCalendarCell | null {\n    let cell: HTMLElement | undefined;\n\n    if (isTableCell(element)) {\n      cell = element;\n    } else if (isTableCell(element.parentNode!)) {\n      cell = element.parentNode as HTMLElement;\n    }\n\n    if (cell) {\n      const row = cell.getAttribute('data-mat-row');\n      const col = cell.getAttribute('data-mat-col');\n\n      if (row && col) {\n        return this.rows[parseInt(row)][parseInt(col)];\n      }\n    }\n\n    return null;\n  }\n\n}\n\n/** Checks whether a node is a table cell element. */\nfunction isTableCell(node: Node): node is HTMLTableCellElement {\n  return node.nodeName === 'TD';\n}\n\n/** Checks whether a value is the start of a range. */\nfunction isStart(value: number, start: number | null, end: number | null): boolean {\n  return end !== null && start !== end && value < end && value === start;\n}\n\n/** Checks whether a value is the end of a range. */\nfunction isEnd(value: number, start: number | null, end: number | null): boolean {\n  return start !== null && start !== end && value >= start && value === end;\n}\n\n/** Checks whether a value is inside of a range. */\nfunction isInRange(value: number,\n                   start: number | null,\n                   end: number | null,\n                   rangeEnabled: boolean): boolean {\n  return rangeEnabled && start !== null && end !== null && start !== end &&\n         value >= start && value <= end;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FactoryProvider, Injectable, Optional, SkipSelf, OnDestroy, Directive} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** A class representing a range of dates. */\nexport class DateRange<D> {\n  /**\n   * Ensures that objects with a `start` and `end` property can't be assigned to a variable that\n   * expects a `DateRange`\n   */\n  // tslint:disable-next-line:no-unused-variable\n  private _disableStructuralEquivalency: never;\n\n  constructor(\n    /** The start date of the range. */\n    readonly start: D | null,\n    /** The end date of the range. */\n    readonly end: D | null) {}\n}\n\n/**\n * Conditionally picks the date type, if a DateRange is passed in.\n * @docs-private\n */\nexport type ExtractDateTypeFromSelection<T> = T extends DateRange<infer D> ? D : NonNullable<T>;\n\n/** Event emitted by the date selection model when its selection changes. */\nexport interface DateSelectionModelChange<S> {\n  /** New value for the selection. */\n  selection: S;\n\n  /** Object that triggered the change. */\n  source: unknown;\n}\n\n/** A selection model containing a date selection. */\n@Directive()\nexport abstract class MatDateSelectionModel<S, D = ExtractDateTypeFromSelection<S>>\n    implements OnDestroy {\n  private _selectionChanged = new Subject<DateSelectionModelChange<S>>();\n\n  /** Emits when the selection has changed. */\n  selectionChanged: Observable<DateSelectionModelChange<S>> = this._selectionChanged.asObservable();\n\n  protected constructor(\n    /** The current selection. */\n    readonly selection: S,\n    protected _adapter: DateAdapter<D>) {\n    this.selection = selection;\n  }\n\n  /**\n   * Updates the current selection in the model.\n   * @param value New selection that should be assigned.\n   * @param source Object that triggered the selection change.\n   */\n  updateSelection(value: S, source: unknown) {\n    (this as {selection: S}).selection = value;\n    this._selectionChanged.next({selection: value, source});\n  }\n\n  ngOnDestroy() {\n    this._selectionChanged.complete();\n  }\n\n  protected _isValidDateInstance(date: D): boolean {\n    return this._adapter.isDateInstance(date) && this._adapter.isValid(date);\n  }\n\n  /** Adds a date to the current selection. */\n  abstract add(date: D | null): void;\n\n  /** Checks whether the current selection is valid. */\n  abstract isValid(): boolean;\n\n  /** Checks whether the current selection is complete. */\n  abstract isComplete(): boolean;\n}\n\n/**  A selection model that contains a single date. */\n@Injectable()\nexport class MatSingleDateSelectionModel<D> extends MatDateSelectionModel<D | null, D> {\n  constructor(adapter: DateAdapter<D>) {\n    super(null, adapter);\n  }\n\n  /**\n   * Adds a date to the current selection. In the case of a single date selection, the added date\n   * simply overwrites the previous selection\n   */\n  add(date: D | null) {\n    super.updateSelection(date, this);\n  }\n\n  /** Checks whether the current selection is valid. */\n  isValid(): boolean {\n    return this.selection != null && this._isValidDateInstance(this.selection);\n  }\n\n  /**\n   * Checks whether the current selection is complete. In the case of a single date selection, this\n   * is true if the current selection is not null.\n   */\n  isComplete() {\n    return this.selection != null;\n  }\n}\n\n/**  A selection model that contains a date range. */\n@Injectable()\nexport class MatRangeDateSelectionModel<D> extends MatDateSelectionModel<DateRange<D>, D> {\n  constructor(adapter: DateAdapter<D>) {\n    super(new DateRange<D>(null, null), adapter);\n  }\n\n  /**\n   * Adds a date to the current selection. In the case of a date range selection, the added date\n   * fills in the next `null` value in the range. If both the start and the end already have a date,\n   * the selection is reset so that the given date is the new `start` and the `end` is null.\n   */\n  add(date: D | null): void {\n    let {start, end} = this.selection;\n\n    if (start == null) {\n      start = date;\n    } else if (end == null) {\n      end = date;\n    } else {\n      start = date;\n      end = null;\n    }\n\n    super.updateSelection(new DateRange<D>(start, end), this);\n  }\n\n  /** Checks whether the current selection is valid. */\n  isValid(): boolean {\n    const {start, end} = this.selection;\n\n    // Empty ranges are valid.\n    if (start == null && end == null) {\n      return true;\n    }\n\n    // Complete ranges are only valid if both dates are valid and the start is before the end.\n    if (start != null && end != null) {\n      return this._isValidDateInstance(start) && this._isValidDateInstance(end) &&\n             this._adapter.compareDate(start, end) <= 0;\n    }\n\n    // Partial ranges are valid if the start/end is valid.\n    return (start == null || this._isValidDateInstance(start)) &&\n           (end == null || this._isValidDateInstance(end));\n  }\n\n  /**\n   * Checks whether the current selection is complete. In the case of a date range selection, this\n   * is true if the current selection has a non-null `start` and `end`.\n   */\n  isComplete(): boolean {\n    return this.selection.start != null && this.selection.end != null;\n  }\n}\n\n/** @docs-private */\nexport function MAT_SINGLE_DATE_SELECTION_MODEL_FACTORY(\n    parent: MatSingleDateSelectionModel<unknown>, adapter: DateAdapter<unknown>) {\n  return parent || new MatSingleDateSelectionModel(adapter);\n}\n\n/** Used to provide a single selection model to a component. */\nexport const MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER: FactoryProvider = {\n  provide: MatDateSelectionModel,\n  deps: [[new Optional(), new SkipSelf(), MatDateSelectionModel], DateAdapter],\n  useFactory: MAT_SINGLE_DATE_SELECTION_MODEL_FACTORY,\n};\n\n\n/** @docs-private */\nexport function MAT_RANGE_DATE_SELECTION_MODEL_FACTORY(\n    parent: MatSingleDateSelectionModel<unknown>, adapter: DateAdapter<unknown>) {\n  return parent || new MatRangeDateSelectionModel(adapter);\n}\n\n/** Used to provide a range selection model to a component. */\nexport const MAT_RANGE_DATE_SELECTION_MODEL_PROVIDER: FactoryProvider = {\n  provide: MatDateSelectionModel,\n  deps: [[new Optional(), new SkipSelf(), MatDateSelectionModel], DateAdapter],\n  useFactory: MAT_RANGE_DATE_SELECTION_MODEL_FACTORY,\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {DateRange} from './date-selection-model';\n\n/** Injection token used to customize the date range selection behavior. */\nexport const MAT_DATE_RANGE_SELECTION_STRATEGY =\n    new InjectionToken<MatDateRangeSelectionStrategy<any>>('MAT_DATE_RANGE_SELECTION_STRATEGY');\n\n/** Object that can be provided in order to customize the date range selection behavior. */\nexport interface MatDateRangeSelectionStrategy<D> {\n  /**\n   * Called when the user has finished selecting a value.\n   * @param date Date that was selected. Will be null if the user cleared the selection.\n   * @param currentRange Range that is currently show in the calendar.\n   * @param event DOM event that triggered the selection. Currently only corresponds to a `click`\n   *    event, but it may get expanded in the future.\n   */\n  selectionFinished(date: D | null, currentRange: DateRange<D>, event: Event): DateRange<D>;\n\n  /**\n   * Called when the user has activated a new date (e.g. by hovering over\n   * it or moving focus) and the calendar tries to display a date range.\n   *\n   * @param activeDate Date that the user has activated. Will be null if the user moved\n   *    focus to an element that's no a calendar cell.\n   * @param currentRange Range that is currently shown in the calendar.\n   * @param event DOM event that caused the preview to be changed. Will be either a\n   *    `mouseenter`/`mouseleave` or `focus`/`blur` depending on how the user is navigating.\n   */\n  createPreview(activeDate: D | null, currentRange: DateRange<D>, event: Event): DateRange<D>;\n}\n\n/** Provides the default date range selection behavior. */\n@Injectable()\nexport class DefaultMatCalendarRangeStrategy<D> implements MatDateRangeSelectionStrategy<D> {\n  constructor(private _dateAdapter: DateAdapter<D>) {}\n\n  selectionFinished(date: D, currentRange: DateRange<D>) {\n    let {start, end} = currentRange;\n\n    if (start == null) {\n      start = date;\n    } else if (end == null && date && this._dateAdapter.compareDate(date, start) >= 0) {\n      end = date;\n    } else {\n      start = date;\n      end = null;\n    }\n\n    return new DateRange<D>(start, end);\n  }\n\n  createPreview(activeDate: D | null, currentRange: DateRange<D>) {\n    let start: D | null = null;\n    let end: D | null = null;\n\n    if (currentRange.start && !currentRange.end && activeDate) {\n      start = currentRange.start;\n      end = activeDate;\n    }\n\n    return new DateRange<D>(start, end);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n  ESCAPE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n  OnDestroy,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  MatCalendarBody,\n  MatCalendarCell,\n  MatCalendarCellCssClasses,\n  MatCalendarUserEvent,\n} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {Subscription} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {DateRange} from './date-selection-model';\nimport {\n  MatDateRangeSelectionStrategy,\n  MAT_DATE_RANGE_SELECTION_STRATEGY,\n} from './date-range-selection-strategy';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit, OnDestroy {\n  private _rerenderSubscription = Subscription.EMPTY;\n\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): DateRange<D> | D | null { return this._selected; }\n  set selected(value: DateRange<D> | D | null) {\n    if (value instanceof DateRange) {\n      this._selected = value;\n    } else {\n      this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n\n    this._setRanges(this._selected);\n  }\n  private _selected: DateRange<D> | D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Start of the comparison range. */\n  @Input() comparisonStart: D | null;\n\n  /** End of the comparison range. */\n  @Input() comparisonEnd: D | null;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<MatCalendarUserEvent<D | null>> =\n      new EventEmitter<MatCalendarUserEvent<D | null>>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /** Start value of the currently-shown date range. */\n  _rangeStart: number | null;\n\n  /** End value of the currently-shown date range. */\n  _rangeEnd: number | null;\n\n  /** Start value of the currently-shown comparison date range. */\n  _comparisonRangeStart: number | null;\n\n  /** End value of the currently-shown comparison date range. */\n  _comparisonRangeEnd: number | null;\n\n  /** Start of the preview range. */\n  _previewStart: number | null;\n\n  /** End of the preview range. */\n  _previewEnd: number | null;\n\n  /** Whether the user is currently selecting a range of dates. */\n  _isRange: boolean;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality,\n              @Inject(MAT_DATE_RANGE_SELECTION_STRATEGY) @Optional()\n                  private _rangeStrategy?: MatDateRangeSelectionStrategy<D>) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._rerenderSubscription = this._dateAdapter.localeChanges\n      .pipe(startWith(null))\n      .subscribe(() => this._init());\n  }\n\n  ngOnDestroy() {\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(event: MatCalendarUserEvent<number>) {\n    const date = event.value;\n    const selectedYear = this._dateAdapter.getYear(this.activeDate);\n    const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n    const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n    let rangeStartDate: number | null;\n    let rangeEndDate: number | null;\n\n    if (this._selected instanceof DateRange) {\n      rangeStartDate = this._getDateInCurrentMonth(this._selected.start);\n      rangeEndDate = this._getDateInCurrentMonth(this._selected.end);\n    } else {\n      rangeStartDate = rangeEndDate = this._getDateInCurrentMonth(this._selected);\n    }\n\n    if (rangeStartDate !== date || rangeEndDate !== date) {\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit({value: selectedDate, event: event.event});\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n      case SPACE:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected({value: this._dateAdapter.getDate(this._activeDate), event});\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      case ESCAPE:\n        // Abort the current range selection if the user presses escape mid-selection.\n        if (this._previewEnd != null) {\n          this._previewStart = this._previewEnd = null;\n          this.selectedChange.emit(null);\n          this._userSelection.emit({value: null, event});\n          event.preventDefault();\n          event.stopPropagation(); // Prevents the overlay from closing.\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._setRanges(this.selected);\n    this._todayDate = this._getCellCompareValue(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._initWeekdays();\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell(movePreview?: boolean) {\n    this._matCalendarBody._focusActiveCell(movePreview);\n  }\n\n  /** Called when the user has activated a new cell and the preview needs to be updated. */\n  _previewChanged({event, value: cell}: MatCalendarUserEvent<MatCalendarCell<D> | null>) {\n    if (this._rangeStrategy) {\n      // We can assume that this will be a range, because preview\n      // events aren't fired for single date selections.\n      const value = cell ? cell.rawValue! : null;\n      const previewRange =\n          this._rangeStrategy.createPreview(value, this.selected as DateRange<D>, event);\n      this._previewStart = this._getCellCompareValue(previewRange.start);\n      this._previewEnd = this._getCellCompareValue(previewRange.end);\n\n      // Note that here we need to use `detectChanges`, rather than `markForCheck`, because\n      // the way `_focusActiveCell` is set up at the moment makes it fire at the wrong time\n      // when navigating one month back using the keyboard which will cause this handler\n      // to throw a \"changed after checked\" error when updating the preview state.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Initializes the weekdays. */\n  private _initWeekdays() {\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n        return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\n\n      this._weeks[this._weeks.length - 1].push(new MatCalendarCell<D>(i + 1, dateNames[i],\n          ariaLabel, enabled, cellClasses, this._getCellCompareValue(date)!, date));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0) &&\n        (!this.dateFilter || this.dateFilter(date));\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /** Gets the value that will be used to one cell to another. */\n  private _getCellCompareValue(date: D | null): number | null {\n    if (date) {\n      // We use the time since the Unix epoch to compare dates in this view, rather than the\n      // cell values, because we need to support ranges that span across multiple months/years.\n      const year = this._dateAdapter.getYear(date);\n      const month = this._dateAdapter.getMonth(date);\n      const day = this._dateAdapter.getDate(date);\n      return new Date(year, month, day).getTime();\n    }\n\n    return null;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n\n  /** Sets the current range based on a model value. */\n  private _setRanges(selectedValue: DateRange<D> | D | null) {\n    if (selectedValue instanceof DateRange) {\n      this._rangeStart = this._getCellCompareValue(selectedValue.start);\n      this._rangeEnd = this._getCellCompareValue(selectedValue.end);\n      this._isRange = true;\n    } else {\n      this._rangeStart = this._rangeEnd = this._getCellCompareValue(selectedValue);\n      this._isRange = false;\n    }\n\n    this._comparisonRangeStart = this._getCellCompareValue(this.comparisonStart);\n    this._comparisonRangeEnd = this._getCellCompareValue(this.comparisonEnd);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell, MatCalendarUserEvent} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {Subscription} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {DateRange} from './date-selection-model';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit, OnDestroy {\n  private _rerenderSubscription = Subscription.EMPTY;\n\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n\n    if (!isSameMultiYearView(\n      this._dateAdapter, oldActiveDate, this._activeDate, this.minDate, this.maxDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): DateRange<D> | D | null { return this._selected; }\n  set selected(value: DateRange<D> | D | null) {\n    if (value instanceof DateRange) {\n      this._selected = value;\n    } else {\n      this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n\n    this._setSelectedYear(value);\n  }\n  private _selected: DateRange<D> | D | null;\n\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._rerenderSubscription = this._dateAdapter.localeChanges\n      .pipe(startWith(null))\n      .subscribe(() => this._init());\n  }\n\n  ngOnDestroy() {\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n\n    // We want a range years such that we maximize the number of\n    // enabled dates visible at once. This prevents issues where the minimum year\n    // is the last item of a page OR the maximum year is the first item of a page.\n\n    // The offset from the active year to the \"slot\" for the starting year is the\n    // *actual* first rendered year in the multi-year view.\n    const activeYear = this._dateAdapter.getYear(this._activeDate);\n    const minYearOfPage = activeYear - getActiveOffset(\n      this._dateAdapter, this.activeDate, this.minDate, this.maxDate);\n\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(minYearOfPage + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(event: MatCalendarUserEvent<number>) {\n    const year = event.value;\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n          -getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n          yearsPerPage - getActiveOffset(\n            this._dateAdapter, this.activeDate, this.minDate, this.maxDate) - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n      case SPACE:\n        this._yearSelected({value: this._dateAdapter.getYear(this._activeDate), event});\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate);\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n\n  /** Sets the currently-highlighted year based on a model value. */\n  private _setSelectedYear(value: DateRange<D> | D | null) {\n    this._selectedYear = null;\n\n    if (value instanceof DateRange) {\n      const displayValue = value.start || value.end;\n\n      if (displayValue) {\n        this._selectedYear = this._dateAdapter.getYear(displayValue);\n      }\n    } else if (value) {\n      this._selectedYear = this._dateAdapter.getYear(value);\n    }\n  }\n}\n\nexport function isSameMultiYearView<D>(\n  dateAdapter: DateAdapter<D>, date1: D, date2: D, minDate: D | null, maxDate: D | null): boolean {\n  const year1 = dateAdapter.getYear(date1);\n  const year2 = dateAdapter.getYear(date2);\n  const startingYear = getStartingYear(dateAdapter, minDate, maxDate);\n  return Math.floor((year1 - startingYear) / yearsPerPage) ===\n          Math.floor((year2 - startingYear) / yearsPerPage);\n}\n\n/**\n * When the multi-year view is first opened, the active year will be in view.\n * So we compute how many years are between the active year and the *slot* where our\n * \"startingYear\" will render when paged into view.\n */\nexport function getActiveOffset<D>(\n  dateAdapter: DateAdapter<D>, activeDate: D, minDate: D | null, maxDate: D | null): number {\n  const activeYear = dateAdapter.getYear(activeDate);\n  return euclideanModulo((activeYear - getStartingYear(dateAdapter, minDate, maxDate)),\n    yearsPerPage);\n}\n\n/**\n * We pick a \"starting\" year such that either the maximum year would be at the end\n * or the minimum year would be at the beginning of a page.\n */\nfunction getStartingYear<D>(\n  dateAdapter: DateAdapter<D>, minDate: D | null, maxDate: D | null): number {\n  let startingYear = 0;\n  if (maxDate) {\n    const maxYear = dateAdapter.getYear(maxDate);\n    startingYear = maxYear - yearsPerPage + 1;\n  } else if (minDate) {\n    startingYear = dateAdapter.getYear(minDate);\n  }\n  return startingYear;\n}\n\n/** Gets remainder that is non-negative, even if first number is negative */\nfunction euclideanModulo (a: number, b: number): number {\n  return (a % b + b) % b;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell, MatCalendarUserEvent} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {Subscription} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {DateRange} from './date-selection-model';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit, OnDestroy {\n  private _rerenderSubscription = Subscription.EMPTY;\n\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): DateRange<D> | D | null { return this._selected; }\n  set selected(value: DateRange<D> | D | null) {\n    if (value instanceof DateRange) {\n      this._selected = value;\n    } else {\n      this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n\n    this._setSelectedMonth(value);\n  }\n  private _selected: DateRange<D> | D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._rerenderSubscription = this._dateAdapter.localeChanges\n      .pipe(startWith(null))\n      .subscribe(() => this._init());\n  }\n\n  ngOnDestroy() {\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(event: MatCalendarUserEvent<number>) {\n    const month = event.value;\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n      case SPACE:\n        this._monthSelected({value: this._dateAdapter.getMonth(this._activeDate), event});\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._setSelectedMonth(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n\n  /** Sets the currently-selected month based on a model value. */\n  private _setSelectedMonth(value: DateRange<D> | D | null) {\n    if (value instanceof DateRange) {\n      this._selectedMonth = this._getMonthInCurrentYear(value.start) ||\n                            this._getMonthInCurrentYear(value.end);\n    } else {\n      this._selectedMonth = this._getMonthInCurrentYear(value);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  DateAdapter,\n  MAT_DATE_FORMATS,\n  MatDateFormats,\n} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {MatCalendarCellCssClasses, MatCalendarUserEvent} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {\n  getActiveOffset,\n  isSameMultiYearView,\n  MatMultiYearView,\n  yearsPerPage\n} from './multi-year-view';\nimport {MatYearView} from './year-view';\nimport {MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER, DateRange} from './date-selection-model';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n\n    // The offset from the active year to the \"slot\" for the starting year is the\n    // *actual* first rendered year in the multi-year view, and the last year is\n    // just yearsPerPage - 1 away.\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const minYearOfPage = activeYear - getActiveOffset(\n      this._dateAdapter, this.calendar.activeDate, this.calendar.minDate, this.calendar.maxDate);\n    const maxYearOfPage = minYearOfPage + yearsPerPage - 1;\n    const minYearName =\n      this._dateAdapter.getYearName(this._dateAdapter.createDate(minYearOfPage, 0, 1));\n    const maxYearName =\n      this._dateAdapter.getYearName(this._dateAdapter.createDate(maxYearOfPage, 0, 1));\n    return this._intl.formatYearRange(minYearName, maxYearName);\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return isSameMultiYearView(\n      this._dateAdapter, date1, date2, this.calendar.minDate, this.calendar.maxDate);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER]\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): DateRange<D> | D | null { return this._selected; }\n  set selected(value: DateRange<D> | D | null) {\n    if (value instanceof DateRange) {\n      this._selected = value;\n    } else {\n      this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n  }\n  private _selected: DateRange<D> | D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Start of the comparison range. */\n  @Input() comparisonStart: D | null;\n\n  /** End of the comparison range. */\n  @Input() comparisonEnd: D | null;\n\n  /**\n   * Emits when the currently selected date changes.\n   * @breaking-change 11.0.0 Emitted value to change to `D | null`.\n   */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<MatCalendarUserEvent<D | null>> =\n      new EventEmitter<MatCalendarUserEvent<D | null>>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n    this._changeDetectorRef.markForCheck();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n    this._changeDetectorRef.markForCheck();\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change =\n        changes['minDate'] || changes['maxDate'] || changes['dateFilter'];\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell(false);\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    const currentView = this.currentView;\n    let view: MatMonthView<D> | MatYearView<D> | MatMultiYearView<D>;\n\n    if (currentView === 'month') {\n      view = this.monthView;\n    } else if (currentView === 'year') {\n      view = this.yearView;\n    } else {\n      view = this.multiYearView;\n    }\n\n    view._init();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(event: MatCalendarUserEvent<D | null>): void {\n    const date = event.value;\n\n    if (this.selected instanceof DateRange ||\n        (date && !this._dateAdapter.sameDate(date, this.selected))) {\n      // @breaking-change 11.0.0 remove non-null assertion\n      // once the `selectedChange` is allowed to be null.\n      this.selectedChange.emit(date!);\n    }\n\n    this._userSelection.emit(event);\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material datepicker.\n * @docs-private\n */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(1, 0.8)'\n    })),\n    transition('void => enter',  animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n      opacity: 1,\n      transform: 'scale(1, 1)'\n    }))),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  FlexibleConnectedPositionStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  Directive,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  DateAdapter,\n  mixinColor,\n  ThemePalette,\n} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Observable} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatCalendarCellCssClasses, MatCalendarUserEvent} from './calendar-body';\nimport {DateFilterFn} from './datepicker-input-base';\nimport {\n  ExtractDateTypeFromSelection,\n  MatDateSelectionModel,\n  DateRange,\n} from './date-selection-model';\nimport {\n  MAT_DATE_RANGE_SELECTION_STRATEGY,\n  MatDateRangeSelectionStrategy,\n} from './date-range-selection-strategy';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** Possible positions for the datepicker dropdown along the X axis. */\nexport type DatepickerDropdownPositionX = 'start' | 'end';\n\n/** Possible positions for the datepicker dropdown along the Y axis. */\nexport type DatepickerDropdownPositionY = 'above' | 'below';\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nclass MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nconst _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase =\n    mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '_animationState',\n    '(@transformPanel.done)': '_animationDone.next()',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<S, D = ExtractDateTypeFromSelection<S>>\n  extends _MatDatepickerContentMixinBase implements AfterViewInit, OnDestroy, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepickerBase<any, S, D>;\n\n  /** Start of the comparison range. */\n  comparisonStart: D | null;\n\n  /** End of the comparison range. */\n  comparisonEnd: D | null;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  /** Current state of the animation. */\n  _animationState: 'enter' | 'void' = 'enter';\n\n  /** Emits when an animation has finished. */\n  _animationDone = new Subject<void>();\n\n  constructor(\n    elementRef: ElementRef,\n    /**\n     * @deprecated `_changeDetectorRef`, `_model` and `_rangeSelectionStrategy`\n     * parameters to become required.\n     * @breaking-change 11.0.0\n     */\n    private _changeDetectorRef?: ChangeDetectorRef,\n    private _model?: MatDateSelectionModel<S, D>,\n    private _dateAdapter?: DateAdapter<D>,\n    @Optional() @Inject(MAT_DATE_RANGE_SELECTION_STRATEGY)\n        private _rangeSelectionStrategy?: MatDateRangeSelectionStrategy<D>) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n\n  ngOnDestroy() {\n    this._animationDone.complete();\n  }\n\n  _handleUserSelection(event: MatCalendarUserEvent<D | null>) {\n    // @breaking-change 11.0.0 Remove null checks for _model,\n    // _rangeSelectionStrategy and _dateAdapter.\n    if (this._model && this._dateAdapter) {\n      const selection = this._model.selection;\n      const value = event.value;\n      const isRange = selection instanceof DateRange;\n\n      // If we're selecting a range and we have a selection strategy, always pass the value through\n      // there. Otherwise don't assign null values to the model, unless we're selecting a range.\n      // A null value when picking a range means that the user cancelled the selection (e.g. by\n      // pressing escape), whereas when selecting a single value it means that the value didn't\n      // change. This isn't very intuitive, but it's here for backwards-compatibility.\n      if (isRange && this._rangeSelectionStrategy) {\n        const newSelection = this._rangeSelectionStrategy.selectionFinished(value,\n            selection as unknown as DateRange<D>, event.event);\n        this._model.updateSelection(newSelection as unknown as S, this);\n      } else if (value && (isRange ||\n                !this._dateAdapter.sameDate(value, selection as unknown as D))) {\n        this._model.add(value);\n      }\n    }\n\n    if (!this._model || this._model.isComplete()) {\n      this.datepicker.close();\n    }\n  }\n\n  _startExitAnimation() {\n    this._animationState = 'void';\n\n    // @breaking-change 11.0.0 Remove null check for `_changeDetectorRef`.\n    if (this._changeDetectorRef) {\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _getSelected() {\n    // @breaking-change 11.0.0 Remove null check for `_model`.\n    return this._model ? this._model.selection as unknown as D | DateRange<D> | null : null;\n  }\n}\n\n/** Form control that can be associated with a datepicker. */\nexport interface MatDatepickerControl<D> {\n  getStartValue(): D | null;\n  getThemePalette(): ThemePalette;\n  min: D | null;\n  max: D | null;\n  disabled: boolean;\n  dateFilter: DateFilterFn<D>;\n  getConnectedOverlayOrigin(): ElementRef;\n  _disabledChange: Observable<boolean>;\n}\n\n/** Base class for a datepicker. */\n@Directive()\nexport abstract class MatDatepickerBase<C extends MatDatepickerControl<D>, S,\n  D = ExtractDateTypeFromSelection<S>> implements OnDestroy, CanColor, OnChanges {\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.getStartValue() : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput.getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /** Preferred position of the datepicker in the X axis. */\n  @Input()\n  xPosition: DatepickerDropdownPositionX = 'start';\n\n  /** Preferred position of the datepicker in the Y axis. */\n  @Input()\n  yPosition: DatepickerDropdownPositionY = 'below';\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): DateFilterFn<D> {\n    return this._datepickerInput && this._datepickerInput.dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  private _popupRef: OverlayRef | null;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<S, D>> | null;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<S, D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: C;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              private _model: MatDateSelectionModel<S, D>) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const positionChange = changes['xPosition'] || changes['yPosition'];\n\n    if (positionChange && !positionChange.firstChange && this._popupRef) {\n      this._setConnectedPositions(\n          this._popupRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy);\n\n      if (this.opened) {\n        this._popupRef.updatePosition();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyPopup();\n    this.close();\n    this._disabledChange.complete();\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    this._model.add(date);\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   * @returns Selection model that the input should hook itself up to.\n   */\n  _registerInput(input: C): MatDateSelectionModel<S, D> {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    return this._model;\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupComponentRef && this._popupRef) {\n      const instance = this._popupComponentRef.instance;\n      instance._startExitAnimation();\n      instance._animationDone.pipe(take(1)).subscribe(() => this._destroyPopup());\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<MatDatepickerContent<S, D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n\n      // These values are all the same as the defaults, but we set them explicitly so that the\n      // datepicker dialog behaves consistently even if the user changed the defaults.\n      hasBackdrop: true,\n      disableClose: false,\n      width: '',\n      height: '',\n      minWidth: '',\n      minHeight: '',\n      maxWidth: '80vw',\n      maxHeight: '',\n      position: {},\n      autoFocus: true,\n\n      // `MatDialog` has focus restoration built in, however we want to disable it since the\n      // datepicker also has focus restoration for dropdown mode. We want to do this, in order\n      // to ensure that the timing is consistent between dropdown and dialog modes since `MatDialog`\n      // restores focus when the animation is finished, but the datepicker does it immediately.\n      // Furthermore, this avoids any conflicts where the datepicker consumer might move focus\n      // inside the `closed` event which is dispatched immediately.\n      restoreFocus: false\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._forwardContentValues(this._dialogRef.componentInstance);\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    const portal = new ComponentPortal<MatDatepickerContent<S, D>>(MatDatepickerContent,\n                                                                   this._viewContainerRef);\n\n    this._destroyPopup();\n    this._createPopup();\n    this._popupComponentRef = this._popupRef!.attach(portal);\n    this._forwardContentValues(this._popupComponentRef.instance);\n\n    // Update the position once the calendar has rendered.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      this._popupRef!.updatePosition();\n    });\n  }\n\n  /** Forwards relevant values from the datepicker to the datepicker content inside the overlay. */\n  protected _forwardContentValues(instance: MatDatepickerContent<S, D>) {\n    instance.datepicker = this;\n    instance.color = this.color;\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withLockedPosition();\n\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._setConnectedPositions(positionStrategy),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(event => {\n      if (event) {\n        event.preventDefault();\n      }\n\n      this.close();\n    });\n  }\n\n  /** Destroys the current popup overlay. */\n  private _destroyPopup() {\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupRef = this._popupComponentRef = null;\n    }\n  }\n\n  /** Sets the positions of the datepicker in dropdown mode based on the current configuration. */\n  private _setConnectedPositions(strategy: FlexibleConnectedPositionStrategy) {\n    const primaryX = this.xPosition === 'end' ? 'end' : 'start';\n    const secondaryX = primaryX === 'start' ? 'end' : 'start';\n    const primaryY = this.yPosition === 'above' ? 'bottom' : 'top';\n    const secondaryY = primaryY === 'top' ? 'bottom' : 'top';\n\n    return strategy.withPositions([\n      {\n        originX: primaryX,\n        originY: secondaryY,\n        overlayX: primaryX,\n        overlayY: primaryY\n      },\n      {\n        originX: primaryX,\n        originY: primaryY,\n        overlayX: primaryX,\n        overlayY: secondaryY\n      },\n      {\n        originX: secondaryX,\n        originY: secondaryY,\n        overlayX: secondaryX,\n        overlayY: primaryY\n      },\n      {\n        originX: secondaryX,\n        originY: primaryY,\n        overlayX: secondaryX,\n        overlayY: secondaryY\n      }\n    ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_touchUi: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\nimport {MatDatepickerBase} from './datepicker-base';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER} from './date-selection-model';\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER]\n})\nexport class MatDatepicker<D> extends MatDatepickerBase<MatDatepickerInput<D>, D | null, D> {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  AfterViewInit,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n} from '@angular/forms';\nimport {\n  DateAdapter,\n  MAT_DATE_FORMATS,\n  MatDateFormats,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {ExtractDateTypeFromSelection, MatDateSelectionModel} from './date-selection-model';\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D, S = unknown> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n      /** Reference to the datepicker input component that emitted the event. */\n      public target: MatDatepickerInputBase<S, D>,\n      /** Reference to the native input element associated with the datepicker input. */\n      public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n/** Function that can be used to filter out dates from a calendar. */\nexport type DateFilterFn<D> = (date: D | null) => boolean;\n\n/** Base class for datepicker inputs. */\n@Directive()\nexport abstract class MatDatepickerInputBase<S, D = ExtractDateTypeFromSelection<S>>\n  implements ControlValueAccessor, AfterViewInit, OnDestroy, Validator {\n\n  /** Whether the component has been initialized. */\n  private _isInitialized: boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null {\n    return this._model ? this._getValueFromModel(this._model.selection) : this._pendingValue;\n  }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = this._isValidValue(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._assignValue(value);\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  protected _model: MatDateSelectionModel<S, D> | undefined;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled || this._parentDisabled(); }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    // In Ivy static bindings are invoked earlier, before the element is attached to the DOM.\n    // This can cause an error to be thrown in some browsers (IE/Edge) which assert that the\n    // element has been inserted.\n    if (newValue && this._isInitialized && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D, S>> =\n      new EventEmitter<MatDatepickerInputEvent<D, S>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D, S>> =\n      new EventEmitter<MatDatepickerInputEvent<D, S>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n  _validatorOnChange = () => {};\n\n  protected _cvaOnChange: (value: any) => void = () => {};\n  private _valueChangesSubscription = Subscription.EMPTY;\n  private _localeSubscription = Subscription.EMPTY;\n\n  /**\n   * Since the value is kept on the model which is assigned in an Input,\n   * we might get a value before we have a model. This property keeps track\n   * of the value until we have somewhere to assign it.\n   */\n  private _pendingValue: D | null;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    const dateFilter = this._getDateFilter();\n    return !dateFilter || !controlValue || dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    const min = this._getMinDate();\n    return (!min || !controlValue ||\n        this._dateAdapter.compareDate(min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    const max = this._getMaxDate();\n    return (!max || !controlValue ||\n        this._dateAdapter.compareDate(max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': max, 'actual': controlValue}};\n  }\n\n  /** Gets the base validator functions. */\n  protected _getValidators(): ValidatorFn[] {\n    return [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator];\n  }\n\n  /** Gets the minimum date for the input. Used for validation. */\n  abstract _getMinDate(): D | null;\n\n  /** Gets the maximum date for the input. Used for validation. */\n  abstract _getMaxDate(): D | null;\n\n  /** Gets the date filter function. Used for validation. */\n  protected abstract _getDateFilter(): DateFilterFn<D> | undefined;\n\n  /** Registers a date selection model with the input. */\n  _registerModel(model: MatDateSelectionModel<S, D>): void {\n    this._model = model;\n    this._valueChangesSubscription.unsubscribe();\n\n    if (this._pendingValue) {\n      this._assignValue(this._pendingValue);\n    }\n\n    this._valueChangesSubscription = this._model.selectionChanged.subscribe(event => {\n      if (event.source !== this) {\n        const value = this._getValueFromModel(event.selection);\n        this._lastValueValid = this._isValidValue(value);\n        this._cvaOnChange(value);\n        this._onTouched();\n        this._formatValue(value);\n        this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n        this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n\n        if (this._outsideValueChanged) {\n          this._outsideValueChanged();\n        }\n      }\n    });\n  }\n\n  /** Opens the popup associated with the input. */\n  protected abstract _openPopup(): void;\n\n  /** Assigns a value to the input's model. */\n  protected abstract _assignValueToModel(model: D | null): void;\n\n  /** Converts a value from the model into a native value for the input. */\n  protected abstract _getValueFromModel(modelValue: S): D | null;\n\n  /** Combined form control validator for this input. */\n  protected abstract _validator: ValidatorFn | null;\n\n  /**\n   * Callback that'll be invoked when the selection model is changed\n   * from somewhere that's not the current datepicker input.\n   */\n  protected abstract _outsideValueChanged?: () => void;\n\n  /** Whether the last value set on the input was valid. */\n  protected _lastValueValid = false;\n\n  constructor(\n      protected _elementRef: ElementRef<HTMLInputElement>,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterViewInit() {\n    this._isInitialized = true;\n  }\n\n  ngOnDestroy() {\n    this._valueChangesSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n    if (isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._openPopup();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    const lastValueWasValid = this._lastValueValid;\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = this._isValidValue(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this.value)) {\n      this._assignValue(date);\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    } else {\n      // Call the CVA change handler for invalid values\n      // since this is what marks the control as dirty.\n      if (value && !this.value) {\n        this._cvaOnChange(date);\n      }\n\n      if (lastValueWasValid !== this._lastValueValid) {\n        this._validatorOnChange();\n      }\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  protected _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  protected _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Assigns a value to the model. */\n  private _assignValue(value: D | null) {\n    // We may get some incoming values before the model was\n    // assigned. Save the value so that we can assign it later.\n    if (this._model) {\n      this._assignValueToModel(value);\n      this._pendingValue = null;\n    } else {\n      this._pendingValue = value;\n    }\n  }\n\n  /** Whether a value is considered valid. */\n  private _isValidValue(value: D | null): boolean {\n    return !value || this._dateAdapter.isValid(value);\n  }\n\n  /**\n   * Checks whether a parent control is disabled. This is in place so that it can be overridden\n   * by inputs extending this one which can be placed inside of a group that can be disabled.\n   */\n  protected _parentDisabled() {\n    return false;\n  }\n\n  // Accept `any` to avoid conflicts with other directives on `<input>` that\n  // may accept different types.\n  static ngAcceptInputType_value: any;\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  Optional,\n} from '@angular/core';\nimport {\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {\n  DateAdapter,\n  MAT_DATE_FORMATS,\n  MatDateFormats,\n  ThemePalette,\n} from '@angular/material/core';\nimport {MatFormField, MAT_FORM_FIELD} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerInputBase, DateFilterFn} from './datepicker-input-base';\nimport {MatDatepickerControl} from './datepicker-base';\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': '_datepicker ? \"dialog\" : null',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> extends MatDatepickerInputBase<D | null, D>\n  implements MatDatepickerControl<D | null> {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(datepicker: MatDatepicker<D>) {\n    if (datepicker) {\n      this._datepicker = datepicker;\n      this._registerModel(datepicker._registerInput(this));\n    }\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input('matDatepickerFilter')\n  get dateFilter() { return this._dateFilter; }\n  set dateFilter(value: DateFilterFn<D | null>) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  private _dateFilter: DateFilterFn<D | null>;\n\n  /** The combined form control validator for this input. */\n  protected _validator: ValidatorFn | null;\n\n  constructor(\n      elementRef: ElementRef<HTMLInputElement>,\n      @Optional() dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) dateFormats: MatDateFormats,\n      @Optional() @Inject(MAT_FORM_FIELD) private _formField: MatFormField) {\n    super(elementRef, dateAdapter, dateFormats);\n    this._validator = Validators.compose(super._getValidators());\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Gets the value at which the calendar should start. */\n  getStartValue(): D | null {\n    return this.value;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /** Opens the associated datepicker. */\n  protected _openPopup(): void {\n    if (this._datepicker) {\n      this._datepicker.open();\n    }\n  }\n\n  protected _getValueFromModel(modelValue: D | null): D | null {\n    return modelValue;\n  }\n\n  protected _assignValueToModel(value: D | null): void {\n    if (this._model) {\n      this._model.updateSelection(value, this);\n    }\n  }\n\n  /** Gets the input's minimum date. */\n  _getMinDate() {\n    return this._min;\n  }\n\n  /** Gets the input's maximum date. */\n  _getMaxDate() {\n    return this._max;\n  }\n\n  /** Gets the input's date filtering function. */\n  protected _getDateFilter() {\n    return this._dateFilter;\n  }\n\n  // Unnecessary when selecting a single date.\n  protected _outsideValueChanged: undefined;\n\n  // Accept `any` to avoid conflicts with other directives on `<input>` that\n  // may accept different types.\n  static ngAcceptInputType_value: any;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {MatButton} from '@angular/material/button';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerBase, MatDatepickerControl} from './datepicker-base';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n    // consumer may have provided, while still being able to receive focus.\n    '[attr.tabindex]': 'disabled ? null : -1',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n    '(focus)': '_button.focus()',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepickerBase<MatDatepickerControl<any>, D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    if (this._disabled === undefined && this.datepicker) {\n      return this.datepicker.disabled;\n    }\n\n    return !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Whether ripples on the toggle should be disabled. */\n  @Input() disableRipple: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  /** Underlying button element. */\n  @ViewChild('button') _button: MatButton;\n\n  constructor(\n    public _intl: MatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string) {\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['datepicker']) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  ElementRef,\n  Optional,\n  InjectionToken,\n  Inject,\n  OnInit,\n  Injector,\n  InjectFlags,\n  DoCheck,\n} from '@angular/core';\nimport {\n  NG_VALUE_ACCESSOR,\n  NG_VALIDATORS,\n  NgForm,\n  FormGroupDirective,\n  NgControl,\n  ValidatorFn,\n  Validators,\n  AbstractControl,\n  ValidationErrors,\n} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  mixinErrorState,\n  MAT_DATE_FORMATS,\n  DateAdapter,\n  MatDateFormats,\n  ErrorStateMatcher,\n} from '@angular/material/core';\nimport {BooleanInput} from '@angular/cdk/coercion';\nimport {BACKSPACE} from '@angular/cdk/keycodes';\nimport {MatDatepickerInputBase, DateFilterFn} from './datepicker-input-base';\nimport {DateRange} from './date-selection-model';\n\n/** Parent component that should be wrapped around `MatStartDate` and `MatEndDate`. */\nexport interface MatDateRangeInputParent<D> {\n  id: string;\n  min: D | null;\n  max: D | null;\n  dateFilter: DateFilterFn<D>;\n  rangePicker: {\n    opened: boolean;\n    id: string;\n  };\n  _startInput: MatDateRangeInputPartBase<D>;\n  _endInput: MatDateRangeInputPartBase<D>;\n  _groupDisabled: boolean;\n  _handleChildValueChange: () => void;\n  _openDatepicker: () => void;\n}\n\n/**\n * Used to provide the date range input wrapper component\n * to the parts without circular dependencies.\n */\nexport const MAT_DATE_RANGE_INPUT_PARENT =\n    new InjectionToken<MatDateRangeInputParent<unknown>>('MAT_DATE_RANGE_INPUT_PARENT');\n\n/**\n * Base class for the individual inputs that can be projected inside a `mat-date-range-input`.\n */\n@Directive()\nabstract class MatDateRangeInputPartBase<D>\n  extends MatDatepickerInputBase<DateRange<D>> implements OnInit, DoCheck {\n\n  /** @docs-private */\n  ngControl: NgControl;\n\n  /** @docs-private */\n  abstract updateErrorState(): void;\n\n  protected abstract _validator: ValidatorFn | null;\n  protected abstract _assignValueToModel(value: D | null): void;\n  protected abstract _getValueFromModel(modelValue: DateRange<D>): D | null;\n\n  constructor(\n    @Inject(MAT_DATE_RANGE_INPUT_PARENT) public _rangeInput: MatDateRangeInputParent<D>,\n    elementRef: ElementRef<HTMLInputElement>,\n    public _defaultErrorStateMatcher: ErrorStateMatcher,\n    private _injector: Injector,\n    @Optional() public _parentForm: NgForm,\n    @Optional() public _parentFormGroup: FormGroupDirective,\n    @Optional() dateAdapter: DateAdapter<D>,\n    @Optional() @Inject(MAT_DATE_FORMATS) dateFormats: MatDateFormats) {\n    super(elementRef, dateAdapter, dateFormats);\n  }\n\n  ngOnInit() {\n    // We need the date input to provide itself as a `ControlValueAccessor` and a `Validator`, while\n    // injecting its `NgControl` so that the error state is handled correctly. This introduces a\n    // circular dependency, because both `ControlValueAccessor` and `Validator` depend on the input\n    // itself. Usually we can work around it for the CVA, but there's no API to do it for the\n    // validator. We work around it here by injecting the `NgControl` in `ngOnInit`, after\n    // everything has been resolved.\n    const ngControl = this._injector.get(NgControl, null, InjectFlags.Self);\n\n    if (ngControl) {\n      this.ngControl = ngControl;\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  /** Gets whether the input is empty. */\n  isEmpty(): boolean {\n    return this._elementRef.nativeElement.value.length === 0;\n  }\n\n  /** Gets the placeholder of the input. */\n  _getPlaceholder() {\n    return this._elementRef.nativeElement.placeholder;\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Handles `input` events on the input element. */\n  _onInput(value: string) {\n    super._onInput(value);\n    this._rangeInput._handleChildValueChange();\n  }\n\n  /** Opens the datepicker associated with the input. */\n  protected _openPopup(): void {\n    this._rangeInput._openDatepicker();\n  }\n\n  /** Gets the minimum date from the range input. */\n  _getMinDate() {\n    return this._rangeInput.min;\n  }\n\n  /** Gets the maximum date from the range input. */\n  _getMaxDate() {\n    return this._rangeInput.max;\n  }\n\n  /** Gets the date filter function from the range input. */\n  protected _getDateFilter() {\n    return this._rangeInput.dateFilter;\n  }\n\n  protected _outsideValueChanged = () => {\n    // Whenever the value changes outside the input we need to revalidate, because\n    // the validation state of each of the inputs depends on the other one.\n    this._validatorOnChange();\n  }\n\n  protected _parentDisabled() {\n    return this._rangeInput._groupDisabled;\n  }\n}\n\nconst _MatDateRangeInputBase:\n    CanUpdateErrorStateCtor & typeof MatDateRangeInputPartBase =\n    // Needs to be `as any`, because the base class is abstract.\n    mixinErrorState(MatDateRangeInputPartBase as any);\n\n/** Input for entering the start date in a `mat-date-range-input`. */\n@Directive({\n  selector: 'input[matStartDate]',\n  host: {\n    'class': 'mat-date-range-input-inner',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(keydown)': '_onKeydown($event)',\n    '[attr.id]': '_rangeInput.id',\n    '[attr.aria-haspopup]': '_rangeInput.rangePicker ? \"dialog\" : null',\n    '[attr.aria-owns]': '(_rangeInput.rangePicker?.opened && _rangeInput.rangePicker.id) || null',\n    '[attr.min]': '_getMinDate() ? _dateAdapter.toIso8601(_getMinDate()) : null',\n    '[attr.max]': '_getMaxDate() ? _dateAdapter.toIso8601(_getMaxDate()) : null',\n    '(blur)': '_onBlur()',\n    'type': 'text',\n  },\n  providers: [\n    {provide: NG_VALUE_ACCESSOR, useExisting: MatStartDate, multi: true},\n    {provide: NG_VALIDATORS, useExisting: MatStartDate, multi: true}\n  ]\n})\nexport class MatStartDate<D> extends _MatDateRangeInputBase<D> implements CanUpdateErrorState {\n  /** Validator that checks that the start date isn't after the end date. */\n  private _startValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const start = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    const end = this._model ? this._model.selection.end : null;\n    return (!start || !end ||\n        this._dateAdapter.compareDate(start, end) <= 0) ?\n        null : {'matStartDateInvalid': {'end': end, 'actual': start}};\n  }\n\n  constructor(\n    @Inject(MAT_DATE_RANGE_INPUT_PARENT) rangeInput: MatDateRangeInputParent<D>,\n    elementRef: ElementRef<HTMLInputElement>,\n    defaultErrorStateMatcher: ErrorStateMatcher,\n    injector: Injector,\n    @Optional() parentForm: NgForm,\n    @Optional() parentFormGroup: FormGroupDirective,\n    @Optional() dateAdapter: DateAdapter<D>,\n    @Optional() @Inject(MAT_DATE_FORMATS) dateFormats: MatDateFormats) {\n\n    // TODO(crisbeto): this constructor shouldn't be necessary, but ViewEngine doesn't seem to\n    // handle DI correctly when it is inherited from `MatDateRangeInputPartBase`. We can drop this\n    // constructor once ViewEngine is removed.\n    super(rangeInput, elementRef, defaultErrorStateMatcher, injector, parentForm, parentFormGroup,\n        dateAdapter, dateFormats);\n  }\n\n  protected _validator = Validators.compose([...super._getValidators(), this._startValidator]);\n\n  protected _getValueFromModel(modelValue: DateRange<D>) {\n    return modelValue.start;\n  }\n\n  protected _assignValueToModel(value: D | null) {\n    if (this._model) {\n      const range = new DateRange(value, this._model.selection.end);\n      this._model.updateSelection(range, this);\n      this._cvaOnChange(value);\n    }\n  }\n\n  protected _formatValue(value: D | null) {\n    super._formatValue(value);\n\n    // Any time the input value is reformatted we need to tell the parent.\n    this._rangeInput._handleChildValueChange();\n  }\n\n  /** Gets the value that should be used when mirroring the input's size. */\n  getMirrorValue(): string {\n    const element = this._elementRef.nativeElement;\n    const value = element.value;\n    return value.length > 0 ? value : element.placeholder;\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n\n\n/** Input for entering the end date in a `mat-date-range-input`. */\n@Directive({\n  selector: 'input[matEndDate]',\n  host: {\n    'class': 'mat-date-range-input-inner',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(keydown)': '_onKeydown($event)',\n    '[attr.aria-haspopup]': '_rangeInput.rangePicker ? \"dialog\" : null',\n    '[attr.aria-owns]': '(_rangeInput.rangePicker?.opened && _rangeInput.rangePicker.id) || null',\n    '[attr.min]': '_getMinDate() ? _dateAdapter.toIso8601(_getMinDate()) : null',\n    '[attr.max]': '_getMaxDate() ? _dateAdapter.toIso8601(_getMaxDate()) : null',\n    '(blur)': '_onBlur()',\n    'type': 'text',\n  },\n  providers: [\n    {provide: NG_VALUE_ACCESSOR, useExisting: MatEndDate, multi: true},\n    {provide: NG_VALIDATORS, useExisting: MatEndDate, multi: true}\n  ]\n})\nexport class MatEndDate<D> extends _MatDateRangeInputBase<D> implements CanUpdateErrorState {\n  /** Validator that checks that the end date isn't before the start date. */\n  private _endValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const end = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    const start = this._model ? this._model.selection.start : null;\n    return (!end || !start ||\n        this._dateAdapter.compareDate(end, start) >= 0) ?\n        null : {'matEndDateInvalid': {'start': start, 'actual': end}};\n  }\n\n  constructor(\n    @Inject(MAT_DATE_RANGE_INPUT_PARENT) rangeInput: MatDateRangeInputParent<D>,\n    elementRef: ElementRef<HTMLInputElement>,\n    defaultErrorStateMatcher: ErrorStateMatcher,\n    injector: Injector,\n    @Optional() parentForm: NgForm,\n    @Optional() parentFormGroup: FormGroupDirective,\n    @Optional() dateAdapter: DateAdapter<D>,\n    @Optional() @Inject(MAT_DATE_FORMATS) dateFormats: MatDateFormats) {\n\n    // TODO(crisbeto): this constructor shouldn't be necessary, but ViewEngine doesn't seem to\n    // handle DI correctly when it is inherited from `MatDateRangeInputPartBase`. We can drop this\n    // constructor once ViewEngine is removed.\n    super(rangeInput, elementRef, defaultErrorStateMatcher, injector, parentForm, parentFormGroup,\n        dateAdapter, dateFormats);\n  }\n\n  protected _validator = Validators.compose([...super._getValidators(), this._endValidator]);\n\n  protected _getValueFromModel(modelValue: DateRange<D>) {\n    return modelValue.end;\n  }\n\n  protected _assignValueToModel(value: D | null) {\n    if (this._model) {\n      const range = new DateRange(this._model.selection.start, value);\n      this._model.updateSelection(range, this);\n      this._cvaOnChange(value);\n    }\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    // If the user is pressing backspace on an empty end input, move focus back to the start.\n    if (event.keyCode === BACKSPACE && !this._elementRef.nativeElement.value) {\n      this._rangeInput._startInput.focus();\n    }\n\n    super._onKeydown(event);\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\nimport {MatDatepickerBase, MatDatepickerContent} from './datepicker-base';\nimport {MatDateRangeInput} from './date-range-input';\nimport {MAT_RANGE_DATE_SELECTION_MODEL_PROVIDER, DateRange} from './date-selection-model';\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDateRangePicker\"). We can change this to a\n// directive if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the date range picker popup/dialog. */\n@Component({\n  selector: 'mat-date-range-picker',\n  template: '',\n  exportAs: 'matDateRangePicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_RANGE_DATE_SELECTION_MODEL_PROVIDER]\n})\nexport class MatDateRangePicker<D>\n  extends MatDatepickerBase<MatDateRangeInput<D>, DateRange<D>, D> {\n\n  protected _forwardContentValues(instance: MatDatepickerContent<DateRange<D>, D>) {\n    super._forwardContentValues(instance);\n\n    const input = this._datepickerInput;\n\n    if (input) {\n      instance.comparisonStart = input.comparisonStart;\n      instance.comparisonEnd = input.comparisonEnd;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  Input,\n  Optional,\n  OnDestroy,\n  ContentChild,\n  AfterContentInit,\n  ChangeDetectorRef,\n  Self,\n  ElementRef,\n} from '@angular/core';\nimport {MatFormFieldControl, MatFormField} from '@angular/material/form-field';\nimport {ThemePalette, DateAdapter} from '@angular/material/core';\nimport {NgControl, ControlContainer} from '@angular/forms';\nimport {Subject, merge} from 'rxjs';\nimport {coerceBooleanProperty, BooleanInput} from '@angular/cdk/coercion';\nimport {\n  MatStartDate,\n  MatEndDate,\n  MatDateRangeInputParent,\n  MAT_DATE_RANGE_INPUT_PARENT,\n} from './date-range-input-parts';\nimport {MatDatepickerControl} from './datepicker-base';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {DateFilterFn} from './datepicker-input-base';\nimport {MatDateRangePicker} from './date-range-picker';\nimport {DateRange, MatDateSelectionModel} from './date-selection-model';\n\nlet nextUniqueId = 0;\n\n@Component({\n  selector: 'mat-date-range-input',\n  templateUrl: 'date-range-input.html',\n  styleUrls: ['date-range-input.css'],\n  exportAs: 'matDateRangeInput',\n  host: {\n    'class': 'mat-date-range-input',\n    '[class.mat-date-range-input-hide-placeholders]': '_shouldHidePlaceholders()',\n    '[attr.id]': 'null',\n    'role': 'group',\n    '[attr.aria-labelledby]': '_ariaLabelledBy',\n    '[attr.aria-describedby]': '_ariaDescribedBy',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatDateRangeInput},\n    {provide: MAT_DATE_RANGE_INPUT_PARENT, useExisting: MatDateRangeInput},\n  ]\n})\nexport class MatDateRangeInput<D> implements MatFormFieldControl<DateRange<D>>,\n  MatDatepickerControl<D>, MatDateRangeInputParent<D>, AfterContentInit, OnDestroy {\n  /** Current value of the range input. */\n  get value() {\n    return this._model ? this._model.selection : null;\n  }\n\n  /** Emits when the input's state has changed. */\n  stateChanges = new Subject<void>();\n\n  /** Unique ID for the input. */\n  id = `mat-date-range-input-${nextUniqueId++}`;\n\n  /** Whether the control is focused. */\n  focused = false;\n\n  /** Whether the control's label should float. */\n  get shouldLabelFloat(): boolean {\n    return this.focused || !this.empty;\n  }\n\n  /** Name of the form control. */\n  controlType = 'mat-date-range-input';\n\n  /**\n   * Implemented as a part of `MatFormFieldControl`.\n   * Set the placeholder attribute on `matStartDate` and `matEndDate`.\n   * @docs-private\n   */\n  get placeholder() {\n    const start = this._startInput?._getPlaceholder() || '';\n    const end = this._endInput?._getPlaceholder() || '';\n    return (start || end) ? `${start} ${this.separator} ${end}` : '';\n  }\n\n  /** The range picker that this input is associated with. */\n  @Input()\n  get rangePicker() { return this._rangePicker; }\n  set rangePicker(rangePicker: MatDateRangePicker<D>) {\n    if (rangePicker) {\n      this._model = rangePicker._registerInput(this);\n      this._rangePicker = rangePicker;\n      this._registerModel(this._model!);\n    }\n  }\n  private _rangePicker: MatDateRangePicker<D>;\n\n  /** Whether the input is required. */\n  @Input()\n  get required(): boolean { return !!this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n  private _required: boolean;\n\n  /** Function that can be used to filter out dates within the date range picker. */\n  @Input()\n  get dateFilter() { return this._dateFilter; }\n  set dateFilter(value: DateFilterFn<D>) {\n    this._dateFilter = value;\n    this._revalidate();\n  }\n  private _dateFilter: DateFilterFn<D>;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._revalidate();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._revalidate();\n  }\n  private _max: D | null;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return (this._startInput && this._endInput) ?\n      (this._startInput.disabled && this._endInput.disabled) :\n      this._groupDisabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._groupDisabled) {\n      this._groupDisabled = newValue;\n      this._disabledChange.next(this.disabled);\n    }\n  }\n  _groupDisabled = false;\n\n  /** Whether the input is in an error state. */\n  get errorState(): boolean {\n    if (this._startInput && this._endInput) {\n      return this._startInput.errorState || this._endInput.errorState;\n    }\n\n    return false;\n  }\n\n  /** Whether the datepicker input is empty. */\n  get empty(): boolean {\n    const startEmpty = this._startInput ? this._startInput.isEmpty() : false;\n    const endEmpty = this._endInput ? this._endInput.isEmpty() : false;\n    return startEmpty && endEmpty;\n  }\n\n  /** Value for the `aria-describedby` attribute of the inputs. */\n  _ariaDescribedBy: string | null = null;\n\n  /** Value for the `aria-labelledby` attribute of the inputs. */\n  _ariaLabelledBy: string | null = null;\n\n  /** Date selection model currently registered with the input. */\n  private _model: MatDateSelectionModel<DateRange<D>> | undefined;\n\n  /** Separator text to be shown between the inputs. */\n  @Input() separator = 'â';\n\n  /** Start of the comparison range that should be shown in the calendar. */\n  @Input() comparisonStart: D | null = null;\n\n  /** End of the comparison range that should be shown in the calendar. */\n  @Input() comparisonEnd: D | null = null;\n\n  @ContentChild(MatStartDate) _startInput: MatStartDate<D>;\n  @ContentChild(MatEndDate) _endInput: MatEndDate<D>;\n\n  /**\n   * Implemented as a part of `MatFormFieldControl`.\n   * TODO(crisbeto): change type to `AbstractControlDirective` after #18206 lands.\n   * @docs-private\n   */\n  ngControl: NgControl | null;\n\n  /** Emits when the input's disabled state changes. */\n  _disabledChange = new Subject<boolean>();\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef<HTMLElement>,\n    @Optional() @Self() control: ControlContainer,\n    @Optional() private _dateAdapter: DateAdapter<D>,\n    @Optional() private _formField?: MatFormField) {\n\n    if (!_dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    // TODO(crisbeto): remove `as any` after #18206 lands.\n    this.ngControl = control as any;\n    this._ariaLabelledBy = _formField ? _formField._labelId : null;\n  }\n\n  /**\n   * Implemented as a part of `MatFormFieldControl`.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]): void {\n    this._ariaDescribedBy = ids.length ? ids.join(' ') : null;\n  }\n\n  /**\n   * Implemented as a part of `MatFormFieldControl`.\n   * @docs-private\n   */\n  onContainerClick(): void {\n    if (!this.focused && !this.disabled) {\n      if (!this._model || !this._model.selection.start) {\n        this._startInput.focus();\n      } else {\n        this._endInput.focus();\n      }\n    }\n  }\n\n  ngAfterContentInit() {\n    if (!this._startInput) {\n      throw Error('mat-date-range-input must contain a matStartDate input');\n    }\n\n    if (!this._endInput) {\n      throw Error('mat-date-range-input must contain a matEndDate input');\n    }\n\n    if (this._model) {\n      this._registerModel(this._model);\n    }\n\n    // We don't need to unsubscribe from this, because we\n    // know that the input streams will be completed on destroy.\n    merge(this._startInput._disabledChange, this._endInput._disabledChange).subscribe(() => {\n      this._disabledChange.next(this.disabled);\n    });\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n    this._disabledChange.unsubscribe();\n  }\n\n  /** Gets the date at which the calendar should start. */\n  getStartValue(): D | null {\n    return this.value ? this.value.start : null;\n  }\n\n  /** Gets the input's theme palette. */\n  getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Gets the element to which the calendar overlay should be attached. */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  /** Gets the value that is used to mirror the state input. */\n  _getInputMirrorValue() {\n    return this._startInput ? this._startInput.getMirrorValue() : '';\n  }\n\n  /** Whether the input placeholders should be hidden. */\n  _shouldHidePlaceholders() {\n    return this._startInput ? !this._startInput.isEmpty() : false;\n  }\n\n  /** Handles the value in one of the child inputs changing. */\n  _handleChildValueChange() {\n    this.stateChanges.next();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Opens the date range picker associated with the input. */\n  _openDatepicker() {\n    if (this._rangePicker) {\n      this._rangePicker.open();\n    }\n  }\n\n  /** Whether the separate text should be hidden. */\n  _shouldHideSeparator() {\n    return (!this._formField || this._formField._hideControlPlaceholder()) && this.empty;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Re-runs the validators on the start/end inputs. */\n  private _revalidate() {\n    if (this._startInput) {\n      this._startInput._validatorOnChange();\n    }\n\n    if (this._endInput) {\n      this._endInput._validatorOnChange();\n    }\n  }\n\n  /** Registers the current date selection model with the start/end inputs. */\n  private _registerModel(model: MatDateSelectionModel<DateRange<D>>) {\n    if (this._startInput) {\n      this._startInput._registerModel(model);\n    }\n\n    if (this._endInput) {\n      this._endInput._registerModel(model);\n    }\n  }\n\n  static ngAcceptInputType_required: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {CdkScrollableModule} from '@angular/cdk/scrolling';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {MatDatepicker} from './datepicker';\nimport {\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker-base';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\nimport {MatDateRangeInput} from './date-range-input';\nimport {MatStartDate, MatEndDate} from './date-range-input-parts';\nimport {MatDateRangePicker} from './date-range-picker';\nimport {\n  MAT_DATE_RANGE_SELECTION_STRATEGY,\n  DefaultMatCalendarRangeStrategy\n} from './date-range-selection-strategy';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    CdkScrollableModule,\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n    MatDateRangeInput,\n    MatStartDate,\n    MatEndDate,\n    MatDateRangePicker,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n    MatDateRangeInput,\n    MatStartDate,\n    MatEndDate,\n    MatDateRangePicker,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n    {\n      provide: MAT_DATE_RANGE_SELECTION_STRATEGY,\n      useClass: DefaultMatCalendarRangeStrategy\n    }\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './datepicker-module';\nexport * from './calendar';\nexport * from './calendar-body';\nexport * from './datepicker';\nexport * from './date-range-selection-strategy';\nexport * from './datepicker-animations';\nexport {\n  MAT_DATEPICKER_SCROLL_STRATEGY,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  MatDatepickerContent,\n  DatepickerDropdownPositionX,\n  DatepickerDropdownPositionY,\n} from './datepicker-base';\nexport {MatDatepickerInputEvent, DateFilterFn} from './datepicker-input-base';\nexport {\n  MAT_DATEPICKER_VALUE_ACCESSOR,\n  MAT_DATEPICKER_VALIDATORS,\n  MatDatepickerInput,\n} from './datepicker-input';\nexport * from './datepicker-intl';\nexport * from './datepicker-toggle';\nexport * from './month-view';\nexport * from './year-view';\nexport * from './date-range-input';\nexport * from './date-range-picker';\nexport * from './date-selection-model';\nexport {MatStartDate, MatEndDate} from './date-range-input-parts';\nexport {MatMultiYearView, yearsPerPage, yearsPerRow} from './multi-year-view';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {MAT_DATE_RANGE_INPUT_PARENT as Éµangular_material_src_material_datepicker_datepicker_c} from './date-range-input-parts';\nexport {MatDatepickerBase as Éµangular_material_src_material_datepicker_datepicker_a} from './datepicker-base';\nexport {MatDatepickerInputBase as Éµangular_material_src_material_datepicker_datepicker_b} from './datepicker-input-base';"]}