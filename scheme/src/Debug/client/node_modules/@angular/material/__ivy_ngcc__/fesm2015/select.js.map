{"version":3,"file":"select.js","sources":["../../../../../../src/material/select/select-animations.ts","../../../../../../src/material/select/select-errors.ts","../../../../../../src/material/select/select.ts","../../../../../../src/material/select/select-module.ts","../../../../../../src/material/select/public-api.ts","../../../../../../src/material/select/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  animateChild,\n  AnimationTriggerMetadata,\n  query,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nexport const matSelectAnimations: {\n  readonly transformPanelWrap: AnimationTriggerMetadata;\n  readonly transformPanel: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation ensures the select's overlay panel animation (transformPanel) is called when\n   * closing the select.\n   * This is needed due to https://github.com/angular/angular/issues/23302\n   */\n  transformPanelWrap: trigger('transformPanelWrap', [\n      transition('* => void', query('@transformPanel', [animateChild()],\n          {optional: true}))\n  ]),\n\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0.8)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager, LiveAnnouncer} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  BooleanInput,\n  coerceBooleanProperty,\n  coerceNumberProperty,\n  NumberInput\n} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  END,\n  ENTER,\n  hasModifierKey,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  ConnectedPosition,\n  Overlay,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MAT_FORM_FIELD, MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 16 = 40\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 16;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** Object that can be used to configure the default options for the select module. */\nexport interface MatSelectConfig {\n  /** Whether option centering should be disabled. */\n  disableOptionCentering?: boolean;\n\n  /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n  typeaheadDebounceInterval?: number;\n}\n\n/** Injection token that can be used to provide the default options the select module. */\nexport const MAT_SELECT_CONFIG = new InjectionToken<MatSelectConfig>('MAT_SELECT_CONFIG');\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nclass MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nconst _MatSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanDisableRippleCtor &\n    CanUpdateErrorStateCtor &\n    typeof MatSelectBase =\n        mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    '[class.mat-select-empty]': 'empty',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanelWrap,\n    matSelectAnimations.transformPanel\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  private _scrollStrategyFactory: () => ScrollStrategy;\n\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy: ScrollStrategy;\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions: ConnectedPosition[] = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /**\n   * Overlay pane containing the options.\n   * @deprecated To be turned into a private API.\n   * @breaking-change 10.0.0\n   * @docs-private\n   */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, {descendants: true}) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup, {descendants: true}) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n  @Input()\n  get typeaheadDebounceInterval(): number { return this._typeaheadDebounceInterval; }\n  set typeaheadDebounceInterval(value: number) {\n    this._typeaheadDebounceInterval = coerceNumberProperty(value);\n  }\n  private _typeaheadDebounceInterval: number;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    const options = this.options;\n\n    if (options) {\n      return options.changes.pipe(\n        startWith(options),\n        switchMap(() => merge(...options.map(option => option.onSelectionChange)))\n      );\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  }) as Observable<MatOptionSelectionChange>;\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() @Inject(MAT_FORM_FIELD) private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) scrollStrategyFactory: any,\n    private _liveAnnouncer: LiveAnnouncer,\n    @Optional() @Inject(MAT_SELECT_CONFIG) defaults?: MatSelectConfig) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this._scrollStrategy = this._scrollStrategyFactory();\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    if (defaults) {\n      if (defaults.disableOptionCentering != null) {\n        this.disableOptionCentering = defaults.disableOptionCentering;\n      }\n\n      if (defaults.typeaheadDebounceInterval != null) {\n        this.typeaheadDebounceInterval = defaults.typeaheadDebounceInterval;\n      }\n    }\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n\n    this._viewportRuler.change()\n      .pipe(takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this._panelOpen) {\n          this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes['disabled']) {\n      this.stateChanges.next();\n    }\n\n    if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n      this._keyManager.withTypeAhead(this._typeaheadDebounceInterval);\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n                       keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n    const manager = this._keyManager;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (!manager.isTyping() && (isOpenKey && !hasModifierKey(event)) ||\n      ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      const previouslySelectedOption = this.selected;\n\n      if (keyCode === HOME || keyCode === END) {\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        manager.onKeydown(event);\n      }\n\n      const selectedOption = this.selected;\n\n      // Since the value has changed, we need to announce it ourselves.\n      if (selectedOption && previouslySelectedOption !== selectedOption) {\n        // We set a duration on the live announcement, because we want the live element to be\n        // cleared after a while so that users can't navigate to it using the arrow keys.\n        this._liveAnnouncer.announce((selectedOption as MatOption).viewValue, 10000);\n      }\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const manager = this._keyManager;\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const isTyping = manager.isTyping();\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n      // Don't do anything in this case if the user is typing,\n      // because the typing sequence can include the space key.\n    } else if (!isTyping && (keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\n      !hasModifierKey(event)) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (!isTyping && this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n      this.stateChanges.next();\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      } else if (!this.panelOpen) {\n        // Otherwise reset the highlighted option. Note that we only want to do this while\n        // closed, because doing it while open can shift the user's focus unnecessarily.\n        this._keyManager.setActiveItem(-1);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead(this._typeaheadDebounceInterval)\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n      .withAllowedModifierKeys(['shiftKey']);\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this.panelOpen) {\n        // Select the active item when tabbing away. This is consistent with how the native\n        // select behaves. Note that we only want to do this in single selection mode.\n        if (!this.multiple && this._keyManager.activeItem) {\n          this._keyManager.activeItem._selectViaInteraction();\n        }\n\n        // Restore focus to the trigger before closing. Ensures that the focus\n        // position won't be lost if the user got focus into the overlay.\n        this.focus();\n        this.close();\n      }\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      if (wasSelected !== option.selected) {\n        option.selected ? this._selectionModel.select(option) :\n                          this._selectionModel.deselect(option);\n      }\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(options?: FocusOptions): void {\n    this._elementRef.nativeElement.focus(options);\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number | undefined, current: MatOption, index: number) => {\n      if (result !== undefined) {\n        return result;\n      }\n\n      return option === current ? index : undefined;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n      this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n\n  static ngAcceptInputType_required: BooleanInput;\n  static ngAcceptInputType_multiple: BooleanInput;\n  static ngAcceptInputType_disableOptionCentering: BooleanInput;\n  static ngAcceptInputType_typeaheadDebounceInterval: NumberInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_disableRipple: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {CdkScrollableModule} from '@angular/cdk/scrolling';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [\n    CdkScrollableModule,\n    MatFormFieldModule,\n    MatSelect,\n    MatSelectTrigger,\n    MatOptionModule,\n    MatCommonModule\n  ],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './select-module';\nexport * from './select';\nexport * from './select-animations';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}