{"version":3,"file":"tab.d.ts","sources":["tab.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { BooleanInput } from '@angular/cdk/coercion';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { OnChanges, OnDestroy, OnInit, SimpleChanges, TemplateRef, ViewContainerRef, InjectionToken } from '@angular/core';\nimport { CanDisable, CanDisableCtor } from '@angular/material/core';\nimport { Subject } from 'rxjs';\nimport { MatTabLabel } from './tab-label';\n/** @docs-private */\ndeclare class MatTabBase {\n}\ndeclare const _MatTabMixinBase: CanDisableCtor & typeof MatTabBase;\n/**\n * Used to provide a tab group to a tab without causing a circular dependency.\n * @docs-private\n */\nexport declare const MAT_TAB_GROUP: InjectionToken<any>;\nexport declare class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n    private _viewContainerRef;\n    /**\n     * @deprecated `_closestTabGroup` parameter to become required.\n     * @breaking-change 10.0.0\n     */\n    _closestTabGroup?: any;\n    /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n    get templateLabel(): MatTabLabel;\n    set templateLabel(value: MatTabLabel);\n    private _templateLabel;\n    /**\n     * Template provided in the tab content that will be used if present, used to enable lazy-loading\n     */\n    _explicitContent: TemplateRef<any>;\n    /** Template inside the MatTab view that contains an `<ng-content>`. */\n    _implicitContent: TemplateRef<any>;\n    /** Plain text label for the tab, used when there is no template label. */\n    textLabel: string;\n    /** Aria label for the tab. */\n    ariaLabel: string;\n    /**\n     * Reference to the element that the tab is labelled by.\n     * Will be cleared if `aria-label` is set at the same time.\n     */\n    ariaLabelledby: string;\n    /** Portal that will be the hosted content of the tab */\n    private _contentPortal;\n    /** @docs-private */\n    get content(): TemplatePortal | null;\n    /** Emits whenever the internal state of the tab changes. */\n    readonly _stateChanges: Subject<void>;\n    /**\n     * The relatively indexed position where 0 represents the center, negative is left, and positive\n     * represents the right.\n     */\n    position: number | null;\n    /**\n     * The initial relatively index origin of the tab if it was created and selected after there\n     * was already a selected tab. Provides context of what position the tab should originate from.\n     */\n    origin: number | null;\n    /**\n     * Whether the tab is currently active.\n     */\n    isActive: boolean;\n    constructor(_viewContainerRef: ViewContainerRef, \n    /**\n     * @deprecated `_closestTabGroup` parameter to become required.\n     * @breaking-change 10.0.0\n     */\n    _closestTabGroup?: any);\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnDestroy(): void;\n    ngOnInit(): void;\n    static ngAcceptInputType_disabled: BooleanInput;\n}\nexport {};\n"]}