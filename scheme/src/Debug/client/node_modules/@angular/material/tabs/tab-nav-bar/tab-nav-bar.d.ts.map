{"version":3,"file":"tab-nav-bar.d.ts","sources":["tab-nav-bar.d.ts"],"names":[],"mappingssourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Platform } from '@angular/cdk/platform';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { AfterContentChecked, AfterContentInit, ChangeDetectorRef, ElementRef, NgZone, OnDestroy, QueryList, AfterViewInit } from '@angular/core';\nimport { CanDisable, CanDisableCtor, CanDisableRipple, CanDisableRippleCtor, HasTabIndex, HasTabIndexCtor, RippleConfig, RippleGlobalOptions, RippleTarget, ThemePalette } from '@angular/material/core';\nimport { BooleanInput } from '@angular/cdk/coercion';\nimport { FocusMonitor, FocusableOption } from '@angular/cdk/a11y';\nimport { MatInkBar } from '../ink-bar';\nimport { MatPaginatedTabHeader, MatPaginatedTabHeaderItem } from '../paginated-tab-header';\n/**\n * Base class with all of the `MatTabNav` functionality.\n * @docs-private\n */\nexport declare abstract class _MatTabNavBase extends MatPaginatedTabHeader implements AfterContentChecked, AfterContentInit, OnDestroy {\n    /** Query list of all tab links of the tab navigation. */\n    abstract _items: QueryList<MatPaginatedTabHeaderItem & {\n        active: boolean;\n    }>;\n    /** Background color of the tab nav. */\n    get backgroundColor(): ThemePalette;\n    set backgroundColor(value: ThemePalette);\n    private _backgroundColor;\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple(): any;\n    set disableRipple(value: any);\n    private _disableRipple;\n    /** Theme color of the nav bar. */\n    color: ThemePalette;\n    constructor(elementRef: ElementRef, dir: Directionality, ngZone: NgZone, changeDetectorRef: ChangeDetectorRef, viewportRuler: ViewportRuler, \n    /**\n     * @deprecated @breaking-change 9.0.0 `platform` parameter to become required.\n     */\n    platform?: Platform, animationMode?: string);\n    protected _itemSelected(): void;\n    ngAfterContentInit(): void;\n    /**\n     * Notifies the component that the active link has been changed.\n     * @breaking-change 8.0.0 `element` parameter to be removed.\n     */\n    updateActiveLink(_element?: ElementRef): void;\n}\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\nexport declare class MatTabNav extends _MatTabNavBase {\n    _items: QueryList<MatTabLink>;\n    _inkBar: MatInkBar;\n    _tabListContainer: ElementRef;\n    _tabList: ElementRef;\n    _nextPaginator: ElementRef<HTMLElement>;\n    _previousPaginator: ElementRef<HTMLElement>;\n    constructor(elementRef: ElementRef, dir: Directionality, ngZone: NgZone, changeDetectorRef: ChangeDetectorRef, viewportRuler: ViewportRuler, \n    /**\n     * @deprecated @breaking-change 9.0.0 `platform` parameter to become required.\n     */\n    platform?: Platform, animationMode?: string);\n    static ngAcceptInputType_disableRipple: BooleanInput;\n}\ndeclare class MatTabLinkMixinBase {\n}\ndeclare const _MatTabLinkMixinBase: HasTabIndexCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatTabLinkMixinBase;\n/** Base class with all of the `MatTabLink` functionality. */\nexport declare class _MatTabLinkBase extends _MatTabLinkMixinBase implements AfterViewInit, OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget, FocusableOption {\n    private _tabNavBar;\n    elementRef: ElementRef;\n    private _focusMonitor;\n    /** Whether the tab link is active or not. */\n    protected _isActive: boolean;\n    /** Whether the link is active. */\n    get active(): boolean;\n    set active(value: boolean);\n    /**\n     * Ripple configuration for ripples that are launched on pointer down. The ripple config\n     * is set to the global ripple options since we don't have any configurable options for\n     * the tab link ripples.\n     * @docs-private\n     */\n    rippleConfig: RippleConfig & RippleGlobalOptions;\n    /**\n     * Whether ripples are disabled on interaction.\n     * @docs-private\n     */\n    get rippleDisabled(): boolean;\n    constructor(_tabNavBar: _MatTabNavBase, elementRef: ElementRef, globalRippleOptions: RippleGlobalOptions | null, tabIndex: string, _focusMonitor: FocusMonitor, animationMode?: string);\n    focus(): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    static ngAcceptInputType_disabled: BooleanInput;\n    static ngAcceptInputType_disableRipple: BooleanInput;\n}\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\nexport declare class MatTabLink extends _MatTabLinkBase implements OnDestroy {\n    /** Reference to the RippleRenderer for the tab-link. */\n    private _tabLinkRipple;\n    constructor(tabNavBar: MatTabNav, elementRef: ElementRef, ngZone: NgZone, platform: Platform, globalRippleOptions: RippleGlobalOptions | null, tabIndex: string, focusMonitor: FocusMonitor, animationMode?: string);\n    ngOnDestroy(): void;\n}\nexport {};\n"]}