{"version":3,"file":"datepicker-base.d.ts","sources":["datepicker-base.d.ts"],"names":[],"mappingssourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directionality } from '@angular/cdk/bidi';\nimport { BooleanInput } from '@angular/cdk/coercion';\nimport { Overlay, ScrollStrategy } from '@angular/cdk/overlay';\nimport { ComponentType } from '@angular/cdk/portal';\nimport { AfterViewInit, ElementRef, EventEmitter, InjectionToken, NgZone, OnDestroy, ViewContainerRef, ChangeDetectorRef, OnChanges, SimpleChanges } from '@angular/core';\nimport { CanColor, CanColorCtor, DateAdapter, ThemePalette } from '@angular/material/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Subject, Observable } from 'rxjs';\nimport { MatCalendar } from './calendar';\nimport { MatCalendarCellCssClasses, MatCalendarUserEvent } from './calendar-body';\nimport { DateFilterFn } from './datepicker-input-base';\nimport { ExtractDateTypeFromSelection, MatDateSelectionModel, DateRange } from './date-selection-model';\nimport { MatDateRangeSelectionStrategy } from './date-range-selection-strategy';\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport declare const MAT_DATEPICKER_SCROLL_STRATEGY: InjectionToken<() => ScrollStrategy>;\n/** @docs-private */\nexport declare function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy;\n/** Possible positions for the datepicker dropdown along the X axis. */\nexport declare type DatepickerDropdownPositionX = 'start' | 'end';\n/** Possible positions for the datepicker dropdown along the Y axis. */\nexport declare type DatepickerDropdownPositionY = 'above' | 'below';\n/** @docs-private */\nexport declare const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER: {\n    provide: InjectionToken<() => ScrollStrategy>;\n    deps: (typeof Overlay)[];\n    useFactory: typeof MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY;\n};\n/** @docs-private */\ndeclare class MatDatepickerContentBase {\n    _elementRef: ElementRef;\n    constructor(_elementRef: ElementRef);\n}\ndeclare const _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase;\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\nexport declare class MatDatepickerContent<S, D = ExtractDateTypeFromSelection<S>> extends _MatDatepickerContentMixinBase implements AfterViewInit, OnDestroy, CanColor {\n    /**\n     * @deprecated `_changeDetectorRef`, `_model` and `_rangeSelectionStrategy`\n     * parameters to become required.\n     * @breaking-change 11.0.0\n     */\n    private _changeDetectorRef?;\n    private _model?;\n    private _dateAdapter?;\n    private _rangeSelectionStrategy?;\n    /** Reference to the internal calendar component. */\n    _calendar: MatCalendar<D>;\n    /** Reference to the datepicker that created the overlay. */\n    datepicker: MatDatepickerBase<any, S, D>;\n    /** Start of the comparison range. */\n    comparisonStart: D | null;\n    /** End of the comparison range. */\n    comparisonEnd: D | null;\n    /** Whether the datepicker is above or below the input. */\n    _isAbove: boolean;\n    /** Current state of the animation. */\n    _animationState: 'enter' | 'void';\n    /** Emits when an animation has finished. */\n    _animationDone: Subject<void>;\n    constructor(elementRef: ElementRef, \n    /**\n     * @deprecated `_changeDetectorRef`, `_model` and `_rangeSelectionStrategy`\n     * parameters to become required.\n     * @breaking-change 11.0.0\n     */\n    _changeDetectorRef?: ChangeDetectorRef | undefined, _model?: MatDateSelectionModel<S, D> | undefined, _dateAdapter?: DateAdapter<D> | undefined, _rangeSelectionStrategy?: MatDateRangeSelectionStrategy<D> | undefined);\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    _handleUserSelection(event: MatCalendarUserEvent<D | null>): void;\n    _startExitAnimation(): void;\n    _getSelected(): D | DateRange<D> | null;\n}\n/** Form control that can be associated with a datepicker. */\nexport interface MatDatepickerControl<D> {\n    getStartValue(): D | null;\n    getThemePalette(): ThemePalette;\n    min: D | null;\n    max: D | null;\n    disabled: boolean;\n    dateFilter: DateFilterFn<D>;\n    getConnectedOverlayOrigin(): ElementRef;\n    _disabledChange: Observable<boolean>;\n}\n/** Base class for a datepicker. */\nexport declare abstract class MatDatepickerBase<C extends MatDatepickerControl<D>, S, D = ExtractDateTypeFromSelection<S>> implements OnDestroy, CanColor, OnChanges {\n    private _dialog;\n    private _overlay;\n    private _ngZone;\n    private _viewContainerRef;\n    private _dateAdapter;\n    private _dir;\n    private _document;\n    private _model;\n    private _scrollStrategy;\n    /** An input indicating the type of the custom header component for the calendar, if set. */\n    calendarHeaderComponent: ComponentType<any>;\n    /** The date to open the calendar to initially. */\n    get startAt(): D | null;\n    set startAt(value: D | null);\n    private _startAt;\n    /** The view that the calendar should start in. */\n    startView: 'month' | 'year' | 'multi-year';\n    /** Color palette to use on the datepicker's calendar. */\n    get color(): ThemePalette;\n    set color(value: ThemePalette);\n    _color: ThemePalette;\n    /**\n     * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n     * than a popup and elements have more padding to allow for bigger touch targets.\n     */\n    get touchUi(): boolean;\n    set touchUi(value: boolean);\n    private _touchUi;\n    /** Whether the datepicker pop-up should be disabled. */\n    get disabled(): boolean;\n    set disabled(value: boolean);\n    private _disabled;\n    /** Preferred position of the datepicker in the X axis. */\n    xPosition: DatepickerDropdownPositionX;\n    /** Preferred position of the datepicker in the Y axis. */\n    yPosition: DatepickerDropdownPositionY;\n    /**\n     * Emits selected year in multiyear view.\n     * This doesn't imply a change on the selected date.\n     */\n    readonly yearSelected: EventEmitter<D>;\n    /**\n     * Emits selected month in year view.\n     * This doesn't imply a change on the selected date.\n     */\n    readonly monthSelected: EventEmitter<D>;\n    /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n    panelClass: string | string[];\n    /** Function that can be used to add custom CSS classes to dates. */\n    dateClass: (date: D) => MatCalendarCellCssClasses;\n    /** Emits when the datepicker has been opened. */\n    openedStream: EventEmitter<void>;\n    /** Emits when the datepicker has been closed. */\n    closedStream: EventEmitter<void>;\n    /** Whether the calendar is open. */\n    get opened(): boolean;\n    set opened(value: boolean);\n    private _opened;\n    /** The id for the datepicker calendar. */\n    id: string;\n    /** The minimum selectable date. */\n    get _minDate(): D | null;\n    /** The maximum selectable date. */\n    get _maxDate(): D | null;\n    get _dateFilter(): DateFilterFn<D>;\n    /** A reference to the overlay when the calendar is opened as a popup. */\n    private _popupRef;\n    /** A reference to the dialog when the calendar is opened as a dialog. */\n    private _dialogRef;\n    /** Reference to the component instantiated in popup mode. */\n    private _popupComponentRef;\n    /** The element that was focused before the datepicker was opened. */\n    private _focusedElementBeforeOpen;\n    /** The input element this datepicker is associated with. */\n    _datepickerInput: C;\n    /** Emits when the datepicker is disabled. */\n    readonly _disabledChange: Subject<boolean>;\n    constructor(_dialog: MatDialog, _overlay: Overlay, _ngZone: NgZone, _viewContainerRef: ViewContainerRef, scrollStrategy: any, _dateAdapter: DateAdapter<D>, _dir: Directionality, _document: any, _model: MatDateSelectionModel<S, D>);\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnDestroy(): void;\n    /** Selects the given date */\n    select(date: D): void;\n    /** Emits the selected year in multiyear view */\n    _selectYear(normalizedYear: D): void;\n    /** Emits selected month in year view */\n    _selectMonth(normalizedMonth: D): void;\n    /**\n     * Register an input with this datepicker.\n     * @param input The datepicker input to register with this datepicker.\n     * @returns Selection model that the input should hook itself up to.\n     */\n    _registerInput(input: C): MatDateSelectionModel<S, D>;\n    /** Open the calendar. */\n    open(): void;\n    /** Close the calendar. */\n    close(): void;\n    /** Open the calendar as a dialog. */\n    private _openAsDialog;\n    /** Open the calendar as a popup. */\n    private _openAsPopup;\n    /** Forwards relevant values from the datepicker to the datepicker content inside the overlay. */\n    protected _forwardContentValues(instance: MatDatepickerContent<S, D>): void;\n    /** Create the popup. */\n    private _createPopup;\n    /** Destroys the current popup overlay. */\n    private _destroyPopup;\n    /** Sets the positions of the datepicker in dropdown mode based on the current configuration. */\n    private _setConnectedPositions;\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private _getValidDateOrNull;\n    static ngAcceptInputType_disabled: BooleanInput;\n    static ngAcceptInputType_touchUi: BooleanInput;\n}\nexport {};\n"]}