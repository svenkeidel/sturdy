{"version":3,"file":"month-view.d.ts","sources":["month-view.d.ts"],"names":[],"mappingssourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AfterContentInit, ChangeDetectorRef, EventEmitter, OnDestroy } from '@angular/core';\nimport { DateAdapter, MatDateFormats } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { MatCalendarBody, MatCalendarCell, MatCalendarCellCssClasses, MatCalendarUserEvent } from './calendar-body';\nimport { DateRange } from './date-selection-model';\nimport { MatDateRangeSelectionStrategy } from './date-range-selection-strategy';\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\nexport declare class MatMonthView<D> implements AfterContentInit, OnDestroy {\n    private _changeDetectorRef;\n    private _dateFormats;\n    _dateAdapter: DateAdapter<D>;\n    private _dir?;\n    private _rangeStrategy?;\n    private _rerenderSubscription;\n    /**\n     * The date to display in this month view (everything other than the month and year is ignored).\n     */\n    get activeDate(): D;\n    set activeDate(value: D);\n    private _activeDate;\n    /** The currently selected date. */\n    get selected(): DateRange<D> | D | null;\n    set selected(value: DateRange<D> | D | null);\n    private _selected;\n    /** The minimum selectable date. */\n    get minDate(): D | null;\n    set minDate(value: D | null);\n    private _minDate;\n    /** The maximum selectable date. */\n    get maxDate(): D | null;\n    set maxDate(value: D | null);\n    private _maxDate;\n    /** Function used to filter which dates are selectable. */\n    dateFilter: (date: D) => boolean;\n    /** Function that can be used to add custom CSS classes to dates. */\n    dateClass: (date: D) => MatCalendarCellCssClasses;\n    /** Start of the comparison range. */\n    comparisonStart: D | null;\n    /** End of the comparison range. */\n    comparisonEnd: D | null;\n    /** Emits when a new date is selected. */\n    readonly selectedChange: EventEmitter<D | null>;\n    /** Emits when any date is selected. */\n    readonly _userSelection: EventEmitter<MatCalendarUserEvent<D | null>>;\n    /** Emits when any date is activated. */\n    readonly activeDateChange: EventEmitter<D>;\n    /** The body of calendar table */\n    _matCalendarBody: MatCalendarBody;\n    /** The label for this month (e.g. \"January 2017\"). */\n    _monthLabel: string;\n    /** Grid of calendar cells representing the dates of the month. */\n    _weeks: MatCalendarCell[][];\n    /** The number of blank cells in the first row before the 1st of the month. */\n    _firstWeekOffset: number;\n    /** Start value of the currently-shown date range. */\n    _rangeStart: number | null;\n    /** End value of the currently-shown date range. */\n    _rangeEnd: number | null;\n    /** Start value of the currently-shown comparison date range. */\n    _comparisonRangeStart: number | null;\n    /** End value of the currently-shown comparison date range. */\n    _comparisonRangeEnd: number | null;\n    /** Start of the preview range. */\n    _previewStart: number | null;\n    /** End of the preview range. */\n    _previewEnd: number | null;\n    /** Whether the user is currently selecting a range of dates. */\n    _isRange: boolean;\n    /** The date of the month that today falls on. Null if today is in another month. */\n    _todayDate: number | null;\n    /** The names of the weekdays. */\n    _weekdays: {\n        long: string;\n        narrow: string;\n    }[];\n    constructor(_changeDetectorRef: ChangeDetectorRef, _dateFormats: MatDateFormats, _dateAdapter: DateAdapter<D>, _dir?: Directionality | undefined, _rangeStrategy?: MatDateRangeSelectionStrategy<D> | undefined);\n    ngAfterContentInit(): void;\n    ngOnDestroy(): void;\n    /** Handles when a new date is selected. */\n    _dateSelected(event: MatCalendarUserEvent<number>): void;\n    /** Handles keydown events on the calendar body when calendar is in month view. */\n    _handleCalendarBodyKeydown(event: KeyboardEvent): void;\n    /** Initializes this month view. */\n    _init(): void;\n    /** Focuses the active cell after the microtask queue is empty. */\n    _focusActiveCell(movePreview?: boolean): void;\n    /** Called when the user has activated a new cell and the preview needs to be updated. */\n    _previewChanged({ event, value: cell }: MatCalendarUserEvent<MatCalendarCell<D> | null>): void;\n    /** Initializes the weekdays. */\n    private _initWeekdays;\n    /** Creates MatCalendarCells for the dates in this month. */\n    private _createWeekCells;\n    /** Date filter for the month */\n    private _shouldEnableDate;\n    /**\n     * Gets the date in this month that the given Date falls on.\n     * Returns null if the given Date is in another month.\n     */\n    private _getDateInCurrentMonth;\n    /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n    private _hasSameMonthAndYear;\n    /** Gets the value that will be used to one cell to another. */\n    private _getCellCompareValue;\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private _getValidDateOrNull;\n    /** Determines whether the user has the RTL layout direction. */\n    private _isRtl;\n    /** Sets the current range based on a model value. */\n    private _setRanges;\n}\n"]}