{"version":3,"file":"date-range-input.d.ts","sources":["date-range-input.d.ts"],"names":[],"mappingssourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { OnDestroy, AfterContentInit, ChangeDetectorRef, ElementRef } from '@angular/core';\nimport { MatFormFieldControl, MatFormField } from '@angular/material/form-field';\nimport { ThemePalette, DateAdapter } from '@angular/material/core';\nimport { NgControl, ControlContainer } from '@angular/forms';\nimport { Subject } from 'rxjs';\nimport { BooleanInput } from '@angular/cdk/coercion';\nimport { MatStartDate, MatEndDate, MatDateRangeInputParent } from './date-range-input-parts';\nimport { MatDatepickerControl } from './datepicker-base';\nimport { DateFilterFn } from './datepicker-input-base';\nimport { MatDateRangePicker } from './date-range-picker';\nimport { DateRange } from './date-selection-model';\nexport declare class MatDateRangeInput<D> implements MatFormFieldControl<DateRange<D>>, MatDatepickerControl<D>, MatDateRangeInputParent<D>, AfterContentInit, OnDestroy {\n    private _changeDetectorRef;\n    private _elementRef;\n    private _dateAdapter;\n    private _formField?;\n    /** Current value of the range input. */\n    get value(): DateRange<D> | null;\n    /** Emits when the input's state has changed. */\n    stateChanges: Subject<void>;\n    /** Unique ID for the input. */\n    id: string;\n    /** Whether the control is focused. */\n    focused: boolean;\n    /** Whether the control's label should float. */\n    get shouldLabelFloat(): boolean;\n    /** Name of the form control. */\n    controlType: string;\n    /**\n     * Implemented as a part of `MatFormFieldControl`.\n     * Set the placeholder attribute on `matStartDate` and `matEndDate`.\n     * @docs-private\n     */\n    get placeholder(): string;\n    /** The range picker that this input is associated with. */\n    get rangePicker(): MatDateRangePicker<D>;\n    set rangePicker(rangePicker: MatDateRangePicker<D>);\n    private _rangePicker;\n    /** Whether the input is required. */\n    get required(): boolean;\n    set required(value: boolean);\n    private _required;\n    /** Function that can be used to filter out dates within the date range picker. */\n    get dateFilter(): DateFilterFn<D>;\n    set dateFilter(value: DateFilterFn<D>);\n    private _dateFilter;\n    /** The minimum valid date. */\n    get min(): D | null;\n    set min(value: D | null);\n    private _min;\n    /** The maximum valid date. */\n    get max(): D | null;\n    set max(value: D | null);\n    private _max;\n    /** Whether the input is disabled. */\n    get disabled(): boolean;\n    set disabled(value: boolean);\n    _groupDisabled: boolean;\n    /** Whether the input is in an error state. */\n    get errorState(): boolean;\n    /** Whether the datepicker input is empty. */\n    get empty(): boolean;\n    /** Value for the `aria-describedby` attribute of the inputs. */\n    _ariaDescribedBy: string | null;\n    /** Value for the `aria-labelledby` attribute of the inputs. */\n    _ariaLabelledBy: string | null;\n    /** Date selection model currently registered with the input. */\n    private _model;\n    /** Separator text to be shown between the inputs. */\n    separator: string;\n    /** Start of the comparison range that should be shown in the calendar. */\n    comparisonStart: D | null;\n    /** End of the comparison range that should be shown in the calendar. */\n    comparisonEnd: D | null;\n    _startInput: MatStartDate<D>;\n    _endInput: MatEndDate<D>;\n    /**\n     * Implemented as a part of `MatFormFieldControl`.\n     * TODO(crisbeto): change type to `AbstractControlDirective` after #18206 lands.\n     * @docs-private\n     */\n    ngControl: NgControl | null;\n    /** Emits when the input's disabled state changes. */\n    _disabledChange: Subject<boolean>;\n    constructor(_changeDetectorRef: ChangeDetectorRef, _elementRef: ElementRef<HTMLElement>, control: ControlContainer, _dateAdapter: DateAdapter<D>, _formField?: MatFormField | undefined);\n    /**\n     * Implemented as a part of `MatFormFieldControl`.\n     * @docs-private\n     */\n    setDescribedByIds(ids: string[]): void;\n    /**\n     * Implemented as a part of `MatFormFieldControl`.\n     * @docs-private\n     */\n    onContainerClick(): void;\n    ngAfterContentInit(): void;\n    ngOnDestroy(): void;\n    /** Gets the date at which the calendar should start. */\n    getStartValue(): D | null;\n    /** Gets the input's theme palette. */\n    getThemePalette(): ThemePalette;\n    /** Gets the element to which the calendar overlay should be attached. */\n    getConnectedOverlayOrigin(): ElementRef;\n    /** Gets the value that is used to mirror the state input. */\n    _getInputMirrorValue(): string;\n    /** Whether the input placeholders should be hidden. */\n    _shouldHidePlaceholders(): boolean;\n    /** Handles the value in one of the child inputs changing. */\n    _handleChildValueChange(): void;\n    /** Opens the date range picker associated with the input. */\n    _openDatepicker(): void;\n    /** Whether the separate text should be hidden. */\n    _shouldHideSeparator(): boolean;\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private _getValidDateOrNull;\n    /** Re-runs the validators on the start/end inputs. */\n    private _revalidate;\n    /** Registers the current date selection model with the start/end inputs. */\n    private _registerModel;\n    static ngAcceptInputType_required: BooleanInput;\n    static ngAcceptInputType_disabled: BooleanInput;\n}\n"]}