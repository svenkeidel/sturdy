{"version":3,"file":"calendar.d.ts","sources":["calendar.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ComponentType, Portal } from '@angular/cdk/portal';\nimport { AfterContentInit, AfterViewChecked, ChangeDetectorRef, EventEmitter, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';\nimport { DateAdapter, MatDateFormats } from '@angular/material/core';\nimport { Subject } from 'rxjs';\nimport { MatCalendarCellCssClasses, MatCalendarUserEvent } from './calendar-body';\nimport { MatDatepickerIntl } from './datepicker-intl';\nimport { MatMonthView } from './month-view';\nimport { MatMultiYearView } from './multi-year-view';\nimport { MatYearView } from './year-view';\nimport { DateRange } from './date-selection-model';\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport declare type MatCalendarView = 'month' | 'year' | 'multi-year';\n/** Default header for MatCalendar */\nexport declare class MatCalendarHeader<D> {\n    private _intl;\n    calendar: MatCalendar<D>;\n    private _dateAdapter;\n    private _dateFormats;\n    constructor(_intl: MatDatepickerIntl, calendar: MatCalendar<D>, _dateAdapter: DateAdapter<D>, _dateFormats: MatDateFormats, changeDetectorRef: ChangeDetectorRef);\n    /** The label for the current calendar view. */\n    get periodButtonText(): string;\n    get periodButtonLabel(): string;\n    /** The label for the previous button. */\n    get prevButtonLabel(): string;\n    /** The label for the next button. */\n    get nextButtonLabel(): string;\n    /** Handles user clicks on the period label. */\n    currentPeriodClicked(): void;\n    /** Handles user clicks on the previous button. */\n    previousClicked(): void;\n    /** Handles user clicks on the next button. */\n    nextClicked(): void;\n    /** Whether the previous period button is enabled. */\n    previousEnabled(): boolean;\n    /** Whether the next period button is enabled. */\n    nextEnabled(): boolean;\n    /** Whether the two dates represent the same view in the current view mode (month or year). */\n    private _isSameView;\n}\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\nexport declare class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n    private _dateAdapter;\n    private _dateFormats;\n    private _changeDetectorRef;\n    /** An input indicating the type of the header component, if set. */\n    headerComponent: ComponentType<any>;\n    /** A portal containing the header component type for this calendar. */\n    _calendarHeaderPortal: Portal<any>;\n    private _intlChanges;\n    /**\n     * Used for scheduling that focus should be moved to the active cell on the next tick.\n     * We need to schedule it, rather than do it immediately, because we have to wait\n     * for Angular to re-evaluate the view children.\n     */\n    private _moveFocusOnNextTick;\n    /** A date representing the period (month or year) to start the calendar in. */\n    get startAt(): D | null;\n    set startAt(value: D | null);\n    private _startAt;\n    /** Whether the calendar should be started in month or year view. */\n    startView: MatCalendarView;\n    /** The currently selected date. */\n    get selected(): DateRange<D> | D | null;\n    set selected(value: DateRange<D> | D | null);\n    private _selected;\n    /** The minimum selectable date. */\n    get minDate(): D | null;\n    set minDate(value: D | null);\n    private _minDate;\n    /** The maximum selectable date. */\n    get maxDate(): D | null;\n    set maxDate(value: D | null);\n    private _maxDate;\n    /** Function used to filter which dates are selectable. */\n    dateFilter: (date: D) => boolean;\n    /** Function that can be used to add custom CSS classes to dates. */\n    dateClass: (date: D) => MatCalendarCellCssClasses;\n    /** Start of the comparison range. */\n    comparisonStart: D | null;\n    /** End of the comparison range. */\n    comparisonEnd: D | null;\n    /**\n     * Emits when the currently selected date changes.\n     * @breaking-change 11.0.0 Emitted value to change to `D | null`.\n     */\n    readonly selectedChange: EventEmitter<D>;\n    /**\n     * Emits the year chosen in multiyear view.\n     * This doesn't imply a change on the selected date.\n     */\n    readonly yearSelected: EventEmitter<D>;\n    /**\n     * Emits the month chosen in year view.\n     * This doesn't imply a change on the selected date.\n     */\n    readonly monthSelected: EventEmitter<D>;\n    /** Emits when any date is selected. */\n    readonly _userSelection: EventEmitter<MatCalendarUserEvent<D | null>>;\n    /** Reference to the current month view component. */\n    monthView: MatMonthView<D>;\n    /** Reference to the current year view component. */\n    yearView: MatYearView<D>;\n    /** Reference to the current multi-year view component. */\n    multiYearView: MatMultiYearView<D>;\n    /**\n     * The current active date. This determines which time period is shown and which date is\n     * highlighted when using keyboard navigation.\n     */\n    get activeDate(): D;\n    set activeDate(value: D);\n    private _clampedActiveDate;\n    /** Whether the calendar is in month view. */\n    get currentView(): MatCalendarView;\n    set currentView(value: MatCalendarView);\n    private _currentView;\n    /**\n     * Emits whenever there is a state change that the header may need to respond to.\n     */\n    stateChanges: Subject<void>;\n    constructor(_intl: MatDatepickerIntl, _dateAdapter: DateAdapter<D>, _dateFormats: MatDateFormats, _changeDetectorRef: ChangeDetectorRef);\n    ngAfterContentInit(): void;\n    ngAfterViewChecked(): void;\n    ngOnDestroy(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    focusActiveCell(): void;\n    /** Updates today's date after an update of the active date */\n    updateTodaysDate(): void;\n    /** Handles date selection in the month view. */\n    _dateSelected(event: MatCalendarUserEvent<D | null>): void;\n    /** Handles year selection in the multiyear view. */\n    _yearSelectedInMultiYearView(normalizedYear: D): void;\n    /** Handles month selection in the year view. */\n    _monthSelectedInYearView(normalizedMonth: D): void;\n    /** Handles year/month selection in the multi-year/year views. */\n    _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void;\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private _getValidDateOrNull;\n    /** Returns the component instance that corresponds to the current calendar view. */\n    private _getCurrentViewComponent;\n}\n"]}