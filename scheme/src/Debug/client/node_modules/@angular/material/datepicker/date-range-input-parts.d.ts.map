{"version":3,"file":"date-range-input-parts.d.ts","sources":["date-range-input-parts.d.ts"],"names":[],"mappingssourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef, InjectionToken, OnInit, Injector, DoCheck } from '@angular/core';\nimport { NgForm, FormGroupDirective, NgControl, ValidatorFn } from '@angular/forms';\nimport { CanUpdateErrorState, CanUpdateErrorStateCtor, DateAdapter, MatDateFormats, ErrorStateMatcher } from '@angular/material/core';\nimport { BooleanInput } from '@angular/cdk/coercion';\nimport { MatDatepickerInputBase, DateFilterFn } from './datepicker-input-base';\nimport { DateRange } from './date-selection-model';\n/** Parent component that should be wrapped around `MatStartDate` and `MatEndDate`. */\nexport interface MatDateRangeInputParent<D> {\n    id: string;\n    min: D | null;\n    max: D | null;\n    dateFilter: DateFilterFn<D>;\n    rangePicker: {\n        opened: boolean;\n        id: string;\n    };\n    _startInput: MatDateRangeInputPartBase<D>;\n    _endInput: MatDateRangeInputPartBase<D>;\n    _groupDisabled: boolean;\n    _handleChildValueChange: () => void;\n    _openDatepicker: () => void;\n}\n/**\n * Used to provide the date range input wrapper component\n * to the parts without circular dependencies.\n */\nexport declare const MAT_DATE_RANGE_INPUT_PARENT: InjectionToken<MatDateRangeInputParent<unknown>>;\n/**\n * Base class for the individual inputs that can be projected inside a `mat-date-range-input`.\n */\ndeclare abstract class MatDateRangeInputPartBase<D> extends MatDatepickerInputBase<DateRange<D>> implements OnInit, DoCheck {\n    _rangeInput: MatDateRangeInputParent<D>;\n    _defaultErrorStateMatcher: ErrorStateMatcher;\n    private _injector;\n    _parentForm: NgForm;\n    _parentFormGroup: FormGroupDirective;\n    /** @docs-private */\n    ngControl: NgControl;\n    /** @docs-private */\n    abstract updateErrorState(): void;\n    protected abstract _validator: ValidatorFn | null;\n    protected abstract _assignValueToModel(value: D | null): void;\n    protected abstract _getValueFromModel(modelValue: DateRange<D>): D | null;\n    constructor(_rangeInput: MatDateRangeInputParent<D>, elementRef: ElementRef<HTMLInputElement>, _defaultErrorStateMatcher: ErrorStateMatcher, _injector: Injector, _parentForm: NgForm, _parentFormGroup: FormGroupDirective, dateAdapter: DateAdapter<D>, dateFormats: MatDateFormats);\n    ngOnInit(): void;\n    ngDoCheck(): void;\n    /** Gets whether the input is empty. */\n    isEmpty(): boolean;\n    /** Gets the placeholder of the input. */\n    _getPlaceholder(): string;\n    /** Focuses the input. */\n    focus(): void;\n    /** Handles `input` events on the input element. */\n    _onInput(value: string): void;\n    /** Opens the datepicker associated with the input. */\n    protected _openPopup(): void;\n    /** Gets the minimum date from the range input. */\n    _getMinDate(): D | null;\n    /** Gets the maximum date from the range input. */\n    _getMaxDate(): D | null;\n    /** Gets the date filter function from the range input. */\n    protected _getDateFilter(): DateFilterFn<D>;\n    protected _outsideValueChanged: () => void;\n    protected _parentDisabled(): boolean;\n}\ndeclare const _MatDateRangeInputBase: CanUpdateErrorStateCtor & typeof MatDateRangeInputPartBase;\n/** Input for entering the start date in a `mat-date-range-input`. */\nexport declare class MatStartDate<D> extends _MatDateRangeInputBase<D> implements CanUpdateErrorState {\n    /** Validator that checks that the start date isn't after the end date. */\n    private _startValidator;\n    constructor(rangeInput: MatDateRangeInputParent<D>, elementRef: ElementRef<HTMLInputElement>, defaultErrorStateMatcher: ErrorStateMatcher, injector: Injector, parentForm: NgForm, parentFormGroup: FormGroupDirective, dateAdapter: DateAdapter<D>, dateFormats: MatDateFormats);\n    protected _validator: ValidatorFn | null;\n    protected _getValueFromModel(modelValue: DateRange<D>): D | null;\n    protected _assignValueToModel(value: D | null): void;\n    protected _formatValue(value: D | null): void;\n    /** Gets the value that should be used when mirroring the input's size. */\n    getMirrorValue(): string;\n    static ngAcceptInputType_disabled: BooleanInput;\n}\n/** Input for entering the end date in a `mat-date-range-input`. */\nexport declare class MatEndDate<D> extends _MatDateRangeInputBase<D> implements CanUpdateErrorState {\n    /** Validator that checks that the end date isn't before the start date. */\n    private _endValidator;\n    constructor(rangeInput: MatDateRangeInputParent<D>, elementRef: ElementRef<HTMLInputElement>, defaultErrorStateMatcher: ErrorStateMatcher, injector: Injector, parentForm: NgForm, parentFormGroup: FormGroupDirective, dateAdapter: DateAdapter<D>, dateFormats: MatDateFormats);\n    protected _validator: ValidatorFn | null;\n    protected _getValueFromModel(modelValue: DateRange<D>): D | null;\n    protected _assignValueToModel(value: D | null): void;\n    _onKeydown(event: KeyboardEvent): void;\n    static ngAcceptInputType_disabled: BooleanInput;\n}\nexport {};\n"]}