{"version":3,"file":"progress-spinner.d.ts","sources":["progress-spinner.d.ts"],"names":[],"mappingssourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { NumberInput } from '@angular/cdk/coercion';\nimport { Platform } from '@angular/cdk/platform';\nimport { ElementRef, InjectionToken, OnInit } from '@angular/core';\nimport { CanColor, CanColorCtor } from '@angular/material/core';\n/** Possible mode for a progress spinner. */\nexport declare type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n/** @docs-private */\ndeclare class MatProgressSpinnerBase {\n    _elementRef: ElementRef;\n    constructor(_elementRef: ElementRef);\n}\ndeclare const _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase;\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n    /** Diameter of the spinner. */\n    diameter?: number;\n    /** Width of the spinner's stroke. */\n    strokeWidth?: number;\n    /**\n     * Whether the animations should be force to be enabled, ignoring if the current environment is\n     * using NoopAnimationsModule.\n     */\n    _forceAnimations?: boolean;\n}\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport declare const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS: InjectionToken<MatProgressSpinnerDefaultOptions>;\n/** @docs-private */\nexport declare function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions;\n/**\n * `<mat-progress-spinner>` component.\n */\nexport declare class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements OnInit, CanColor {\n    _elementRef: ElementRef<HTMLElement>;\n    private _document;\n    private _diameter;\n    private _value;\n    private _strokeWidth;\n    private _fallbackAnimation;\n    /**\n     * Element to which we should add the generated style tags for the indeterminate animation.\n     * For most elements this is the document, but for the ones in the Shadow DOM we need to\n     * use the shadow root.\n     */\n    private _styleRoot;\n    /**\n     * Tracks diameters of existing instances to de-dupe generated styles (default d = 100).\n     * We need to keep track of which elements the diameters were attached to, because for\n     * elements in the Shadow DOM the style tags are attached to the shadow root, rather\n     * than the document head.\n     */\n    private static _diameters;\n    /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n    _noopAnimations: boolean;\n    /** The diameter of the progress spinner (will set width and height of svg). */\n    get diameter(): number;\n    set diameter(size: number);\n    /** Stroke width of the progress spinner. */\n    get strokeWidth(): number;\n    set strokeWidth(value: number);\n    /** Mode of the progress circle */\n    mode: ProgressSpinnerMode;\n    /** Value of the progress circle. */\n    get value(): number;\n    set value(newValue: number);\n    constructor(_elementRef: ElementRef<HTMLElement>, platform: Platform, _document: any, animationMode: string, defaults?: MatProgressSpinnerDefaultOptions);\n    ngOnInit(): void;\n    /** The radius of the spinner, adjusted for stroke width. */\n    get _circleRadius(): number;\n    /** The view box of the spinner's svg element. */\n    get _viewBox(): string;\n    /** The stroke circumference of the svg circle. */\n    get _strokeCircumference(): number;\n    /** The dash offset of the svg circle. */\n    get _strokeDashOffset(): number | null;\n    /** Stroke width of the circle in percent. */\n    get _circleStrokeWidth(): number;\n    /** Dynamically generates a style tag containing the correct animation for this diameter. */\n    private _attachStyleNode;\n    /** Generates animation styles adjusted for the spinner's diameter. */\n    private _getAnimationText;\n    static ngAcceptInputType_diameter: NumberInput;\n    static ngAcceptInputType_strokeWidth: NumberInput;\n    static ngAcceptInputType_value: NumberInput;\n}\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\nexport declare class MatSpinner extends MatProgressSpinner {\n    constructor(elementRef: ElementRef<HTMLElement>, platform: Platform, document: any, animationMode: string, defaults?: MatProgressSpinnerDefaultOptions);\n}\nexport {};\n"]}