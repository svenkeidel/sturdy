{"version":3,"file":"dialog-container.d.ts","sources":["dialog-container.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ComponentRef, ElementRef, EmbeddedViewRef, EventEmitter, ChangeDetectorRef } from '@angular/core';\nimport { AnimationEvent } from '@angular/animations';\nimport { BasePortalOutlet, ComponentPortal, CdkPortalOutlet, TemplatePortal, DomPortal } from '@angular/cdk/portal';\nimport { FocusTrapFactory } from '@angular/cdk/a11y';\nimport { MatDialogConfig } from './dialog-config';\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport declare function throwMatDialogContentAlreadyAttachedError(): void;\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\nexport declare class MatDialogContainer extends BasePortalOutlet {\n    private _elementRef;\n    private _focusTrapFactory;\n    private _changeDetectorRef;\n    /** The dialog configuration. */\n    _config: MatDialogConfig;\n    private _document;\n    /** The portal outlet inside of this container into which the dialog content will be loaded. */\n    _portalOutlet: CdkPortalOutlet;\n    /** The class that traps and manages focus within the dialog. */\n    private _focusTrap;\n    /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n    private _elementFocusedBeforeDialogWasOpened;\n    /** State of the dialog animation. */\n    _state: 'void' | 'enter' | 'exit';\n    /** Emits when an animation state changes. */\n    _animationStateChanged: EventEmitter<AnimationEvent>;\n    /** ID of the element that should be considered as the dialog's label. */\n    _ariaLabelledBy: string | null;\n    /** ID for the container DOM element. */\n    _id: string;\n    constructor(_elementRef: ElementRef, _focusTrapFactory: FocusTrapFactory, _changeDetectorRef: ChangeDetectorRef, _document: any, \n    /** The dialog configuration. */\n    _config: MatDialogConfig);\n    /**\n     * Attach a ComponentPortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n    attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n    /**\n     * Attach a TemplatePortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n    attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C>;\n    /**\n     * Attaches a DOM portal to the dialog container.\n     * @param portal Portal to be attached.\n     * @deprecated To be turned into a method.\n     * @breaking-change 10.0.0\n     */\n    attachDomPortal: (portal: DomPortal) => void;\n    /** Moves focus back into the dialog if it was moved out. */\n    _recaptureFocus(): void;\n    /** Moves the focus inside the focus trap. */\n    private _trapFocus;\n    /** Restores focus to the element that was focused before the dialog opened. */\n    private _restoreFocus;\n    /**\n     * Sets up the focus trand and saves a reference to the\n     * element that was focused before the dialog was opened.\n     */\n    private _setupFocusTrap;\n    /** Returns whether focus is inside the dialog. */\n    private _containsFocus;\n    /** Callback, invoked whenever an animation on the host completes. */\n    _onAnimationDone(event: AnimationEvent): void;\n    /** Callback, invoked when an animation on the host starts. */\n    _onAnimationStart(event: AnimationEvent): void;\n    /** Starts the dialog exit animation. */\n    _startExitAnimation(): void;\n}\n"]}