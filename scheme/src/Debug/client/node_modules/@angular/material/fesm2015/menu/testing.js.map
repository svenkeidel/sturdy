{"version":3,"file":"menu__testing.js","sources":["../../../../../../src/material/menu/testing/menu-harness.ts","../../../../../../src/material/menu/testing/menu-harness-filters.ts","../../../../../../src/material/menu/testing/public-api.ts","../../../../../../src/material/menu/testing/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentHarness, HarnessPredicate, TestElement, TestKey} from '@angular/cdk/testing';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MenuHarnessFilters, MenuItemHarnessFilters} from './menu-harness-filters';\n\n/** Harness for interacting with a standard mat-menu in tests. */\nexport class MatMenuHarness extends ComponentHarness {\n  /** The selector for the host element of a `MatMenu` instance. */\n  static hostSelector = '.mat-menu-trigger';\n\n  private _documentRootLocator = this.documentRootLocatorFactory();\n\n  // TODO: potentially extend MatButtonHarness\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `MatMenuHarness` that meets certain\n   * criteria.\n   * @param options Options for filtering which menu instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: MenuHarnessFilters = {}): HarnessPredicate<MatMenuHarness> {\n    return new HarnessPredicate(MatMenuHarness, options)\n        .addOption('triggerText', options.triggerText,\n            (harness, text) => HarnessPredicate.stringMatches(harness.getTriggerText(), text));\n  }\n\n  /** Whether the menu is disabled. */\n  async isDisabled(): Promise<boolean> {\n    const disabled = (await this.host()).getAttribute('disabled');\n    return coerceBooleanProperty(await disabled);\n  }\n\n  /** Whether the menu is open. */\n  async isOpen(): Promise<boolean> {\n    return !!(await this._getMenuPanel());\n  }\n\n  /** Gets the text of the menu's trigger element. */\n  async getTriggerText(): Promise<string> {\n    return (await this.host()).text();\n  }\n\n  /** Focuses the menu. */\n  async focus(): Promise<void> {\n    return (await this.host()).focus();\n  }\n\n  /** Blurs the menu. */\n  async blur(): Promise<void> {\n    return (await this.host()).blur();\n  }\n\n  /** Opens the menu. */\n  async open(): Promise<void> {\n    if (!await this.isOpen()) {\n      return (await this.host()).click();\n    }\n  }\n\n  /** Closes the menu. */\n  async close(): Promise<void> {\n    const panel = await this._getMenuPanel();\n    if (panel) {\n      return panel.sendKeys(TestKey.ESCAPE);\n    }\n  }\n\n  /**\n   * Gets a list of `MatMenuItemHarness` representing the items in the menu.\n   * @param filters Optionally filters which menu items are included.\n   */\n  async getItems(filters: Omit<MenuItemHarnessFilters, 'ancestor'> = {}):\n      Promise<MatMenuItemHarness[]> {\n    const panelId = await this._getPanelId();\n    if (panelId) {\n      return this._documentRootLocator.locatorForAll(\n          MatMenuItemHarness.with({...filters, ancestor: `#${panelId}`}))();\n    }\n    return [];\n  }\n\n  /**\n   * Clicks an item in the menu, and optionally continues clicking items in subsequent sub-menus.\n   * @param itemFilter A filter used to represent which item in the menu should be clicked. The\n   *     first matching menu item will be clicked.\n   * @param subItemFilters A list of filters representing the items to click in any subsequent\n   *     sub-menus. The first item in the sub-menu matching the corresponding filter in\n   *     `subItemFilters` will be clicked.\n   */\n  async clickItem(\n      itemFilter: Omit<MenuItemHarnessFilters, 'ancestor'>,\n      ...subItemFilters: Omit<MenuItemHarnessFilters, 'ancestor'>[]): Promise<void> {\n    await this.open();\n    const items = await this.getItems(itemFilter);\n    if (!items.length) {\n      throw Error(`Could not find item matching ${JSON.stringify(itemFilter)}`);\n    }\n\n    if (!subItemFilters.length) {\n      return await items[0].click();\n    }\n\n    const menu = await items[0].getSubmenu();\n    if (!menu) {\n      throw Error(`Item matching ${JSON.stringify(itemFilter)} does not have a submenu`);\n    }\n    return menu.clickItem(...subItemFilters as [Omit<MenuItemHarnessFilters, 'ancestor'>]);\n  }\n\n  /** Gets the menu panel associated with this menu. */\n  private async _getMenuPanel(): Promise<TestElement | null> {\n    const panelId = await this._getPanelId();\n    return panelId ? this._documentRootLocator.locatorForOptional(`#${panelId}`)() : null;\n  }\n\n  /** Gets the id of the menu panel associated with this menu. */\n  private async _getPanelId(): Promise<string | null> {\n    const panelId = await (await this.host()).getAttribute('aria-controls');\n    return panelId || null;\n  }\n}\n\n\n/** Harness for interacting with a standard mat-menu-item in tests. */\nexport class MatMenuItemHarness extends ComponentHarness {\n  /** The selector for the host element of a `MatMenuItem` instance. */\n  static hostSelector = '.mat-menu-item';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `MatMenuItemHarness` that meets\n   * certain criteria.\n   * @param options Options for filtering which menu item instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: MenuItemHarnessFilters = {}): HarnessPredicate<MatMenuItemHarness> {\n    return new HarnessPredicate(MatMenuItemHarness, options)\n        .addOption('text', options.text,\n            (harness, text) => HarnessPredicate.stringMatches(harness.getText(), text))\n        .addOption('hasSubmenu', options.hasSubmenu,\n            async (harness, hasSubmenu) => (await harness.hasSubmenu()) === hasSubmenu);\n  }\n\n  /** Whether the menu is disabled. */\n  async isDisabled(): Promise<boolean> {\n    const disabled = (await this.host()).getAttribute('disabled');\n    return coerceBooleanProperty(await disabled);\n  }\n\n  /** Gets the text of the menu item. */\n  async getText(): Promise<string> {\n    return (await this.host()).text();\n  }\n\n  /** Focuses the menu item. */\n  async focus(): Promise<void> {\n    return (await this.host()).focus();\n  }\n\n  /** Blurs the menu item. */\n  async blur(): Promise<void> {\n    return (await this.host()).blur();\n  }\n\n  /** Clicks the menu item. */\n  async click(): Promise<void> {\n    return (await this.host()).click();\n  }\n\n  /** Whether this item has a submenu. */\n  async hasSubmenu(): Promise<boolean> {\n    return (await this.host()).matchesSelector(MatMenuHarness.hostSelector);\n  }\n\n  /** Gets the submenu associated with this menu item, or null if none. */\n  async getSubmenu(): Promise<MatMenuHarness | null> {\n    if (await this.hasSubmenu()) {\n      return new MatMenuHarness(this.locatorFactory);\n    }\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BaseHarnessFilters} from '@angular/cdk/testing';\n\n/** A set of criteria that can be used to filter a list of `MatMenuHarness` instances. */\nexport interface MenuHarnessFilters extends BaseHarnessFilters {\n  /** Only find instances whose trigger text matches the given value. */\n  triggerText?: string | RegExp;\n}\n\n/** A set of criteria that can be used to filter a list of `MatMenuItemHarness` instances. */\nexport interface MenuItemHarnessFilters extends BaseHarnessFilters {\n  /** Only find instances whose text matches the given value. */\n  text?: string | RegExp;\n  /** Only find instances that have a sub-menu. */\n  hasSubmenu?: boolean;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './menu-harness';\nexport * from './menu-harness-filters';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":";;;;AAAA;;;;;;;AAYA;AACA;IAAA,MAAa,cAAe,SAAQ,gBAAgB;QAApD;;YAIU,yBAAoB,GAAG,IAAI,CAAC,0BAA0B,EAAE,CAAC;SA8GlE;;;;;;;;QApGC,OAAO,IAAI,CAAC,UAA8B,EAAE;YAC1C,OAAO,IAAI,gBAAgB,CAAC,cAAc,EAAE,OAAO,CAAC;iBAC/C,SAAS,CAAC,aAAa,EAAE,OAAO,CAAC,WAAW,EACzC,CAAC,OAAO,EAAE,IAAI,KAAK,gBAAgB,CAAC,aAAa,CAAC,OAAO,CAAC,cAAc,EAAE,EAAE,IAAI,CAAC,CAAC,CAAC;SAC5F;;QAGK,UAAU;;gBACd,MAAM,QAAQ,GAAG,CAAC,MAAM,IAAI,CAAC,IAAI,EAAE,EAAE,YAAY,CAAC,UAAU,CAAC,CAAC;gBAC9D,OAAO,qBAAqB,CAAC,MAAM,QAAQ,CAAC,CAAC;aAC9C;SAAA;;QAGK,MAAM;;gBACV,OAAO,CAAC,EAAE,MAAM,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC;aACvC;SAAA;;QAGK,cAAc;;gBAClB,OAAO,CAAC,MAAM,IAAI,CAAC,IAAI,EAAE,EAAE,IAAI,EAAE,CAAC;aACnC;SAAA;;QAGK,KAAK;;gBACT,OAAO,CAAC,MAAM,IAAI,CAAC,IAAI,EAAE,EAAE,KAAK,EAAE,CAAC;aACpC;SAAA;;QAGK,IAAI;;gBACR,OAAO,CAAC,MAAM,IAAI,CAAC,IAAI,EAAE,EAAE,IAAI,EAAE,CAAC;aACnC;SAAA;;QAGK,IAAI;;gBACR,IAAI,EAAC,MAAM,IAAI,CAAC,MAAM,EAAE,CAAA,EAAE;oBACxB,OAAO,CAAC,MAAM,IAAI,CAAC,IAAI,EAAE,EAAE,KAAK,EAAE,CAAC;iBACpC;aACF;SAAA;;QAGK,KAAK;;gBACT,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,aAAa,EAAE,CAAC;gBACzC,IAAI,KAAK,EAAE;oBACT,OAAO,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;iBACvC;aACF;SAAA;;;;;QAMK,QAAQ,CAAC,UAAoD,EAAE;;gBAEnE,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC;gBACzC,IAAI,OAAO,EAAE;oBACX,OAAO,IAAI,CAAC,oBAAoB,CAAC,aAAa,CAC1C,kBAAkB,CAAC,IAAI,iCAAK,OAAO,KAAE,QAAQ,EAAE,IAAI,OAAO,EAAE,IAAE,CAAC,EAAE,CAAC;iBACvE;gBACD,OAAO,EAAE,CAAC;aACX;SAAA;;;;;;;;;QAUK,SAAS,CACX,UAAoD,EACpD,GAAG,cAA0D;;gBAC/D,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;gBAClB,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;gBAC9C,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;oBACjB,MAAM,KAAK,CAAC,gCAAgC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;iBAC3E;gBAED,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE;oBAC1B,OAAO,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;iBAC/B;gBAED,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,UAAU,EAAE,CAAC;gBACzC,IAAI,CAAC,IAAI,EAAE;oBACT,MAAM,KAAK,CAAC,iBAAiB,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,0BAA0B,CAAC,CAAC;iBACpF;gBACD,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,cAA4D,CAAC,CAAC;aACxF;SAAA;;QAGa,aAAa;;gBACzB,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC;gBACzC,OAAO,OAAO,GAAG,IAAI,CAAC,oBAAoB,CAAC,kBAAkB,CAAC,IAAI,OAAO,EAAE,CAAC,EAAE,GAAG,IAAI,CAAC;aACvF;SAAA;;QAGa,WAAW;;gBACvB,MAAM,OAAO,GAAG,MAAM,CAAC,MAAM,IAAI,CAAC,IAAI,EAAE,EAAE,YAAY,CAAC,eAAe,CAAC,CAAC;gBACxE,OAAO,OAAO,IAAI,IAAI,CAAC;aACxB;SAAA;;;IA/GM,2BAAY,GAAG,mBAAmB,CAAC;IAgH5C,qBAAC;KAAA;AAGD;AACA;IAAA,MAAa,kBAAmB,SAAQ,gBAAgB;;;;;;;QAUtD,OAAO,IAAI,CAAC,UAAkC,EAAE;YAC9C,OAAO,IAAI,gBAAgB,CAAC,kBAAkB,EAAE,OAAO,CAAC;iBACnD,SAAS,CAAC,MAAM,EAAE,OAAO,CAAC,IAAI,EAC3B,CAAC,OAAO,EAAE,IAAI,KAAK,gBAAgB,CAAC,aAAa,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,IAAI,CAAC,CAAC;iBAC9E,SAAS,CAAC,YAAY,EAAE,OAAO,CAAC,UAAU,EACvC,CAAO,OAAO,EAAE,UAAU,oDAAK,OAAA,CAAC,MAAM,OAAO,CAAC,UAAU,EAAE,MAAM,UAAU,CAAA,GAAA,CAAC,CAAC;SACrF;;QAGK,UAAU;;gBACd,MAAM,QAAQ,GAAG,CAAC,MAAM,IAAI,CAAC,IAAI,EAAE,EAAE,YAAY,CAAC,UAAU,CAAC,CAAC;gBAC9D,OAAO,qBAAqB,CAAC,MAAM,QAAQ,CAAC,CAAC;aAC9C;SAAA;;QAGK,OAAO;;gBACX,OAAO,CAAC,MAAM,IAAI,CAAC,IAAI,EAAE,EAAE,IAAI,EAAE,CAAC;aACnC;SAAA;;QAGK,KAAK;;gBACT,OAAO,CAAC,MAAM,IAAI,CAAC,IAAI,EAAE,EAAE,KAAK,EAAE,CAAC;aACpC;SAAA;;QAGK,IAAI;;gBACR,OAAO,CAAC,MAAM,IAAI,CAAC,IAAI,EAAE,EAAE,IAAI,EAAE,CAAC;aACnC;SAAA;;QAGK,KAAK;;gBACT,OAAO,CAAC,MAAM,IAAI,CAAC,IAAI,EAAE,EAAE,KAAK,EAAE,CAAC;aACpC;SAAA;;QAGK,UAAU;;gBACd,OAAO,CAAC,MAAM,IAAI,CAAC,IAAI,EAAE,EAAE,eAAe,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;aACzE;SAAA;;QAGK,UAAU;;gBACd,IAAI,MAAM,IAAI,CAAC,UAAU,EAAE,EAAE;oBAC3B,OAAO,IAAI,cAAc,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;iBAChD;gBACD,OAAO,IAAI,CAAC;aACb;SAAA;;;IArDM,+BAAY,GAAG,gBAAgB,CAAC;IAsDzC,yBAAC;;;AC3LD;;;;;;GAMG;;ACNH;;;;;;GAMG;;ACNH;;;;;;GAMG;;;;"}