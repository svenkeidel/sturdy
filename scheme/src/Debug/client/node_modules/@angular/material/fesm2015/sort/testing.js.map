{"version":3,"file":"sort__testing.js","sources":["../../../../../../src/material/sort/testing/sort-header-harness.ts","../../../../../../src/material/sort/testing/sort-harness.ts","../../../../../../src/material/sort/testing/public-api.ts","../../../../../../src/material/sort/testing/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentHarness, HarnessPredicate} from '@angular/cdk/testing';\nimport {SortDirection} from '@angular/material/sort';\nimport {SortHeaderHarnessFilters} from './sort-harness-filters';\n\n/** Harness for interacting with a standard Angular Material sort header in tests. */\nexport class MatSortHeaderHarness extends ComponentHarness {\n  static hostSelector = '.mat-sort-header';\n  private _button = this.locatorFor('.mat-sort-header-button');\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to\n   * search for a sort header with specific attributes.\n   */\n  static with(options: SortHeaderHarnessFilters = {}): HarnessPredicate<MatSortHeaderHarness> {\n    return new HarnessPredicate(MatSortHeaderHarness, options)\n        .addOption('label', options.label,\n            (harness, label) => HarnessPredicate.stringMatches(harness.getLabel(), label))\n        .addOption('sortDirection', options.sortDirection, (harness, sortDirection) => {\n          return HarnessPredicate.stringMatches(harness.getSortDirection(), sortDirection);\n        });\n  }\n\n  /** Gets the label of the sort header. */\n  async getLabel(): Promise<string> {\n    return (await this._button()).text();\n  }\n\n  /** Gets the sorting direction of the header. */\n  async getSortDirection(): Promise<SortDirection> {\n    const host = await this.host();\n    const ariaSort = await host.getAttribute('aria-sort');\n\n    if (ariaSort === 'ascending') {\n      return 'asc';\n    } else if (ariaSort === 'descending') {\n      return 'desc';\n    }\n\n    return '';\n  }\n\n  /** Gets the aria-label of the sort header. */\n  async getAriaLabel(): Promise<string|null> {\n    return (await this._button()).getAttribute('aria-label');\n  }\n\n  /** Gets whether the sort header is currently being sorted by. */\n  async isActive(): Promise<boolean> {\n    return !!(await this.getSortDirection());\n  }\n\n  /** Whether the sort header is disabled. */\n  async isDisabled(): Promise<boolean> {\n    const button = await this._button();\n    return (await button.getAttribute('disabled')) != null;\n  }\n\n  /** Clicks the header to change its sorting direction. Only works if the header is enabled. */\n  async click(): Promise<void> {\n    return (await this.host()).click();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentHarness, HarnessPredicate} from '@angular/cdk/testing';\nimport {SortHarnessFilters, SortHeaderHarnessFilters} from './sort-harness-filters';\nimport {MatSortHeaderHarness} from './sort-header-harness';\n\n/** Harness for interacting with a standard `mat-sort` in tests. */\nexport class MatSortHarness extends ComponentHarness {\n  static hostSelector = '.mat-sort';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `mat-sort` with specific attributes.\n   * @param options Options for narrowing the search.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: SortHarnessFilters = {}): HarnessPredicate<MatSortHarness> {\n    return new HarnessPredicate(MatSortHarness, options);\n  }\n\n  /** Gets all of the sort headers in the `mat-sort`. */\n  async getSortHeaders(filter: SortHeaderHarnessFilters = {}): Promise<MatSortHeaderHarness[]> {\n    return this.locatorForAll(MatSortHeaderHarness.with(filter))();\n  }\n\n  /** Gets the selected header in the `mat-sort`. */\n  async getActiveHeader(): Promise<MatSortHeaderHarness|null> {\n    const headers = await this.getSortHeaders();\n    for (let i = 0; i < headers.length; i++) {\n      if (await headers[i].isActive()) {\n        return headers[i];\n      }\n    }\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './sort-harness';\nexport * from './sort-header-harness';\nexport * from './sort-harness-filters';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":";;;AAAA;;;;;;;AAYA;AACA;IAAA,MAAa,oBAAqB,SAAQ,gBAAgB;QAA1D;;YAEU,YAAO,GAAG,IAAI,CAAC,UAAU,CAAC,yBAAyB,CAAC,CAAC;SAsD9D;;;;;QAhDC,OAAO,IAAI,CAAC,UAAoC,EAAE;YAChD,OAAO,IAAI,gBAAgB,CAAC,oBAAoB,EAAE,OAAO,CAAC;iBACrD,SAAS,CAAC,OAAO,EAAE,OAAO,CAAC,KAAK,EAC7B,CAAC,OAAO,EAAE,KAAK,KAAK,gBAAgB,CAAC,aAAa,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,KAAK,CAAC,CAAC;iBACjF,SAAS,CAAC,eAAe,EAAE,OAAO,CAAC,aAAa,EAAE,CAAC,OAAO,EAAE,aAAa;gBACxE,OAAO,gBAAgB,CAAC,aAAa,CAAC,OAAO,CAAC,gBAAgB,EAAE,EAAE,aAAa,CAAC,CAAC;aAClF,CAAC,CAAC;SACR;;QAGK,QAAQ;;gBACZ,OAAO,CAAC,MAAM,IAAI,CAAC,OAAO,EAAE,EAAE,IAAI,EAAE,CAAC;aACtC;SAAA;;QAGK,gBAAgB;;gBACpB,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;gBAC/B,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;gBAEtD,IAAI,QAAQ,KAAK,WAAW,EAAE;oBAC5B,OAAO,KAAK,CAAC;iBACd;qBAAM,IAAI,QAAQ,KAAK,YAAY,EAAE;oBACpC,OAAO,MAAM,CAAC;iBACf;gBAED,OAAO,EAAE,CAAC;aACX;SAAA;;QAGK,YAAY;;gBAChB,OAAO,CAAC,MAAM,IAAI,CAAC,OAAO,EAAE,EAAE,YAAY,CAAC,YAAY,CAAC,CAAC;aAC1D;SAAA;;QAGK,QAAQ;;gBACZ,OAAO,CAAC,EAAE,MAAM,IAAI,CAAC,gBAAgB,EAAE,CAAC,CAAC;aAC1C;SAAA;;QAGK,UAAU;;gBACd,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC;gBACpC,OAAO,CAAC,MAAM,MAAM,CAAC,YAAY,CAAC,UAAU,CAAC,KAAK,IAAI,CAAC;aACxD;SAAA;;QAGK,KAAK;;gBACT,OAAO,CAAC,MAAM,IAAI,CAAC,IAAI,EAAE,EAAE,KAAK,EAAE,CAAC;aACpC;SAAA;;IAtDM,iCAAY,GAAG,kBAAkB,CAAC;IAuD3C,2BAAC;;;ACrED;;;;;;;AAYA;AACA;IAAA,MAAa,cAAe,SAAQ,gBAAgB;;;;;;QAQlD,OAAO,IAAI,CAAC,UAA8B,EAAE;YAC1C,OAAO,IAAI,gBAAgB,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;SACtD;;QAGK,cAAc,CAAC,SAAmC,EAAE;;gBACxD,OAAO,IAAI,CAAC,aAAa,CAAC,oBAAoB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC;aAChE;SAAA;;QAGK,eAAe;;gBACnB,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;gBAC5C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBACvC,IAAI,MAAM,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,EAAE;wBAC/B,OAAO,OAAO,CAAC,CAAC,CAAC,CAAC;qBACnB;iBACF;gBACD,OAAO,IAAI,CAAC;aACb;SAAA;;IAzBM,2BAAY,GAAG,WAAW,CAAC;IA0BpC,qBAAC;;;ACxCD;;;;;;GAMG;;ACNH;;;;;;GAMG;;;;"}