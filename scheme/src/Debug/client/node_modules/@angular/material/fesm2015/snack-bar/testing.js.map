{"version":3,"file":"snack-bar__testing.js","sources":["../../../../../../src/material/snack-bar/testing/snack-bar-harness.ts","../../../../../../src/material/snack-bar/testing/snack-bar-harness-filters.ts","../../../../../../src/material/snack-bar/testing/public-api.ts","../../../../../../src/material/snack-bar/testing/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentHarness, HarnessPredicate} from '@angular/cdk/testing';\nimport {SnackBarHarnessFilters} from './snack-bar-harness-filters';\n\n/** Harness for interacting with a standard mat-snack-bar in tests. */\nexport class MatSnackBarHarness extends ComponentHarness {\n  // Developers can provide a custom component or template for the\n  // snackbar. The canonical snack-bar parent is the \"MatSnackBarContainer\".\n  /** The selector for the host element of a `MatSnackBar` instance. */\n  static hostSelector = '.mat-snack-bar-container';\n\n  private _simpleSnackBar = this.locatorForOptional('.mat-simple-snackbar');\n  private _simpleSnackBarMessage = this.locatorFor('.mat-simple-snackbar > span');\n  private _simpleSnackBarActionButton =\n      this.locatorForOptional('.mat-simple-snackbar-action > button');\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `MatSnackBarHarness` that meets\n   * certain criteria.\n   * @param options Options for filtering which snack bar instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: SnackBarHarnessFilters = {}): HarnessPredicate<MatSnackBarHarness> {\n    return new HarnessPredicate(MatSnackBarHarness, options);\n  }\n\n  /**\n   * Gets the role of the snack-bar. The role of a snack-bar is determined based\n   * on the ARIA politeness specified in the snack-bar config.\n   */\n  async getRole(): Promise<'alert'|'status'|null> {\n    return (await this.host()).getAttribute('role') as Promise<'alert'|'status'|null>;\n  }\n\n  /**\n   * Whether the snack-bar has an action. Method cannot be used for snack-bar's with custom content.\n   */\n  async hasAction(): Promise<boolean> {\n    await this._assertSimpleSnackBar();\n    return (await this._simpleSnackBarActionButton()) !== null;\n  }\n\n  /**\n   * Gets the description of the snack-bar. Method cannot be used for snack-bar's without action or\n   * with custom content.\n   */\n  async getActionDescription(): Promise<string> {\n    await this._assertSimpleSnackBarWithAction();\n    return (await this._simpleSnackBarActionButton())!.text();\n  }\n\n\n  /**\n   * Dismisses the snack-bar by clicking the action button. Method cannot be used for snack-bar's\n   * without action or with custom content.\n   */\n  async dismissWithAction(): Promise<void> {\n    await this._assertSimpleSnackBarWithAction();\n    await (await this._simpleSnackBarActionButton())!.click();\n  }\n\n  /**\n   * Gets the message of the snack-bar. Method cannot be used for snack-bar's with custom content.\n   */\n  async getMessage(): Promise<string> {\n    await this._assertSimpleSnackBar();\n    return (await this._simpleSnackBarMessage()).text();\n  }\n\n  /** Gets whether the snack-bar has been dismissed. */\n  async isDismissed(): Promise<boolean> {\n    // We consider the snackbar dismissed if it's not in the DOM. We can assert that the\n    // element isn't in the DOM by seeing that its width and height are zero.\n\n    const host = await this.host();\n    const [exit, dimensions] = await Promise.all([\n      // The snackbar container is marked with the \"exit\" attribute after it has been dismissed\n      // but before the animation has finished (after which it's removed from the DOM).\n      host.getAttribute('mat-exit'),\n      host.getDimensions(),\n    ]);\n\n    return exit != null || (!!dimensions && dimensions.height === 0 && dimensions.width === 0);\n  }\n\n  /**\n   * Asserts that the current snack-bar does not use custom content. Promise rejects if\n   * custom content is used.\n   */\n  private async _assertSimpleSnackBar(): Promise<void> {\n    if (!await this._isSimpleSnackBar()) {\n      throw Error('Method cannot be used for snack-bar with custom content.');\n    }\n  }\n\n  /**\n   * Asserts that the current snack-bar does not use custom content and has\n   * an action defined. Otherwise the promise will reject.\n   */\n  private async _assertSimpleSnackBarWithAction(): Promise<void> {\n    await this._assertSimpleSnackBar();\n    if (!await this.hasAction()) {\n      throw Error('Method cannot be used for standard snack-bar without action.');\n    }\n  }\n\n  /** Whether the snack-bar is using the default content template. */\n  private async _isSimpleSnackBar(): Promise<boolean> {\n    return await this._simpleSnackBar() !== null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BaseHarnessFilters} from '@angular/cdk/testing';\n\n/** A set of criteria that can be used to filter a list of `MatSnackBarHarness` instances. */\nexport interface SnackBarHarnessFilters extends BaseHarnessFilters {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './snack-bar-harness';\nexport * from './snack-bar-harness-filters';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":";;;AAAA;;;;;;;AAWA;AACA;IAAA,MAAa,kBAAmB,SAAQ,gBAAgB;QAAxD;;YAMU,oBAAe,GAAG,IAAI,CAAC,kBAAkB,CAAC,sBAAsB,CAAC,CAAC;YAClE,2BAAsB,GAAG,IAAI,CAAC,UAAU,CAAC,6BAA6B,CAAC,CAAC;YACxE,gCAA2B,GAC/B,IAAI,CAAC,kBAAkB,CAAC,sCAAsC,CAAC,CAAC;SAgGrE;;;;;;;QAxFC,OAAO,IAAI,CAAC,UAAkC,EAAE;YAC9C,OAAO,IAAI,gBAAgB,CAAC,kBAAkB,EAAE,OAAO,CAAC,CAAC;SAC1D;;;;;QAMK,OAAO;;gBACX,OAAO,CAAC,MAAM,IAAI,CAAC,IAAI,EAAE,EAAE,YAAY,CAAC,MAAM,CAAmC,CAAC;aACnF;SAAA;;;;QAKK,SAAS;;gBACb,MAAM,IAAI,CAAC,qBAAqB,EAAE,CAAC;gBACnC,OAAO,CAAC,MAAM,IAAI,CAAC,2BAA2B,EAAE,MAAM,IAAI,CAAC;aAC5D;SAAA;;;;;QAMK,oBAAoB;;gBACxB,MAAM,IAAI,CAAC,+BAA+B,EAAE,CAAC;gBAC7C,OAAO,CAAC,MAAM,IAAI,CAAC,2BAA2B,EAAE,EAAG,IAAI,EAAE,CAAC;aAC3D;SAAA;;;;;QAOK,iBAAiB;;gBACrB,MAAM,IAAI,CAAC,+BAA+B,EAAE,CAAC;gBAC7C,MAAM,CAAC,MAAM,IAAI,CAAC,2BAA2B,EAAE,EAAG,KAAK,EAAE,CAAC;aAC3D;SAAA;;;;QAKK,UAAU;;gBACd,MAAM,IAAI,CAAC,qBAAqB,EAAE,CAAC;gBACnC,OAAO,CAAC,MAAM,IAAI,CAAC,sBAAsB,EAAE,EAAE,IAAI,EAAE,CAAC;aACrD;SAAA;;QAGK,WAAW;;;;gBAIf,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;gBAC/B,MAAM,CAAC,IAAI,EAAE,UAAU,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;;;oBAG3C,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC;oBAC7B,IAAI,CAAC,aAAa,EAAE;iBACrB,CAAC,CAAC;gBAEH,OAAO,IAAI,IAAI,IAAI,KAAK,CAAC,CAAC,UAAU,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,IAAI,UAAU,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC;aAC5F;SAAA;;;;;QAMa,qBAAqB;;gBACjC,IAAI,EAAC,MAAM,IAAI,CAAC,iBAAiB,EAAE,CAAA,EAAE;oBACnC,MAAM,KAAK,CAAC,0DAA0D,CAAC,CAAC;iBACzE;aACF;SAAA;;;;;QAMa,+BAA+B;;gBAC3C,MAAM,IAAI,CAAC,qBAAqB,EAAE,CAAC;gBACnC,IAAI,EAAC,MAAM,IAAI,CAAC,SAAS,EAAE,CAAA,EAAE;oBAC3B,MAAM,KAAK,CAAC,8DAA8D,CAAC,CAAC;iBAC7E;aACF;SAAA;;QAGa,iBAAiB;;gBAC7B,OAAO,CAAA,MAAM,IAAI,CAAC,eAAe,EAAE,MAAK,IAAI,CAAC;aAC9C;SAAA;;;;;IApGM,+BAAY,GAAG,0BAA0B,CAAC;IAqGnD,yBAAC;;;ACrHD;;;;;;GAMG;;ACNH;;;;;;GAMG;;ACNH;;;;;;GAMG;;;;"}