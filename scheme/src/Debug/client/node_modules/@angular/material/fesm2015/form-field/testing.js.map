{"version":3,"file":"form-field__testing.js","sources":["../../../../../../src/material/form-field/testing/form-field-harness.ts","../../../../../../src/material/form-field/testing/form-field-harness-filters.ts","../../../../../../src/material/form-field/testing/public-api.ts","../../../../../../src/material/form-field/testing/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ComponentHarness,\n  ComponentHarnessConstructor,\n  HarnessPredicate,\n  HarnessQuery,\n  TestElement\n} from '@angular/cdk/testing';\nimport {MatFormFieldControlHarness} from '@angular/material/form-field/testing/control';\nimport {MatInputHarness} from '@angular/material/input/testing';\nimport {MatSelectHarness} from '@angular/material/select/testing';\nimport {FormFieldHarnessFilters} from './form-field-harness-filters';\n\n// TODO(devversion): support datepicker harness once developed (COMP-203).\n// Also support chip list harness.\n/** Possible harnesses of controls which can be bound to a form-field. */\nexport type FormFieldControlHarness = MatInputHarness|MatSelectHarness;\n\n/** Harness for interacting with a standard Material form-field's in tests. */\nexport class MatFormFieldHarness extends ComponentHarness {\n  static hostSelector = '.mat-form-field';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `MatFormFieldHarness` that meets\n   * certain criteria.\n   * @param options Options for filtering which form field instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: FormFieldHarnessFilters = {}): HarnessPredicate<MatFormFieldHarness> {\n    return new HarnessPredicate(MatFormFieldHarness, options)\n      .addOption('floatingLabelText', options.floatingLabelText, async (harness, text) =>\n          HarnessPredicate.stringMatches(await harness.getLabel(), text))\n      .addOption('hasErrors', options.hasErrors, async (harness, hasErrors) =>\n          await harness.hasErrors() === hasErrors);\n  }\n\n  private _prefixContainer = this.locatorForOptional('.mat-form-field-prefix');\n  private _suffixContainer = this.locatorForOptional('.mat-form-field-suffix');\n  private _label = this.locatorForOptional('.mat-form-field-label');\n  private _errors = this.locatorForAll('.mat-error');\n  private _hints = this.locatorForAll('mat-hint, .mat-hint');\n\n  private _inputControl = this.locatorForOptional(MatInputHarness);\n  private _selectControl = this.locatorForOptional(MatSelectHarness);\n\n  /** Gets the appearance of the form-field. */\n  async getAppearance(): Promise<'legacy'|'standard'|'fill'|'outline'> {\n    const hostClasses = await (await this.host()).getAttribute('class');\n    if (hostClasses !== null) {\n      const appearanceMatch =\n          hostClasses.match(/mat-form-field-appearance-(legacy|standard|fill|outline)(?:$| )/);\n      if (appearanceMatch) {\n        return appearanceMatch[1] as 'legacy' | 'standard' | 'fill' | 'outline';\n      }\n    }\n    throw Error('Could not determine appearance of form-field.');\n  }\n\n  /**\n   * Gets the harness of the control that is bound to the form-field. Only\n   * default controls such as \"MatInputHarness\" and \"MatSelectHarness\" are\n   * supported.\n   */\n  async getControl(): Promise<FormFieldControlHarness|null>;\n\n  /**\n   * Gets the harness of the control that is bound to the form-field. Searches\n   * for a control that matches the specified harness type.\n   */\n  async getControl<X extends MatFormFieldControlHarness>(type: ComponentHarnessConstructor<X>):\n      Promise<X|null>;\n\n  /**\n   * Gets the harness of the control that is bound to the form-field. Searches\n   * for a control that matches the specified harness predicate.\n   */\n  async getControl<X extends MatFormFieldControlHarness>(type: HarnessPredicate<X>):\n      Promise<X|null>;\n\n  // Implementation of the \"getControl\" method overload signatures.\n  async getControl<X extends MatFormFieldControlHarness>(type?: HarnessQuery<X>) {\n    if (type) {\n      return this.locatorForOptional(type)();\n    }\n    const hostEl = await this.host();\n    const [isInput, isSelect] = await Promise.all([\n      hostEl.hasClass('mat-form-field-type-mat-input'),\n      hostEl.hasClass('mat-form-field-type-mat-select'),\n    ]);\n    if (isInput) {\n      return this._inputControl();\n    } else if (isSelect) {\n      return this._selectControl();\n    }\n    return null;\n  }\n\n  /** Whether the form-field has a label. */\n  async hasLabel(): Promise<boolean> {\n    return (await this.host()).hasClass('mat-form-field-has-label');\n  }\n\n  /** Gets the label of the form-field. */\n  async getLabel(): Promise<string|null> {\n    const labelEl = await this._label();\n    return labelEl ? labelEl.text() : null;\n  }\n\n  /** Whether the form-field has errors. */\n  async hasErrors(): Promise<boolean> {\n    return (await this.getTextErrors()).length > 0;\n  }\n\n  /** Whether the label is currently floating. */\n  async isLabelFloating(): Promise<boolean> {\n    const [hasLabel, shouldFloat] = await Promise.all([\n      this.hasLabel(),\n      (await this.host()).hasClass('mat-form-field-should-float'),\n    ]);\n    // If there is no label, the label conceptually can never float. The `should-float` class\n    // is just always set regardless of whether the label is displayed or not.\n    return hasLabel && shouldFloat;\n  }\n\n  /** Whether the form-field is disabled. */\n  async isDisabled(): Promise<boolean> {\n    return (await this.host()).hasClass('mat-form-field-disabled');\n  }\n\n  /** Whether the form-field is currently autofilled. */\n  async isAutofilled(): Promise<boolean> {\n    return (await this.host()).hasClass('mat-form-field-autofilled');\n  }\n\n  /** Gets the theme color of the form-field. */\n  async getThemeColor(): Promise<'primary'|'accent'|'warn'> {\n    const hostEl = await this.host();\n    const [isAccent, isWarn] =\n        await Promise.all([hostEl.hasClass('mat-accent'), hostEl.hasClass('mat-warn')]);\n    if (isAccent) {\n      return 'accent';\n    } else if (isWarn) {\n      return 'warn';\n    }\n    return 'primary';\n  }\n\n  /** Gets error messages which are currently displayed in the form-field. */\n  async getTextErrors(): Promise<string[]> {\n    return Promise.all((await this._errors()).map(e => e.text()));\n  }\n\n  /** Gets hint messages which are currently displayed in the form-field. */\n  async getTextHints(): Promise<string[]> {\n    return Promise.all((await this._hints()).map(e => e.text()));\n  }\n\n  /**\n   * Gets a reference to the container element which contains all projected\n   * prefixes of the form-field.\n   */\n  async getHarnessLoaderForPrefix(): Promise<TestElement|null> {\n    return this._prefixContainer();\n  }\n\n  /**\n   * Gets a reference to the container element which contains all projected\n   * suffixes of the form-field.\n   */\n  async getHarnessLoaderForSuffix(): Promise<TestElement|null> {\n    return this._suffixContainer();\n  }\n\n  /**\n   * Whether the form control has been touched. Returns \"null\"\n   * if no form control is set up.\n   */\n  async isControlTouched(): Promise<boolean|null> {\n    if (!await this._hasFormControl()) {\n      return null;\n    }\n    return (await this.host()).hasClass('ng-touched');\n  }\n\n  /**\n   * Whether the form control is dirty. Returns \"null\"\n   * if no form control is set up.\n   */\n  async isControlDirty(): Promise<boolean|null> {\n    if (!await this._hasFormControl()) {\n      return null;\n    }\n    return (await this.host()).hasClass('ng-dirty');\n  }\n\n  /**\n   * Whether the form control is valid. Returns \"null\"\n   * if no form control is set up.\n   */\n  async isControlValid(): Promise<boolean|null> {\n    if (!await this._hasFormControl()) {\n      return null;\n    }\n    return (await this.host()).hasClass('ng-valid');\n  }\n\n  /**\n   * Whether the form control is pending validation. Returns \"null\"\n   * if no form control is set up.\n   */\n  async isControlPending(): Promise<boolean|null> {\n    if (!await this._hasFormControl()) {\n      return null;\n    }\n    return (await this.host()).hasClass('ng-pending');\n  }\n\n  /** Checks whether the form-field control has set up a form control. */\n  private async _hasFormControl(): Promise<boolean> {\n    const hostEl = await this.host();\n    // If no form \"NgControl\" is bound to the form-field control, the form-field\n    // is not able to forward any control status classes. Therefore if either the\n    // \"ng-touched\" or \"ng-untouched\" class is set, we know that it has a form control\n    const [isTouched, isUntouched] =\n        await Promise.all([hostEl.hasClass('ng-touched'), hostEl.hasClass('ng-untouched')]);\n    return isTouched || isUntouched;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BaseHarnessFilters} from '@angular/cdk/testing';\n\n/** A set of criteria that can be used to filter a list of `MatFormFieldHarness` instances. */\nexport interface FormFieldHarnessFilters extends BaseHarnessFilters {\n  /** Filters based on the text of the form field's floating label. */\n  floatingLabelText?: string | RegExp;\n  /** Filters based on whether the form field has error messages. */\n  hasErrors?: boolean;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// Re-export everything from the \"form-field/testing/control\" entry-point. To avoid\n// circular dependencies, harnesses for default form-field controls (i.e. input, select)\n// need to import the base form-field control harness through a separate entry-point.\nexport * from '@angular/material/form-field/testing/control';\n\nexport * from './form-field-harness';\nexport * from './form-field-harness-filters';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":";;;;;;AAAA;;;;;;;AAyBA;AACA;IAAA,MAAa,mBAAoB,SAAQ,gBAAgB;QAAzD;;YAiBU,qBAAgB,GAAG,IAAI,CAAC,kBAAkB,CAAC,wBAAwB,CAAC,CAAC;YACrE,qBAAgB,GAAG,IAAI,CAAC,kBAAkB,CAAC,wBAAwB,CAAC,CAAC;YACrE,WAAM,GAAG,IAAI,CAAC,kBAAkB,CAAC,uBAAuB,CAAC,CAAC;YAC1D,YAAO,GAAG,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;YAC3C,WAAM,GAAG,IAAI,CAAC,aAAa,CAAC,qBAAqB,CAAC,CAAC;YAEnD,kBAAa,GAAG,IAAI,CAAC,kBAAkB,CAAC,eAAe,CAAC,CAAC;YACzD,mBAAc,GAAG,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,CAAC;SAwLpE;;;;;;;QAvMC,OAAO,IAAI,CAAC,UAAmC,EAAE;YAC/C,OAAO,IAAI,gBAAgB,CAAC,mBAAmB,EAAE,OAAO,CAAC;iBACtD,SAAS,CAAC,mBAAmB,EAAE,OAAO,CAAC,iBAAiB,EAAE,CAAO,OAAO,EAAE,IAAI,oDAC3E,OAAA,gBAAgB,CAAC,aAAa,CAAC,MAAM,OAAO,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,CAAA,GAAA,CAAC;iBAClE,SAAS,CAAC,WAAW,EAAE,OAAO,CAAC,SAAS,EAAE,CAAO,OAAO,EAAE,SAAS,oDAChE,OAAA,CAAA,MAAM,OAAO,CAAC,SAAS,EAAE,MAAK,SAAS,CAAA,GAAA,CAAC,CAAC;SAChD;;QAYK,aAAa;;gBACjB,MAAM,WAAW,GAAG,MAAM,CAAC,MAAM,IAAI,CAAC,IAAI,EAAE,EAAE,YAAY,CAAC,OAAO,CAAC,CAAC;gBACpE,IAAI,WAAW,KAAK,IAAI,EAAE;oBACxB,MAAM,eAAe,GACjB,WAAW,CAAC,KAAK,CAAC,iEAAiE,CAAC,CAAC;oBACzF,IAAI,eAAe,EAAE;wBACnB,OAAO,eAAe,CAAC,CAAC,CAA+C,CAAC;qBACzE;iBACF;gBACD,MAAM,KAAK,CAAC,+CAA+C,CAAC,CAAC;aAC9D;SAAA;;QAwBK,UAAU,CAAuC,IAAsB;;gBAC3E,IAAI,IAAI,EAAE;oBACR,OAAO,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,EAAE,CAAC;iBACxC;gBACD,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;gBACjC,MAAM,CAAC,OAAO,EAAE,QAAQ,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;oBAC5C,MAAM,CAAC,QAAQ,CAAC,+BAA+B,CAAC;oBAChD,MAAM,CAAC,QAAQ,CAAC,gCAAgC,CAAC;iBAClD,CAAC,CAAC;gBACH,IAAI,OAAO,EAAE;oBACX,OAAO,IAAI,CAAC,aAAa,EAAE,CAAC;iBAC7B;qBAAM,IAAI,QAAQ,EAAE;oBACnB,OAAO,IAAI,CAAC,cAAc,EAAE,CAAC;iBAC9B;gBACD,OAAO,IAAI,CAAC;aACb;SAAA;;QAGK,QAAQ;;gBACZ,OAAO,CAAC,MAAM,IAAI,CAAC,IAAI,EAAE,EAAE,QAAQ,CAAC,0BAA0B,CAAC,CAAC;aACjE;SAAA;;QAGK,QAAQ;;gBACZ,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,MAAM,EAAE,CAAC;gBACpC,OAAO,OAAO,GAAG,OAAO,CAAC,IAAI,EAAE,GAAG,IAAI,CAAC;aACxC;SAAA;;QAGK,SAAS;;gBACb,OAAO,CAAC,MAAM,IAAI,CAAC,aAAa,EAAE,EAAE,MAAM,GAAG,CAAC,CAAC;aAChD;SAAA;;QAGK,eAAe;;gBACnB,MAAM,CAAC,QAAQ,EAAE,WAAW,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;oBAChD,IAAI,CAAC,QAAQ,EAAE;oBACf,CAAC,MAAM,IAAI,CAAC,IAAI,EAAE,EAAE,QAAQ,CAAC,6BAA6B,CAAC;iBAC5D,CAAC,CAAC;;;gBAGH,OAAO,QAAQ,IAAI,WAAW,CAAC;aAChC;SAAA;;QAGK,UAAU;;gBACd,OAAO,CAAC,MAAM,IAAI,CAAC,IAAI,EAAE,EAAE,QAAQ,CAAC,yBAAyB,CAAC,CAAC;aAChE;SAAA;;QAGK,YAAY;;gBAChB,OAAO,CAAC,MAAM,IAAI,CAAC,IAAI,EAAE,EAAE,QAAQ,CAAC,2BAA2B,CAAC,CAAC;aAClE;SAAA;;QAGK,aAAa;;gBACjB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;gBACjC,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,GACpB,MAAM,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;gBACpF,IAAI,QAAQ,EAAE;oBACZ,OAAO,QAAQ,CAAC;iBACjB;qBAAM,IAAI,MAAM,EAAE;oBACjB,OAAO,MAAM,CAAC;iBACf;gBACD,OAAO,SAAS,CAAC;aAClB;SAAA;;QAGK,aAAa;;gBACjB,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,IAAI,CAAC,OAAO,EAAE,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;aAC/D;SAAA;;QAGK,YAAY;;gBAChB,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,IAAI,CAAC,MAAM,EAAE,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;aAC9D;SAAA;;;;;QAMK,yBAAyB;;gBAC7B,OAAO,IAAI,CAAC,gBAAgB,EAAE,CAAC;aAChC;SAAA;;;;;QAMK,yBAAyB;;gBAC7B,OAAO,IAAI,CAAC,gBAAgB,EAAE,CAAC;aAChC;SAAA;;;;;QAMK,gBAAgB;;gBACpB,IAAI,EAAC,MAAM,IAAI,CAAC,eAAe,EAAE,CAAA,EAAE;oBACjC,OAAO,IAAI,CAAC;iBACb;gBACD,OAAO,CAAC,MAAM,IAAI,CAAC,IAAI,EAAE,EAAE,QAAQ,CAAC,YAAY,CAAC,CAAC;aACnD;SAAA;;;;;QAMK,cAAc;;gBAClB,IAAI,EAAC,MAAM,IAAI,CAAC,eAAe,EAAE,CAAA,EAAE;oBACjC,OAAO,IAAI,CAAC;iBACb;gBACD,OAAO,CAAC,MAAM,IAAI,CAAC,IAAI,EAAE,EAAE,QAAQ,CAAC,UAAU,CAAC,CAAC;aACjD;SAAA;;;;;QAMK,cAAc;;gBAClB,IAAI,EAAC,MAAM,IAAI,CAAC,eAAe,EAAE,CAAA,EAAE;oBACjC,OAAO,IAAI,CAAC;iBACb;gBACD,OAAO,CAAC,MAAM,IAAI,CAAC,IAAI,EAAE,EAAE,QAAQ,CAAC,UAAU,CAAC,CAAC;aACjD;SAAA;;;;;QAMK,gBAAgB;;gBACpB,IAAI,EAAC,MAAM,IAAI,CAAC,eAAe,EAAE,CAAA,EAAE;oBACjC,OAAO,IAAI,CAAC;iBACb;gBACD,OAAO,CAAC,MAAM,IAAI,CAAC,IAAI,EAAE,EAAE,QAAQ,CAAC,YAAY,CAAC,CAAC;aACnD;SAAA;;QAGa,eAAe;;gBAC3B,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;;;;gBAIjC,MAAM,CAAC,SAAS,EAAE,WAAW,CAAC,GAC1B,MAAM,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;gBACxF,OAAO,SAAS,IAAI,WAAW,CAAC;aACjC;SAAA;;IA9MM,gCAAY,GAAG,iBAAiB,CAAC;IA+M1C,0BAAC;;;AC1OD;;;;;;GAMG;;ACNH;;;;;;GAMG;;ACNH;;;;;;GAMG;;;;"}