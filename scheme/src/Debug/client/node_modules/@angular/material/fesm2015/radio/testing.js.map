{"version":3,"file":"radio__testing.js","sources":["../../../../../../src/material/radio/testing/radio-harness.ts","../../../../../../src/material/radio/testing/radio-harness-filters.ts","../../../../../../src/material/radio/testing/public-api.ts","../../../../../../src/material/radio/testing/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ComponentHarness, HarnessPredicate} from '@angular/cdk/testing';\nimport {RadioButtonHarnessFilters, RadioGroupHarnessFilters} from './radio-harness-filters';\n\n/** Harness for interacting with a standard mat-radio-group in tests. */\nexport class MatRadioGroupHarness extends ComponentHarness {\n  /** The selector for the host element of a `MatRadioGroup` instance. */\n  static hostSelector = 'mat-radio-group';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `MatRadioGroupHarness` that meets\n   * certain criteria.\n   * @param options Options for filtering which radio group instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: RadioGroupHarnessFilters = {}): HarnessPredicate<MatRadioGroupHarness> {\n    return new HarnessPredicate(MatRadioGroupHarness, options)\n        .addOption('name', options.name, this._checkRadioGroupName);\n  }\n\n  /** Gets the name of the radio-group. */\n  async getName(): Promise<string|null> {\n    const hostName = await this._getGroupNameFromHost();\n    // It's not possible to always determine the \"name\" of a radio-group by reading\n    // the attribute. This is because the radio-group does not set the \"name\" as an\n    // element attribute if the \"name\" value is set through a binding.\n    if (hostName !== null) {\n      return hostName;\n    }\n    // In case we couldn't determine the \"name\" of a radio-group by reading the\n    // \"name\" attribute, we try to determine the \"name\" of the group by going\n    // through all radio buttons.\n    const radioNames = await this._getNamesFromRadioButtons();\n    if (!radioNames.length) {\n      return null;\n    }\n    if (!this._checkRadioNamesInGroupEqual(radioNames)) {\n      throw Error('Radio buttons in radio-group have mismatching names.');\n    }\n    return radioNames[0]!;\n  }\n\n  /** Gets the id of the radio-group. */\n  async getId(): Promise<string|null> {\n    return (await this.host()).getProperty('id');\n  }\n\n  /** Gets the checked radio-button in a radio-group. */\n  async getCheckedRadioButton(): Promise<MatRadioButtonHarness|null> {\n    for (let radioButton of await this.getRadioButtons()) {\n      if (await radioButton.isChecked()) {\n        return radioButton;\n      }\n    }\n    return null;\n  }\n\n  /** Gets the checked value of the radio-group. */\n  async getCheckedValue(): Promise<string|null> {\n    const checkedRadio = await this.getCheckedRadioButton();\n    if (!checkedRadio) {\n      return null;\n    }\n    return checkedRadio.getValue();\n  }\n\n  /**\n   * Gets a list of radio buttons which are part of the radio-group.\n   * @param filter Optionally filters which radio buttons are included.\n   */\n  async getRadioButtons(filter: RadioButtonHarnessFilters = {}): Promise<MatRadioButtonHarness[]> {\n    return this.locatorForAll(MatRadioButtonHarness.with(filter))();\n  }\n\n  /**\n   * Checks a radio button in this group.\n   * @param filter An optional filter to apply to the child radio buttons. The first tab matching\n   *     the filter will be selected.\n   */\n  async checkRadioButton(filter: RadioButtonHarnessFilters = {}): Promise<void> {\n    const radioButtons = await this.getRadioButtons(filter);\n    if (!radioButtons.length) {\n      throw Error(`Could not find radio button matching ${JSON.stringify(filter)}`);\n    }\n    return radioButtons[0].check();\n  }\n\n  /** Gets the name attribute of the host element. */\n  private async _getGroupNameFromHost() {\n    return (await this.host()).getAttribute('name');\n  }\n\n  /** Gets a list of the name attributes of all child radio buttons. */\n  private async _getNamesFromRadioButtons(): Promise<string[]> {\n    const groupNames: string[] = [];\n    for (let radio of await this.getRadioButtons()) {\n      const radioName = await radio.getName();\n      if (radioName !== null) {\n        groupNames.push(radioName);\n      }\n    }\n    return groupNames;\n  }\n\n  /** Checks if the specified radio names are all equal. */\n  private _checkRadioNamesInGroupEqual(radioNames: string[]): boolean {\n    let groupName: string|null = null;\n    for (let radioName of radioNames) {\n      if (groupName === null) {\n        groupName = radioName;\n      } else if (groupName !== radioName) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Checks if a radio-group harness has the given name. Throws if a radio-group with\n   * matching name could be found but has mismatching radio-button names.\n   */\n  private static async _checkRadioGroupName(harness: MatRadioGroupHarness, name: string) {\n    // Check if there is a radio-group which has the \"name\" attribute set\n    // to the expected group name. It's not possible to always determine\n    // the \"name\" of a radio-group by reading the attribute. This is because\n    // the radio-group does not set the \"name\" as an element attribute if the\n    // \"name\" value is set through a binding.\n    if (await harness._getGroupNameFromHost() === name) {\n      return true;\n    }\n    // Check if there is a group with radio-buttons that all have the same\n    // expected name. This implies that the group has the given name. It's\n    // not possible to always determine the name of a radio-group through\n    // the attribute because there is\n    const radioNames = await harness._getNamesFromRadioButtons();\n    if (radioNames.indexOf(name) === -1) {\n      return false;\n    }\n    if (!harness._checkRadioNamesInGroupEqual(radioNames)) {\n      throw Error(\n          `The locator found a radio-group with name \"${name}\", but some ` +\n          `radio-button's within the group have mismatching names, which is invalid.`);\n    }\n    return true;\n  }\n}\n\n/** Harness for interacting with a standard mat-radio-button in tests. */\nexport class MatRadioButtonHarness extends ComponentHarness {\n  /** The selector for the host element of a `MatRadioButton` instance. */\n  static hostSelector = 'mat-radio-button';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `MatRadioButtonHarness` that meets\n   * certain criteria.\n   * @param options Options for filtering which radio button instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: RadioButtonHarnessFilters = {}): HarnessPredicate<MatRadioButtonHarness> {\n    return new HarnessPredicate(MatRadioButtonHarness, options)\n        .addOption(\n            'label', options.label,\n            (harness, label) => HarnessPredicate.stringMatches(harness.getLabelText(), label))\n        .addOption(\n            'name', options.name, async (harness, name) => (await harness.getName()) === name);\n  }\n\n  private _textLabel = this.locatorFor('.mat-radio-label-content');\n  private _clickLabel = this.locatorFor('.mat-radio-label');\n  private _input = this.locatorFor('input');\n\n  /** Whether the radio-button is checked. */\n  async isChecked(): Promise<boolean> {\n    const checked = (await this._input()).getProperty('checked');\n    return coerceBooleanProperty(await checked);\n  }\n\n  /** Whether the radio-button is disabled. */\n  async isDisabled(): Promise<boolean> {\n    const disabled = (await this._input()).getAttribute('disabled');\n    return coerceBooleanProperty(await disabled);\n  }\n\n  /** Whether the radio-button is required. */\n  async isRequired(): Promise<boolean> {\n    const required = (await this._input()).getAttribute('required');\n    return coerceBooleanProperty(await required);\n  }\n\n  /** Gets the radio-button's name. */\n  async getName(): Promise<string|null> {\n    return (await this._input()).getAttribute('name');\n  }\n\n  /** Gets the radio-button's id. */\n  async getId(): Promise<string|null> {\n    return (await this.host()).getProperty('id');\n  }\n\n  /**\n   * Gets the value of the radio-button. The radio-button value will be converted to a string.\n   *\n   * Note: This means that for radio-button's with an object as a value `[object Object]` is\n   * intentionally returned.\n   */\n  async getValue(): Promise<string|null> {\n    return (await this._input()).getProperty('value');\n  }\n\n  /** Gets the radio-button's label text. */\n  async getLabelText(): Promise<string> {\n    return (await this._textLabel()).text();\n  }\n\n  /** Focuses the radio-button. */\n  async focus(): Promise<void> {\n    return (await this._input()).focus();\n  }\n\n  /** Blurs the radio-button. */\n  async blur(): Promise<void> {\n    return (await this._input()).blur();\n  }\n\n  /**\n   * Puts the radio-button in a checked state by clicking it if it is currently unchecked,\n   * or doing nothing if it is already checked.\n   */\n  async check(): Promise<void> {\n    if (!(await this.isChecked())) {\n      return (await this._clickLabel()).click();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BaseHarnessFilters} from '@angular/cdk/testing';\n\n/** A set of criteria that can be used to filter a list of `MatRadioGroupHarness` instances. */\nexport interface RadioGroupHarnessFilters extends BaseHarnessFilters {\n  /** Only find instances whose name attribute is the given value. */\n  name?: string;\n}\n\n/** A set of criteria that can be used to filter a list of `MatRadioButtonHarness` instances. */\nexport interface RadioButtonHarnessFilters extends BaseHarnessFilters {\n  /** Only find instances whose label matches the given value. */\n  label?: string | RegExp;\n  /** Only find instances whose name attribute is the given value. */\n  name?: string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './radio-harness';\nexport * from './radio-harness-filters';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}