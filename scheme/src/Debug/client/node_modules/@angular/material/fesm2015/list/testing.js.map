{"version":3,"file":"list__testing.js","sources":["../../../../../../src/material/list/testing/list-item-harness-base.ts","../../../../../../src/material/list/testing/list-harness-base.ts","../../../../../../src/material/list/testing/action-list-harness.ts","../../../../../../src/material/list/testing/list-harness.ts","../../../../../../src/material/list/testing/list-harness-filters.ts","../../../../../../src/material/list/testing/nav-list-harness.ts","../../../../../../src/material/list/testing/selection-list-harness.ts","../../../../../../src/material/list/testing/public-api.ts","../../../../../../src/material/list/testing/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ComponentHarness,\n  ComponentHarnessConstructor,\n  HarnessLoader,\n  HarnessPredicate\n} from '@angular/cdk/testing';\nimport {BaseListItemHarnessFilters, SubheaderHarnessFilters} from './list-harness-filters';\n\n/**\n * Gets a `HarnessPredicate` that applies the given `BaseListItemHarnessFilters` to the given\n * list item harness.\n * @template H The type of list item harness to create a predicate for.\n * @param harnessType A constructor for a list item harness.\n * @param options An instance of `BaseListItemHarnessFilters` to apply.\n * @return A `HarnessPredicate` for the given harness type with the given options applied.\n */\nexport function getListItemPredicate<H extends MatListItemHarnessBase>(\n    harnessType: ComponentHarnessConstructor<H>,\n    options: BaseListItemHarnessFilters): HarnessPredicate<H> {\n  return new HarnessPredicate(harnessType, options)\n      .addOption('text', options.text,\n          (harness, text) => HarnessPredicate.stringMatches(harness.getText(), text));\n}\n\n/** Harness for interacting with a list subheader. */\nexport class MatSubheaderHarness extends ComponentHarness {\n  static hostSelector = '[mat-subheader], [matSubheader]';\n\n  static with(options: SubheaderHarnessFilters = {}): HarnessPredicate<MatSubheaderHarness> {\n    return new HarnessPredicate(MatSubheaderHarness, options)\n        .addOption('text', options.text,\n            (harness, text) => HarnessPredicate.stringMatches(harness.getText(), text));\n  }\n\n  /** Gets the full text content of the list item (including text from any font icons). */\n  async getText(): Promise<string> {\n    return (await this.host()).text();\n  }\n}\n\n/**\n * Shared behavior among the harnesses for the various `MatListItem` flavors.\n * @docs-private\n */\nexport class MatListItemHarnessBase extends ComponentHarness {\n  private _lines = this.locatorForAll('[mat-line], [matLine]');\n  private _avatar = this.locatorForOptional('[mat-list-avatar], [matListAvatar]');\n  private _icon = this.locatorForOptional('[mat-list-icon], [matListIcon]');\n\n  /** Gets the full text content of the list item (including text from any font icons). */\n  async getText(): Promise<string> {\n    return (await this.host()).text();\n  }\n\n  /** Gets the lines of text (`mat-line` elements) in this nav list item. */\n  async getLinesText(): Promise<string[]> {\n    return Promise.all((await this._lines()).map(l => l.text()));\n  }\n\n  /** Whether this list item has an avatar. */\n  async hasAvatar(): Promise<boolean> {\n    return !!await this._avatar();\n  }\n\n  /** Whether this list item has an icon. */\n  async hasIcon(): Promise<boolean> {\n    return !!await this._icon();\n  }\n\n  /** Gets a `HarnessLoader` used to get harnesses within the list item's content. */\n  async getHarnessLoaderForContent(): Promise<HarnessLoader> {\n    return this.locatorFactory.harnessLoaderFor('.mat-list-item-content');\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ComponentHarness,\n  ComponentHarnessConstructor,\n  HarnessPredicate\n} from '@angular/cdk/testing';\nimport {DividerHarnessFilters, MatDividerHarness} from '@angular/material/divider/testing';\nimport {BaseListItemHarnessFilters, SubheaderHarnessFilters} from './list-harness-filters';\nimport {MatSubheaderHarness} from './list-item-harness-base';\n\n/** Represents a section of a list falling under a specific header. */\nexport interface ListSection<I> {\n  /** The heading for this list section. `undefined` if there is no heading. */\n  heading?: string;\n\n  /** The items in this list section. */\n  items: I[];\n}\n\n/**\n * Shared behavior among the harnesses for the various `MatList` flavors.\n * @template T A constructor type for a list item harness type used by this list harness.\n * @template C The list item harness type that `T` constructs.\n * @template F The filter type used filter list item harness of type `C`.\n * @docs-private\n */\nexport class MatListHarnessBase\n    <\n      T extends (ComponentHarnessConstructor<C> & {with: (options?: F) => HarnessPredicate<C>}),\n      C extends ComponentHarness,\n      F extends BaseListItemHarnessFilters\n    > extends ComponentHarness {\n  protected _itemHarness: T;\n\n  /**\n   * Gets a list of harnesses representing the items in this list.\n   * @param filters Optional filters used to narrow which harnesses are included\n   * @return The list of items matching the given filters.\n   */\n  async getItems(filters?: F): Promise<C[]> {\n    return this.locatorForAll(this._itemHarness.with(filters))();\n  }\n\n  /**\n   * Gets a list of `ListSection` representing the list items grouped by subheaders. If the list has\n   * no subheaders it is represented as a single `ListSection` with an undefined `heading` property.\n   * @param filters Optional filters used to narrow which list item harnesses are included\n   * @return The list of items matching the given filters, grouped into sections by subheader.\n   */\n  async getItemsGroupedBySubheader(filters?: F): Promise<ListSection<C>[]> {\n    const listSections = [];\n    let currentSection: ListSection<C> = {items: []};\n    const itemsAndSubheaders =\n        await this.getItemsWithSubheadersAndDividers({item: filters, divider: false});\n    for (const itemOrSubheader of itemsAndSubheaders) {\n      if (itemOrSubheader instanceof MatSubheaderHarness) {\n        if (currentSection.heading !== undefined || currentSection.items.length) {\n          listSections.push(currentSection);\n        }\n        currentSection = {heading: await itemOrSubheader.getText(), items: []};\n      } else {\n        currentSection.items.push(itemOrSubheader);\n      }\n    }\n    if (currentSection.heading !== undefined || currentSection.items.length ||\n        !listSections.length) {\n      listSections.push(currentSection);\n    }\n    return listSections;\n  }\n\n  /**\n   * Gets a list of sub-lists representing the list items grouped by dividers. If the list has no\n   * dividers it is represented as a list with a single sub-list.\n   * @param filters Optional filters used to narrow which list item harnesses are included\n   * @return The list of items matching the given filters, grouped into sub-lists by divider.\n   */\n  async getItemsGroupedByDividers(filters?: F): Promise<C[][]> {\n    const listSections: C[][] = [[]];\n    const itemsAndDividers =\n        await this.getItemsWithSubheadersAndDividers({item: filters, subheader: false});\n    for (const itemOrDivider of itemsAndDividers) {\n      if (itemOrDivider instanceof MatDividerHarness) {\n        listSections.push([]);\n      } else {\n        listSections[listSections.length - 1].push(itemOrDivider);\n      }\n    }\n    return listSections;\n  }\n\n  /**\n   * Gets a list of harnesses representing all of the items, subheaders, and dividers\n   * (in the order they appear in the list). Use `instanceof` to check which type of harness a given\n   * item is.\n   * @param filters Optional filters used to narrow which list items, subheaders, and dividers are\n   *     included. A value of `false` for the `item`, `subheader`, or `divider` properties indicates\n   *     that the respective harness type should be omitted completely.\n   * @return The list of harnesses representing the items, subheaders, and dividers matching the\n   *     given filters.\n   */\n  getItemsWithSubheadersAndDividers(filters: {\n    item: false,\n    subheader: false,\n    divider: false\n  }): Promise<[]>;\n  getItemsWithSubheadersAndDividers(filters: {\n    item?: F | false,\n    subheader: false,\n    divider: false\n  }): Promise<C[]>;\n  getItemsWithSubheadersAndDividers(filters: {\n    item: false,\n    subheader?: SubheaderHarnessFilters | false,\n    divider: false\n  }): Promise<MatSubheaderHarness[]>;\n  getItemsWithSubheadersAndDividers(filters: {\n    item: false,\n    subheader: false,\n    divider?: DividerHarnessFilters | false\n  }): Promise<MatDividerHarness[]>;\n  getItemsWithSubheadersAndDividers(filters: {\n    item?: F | false,\n    subheader?: SubheaderHarnessFilters | false,\n    divider: false\n  }): Promise<(C | MatSubheaderHarness)[]>;\n  getItemsWithSubheadersAndDividers(filters: {\n    item?: F | false,\n    subheader: false,\n    divider?: false | DividerHarnessFilters\n  }): Promise<(C | MatDividerHarness)[]>;\n  getItemsWithSubheadersAndDividers(filters: {\n    item: false,\n    subheader?: false | SubheaderHarnessFilters,\n    divider?: false | DividerHarnessFilters\n  }): Promise<(MatSubheaderHarness | MatDividerHarness)[]>;\n  getItemsWithSubheadersAndDividers(filters?: {\n    item?: F | false,\n    subheader?: SubheaderHarnessFilters | false,\n    divider?: DividerHarnessFilters | false\n  }): Promise<(C | MatSubheaderHarness | MatDividerHarness)[]>;\n  async getItemsWithSubheadersAndDividers(filters: {\n    item?: F | false,\n    subheader?: SubheaderHarnessFilters | false,\n    divider?: DividerHarnessFilters | false\n  } = {}): Promise<(C | MatSubheaderHarness | MatDividerHarness)[]> {\n    const query = [];\n    if (filters.item !== false) {\n      query.push(this._itemHarness.with(filters.item || {} as F));\n    }\n    if (filters.subheader !== false) {\n      query.push(MatSubheaderHarness.with(filters.subheader));\n    }\n    if (filters.divider !== false) {\n      query.push(MatDividerHarness.with(filters.divider));\n    }\n    return this.locatorForAll(...query)();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HarnessPredicate} from '@angular/cdk/testing';\nimport {MatListHarnessBase} from './list-harness-base';\nimport {ActionListHarnessFilters, ActionListItemHarnessFilters} from './list-harness-filters';\nimport {getListItemPredicate, MatListItemHarnessBase} from './list-item-harness-base';\n\n/** Harness for interacting with a standard mat-action-list in tests. */\nexport class MatActionListHarness extends MatListHarnessBase<\n    typeof MatActionListItemHarness, MatActionListItemHarness, ActionListItemHarnessFilters> {\n  /** The selector for the host element of a `MatActionList` instance. */\n  static hostSelector = 'mat-action-list';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `MatActionListHarness` that meets\n   * certain criteria.\n   * @param options Options for filtering which action list instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: ActionListHarnessFilters = {}): HarnessPredicate<MatActionListHarness> {\n    return new HarnessPredicate(MatActionListHarness, options);\n  }\n\n  _itemHarness = MatActionListItemHarness;\n}\n\n/** Harness for interacting with an action list item. */\nexport class MatActionListItemHarness extends MatListItemHarnessBase {\n  /** The selector for the host element of a `MatListItem` instance. */\n  static hostSelector = ['mat-list-item', 'a[mat-list-item]', 'button[mat-list-item]']\n      .map(selector => `${MatActionListHarness.hostSelector} ${selector}`)\n      .join(',');\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `MatActionListItemHarness` that\n   * meets certain criteria.\n   * @param options Options for filtering which action list item instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: ActionListItemHarnessFilters = {}):\n      HarnessPredicate<MatActionListItemHarness> {\n    return getListItemPredicate(MatActionListItemHarness, options);\n  }\n\n  /** Clicks on the action list item. */\n  async click(): Promise<void> {\n    return (await this.host()).click();\n  }\n\n  /** Focuses the action list item. */\n  async focus(): Promise<void> {\n    return (await this.host()).focus();\n  }\n\n  /** Blurs the action list item. */\n  async blur(): Promise<void> {\n    return (await this.host()).blur();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HarnessPredicate} from '@angular/cdk/testing';\nimport {MatListHarnessBase} from './list-harness-base';\nimport {ListHarnessFilters, ListItemHarnessFilters} from './list-harness-filters';\nimport {getListItemPredicate, MatListItemHarnessBase} from './list-item-harness-base';\n\n/** Harness for interacting with a standard mat-list in tests. */\nexport class MatListHarness extends\n    MatListHarnessBase<typeof MatListItemHarness, MatListItemHarness, ListItemHarnessFilters> {\n  /** The selector for the host element of a `MatList` instance. */\n  static hostSelector = 'mat-list';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `MatListHarness` that meets certain\n   * criteria.\n   * @param options Options for filtering which list instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: ListHarnessFilters = {}): HarnessPredicate<MatListHarness> {\n    return new HarnessPredicate(MatListHarness, options);\n  }\n\n  _itemHarness = MatListItemHarness;\n}\n\n/** Harness for interacting with a list item. */\nexport class MatListItemHarness extends MatListItemHarnessBase {\n  /** The selector for the host element of a `MatListItem` instance. */\n  static hostSelector = ['mat-list-item', 'a[mat-list-item]', 'button[mat-list-item]']\n      .map(selector => `${MatListHarness.hostSelector} ${selector}`)\n      .join(',');\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `MatListItemHarness` that meets\n   * certain criteria.\n   * @param options Options for filtering which list item instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: ListItemHarnessFilters = {}): HarnessPredicate<MatListItemHarness> {\n    return getListItemPredicate(MatListItemHarness, options);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BaseHarnessFilters} from '@angular/cdk/testing';\n\nexport interface ListHarnessFilters extends BaseHarnessFilters {}\n\nexport interface ActionListHarnessFilters extends BaseHarnessFilters {}\n\nexport interface NavListHarnessFilters extends BaseHarnessFilters {}\n\nexport interface SelectionListHarnessFilters extends BaseHarnessFilters {}\n\nexport interface BaseListItemHarnessFilters extends BaseHarnessFilters {\n  text?: string | RegExp;\n}\n\nexport interface ListItemHarnessFilters extends BaseListItemHarnessFilters {}\n\nexport interface ActionListItemHarnessFilters extends BaseListItemHarnessFilters {}\n\nexport interface NavListItemHarnessFilters extends BaseListItemHarnessFilters {\n  href?: string | RegExp | null;\n}\n\nexport interface ListOptionHarnessFilters extends BaseListItemHarnessFilters {\n  selected?: boolean;\n}\n\nexport interface SubheaderHarnessFilters extends BaseHarnessFilters {\n  text?: string | RegExp;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HarnessPredicate} from '@angular/cdk/testing';\nimport {MatListHarnessBase} from './list-harness-base';\nimport {NavListHarnessFilters, NavListItemHarnessFilters} from './list-harness-filters';\nimport {getListItemPredicate, MatListItemHarnessBase} from './list-item-harness-base';\n\n/** Harness for interacting with a standard mat-nav-list in tests. */\nexport class MatNavListHarness extends MatListHarnessBase<\n    typeof MatNavListItemHarness, MatNavListItemHarness, NavListItemHarnessFilters> {\n  /** The selector for the host element of a `MatNavList` instance. */\n  static hostSelector = 'mat-nav-list';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `MatNavListHarness` that meets\n   * certain criteria.\n   * @param options Options for filtering which nav list instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: NavListHarnessFilters = {}): HarnessPredicate<MatNavListHarness> {\n    return new HarnessPredicate(MatNavListHarness, options);\n  }\n\n  _itemHarness = MatNavListItemHarness;\n}\n\n/** Harness for interacting with a nav list item. */\nexport class MatNavListItemHarness extends MatListItemHarnessBase {\n  /** The selector for the host element of a `MatListItem` instance. */\n  static hostSelector = ['mat-list-item', 'a[mat-list-item]', 'button[mat-list-item]']\n      .map(selector => `${MatNavListHarness.hostSelector} ${selector}`)\n      .join(',');\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `MatNavListItemHarness` that\n   * meets certain criteria.\n   * @param options Options for filtering which nav list item instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: NavListItemHarnessFilters = {}): HarnessPredicate<MatNavListItemHarness> {\n    return getListItemPredicate(MatNavListItemHarness, options)\n        .addOption('href', options.href,\n            async (harness, href) => HarnessPredicate.stringMatches(harness.getHref(), href));\n  }\n\n  /** Gets the href for this nav list item. */\n  async getHref(): Promise<string | null> {\n    return (await this.host()).getAttribute('href');\n  }\n\n  /** Clicks on the nav list item. */\n  async click(): Promise<void> {\n    return (await this.host()).click();\n  }\n\n  /** Focuses the nav list item. */\n  async focus(): Promise<void> {\n    return (await this.host()).focus();\n  }\n\n  /** Blurs the nav list item. */\n  async blur(): Promise<void> {\n    return (await this.host()).blur();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HarnessPredicate} from '@angular/cdk/testing';\nimport {MatListHarnessBase} from './list-harness-base';\nimport {\n  ListItemHarnessFilters,\n  ListOptionHarnessFilters,\n  SelectionListHarnessFilters\n} from './list-harness-filters';\nimport {getListItemPredicate, MatListItemHarnessBase} from './list-item-harness-base';\n\n/** Harness for interacting with a standard mat-selection-list in tests. */\nexport class MatSelectionListHarness extends MatListHarnessBase<\n    typeof MatListOptionHarness, MatListOptionHarness, ListOptionHarnessFilters> {\n  /** The selector for the host element of a `MatSelectionList` instance. */\n  static hostSelector = 'mat-selection-list';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `MatSelectionListHarness` that meets\n   * certain criteria.\n   * @param options Options for filtering which selection list instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: SelectionListHarnessFilters = {}):\n      HarnessPredicate<MatSelectionListHarness> {\n    return new HarnessPredicate(MatSelectionListHarness, options);\n  }\n\n  _itemHarness = MatListOptionHarness;\n\n  /** Whether the selection list is disabled. */\n  async isDisabled(): Promise<boolean> {\n    return await (await this.host()).getAttribute('aria-disabled') === 'true';\n  }\n\n  /**\n   * Selects all items matching any of the given filters.\n   * @param filters Filters that specify which items should be selected.\n   */\n  async selectItems(...filters: ListOptionHarnessFilters[]): Promise<void> {\n    const items = await this._getItems(filters);\n    await Promise.all(items.map(item => item.select()));\n  }\n\n  /**\n   * Deselects all items matching any of the given filters.\n   * @param filters Filters that specify which items should be deselected.\n   */\n  async deselectItems(...filters: ListItemHarnessFilters[]): Promise<void> {\n    const items = await this._getItems(filters);\n    await Promise.all(items.map(item => item.deselect()));\n  }\n\n  /** Gets all items matching the given list of filters. */\n  private async _getItems(filters: ListOptionHarnessFilters[]): Promise<MatListOptionHarness[]> {\n    if (!filters.length) {\n      return this.getItems();\n    }\n    return ([] as MatListOptionHarness[]).concat(...await Promise.all(\n        filters.map(filter => this.locatorForAll(MatListOptionHarness.with(filter))())));\n  }\n}\n\n/** Harness for interacting with a list option. */\nexport class MatListOptionHarness extends MatListItemHarnessBase {\n  /** The selector for the host element of a `MatListOption` instance. */\n  static hostSelector = 'mat-list-option';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `MatListOptionHarness` that\n   * meets certain criteria.\n   * @param options Options for filtering which list option instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: ListOptionHarnessFilters = {}): HarnessPredicate<MatListOptionHarness> {\n    return getListItemPredicate(MatListOptionHarness, options)\n        .addOption('is selected', options.selected,\n            async (harness, selected) => await harness.isSelected() === selected);\n  }\n\n  private _itemContent = this.locatorFor('.mat-list-item-content');\n\n  /** Gets the position of the checkbox relative to the list option content. */\n  async getCheckboxPosition(): Promise<'before' | 'after'> {\n    return await (await this._itemContent()).hasClass('mat-list-item-content-reverse') ?\n        'after' : 'before';\n  }\n\n  /** Whether the list option is selected. */\n  async isSelected(): Promise<boolean> {\n    return await (await this.host()).getAttribute('aria-selected') === 'true';\n  }\n\n  /** Whether the list option is disabled. */\n  async isDisabled(): Promise<boolean> {\n    return await (await this.host()).getAttribute('aria-disabled') === 'true';\n  }\n\n  /** Focuses the list option. */\n  async focus(): Promise<void> {\n    return (await this.host()).focus();\n  }\n\n  /** Blurs the list option. */\n  async blur(): Promise<void> {\n    return (await this.host()).blur();\n  }\n\n  /** Toggles the checked state of the checkbox. */\n  async toggle() {\n    return (await this.host()).click();\n  }\n\n  /**\n   * Puts the list option in a checked state by toggling it if it is currently unchecked, or doing\n   * nothing if it is already checked.\n   */\n  async select() {\n    if (!await this.isSelected()) {\n      return this.toggle();\n    }\n  }\n\n  /**\n   * Puts the list option in an unchecked state by toggling it if it is currently checked, or doing\n   * nothing if it is already unchecked.\n   */\n  async deselect() {\n    if (await this.isSelected()) {\n      return this.toggle();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './action-list-harness';\nexport * from './list-harness';\nexport * from './list-harness-filters';\nexport * from './nav-list-harness';\nexport * from './selection-list-harness';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}