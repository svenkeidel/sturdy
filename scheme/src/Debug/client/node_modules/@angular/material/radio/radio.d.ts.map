{"version":3,"file":"radio.d.ts","sources":["radio.d.ts"],"names":[],"mappingssourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { BooleanInput } from '@angular/cdk/coercion';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { AfterContentInit, AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, InjectionToken, OnDestroy, OnInit, QueryList } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { CanDisableRipple, CanDisableRippleCtor, HasTabIndex, HasTabIndexCtor, ThemePalette } from '@angular/material/core';\nexport interface MatRadioDefaultOptions {\n    color: ThemePalette;\n}\nexport declare const MAT_RADIO_DEFAULT_OPTIONS: InjectionToken<MatRadioDefaultOptions>;\nexport declare function MAT_RADIO_DEFAULT_OPTIONS_FACTORY(): MatRadioDefaultOptions;\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport declare const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any;\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport declare class MatRadioChange {\n    /** The MatRadioButton that emits the change event. */\n    source: _MatRadioButtonBase;\n    /** The value of the MatRadioButton. */\n    value: any;\n    constructor(\n    /** The MatRadioButton that emits the change event. */\n    source: _MatRadioButtonBase, \n    /** The value of the MatRadioButton. */\n    value: any);\n}\n/**\n * Base class with all of the `MatRadioGroup` functionality.\n * @docs-private\n */\nexport declare abstract class _MatRadioGroupBase<T extends _MatRadioButtonBase> implements AfterContentInit, ControlValueAccessor {\n    private _changeDetector;\n    /** Selected value for the radio group. */\n    private _value;\n    /** The HTML name attribute applied to radio buttons in this group. */\n    private _name;\n    /** The currently selected radio button. Should match value. */\n    private _selected;\n    /** Whether the `value` has been set to its initial value. */\n    private _isInitialized;\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    private _labelPosition;\n    /** Whether the radio group is disabled. */\n    private _disabled;\n    /** Whether the radio group is required. */\n    private _required;\n    /** The method to be called in order to update ngModel */\n    _controlValueAccessorChangeFn: (value: any) => void;\n    /**\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\n     * @docs-private\n     */\n    onTouched: () => any;\n    /**\n     * Event emitted when the group value changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * a radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    readonly change: EventEmitter<MatRadioChange>;\n    /** Child radio buttons. */\n    abstract _radios: QueryList<T>;\n    /** Theme color for all of the radio buttons in the group. */\n    color: ThemePalette;\n    /** Name of the radio button group. All radio buttons inside this group will use this name. */\n    get name(): string;\n    set name(value: string);\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    get labelPosition(): 'before' | 'after';\n    set labelPosition(v: 'before' | 'after');\n    /**\n     * Value for the radio-group. Should equal the value of the selected radio button if there is\n     * a corresponding radio button with a matching value. If there is not such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     */\n    get value(): any;\n    set value(newValue: any);\n    _checkSelectedRadioButton(): void;\n    /**\n     * The currently selected radio button. If set to a new radio button, the radio group value\n     * will be updated to match the new selected button.\n     */\n    get selected(): T | null;\n    set selected(selected: T | null);\n    /** Whether the radio group is disabled */\n    get disabled(): boolean;\n    set disabled(value: boolean);\n    /** Whether the radio group is required */\n    get required(): boolean;\n    set required(value: boolean);\n    constructor(_changeDetector: ChangeDetectorRef);\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     */\n    ngAfterContentInit(): void;\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     */\n    _touch(): void;\n    private _updateRadioButtonNames;\n    /** Updates the `selected` radio button from the internal _value state. */\n    private _updateSelectedRadioFromValue;\n    /** Dispatch change event with current selection and group value. */\n    _emitChangeEvent(): void;\n    _markRadiosForCheck(): void;\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value\n     */\n    writeValue(value: any): void;\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnChange(fn: (value: any) => void): void;\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnTouched(fn: any): void;\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param isDisabled Whether the control should be disabled.\n     */\n    setDisabledState(isDisabled: boolean): void;\n    static ngAcceptInputType_disabled: BooleanInput;\n    static ngAcceptInputType_required: BooleanInput;\n}\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\nexport declare class MatRadioGroup extends _MatRadioGroupBase<MatRadioButton> {\n    _radios: QueryList<MatRadioButton>;\n}\n/** @docs-private */\ndeclare class MatRadioButtonBase {\n    _elementRef: ElementRef;\n    disabled: boolean;\n    constructor(_elementRef: ElementRef);\n}\ndeclare const _MatRadioButtonMixinBase: CanDisableRippleCtor & HasTabIndexCtor & typeof MatRadioButtonBase;\n/**\n * Base class with all of the `MatRadioButton` functionality.\n * @docs-private\n */\nexport declare abstract class _MatRadioButtonBase extends _MatRadioButtonMixinBase implements OnInit, AfterViewInit, OnDestroy, CanDisableRipple, HasTabIndex {\n    protected _changeDetector: ChangeDetectorRef;\n    private _focusMonitor;\n    private _radioDispatcher;\n    _animationMode?: string | undefined;\n    private _providerOverride?;\n    private _uniqueId;\n    /** The unique ID for the radio button. */\n    id: string;\n    /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n    name: string;\n    /** Used to set the 'aria-label' attribute on the underlying input element. */\n    ariaLabel: string;\n    /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n    ariaLabelledby: string;\n    /** The 'aria-describedby' attribute is read after the element's label and field type. */\n    ariaDescribedby: string;\n    /** Whether this radio button is checked. */\n    get checked(): boolean;\n    set checked(value: boolean);\n    /** The value of this radio button. */\n    get value(): any;\n    set value(value: any);\n    /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n    get labelPosition(): 'before' | 'after';\n    set labelPosition(value: 'before' | 'after');\n    private _labelPosition;\n    /** Whether the radio button is disabled. */\n    get disabled(): boolean;\n    set disabled(value: boolean);\n    /** Whether the radio button is required. */\n    get required(): boolean;\n    set required(value: boolean);\n    /** Theme color of the radio button. */\n    get color(): ThemePalette;\n    set color(newValue: ThemePalette);\n    private _color;\n    /**\n     * Event emitted when the checked state of this radio button changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * the radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    readonly change: EventEmitter<MatRadioChange>;\n    /** The parent radio group. May or may not be present. */\n    radioGroup: _MatRadioGroupBase<_MatRadioButtonBase>;\n    /** ID of the native input element inside `<mat-radio-button>` */\n    get inputId(): string;\n    /** Whether this radio is checked. */\n    private _checked;\n    /** Whether this radio is disabled. */\n    private _disabled;\n    /** Whether this radio is required. */\n    private _required;\n    /** Value assigned to this radio. */\n    private _value;\n    /** Unregister function for _radioDispatcher */\n    private _removeUniqueSelectionListener;\n    /** The native `<input type=radio>` element */\n    _inputElement: ElementRef<HTMLInputElement>;\n    constructor(radioGroup: _MatRadioGroupBase<_MatRadioButtonBase>, elementRef: ElementRef, _changeDetector: ChangeDetectorRef, _focusMonitor: FocusMonitor, _radioDispatcher: UniqueSelectionDispatcher, _animationMode?: string | undefined, _providerOverride?: MatRadioDefaultOptions | undefined);\n    /** Focuses the radio button. */\n    focus(options?: FocusOptions): void;\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     */\n    _markForCheck(): void;\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    /** Dispatch change event with current value. */\n    private _emitChangeEvent;\n    _isRippleDisabled(): boolean;\n    _onInputClick(event: Event): void;\n    /**\n     * Triggered when the radio button received a click or the input recognized any change.\n     * Clicking on a label element, will trigger a change event on the associated input.\n     */\n    _onInputChange(event: Event): void;\n    /** Sets the disabled state and marks for check if a change occurred. */\n    protected _setDisabled(value: boolean): void;\n    static ngAcceptInputType_checked: BooleanInput;\n    static ngAcceptInputType_disabled: BooleanInput;\n    static ngAcceptInputType_required: BooleanInput;\n    static ngAcceptInputType_disableRipple: BooleanInput;\n}\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\nexport declare class MatRadioButton extends _MatRadioButtonBase {\n    constructor(radioGroup: MatRadioGroup, elementRef: ElementRef, changeDetector: ChangeDetectorRef, focusMonitor: FocusMonitor, radioDispatcher: UniqueSelectionDispatcher, animationMode?: string, providerOverride?: MatRadioDefaultOptions);\n}\nexport {};\n"]}