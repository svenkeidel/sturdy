{"version":3,"file":"slide-toggle.d.ts","sources":["slide-toggle.d.ts"],"names":[],"mappingssourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { BooleanInput } from '@angular/cdk/coercion';\nimport { AfterContentInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { CanColor, CanColorCtor, CanDisable, CanDisableCtor, CanDisableRipple, CanDisableRippleCtor, HasTabIndex, HasTabIndexCtor } from '@angular/material/core';\nimport { MatSlideToggleDefaultOptions } from './slide-toggle-config';\n/** @docs-private */\nexport declare const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any;\n/** Change event object emitted by a MatSlideToggle. */\nexport declare class MatSlideToggleChange {\n    /** The source MatSlideToggle of the event. */\n    source: MatSlideToggle;\n    /** The new `checked` value of the MatSlideToggle. */\n    checked: boolean;\n    constructor(\n    /** The source MatSlideToggle of the event. */\n    source: MatSlideToggle, \n    /** The new `checked` value of the MatSlideToggle. */\n    checked: boolean);\n}\n/** @docs-private */\ndeclare class MatSlideToggleBase {\n    _elementRef: ElementRef;\n    constructor(_elementRef: ElementRef);\n}\ndeclare const _MatSlideToggleMixinBase: HasTabIndexCtor & CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatSlideToggleBase;\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\nexport declare class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit, ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n    private _focusMonitor;\n    private _changeDetectorRef;\n    defaults: MatSlideToggleDefaultOptions;\n    _animationMode?: string | undefined;\n    private _onChange;\n    private _onTouched;\n    private _uniqueId;\n    private _required;\n    private _checked;\n    /** Reference to the thumb HTMLElement. */\n    _thumbEl: ElementRef;\n    /** Reference to the thumb bar HTMLElement. */\n    _thumbBarEl: ElementRef;\n    /** Name value will be applied to the input element if present. */\n    name: string | null;\n    /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n    id: string;\n    /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n    labelPosition: 'before' | 'after';\n    /** Used to set the aria-label attribute on the underlying input element. */\n    ariaLabel: string | null;\n    /** Used to set the aria-labelledby attribute on the underlying input element. */\n    ariaLabelledby: string | null;\n    /** Whether the slide-toggle is required. */\n    get required(): boolean;\n    set required(value: boolean);\n    /** Whether the slide-toggle element is checked or not. */\n    get checked(): boolean;\n    set checked(value: boolean);\n    /** An event will be dispatched each time the slide-toggle changes its value. */\n    readonly change: EventEmitter<MatSlideToggleChange>;\n    /**\n     * An event will be dispatched each time the slide-toggle input is toggled.\n     * This event is always emitted when the user toggles the slide toggle, but this does not mean\n     * the slide toggle's value has changed.\n     */\n    readonly toggleChange: EventEmitter<void>;\n    /** Returns the unique id for the visual hidden input. */\n    get inputId(): string;\n    /** Reference to the underlying input element. */\n    _inputElement: ElementRef<HTMLInputElement>;\n    constructor(elementRef: ElementRef, _focusMonitor: FocusMonitor, _changeDetectorRef: ChangeDetectorRef, tabIndex: string, defaults: MatSlideToggleDefaultOptions, _animationMode?: string | undefined);\n    ngAfterContentInit(): void;\n    ngOnDestroy(): void;\n    /** Method being called whenever the underlying input emits a change event. */\n    _onChangeEvent(event: Event): void;\n    /** Method being called whenever the slide-toggle has been clicked. */\n    _onInputClick(event: Event): void;\n    /** Implemented as part of ControlValueAccessor. */\n    writeValue(value: any): void;\n    /** Implemented as part of ControlValueAccessor. */\n    registerOnChange(fn: any): void;\n    /** Implemented as part of ControlValueAccessor. */\n    registerOnTouched(fn: any): void;\n    /** Implemented as a part of ControlValueAccessor. */\n    setDisabledState(isDisabled: boolean): void;\n    /** Focuses the slide-toggle. */\n    focus(options?: FocusOptions): void;\n    /** Toggles the checked state of the slide-toggle. */\n    toggle(): void;\n    /**\n     * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n     */\n    private _emitChangeEvent;\n    /** Method being called whenever the label text changes. */\n    _onLabelTextChange(): void;\n    static ngAcceptInputType_required: BooleanInput;\n    static ngAcceptInputType_checked: BooleanInput;\n    static ngAcceptInputType_disabled: BooleanInput;\n    static ngAcceptInputType_disableRipple: BooleanInput;\n}\nexport {};\n"]}