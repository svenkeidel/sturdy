{"version":3,"file":"stepper.d.ts","sources":["stepper.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directionality } from '@angular/cdk/bidi';\nimport { BooleanInput } from '@angular/cdk/coercion';\nimport { CdkStep, CdkStepper, StepperOptions } from '@angular/cdk/stepper';\nimport { AnimationEvent } from '@angular/animations';\nimport { AfterContentInit, ChangeDetectorRef, ElementRef, EventEmitter, QueryList, TemplateRef } from '@angular/core';\nimport { FormControl, FormGroupDirective, NgForm } from '@angular/forms';\nimport { ErrorStateMatcher } from '@angular/material/core';\nimport { Subject } from 'rxjs';\nimport { MatStepHeader } from './step-header';\nimport { MatStepLabel } from './step-label';\nimport { MatStepperIcon, MatStepperIconContext } from './stepper-icon';\nexport declare class MatStep extends CdkStep implements ErrorStateMatcher {\n    private _errorStateMatcher;\n    /** Content for step label given by `<ng-template matStepLabel>`. */\n    stepLabel: MatStepLabel;\n    /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\n    constructor(stepper: MatStepper, _errorStateMatcher: ErrorStateMatcher, stepperOptions?: StepperOptions);\n    /** Custom error state matcher that additionally checks for validity of interacted form. */\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean;\n}\nexport declare class MatStepper extends CdkStepper implements AfterContentInit {\n    /** The list of step headers of the steps in the stepper. */\n    _stepHeader: QueryList<MatStepHeader>;\n    /** Steps that the stepper holds. */\n    _steps: QueryList<MatStep>;\n    /** Custom icon overrides passed in by the consumer. */\n    _icons: QueryList<MatStepperIcon>;\n    /** Event emitted when the current step is done transitioning in. */\n    readonly animationDone: EventEmitter<void>;\n    /** Whether ripples should be disabled for the step headers. */\n    disableRipple: boolean;\n    /** Consumer-specified template-refs to be used to override the header icons. */\n    _iconOverrides: {\n        [key: string]: TemplateRef<MatStepperIconContext>;\n    };\n    /** Stream of animation `done` events when the body expands/collapses. */\n    _animationDone: Subject<AnimationEvent>;\n    ngAfterContentInit(): void;\n    static ngAcceptInputType_editable: BooleanInput;\n    static ngAcceptInputType_optional: BooleanInput;\n    static ngAcceptInputType_completed: BooleanInput;\n    static ngAcceptInputType_hasError: BooleanInput;\n}\nexport declare class MatHorizontalStepper extends MatStepper {\n    /** Whether the label should display in bottom or end position. */\n    labelPosition: 'bottom' | 'end';\n    static ngAcceptInputType_editable: BooleanInput;\n    static ngAcceptInputType_optional: BooleanInput;\n    static ngAcceptInputType_completed: BooleanInput;\n    static ngAcceptInputType_hasError: BooleanInput;\n}\nexport declare class MatVerticalStepper extends MatStepper {\n    constructor(dir: Directionality, changeDetectorRef: ChangeDetectorRef, elementRef?: ElementRef<HTMLElement>, _document?: any);\n    static ngAcceptInputType_editable: BooleanInput;\n    static ngAcceptInputType_optional: BooleanInput;\n    static ngAcceptInputType_completed: BooleanInput;\n    static ngAcceptInputType_hasError: BooleanInput;\n}\n"]}