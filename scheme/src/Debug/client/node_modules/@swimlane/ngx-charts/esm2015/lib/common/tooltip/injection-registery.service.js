export class InjectionRegisteryService {
    constructor(injectionService) {
        this.injectionService = injectionService;
        this.defaults = {};
        this.components = new Map();
    }
    getByType(type = this.type) {
        return this.components.get(type);
    }
    create(bindings) {
        return this.createByType(this.type, bindings);
    }
    createByType(type, bindings) {
        bindings = this.assignDefaults(bindings);
        const component = this.injectComponent(type, bindings);
        this.register(type, component);
        return component;
    }
    destroy(instance) {
        const compsByType = this.components.get(instance.componentType);
        if (compsByType && compsByType.length) {
            const idx = compsByType.indexOf(instance);
            if (idx > -1) {
                const component = compsByType[idx];
                component.destroy();
                compsByType.splice(idx, 1);
            }
        }
    }
    destroyAll() {
        this.destroyByType(this.type);
    }
    destroyByType(type) {
        const comps = this.components.get(type);
        if (comps && comps.length) {
            let i = comps.length - 1;
            while (i >= 0) {
                this.destroy(comps[i--]);
            }
        }
    }
    injectComponent(type, bindings) {
        return this.injectionService.appendComponent(type, bindings);
    }
    assignDefaults(bindings) {
        const inputs = Object.assign({}, this.defaults.inputs);
        const outputs = Object.assign({}, this.defaults.outputs);
        if (!bindings.inputs && !bindings.outputs) {
            bindings = { inputs: bindings };
        }
        if (inputs) {
            bindings.inputs = Object.assign(Object.assign({}, inputs), bindings.inputs);
        }
        if (outputs) {
            bindings.outputs = Object.assign(Object.assign({}, outputs), bindings.outputs);
        }
        return bindings;
    }
    register(type, component) {
        if (!this.components.has(type)) {
            this.components.set(type, []);
        }
        const types = this.components.get(type);
        types.push(component);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5qZWN0aW9uLXJlZ2lzdGVyeS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHN3aW1sYW5lL25neC1jaGFydHMvIiwic291cmNlcyI6WyJsaWIvY29tbW9uL3Rvb2x0aXAvaW5qZWN0aW9uLXJlZ2lzdGVyeS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVFBLE1BQU0sT0FBZ0IseUJBQXlCO0lBTTdDLFlBQW1CLGdCQUFrQztRQUFsQyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBSDNDLGFBQVEsR0FBb0IsRUFBRSxDQUFDO1FBQy9CLGVBQVUsR0FBcUMsSUFBSSxHQUFHLEVBQUUsQ0FBQztJQUVYLENBQUM7SUFFekQsU0FBUyxDQUFDLE9BQWdCLElBQUksQ0FBQyxJQUFJO1FBQ2pDLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVELE1BQU0sQ0FBQyxRQUFnQjtRQUNyQixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBRUQsWUFBWSxDQUFDLElBQWEsRUFBRSxRQUF5QjtRQUNuRCxRQUFRLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUV6QyxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztRQUN2RCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztRQUUvQixPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0lBRUQsT0FBTyxDQUFDLFFBQXlCO1FBQy9CLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUVoRSxJQUFJLFdBQVcsSUFBSSxXQUFXLENBQUMsTUFBTSxFQUFFO1lBQ3JDLE1BQU0sR0FBRyxHQUFHLFdBQVcsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7WUFFMUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLEVBQUU7Z0JBQ1osTUFBTSxTQUFTLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNuQyxTQUFTLENBQUMsT0FBTyxFQUFFLENBQUM7Z0JBQ3BCLFdBQVcsQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO2FBQzVCO1NBQ0Y7SUFDSCxDQUFDO0lBRUQsVUFBVTtRQUNSLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFRCxhQUFhLENBQUMsSUFBYTtRQUN6QixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUV4QyxJQUFJLEtBQUssSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFO1lBQ3pCLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1lBQ3pCLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDYixJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7YUFDMUI7U0FDRjtJQUNILENBQUM7SUFFUyxlQUFlLENBQUMsSUFBYSxFQUFFLFFBQXlCO1FBQ2hFLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDL0QsQ0FBQztJQUVTLGNBQWMsQ0FBQyxRQUF5QjtRQUNoRCxNQUFNLE1BQU0scUJBQVEsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUUsQ0FBQztRQUMzQyxNQUFNLE9BQU8scUJBQVEsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUUsQ0FBQztRQUU3QyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUU7WUFDekMsUUFBUSxHQUFHLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxDQUFDO1NBQ2pDO1FBRUQsSUFBSSxNQUFNLEVBQUU7WUFDVixRQUFRLENBQUMsTUFBTSxtQ0FBUSxNQUFNLEdBQUssUUFBUSxDQUFDLE1BQU0sQ0FBRSxDQUFDO1NBQ3JEO1FBRUQsSUFBSSxPQUFPLEVBQUU7WUFDWCxRQUFRLENBQUMsT0FBTyxtQ0FBUSxPQUFPLEdBQUssUUFBUSxDQUFDLE9BQU8sQ0FBRSxDQUFDO1NBQ3hEO1FBRUQsT0FBTyxRQUFRLENBQUM7SUFDbEIsQ0FBQztJQUVTLFFBQVEsQ0FBQyxJQUFhLEVBQUUsU0FBMEI7UUFDMUQsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQzlCLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztTQUMvQjtRQUVELE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3hDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDeEIsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50UmVmLCBUeXBlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJbmplY3Rpb25TZXJ2aWNlIH0gZnJvbSAnLi9pbmplY3Rpb24uc2VydmljZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGFydGlhbEJpbmRpbmdzIHtcbiAgaW5wdXRzPzogb2JqZWN0O1xuICBvdXRwdXRzPzogb2JqZWN0O1xufVxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgSW5qZWN0aW9uUmVnaXN0ZXJ5U2VydmljZTxUID0gYW55PiB7XG4gIHByb3RlY3RlZCBhYnN0cmFjdCB0eXBlOiBUeXBlPFQ+O1xuXG4gIHByb3RlY3RlZCBkZWZhdWx0czogUGFydGlhbEJpbmRpbmdzID0ge307XG4gIHByb3RlY3RlZCBjb21wb25lbnRzOiBNYXA8YW55LCBBcnJheTxDb21wb25lbnRSZWY8VD4+PiA9IG5ldyBNYXAoKTtcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgaW5qZWN0aW9uU2VydmljZTogSW5qZWN0aW9uU2VydmljZSkge31cblxuICBnZXRCeVR5cGUodHlwZTogVHlwZTxUPiA9IHRoaXMudHlwZSkge1xuICAgIHJldHVybiB0aGlzLmNvbXBvbmVudHMuZ2V0KHR5cGUpO1xuICB9XG5cbiAgY3JlYXRlKGJpbmRpbmdzOiBvYmplY3QpOiBDb21wb25lbnRSZWY8VD4ge1xuICAgIHJldHVybiB0aGlzLmNyZWF0ZUJ5VHlwZSh0aGlzLnR5cGUsIGJpbmRpbmdzKTtcbiAgfVxuXG4gIGNyZWF0ZUJ5VHlwZSh0eXBlOiBUeXBlPFQ+LCBiaW5kaW5nczogUGFydGlhbEJpbmRpbmdzKTogQ29tcG9uZW50UmVmPFQ+IHtcbiAgICBiaW5kaW5ncyA9IHRoaXMuYXNzaWduRGVmYXVsdHMoYmluZGluZ3MpO1xuXG4gICAgY29uc3QgY29tcG9uZW50ID0gdGhpcy5pbmplY3RDb21wb25lbnQodHlwZSwgYmluZGluZ3MpO1xuICAgIHRoaXMucmVnaXN0ZXIodHlwZSwgY29tcG9uZW50KTtcblxuICAgIHJldHVybiBjb21wb25lbnQ7XG4gIH1cblxuICBkZXN0cm95KGluc3RhbmNlOiBDb21wb25lbnRSZWY8VD4pOiB2b2lkIHtcbiAgICBjb25zdCBjb21wc0J5VHlwZSA9IHRoaXMuY29tcG9uZW50cy5nZXQoaW5zdGFuY2UuY29tcG9uZW50VHlwZSk7XG5cbiAgICBpZiAoY29tcHNCeVR5cGUgJiYgY29tcHNCeVR5cGUubGVuZ3RoKSB7XG4gICAgICBjb25zdCBpZHggPSBjb21wc0J5VHlwZS5pbmRleE9mKGluc3RhbmNlKTtcblxuICAgICAgaWYgKGlkeCA+IC0xKSB7XG4gICAgICAgIGNvbnN0IGNvbXBvbmVudCA9IGNvbXBzQnlUeXBlW2lkeF07XG4gICAgICAgIGNvbXBvbmVudC5kZXN0cm95KCk7XG4gICAgICAgIGNvbXBzQnlUeXBlLnNwbGljZShpZHgsIDEpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGRlc3Ryb3lBbGwoKTogdm9pZCB7XG4gICAgdGhpcy5kZXN0cm95QnlUeXBlKHRoaXMudHlwZSk7XG4gIH1cblxuICBkZXN0cm95QnlUeXBlKHR5cGU6IFR5cGU8VD4pOiB2b2lkIHtcbiAgICBjb25zdCBjb21wcyA9IHRoaXMuY29tcG9uZW50cy5nZXQodHlwZSk7XG5cbiAgICBpZiAoY29tcHMgJiYgY29tcHMubGVuZ3RoKSB7XG4gICAgICBsZXQgaSA9IGNvbXBzLmxlbmd0aCAtIDE7XG4gICAgICB3aGlsZSAoaSA+PSAwKSB7XG4gICAgICAgIHRoaXMuZGVzdHJveShjb21wc1tpLS1dKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgaW5qZWN0Q29tcG9uZW50KHR5cGU6IFR5cGU8VD4sIGJpbmRpbmdzOiBQYXJ0aWFsQmluZGluZ3MpOiBDb21wb25lbnRSZWY8VD4ge1xuICAgIHJldHVybiB0aGlzLmluamVjdGlvblNlcnZpY2UuYXBwZW5kQ29tcG9uZW50KHR5cGUsIGJpbmRpbmdzKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBhc3NpZ25EZWZhdWx0cyhiaW5kaW5nczogUGFydGlhbEJpbmRpbmdzKTogUGFydGlhbEJpbmRpbmdzIHtcbiAgICBjb25zdCBpbnB1dHMgPSB7IC4uLnRoaXMuZGVmYXVsdHMuaW5wdXRzIH07XG4gICAgY29uc3Qgb3V0cHV0cyA9IHsgLi4udGhpcy5kZWZhdWx0cy5vdXRwdXRzIH07XG5cbiAgICBpZiAoIWJpbmRpbmdzLmlucHV0cyAmJiAhYmluZGluZ3Mub3V0cHV0cykge1xuICAgICAgYmluZGluZ3MgPSB7IGlucHV0czogYmluZGluZ3MgfTtcbiAgICB9XG5cbiAgICBpZiAoaW5wdXRzKSB7XG4gICAgICBiaW5kaW5ncy5pbnB1dHMgPSB7IC4uLmlucHV0cywgLi4uYmluZGluZ3MuaW5wdXRzIH07XG4gICAgfVxuXG4gICAgaWYgKG91dHB1dHMpIHtcbiAgICAgIGJpbmRpbmdzLm91dHB1dHMgPSB7IC4uLm91dHB1dHMsIC4uLmJpbmRpbmdzLm91dHB1dHMgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gYmluZGluZ3M7XG4gIH1cblxuICBwcm90ZWN0ZWQgcmVnaXN0ZXIodHlwZTogVHlwZTxUPiwgY29tcG9uZW50OiBDb21wb25lbnRSZWY8VD4pOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuY29tcG9uZW50cy5oYXModHlwZSkpIHtcbiAgICAgIHRoaXMuY29tcG9uZW50cy5zZXQodHlwZSwgW10pO1xuICAgIH1cblxuICAgIGNvbnN0IHR5cGVzID0gdGhpcy5jb21wb25lbnRzLmdldCh0eXBlKTtcbiAgICB0eXBlcy5wdXNoKGNvbXBvbmVudCk7XG4gIH1cbn1cbiJdfQ==