export function calculateViewDimensions({ width, height, margins, showXAxis = false, showYAxis = false, xAxisHeight = 0, yAxisWidth = 0, showXLabel = false, showYLabel = false, showLegend = false, legendType = 'ordinal', legendPosition = 'right', columns = 12 }) {
    let xOffset = margins[3];
    let chartWidth = width;
    let chartHeight = height - margins[0] - margins[2];
    if (showLegend && legendPosition === 'right') {
        if (legendType === 'ordinal') {
            columns -= 2;
        }
        else {
            columns -= 1;
        }
    }
    chartWidth = (chartWidth * columns) / 12;
    chartWidth = chartWidth - margins[1] - margins[3];
    if (showXAxis) {
        chartHeight -= 5;
        chartHeight -= xAxisHeight;
        if (showXLabel) {
            // text height + spacing between axis label and tick labels
            const offset = 25 + 5;
            chartHeight -= offset;
        }
    }
    if (showYAxis) {
        chartWidth -= 5;
        chartWidth -= yAxisWidth;
        xOffset += yAxisWidth;
        xOffset += 10;
        if (showYLabel) {
            // text height + spacing between axis label and tick labels
            const offset = 25 + 5;
            chartWidth -= offset;
            xOffset += offset;
        }
    }
    chartWidth = Math.max(0, chartWidth);
    chartHeight = Math.max(0, chartHeight);
    return {
        width: Math.floor(chartWidth),
        height: Math.floor(chartHeight),
        xOffset: Math.floor(xOffset)
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlldy1kaW1lbnNpb25zLmhlbHBlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bzd2ltbGFuZS9uZ3gtY2hhcnRzLyIsInNvdXJjZXMiOlsibGliL2NvbW1vbi92aWV3LWRpbWVuc2lvbnMuaGVscGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU1BLE1BQU0sVUFBVSx1QkFBdUIsQ0FBQyxFQUN0QyxLQUFLLEVBQ0wsTUFBTSxFQUNOLE9BQU8sRUFDUCxTQUFTLEdBQUcsS0FBSyxFQUNqQixTQUFTLEdBQUcsS0FBSyxFQUNqQixXQUFXLEdBQUcsQ0FBQyxFQUNmLFVBQVUsR0FBRyxDQUFDLEVBQ2QsVUFBVSxHQUFHLEtBQUssRUFDbEIsVUFBVSxHQUFHLEtBQUssRUFDbEIsVUFBVSxHQUFHLEtBQUssRUFDbEIsVUFBVSxHQUFHLFNBQVMsRUFDdEIsY0FBYyxHQUFHLE9BQU8sRUFDeEIsT0FBTyxHQUFHLEVBQUUsRUFDYjtJQUNDLElBQUksT0FBTyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN6QixJQUFJLFVBQVUsR0FBRyxLQUFLLENBQUM7SUFDdkIsSUFBSSxXQUFXLEdBQUcsTUFBTSxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFbkQsSUFBSSxVQUFVLElBQUksY0FBYyxLQUFLLE9BQU8sRUFBRTtRQUM1QyxJQUFJLFVBQVUsS0FBSyxTQUFTLEVBQUU7WUFDNUIsT0FBTyxJQUFJLENBQUMsQ0FBQztTQUNkO2FBQU07WUFDTCxPQUFPLElBQUksQ0FBQyxDQUFDO1NBQ2Q7S0FDRjtJQUVELFVBQVUsR0FBRyxDQUFDLFVBQVUsR0FBRyxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUM7SUFFekMsVUFBVSxHQUFHLFVBQVUsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRWxELElBQUksU0FBUyxFQUFFO1FBQ2IsV0FBVyxJQUFJLENBQUMsQ0FBQztRQUNqQixXQUFXLElBQUksV0FBVyxDQUFDO1FBRTNCLElBQUksVUFBVSxFQUFFO1lBQ2QsMkRBQTJEO1lBQzNELE1BQU0sTUFBTSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDdEIsV0FBVyxJQUFJLE1BQU0sQ0FBQztTQUN2QjtLQUNGO0lBRUQsSUFBSSxTQUFTLEVBQUU7UUFDYixVQUFVLElBQUksQ0FBQyxDQUFDO1FBQ2hCLFVBQVUsSUFBSSxVQUFVLENBQUM7UUFDekIsT0FBTyxJQUFJLFVBQVUsQ0FBQztRQUN0QixPQUFPLElBQUksRUFBRSxDQUFDO1FBRWQsSUFBSSxVQUFVLEVBQUU7WUFDZCwyREFBMkQ7WUFDM0QsTUFBTSxNQUFNLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUN0QixVQUFVLElBQUksTUFBTSxDQUFDO1lBQ3JCLE9BQU8sSUFBSSxNQUFNLENBQUM7U0FDbkI7S0FDRjtJQUVELFVBQVUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxVQUFVLENBQUMsQ0FBQztJQUNyQyxXQUFXLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFFdkMsT0FBTztRQUNMLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQztRQUM3QixNQUFNLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUM7UUFDL0IsT0FBTyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDO0tBQzdCLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGludGVyZmFjZSBWaWV3RGltZW5zaW9ucyB7XG4gIHdpZHRoOiBudW1iZXI7XG4gIGhlaWdodDogbnVtYmVyO1xuICB4T2Zmc2V0OiBudW1iZXI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhdGVWaWV3RGltZW5zaW9ucyh7XG4gIHdpZHRoLFxuICBoZWlnaHQsXG4gIG1hcmdpbnMsXG4gIHNob3dYQXhpcyA9IGZhbHNlLFxuICBzaG93WUF4aXMgPSBmYWxzZSxcbiAgeEF4aXNIZWlnaHQgPSAwLFxuICB5QXhpc1dpZHRoID0gMCxcbiAgc2hvd1hMYWJlbCA9IGZhbHNlLFxuICBzaG93WUxhYmVsID0gZmFsc2UsXG4gIHNob3dMZWdlbmQgPSBmYWxzZSxcbiAgbGVnZW5kVHlwZSA9ICdvcmRpbmFsJyxcbiAgbGVnZW5kUG9zaXRpb24gPSAncmlnaHQnLFxuICBjb2x1bW5zID0gMTJcbn0pOiBWaWV3RGltZW5zaW9ucyB7XG4gIGxldCB4T2Zmc2V0ID0gbWFyZ2luc1szXTtcbiAgbGV0IGNoYXJ0V2lkdGggPSB3aWR0aDtcbiAgbGV0IGNoYXJ0SGVpZ2h0ID0gaGVpZ2h0IC0gbWFyZ2luc1swXSAtIG1hcmdpbnNbMl07XG5cbiAgaWYgKHNob3dMZWdlbmQgJiYgbGVnZW5kUG9zaXRpb24gPT09ICdyaWdodCcpIHtcbiAgICBpZiAobGVnZW5kVHlwZSA9PT0gJ29yZGluYWwnKSB7XG4gICAgICBjb2x1bW5zIC09IDI7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbHVtbnMgLT0gMTtcbiAgICB9XG4gIH1cblxuICBjaGFydFdpZHRoID0gKGNoYXJ0V2lkdGggKiBjb2x1bW5zKSAvIDEyO1xuXG4gIGNoYXJ0V2lkdGggPSBjaGFydFdpZHRoIC0gbWFyZ2luc1sxXSAtIG1hcmdpbnNbM107XG5cbiAgaWYgKHNob3dYQXhpcykge1xuICAgIGNoYXJ0SGVpZ2h0IC09IDU7XG4gICAgY2hhcnRIZWlnaHQgLT0geEF4aXNIZWlnaHQ7XG5cbiAgICBpZiAoc2hvd1hMYWJlbCkge1xuICAgICAgLy8gdGV4dCBoZWlnaHQgKyBzcGFjaW5nIGJldHdlZW4gYXhpcyBsYWJlbCBhbmQgdGljayBsYWJlbHNcbiAgICAgIGNvbnN0IG9mZnNldCA9IDI1ICsgNTtcbiAgICAgIGNoYXJ0SGVpZ2h0IC09IG9mZnNldDtcbiAgICB9XG4gIH1cblxuICBpZiAoc2hvd1lBeGlzKSB7XG4gICAgY2hhcnRXaWR0aCAtPSA1O1xuICAgIGNoYXJ0V2lkdGggLT0geUF4aXNXaWR0aDtcbiAgICB4T2Zmc2V0ICs9IHlBeGlzV2lkdGg7XG4gICAgeE9mZnNldCArPSAxMDtcblxuICAgIGlmIChzaG93WUxhYmVsKSB7XG4gICAgICAvLyB0ZXh0IGhlaWdodCArIHNwYWNpbmcgYmV0d2VlbiBheGlzIGxhYmVsIGFuZCB0aWNrIGxhYmVsc1xuICAgICAgY29uc3Qgb2Zmc2V0ID0gMjUgKyA1O1xuICAgICAgY2hhcnRXaWR0aCAtPSBvZmZzZXQ7XG4gICAgICB4T2Zmc2V0ICs9IG9mZnNldDtcbiAgICB9XG4gIH1cblxuICBjaGFydFdpZHRoID0gTWF0aC5tYXgoMCwgY2hhcnRXaWR0aCk7XG4gIGNoYXJ0SGVpZ2h0ID0gTWF0aC5tYXgoMCwgY2hhcnRIZWlnaHQpO1xuXG4gIHJldHVybiB7XG4gICAgd2lkdGg6IE1hdGguZmxvb3IoY2hhcnRXaWR0aCksXG4gICAgaGVpZ2h0OiBNYXRoLmZsb29yKGNoYXJ0SGVpZ2h0KSxcbiAgICB4T2Zmc2V0OiBNYXRoLmZsb29yKHhPZmZzZXQpXG4gIH07XG59XG4iXX0=