// Robert Penner's easeOutExpo
function easeOutExpo(t, b, c, d) {
    return (c * (-Math.pow(2, (-10 * t) / d) + 1) * 1024) / 1023 + b;
}
/**
 * Counts from a number to the end incrementally.
 */
export function count(countFrom, countTo, countDecimals, countDuration, callback) {
    const startVal = Number(countFrom);
    const endVal = Number(countTo);
    const countDown = startVal > endVal;
    const decimals = Math.max(0, countDecimals);
    const dec = Math.pow(10, decimals);
    const duration = Number(countDuration) * 1000;
    let startTime;
    function runCount(timestamp) {
        let frameVal;
        const progress = timestamp - startTime;
        if (countDown) {
            frameVal = startVal - easeOutExpo(progress, 0, startVal - endVal, duration);
        }
        else {
            frameVal = easeOutExpo(progress, startVal, endVal - startVal, duration);
        }
        if (countDown) {
            frameVal = frameVal < endVal ? endVal : frameVal;
        }
        else {
            frameVal = frameVal > endVal ? endVal : frameVal;
        }
        frameVal = Math.round(frameVal * dec) / dec;
        const tick = progress < duration;
        callback({
            value: frameVal,
            progress,
            timestamp,
            finished: !tick
        });
        if (tick) {
            return requestAnimationFrame(val => runCount(val));
        }
    }
    return requestAnimationFrame(timestamp => {
        startTime = timestamp;
        return runCount(timestamp);
    });
}
/**
 * Determine decimals places
 *
 * @export
 */
export function decimalChecker(countTo) {
    const endVal = Number(countTo);
    if (endVal % 1 !== 0 && Math.abs(endVal) <= 10) {
        return 2;
    }
    return 0;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY291bnQuaGVscGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHN3aW1sYW5lL25neC1jaGFydHMvIiwic291cmNlcyI6WyJsaWIvY29tbW9uL2NvdW50L2NvdW50LmhlbHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw4QkFBOEI7QUFDOUIsU0FBUyxXQUFXLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztJQUM3QixPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLENBQUM7QUFDbkUsQ0FBQztBQUVEOztHQUVHO0FBQ0gsTUFBTSxVQUFVLEtBQUssQ0FBQyxTQUFTLEVBQUUsT0FBTyxFQUFFLGFBQWEsRUFBRSxhQUFhLEVBQUUsUUFBUTtJQUM5RSxNQUFNLFFBQVEsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDbkMsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQy9CLE1BQU0sU0FBUyxHQUFHLFFBQVEsR0FBRyxNQUFNLENBQUM7SUFDcEMsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFDNUMsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDbkMsTUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUFHLElBQUksQ0FBQztJQUM5QyxJQUFJLFNBQVMsQ0FBQztJQUVkLFNBQVMsUUFBUSxDQUFDLFNBQVM7UUFDekIsSUFBSSxRQUFRLENBQUM7UUFDYixNQUFNLFFBQVEsR0FBRyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBRXZDLElBQUksU0FBUyxFQUFFO1lBQ2IsUUFBUSxHQUFHLFFBQVEsR0FBRyxXQUFXLENBQUMsUUFBUSxFQUFFLENBQUMsRUFBRSxRQUFRLEdBQUcsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1NBQzdFO2FBQU07WUFDTCxRQUFRLEdBQUcsV0FBVyxDQUFDLFFBQVEsRUFBRSxRQUFRLEVBQUUsTUFBTSxHQUFHLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQztTQUN6RTtRQUVELElBQUksU0FBUyxFQUFFO1lBQ2IsUUFBUSxHQUFHLFFBQVEsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDO1NBQ2xEO2FBQU07WUFDTCxRQUFRLEdBQUcsUUFBUSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUM7U0FDbEQ7UUFFRCxRQUFRLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBRTVDLE1BQU0sSUFBSSxHQUFHLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFDakMsUUFBUSxDQUFDO1lBQ1AsS0FBSyxFQUFFLFFBQVE7WUFDZixRQUFRO1lBQ1IsU0FBUztZQUNULFFBQVEsRUFBRSxDQUFDLElBQUk7U0FDaEIsQ0FBQyxDQUFDO1FBRUgsSUFBSSxJQUFJLEVBQUU7WUFDUixPQUFPLHFCQUFxQixDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7U0FDcEQ7SUFDSCxDQUFDO0lBRUQsT0FBTyxxQkFBcUIsQ0FBQyxTQUFTLENBQUMsRUFBRTtRQUN2QyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBQ3RCLE9BQU8sUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzdCLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQUVEOzs7O0dBSUc7QUFDSCxNQUFNLFVBQVUsY0FBYyxDQUFDLE9BQU87SUFDcEMsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBRS9CLElBQUksTUFBTSxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEVBQUU7UUFDOUMsT0FBTyxDQUFDLENBQUM7S0FDVjtJQUVELE9BQU8sQ0FBQyxDQUFDO0FBQ1gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIFJvYmVydCBQZW5uZXIncyBlYXNlT3V0RXhwb1xuZnVuY3Rpb24gZWFzZU91dEV4cG8odCwgYiwgYywgZCkge1xuICByZXR1cm4gKGMgKiAoLU1hdGgucG93KDIsICgtMTAgKiB0KSAvIGQpICsgMSkgKiAxMDI0KSAvIDEwMjMgKyBiO1xufVxuXG4vKipcbiAqIENvdW50cyBmcm9tIGEgbnVtYmVyIHRvIHRoZSBlbmQgaW5jcmVtZW50YWxseS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvdW50KGNvdW50RnJvbSwgY291bnRUbywgY291bnREZWNpbWFscywgY291bnREdXJhdGlvbiwgY2FsbGJhY2spIHtcbiAgY29uc3Qgc3RhcnRWYWwgPSBOdW1iZXIoY291bnRGcm9tKTtcbiAgY29uc3QgZW5kVmFsID0gTnVtYmVyKGNvdW50VG8pO1xuICBjb25zdCBjb3VudERvd24gPSBzdGFydFZhbCA+IGVuZFZhbDtcbiAgY29uc3QgZGVjaW1hbHMgPSBNYXRoLm1heCgwLCBjb3VudERlY2ltYWxzKTtcbiAgY29uc3QgZGVjID0gTWF0aC5wb3coMTAsIGRlY2ltYWxzKTtcbiAgY29uc3QgZHVyYXRpb24gPSBOdW1iZXIoY291bnREdXJhdGlvbikgKiAxMDAwO1xuICBsZXQgc3RhcnRUaW1lO1xuXG4gIGZ1bmN0aW9uIHJ1bkNvdW50KHRpbWVzdGFtcCkge1xuICAgIGxldCBmcmFtZVZhbDtcbiAgICBjb25zdCBwcm9ncmVzcyA9IHRpbWVzdGFtcCAtIHN0YXJ0VGltZTtcblxuICAgIGlmIChjb3VudERvd24pIHtcbiAgICAgIGZyYW1lVmFsID0gc3RhcnRWYWwgLSBlYXNlT3V0RXhwbyhwcm9ncmVzcywgMCwgc3RhcnRWYWwgLSBlbmRWYWwsIGR1cmF0aW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZnJhbWVWYWwgPSBlYXNlT3V0RXhwbyhwcm9ncmVzcywgc3RhcnRWYWwsIGVuZFZhbCAtIHN0YXJ0VmFsLCBkdXJhdGlvbik7XG4gICAgfVxuXG4gICAgaWYgKGNvdW50RG93bikge1xuICAgICAgZnJhbWVWYWwgPSBmcmFtZVZhbCA8IGVuZFZhbCA/IGVuZFZhbCA6IGZyYW1lVmFsO1xuICAgIH0gZWxzZSB7XG4gICAgICBmcmFtZVZhbCA9IGZyYW1lVmFsID4gZW5kVmFsID8gZW5kVmFsIDogZnJhbWVWYWw7XG4gICAgfVxuXG4gICAgZnJhbWVWYWwgPSBNYXRoLnJvdW5kKGZyYW1lVmFsICogZGVjKSAvIGRlYztcblxuICAgIGNvbnN0IHRpY2sgPSBwcm9ncmVzcyA8IGR1cmF0aW9uO1xuICAgIGNhbGxiYWNrKHtcbiAgICAgIHZhbHVlOiBmcmFtZVZhbCxcbiAgICAgIHByb2dyZXNzLFxuICAgICAgdGltZXN0YW1wLFxuICAgICAgZmluaXNoZWQ6ICF0aWNrXG4gICAgfSk7XG5cbiAgICBpZiAodGljaykge1xuICAgICAgcmV0dXJuIHJlcXVlc3RBbmltYXRpb25GcmFtZSh2YWwgPT4gcnVuQ291bnQodmFsKSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aW1lc3RhbXAgPT4ge1xuICAgIHN0YXJ0VGltZSA9IHRpbWVzdGFtcDtcbiAgICByZXR1cm4gcnVuQ291bnQodGltZXN0YW1wKTtcbiAgfSk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGRlY2ltYWxzIHBsYWNlc1xuICpcbiAqIEBleHBvcnRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlY2ltYWxDaGVja2VyKGNvdW50VG8pIHtcbiAgY29uc3QgZW5kVmFsID0gTnVtYmVyKGNvdW50VG8pO1xuXG4gIGlmIChlbmRWYWwgJSAxICE9PSAwICYmIE1hdGguYWJzKGVuZFZhbCkgPD0gMTApIHtcbiAgICByZXR1cm4gMjtcbiAgfVxuXG4gIHJldHVybiAwO1xufVxuIl19