{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","ng://@swimlane/ngx-charts/lib/common/tooltip/injection.service.ts","ng://@swimlane/ngx-charts/lib/common/tooltip/position/placement.type.ts","ng://@swimlane/ngx-charts/lib/utils/throttle.ts","ng://@swimlane/ngx-charts/lib/common/tooltip/position/position.ts","ng://@swimlane/ngx-charts/lib/common/tooltip/tooltip.component.ts","ng://@swimlane/ngx-charts/lib/common/tooltip/injection-registery.service.ts","ng://@swimlane/ngx-charts/lib/common/tooltip/tooltip.service.ts","ng://@swimlane/ngx-charts/lib/common/charts/chart.component.ts","ng://@swimlane/ngx-charts/lib/utils/visibility-observer.ts","ng://@swimlane/ngx-charts/lib/common/base-chart.component.ts","ng://@swimlane/ngx-charts/lib/common/axes/axis-label.component.ts","ng://@swimlane/ngx-charts/lib/common/trim-label.helper.ts","ng://@swimlane/ngx-charts/lib/common/axes/ticks.helper.ts","ng://@swimlane/ngx-charts/lib/common/axes/x-axis-ticks.component.ts","ng://@swimlane/ngx-charts/lib/common/axes/x-axis.component.ts","ng://@swimlane/ngx-charts/lib/common/shape.helper.ts","ng://@swimlane/ngx-charts/lib/common/tooltip/style.type.ts","ng://@swimlane/ngx-charts/lib/common/tooltip/alignment.type.ts","ng://@swimlane/ngx-charts/lib/common/tooltip/show.type.ts","ng://@swimlane/ngx-charts/lib/common/axes/y-axis-ticks.component.ts","ng://@swimlane/ngx-charts/lib/common/axes/y-axis.component.ts","ng://@swimlane/ngx-charts/lib/common/axes/axes.module.ts","ng://@swimlane/ngx-charts/lib/common/tooltip/tooltip.directive.ts","ng://@swimlane/ngx-charts/lib/common/tooltip/tooltip.module.ts","ng://@swimlane/ngx-charts/lib/common/label.helper.ts","ng://@swimlane/ngx-charts/lib/utils/id.ts","ng://@swimlane/ngx-charts/lib/common/circle-series.component.ts","ng://@swimlane/ngx-charts/lib/common/circle.component.ts","ng://@swimlane/ngx-charts/lib/common/grid-panel.component.ts","ng://@swimlane/ngx-charts/lib/common/grid-panel-series.component.ts","ng://@swimlane/ngx-charts/lib/common/svg-linear-gradient.component.ts","ng://@swimlane/ngx-charts/lib/common/svg-radial-gradient.component.ts","ng://@swimlane/ngx-charts/lib/common/area.component.ts","ng://@swimlane/ngx-charts/lib/common/count/count.helper.ts","ng://@swimlane/ngx-charts/lib/common/count/count.directive.ts","ng://@swimlane/ngx-charts/lib/events.ts","ng://@swimlane/ngx-charts/lib/common/tooltip-area.component.ts","ng://@swimlane/ngx-charts/lib/common/timeline/timeline.component.ts","ng://@swimlane/ngx-charts/lib/common/legend/legend.component.ts","ng://@swimlane/ngx-charts/lib/common/legend/legend-entry.component.ts","ng://@swimlane/ngx-charts/lib/common/legend/scale-legend.component.ts","ng://@swimlane/ngx-charts/lib/common/legend/advanced-legend.component.ts","ng://@swimlane/ngx-charts/lib/common/chart-common.module.ts","ng://@swimlane/ngx-charts/lib/common/view-dimensions.helper.ts","ng://@swimlane/ngx-charts/lib/utils/color-sets.ts","ng://@swimlane/ngx-charts/lib/common/color.helper.ts","ng://@swimlane/ngx-charts/lib/common/domain.helper.ts","ng://@swimlane/ngx-charts/lib/area-chart/area-chart.component.ts","ng://@swimlane/ngx-charts/lib/area-chart/area-chart-normalized.component.ts","ng://@swimlane/ngx-charts/lib/area-chart/area-chart-stacked.component.ts","ng://@swimlane/ngx-charts/lib/utils/sort.ts","ng://@swimlane/ngx-charts/lib/bar-chart/series-vertical.component.ts","ng://@swimlane/ngx-charts/lib/area-chart/area-series.component.ts","ng://@swimlane/ngx-charts/lib/area-chart/area-chart.module.ts","ng://@swimlane/ngx-charts/lib/bar-chart/bar.component.ts","ng://@swimlane/ngx-charts/lib/bar-chart/bar-horizontal.component.ts","ng://@swimlane/ngx-charts/lib/bar-chart/bar-horizontal-2d.component.ts","ng://@swimlane/ngx-charts/lib/bar-chart/bar-horizontal-normalized.component.ts","ng://@swimlane/ngx-charts/lib/bar-chart/bar-horizontal-stacked.component.ts","ng://@swimlane/ngx-charts/lib/bar-chart/bar-vertical.component.ts","ng://@swimlane/ngx-charts/lib/bar-chart/bar-vertical-2d.component.ts","ng://@swimlane/ngx-charts/lib/bar-chart/bar-vertical-normalized.component.ts","ng://@swimlane/ngx-charts/lib/bar-chart/bar-vertical-stacked.component.ts","ng://@swimlane/ngx-charts/lib/bar-chart/series-horizontal.component.ts","ng://@swimlane/ngx-charts/lib/bar-chart/bar-label.component.ts","ng://@swimlane/ngx-charts/lib/bar-chart/bar-chart.module.ts","ng://@swimlane/ngx-charts/lib/bubble-chart/bubble-chart.utils.ts","ng://@swimlane/ngx-charts/lib/bubble-chart/bubble-chart.component.ts","ng://@swimlane/ngx-charts/lib/bubble-chart/bubble-series.component.ts","ng://@swimlane/ngx-charts/lib/bubble-chart/bubble-chart.module.ts","ng://@swimlane/ngx-charts/lib/heat-map/heat-map-cell.component.ts","ng://@swimlane/ngx-charts/lib/heat-map/heat-map-cell-series.component.ts","ng://@swimlane/ngx-charts/lib/heat-map/heat-map.component.ts","ng://@swimlane/ngx-charts/lib/heat-map/heat-map.module.ts","ng://@swimlane/ngx-charts/lib/line-chart/line.component.ts","ng://@swimlane/ngx-charts/lib/line-chart/line-chart.component.ts","ng://@swimlane/ngx-charts/lib/line-chart/line-series.component.ts","ng://@swimlane/ngx-charts/lib/line-chart/line-chart.module.ts","ng://@swimlane/ngx-charts/lib/polar-chart/polar-chart.component.ts","ng://@swimlane/ngx-charts/lib/utils/types.ts","ng://@swimlane/ngx-charts/lib/polar-chart/polar-series.component.ts","ng://@swimlane/ngx-charts/lib/pie-chart/advanced-pie-chart.component.ts","ng://@swimlane/ngx-charts/lib/pie-chart/pie-label.component.ts","ng://@swimlane/ngx-charts/lib/pie-chart/pie-arc.component.ts","ng://@swimlane/ngx-charts/lib/pie-chart/pie-chart.component.ts","ng://@swimlane/ngx-charts/lib/common/grid-layout.helper.ts","ng://@swimlane/ngx-charts/lib/pie-chart/pie-grid.component.ts","ng://@swimlane/ngx-charts/lib/pie-chart/pie-grid-series.component.ts","ng://@swimlane/ngx-charts/lib/pie-chart/pie-series.component.ts","ng://@swimlane/ngx-charts/lib/pie-chart/pie-chart.module.ts","ng://@swimlane/ngx-charts/lib/polar-chart/polar-chart.module.ts","ng://@swimlane/ngx-charts/lib/number-card/card.component.ts","ng://@swimlane/ngx-charts/lib/utils/color-utils.ts","ng://@swimlane/ngx-charts/lib/number-card/card-series.component.ts","ng://@swimlane/ngx-charts/lib/number-card/number-card.component.ts","ng://@swimlane/ngx-charts/lib/number-card/number-card.module.ts","ng://@swimlane/ngx-charts/lib/tree-map/tree-map-cell.component.ts","ng://@swimlane/ngx-charts/lib/tree-map/tree-map-cell-series.component.ts","ng://@swimlane/ngx-charts/lib/tree-map/tree-map.component.ts","ng://@swimlane/ngx-charts/lib/tree-map/tree-map.module.ts","ng://@swimlane/ngx-charts/lib/gauge/linear-gauge.component.ts","ng://@swimlane/ngx-charts/lib/gauge/gauge.component.ts","ng://@swimlane/ngx-charts/lib/gauge/gauge-arc.component.ts","ng://@swimlane/ngx-charts/lib/gauge/gauge-axis.component.ts","ng://@swimlane/ngx-charts/lib/gauge/gauge.module.ts","ng://@swimlane/ngx-charts/lib/ngx-charts.module.ts","ng://@swimlane/ngx-charts/lib/polyfills.ts","ng://@swimlane/ngx-charts/lib/common/tick-format.helper.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__values","o","m","Symbol","iterator","next","value","done","__read","e","ar","push","error","__spread","concat","PlacementTypes","InjectionService","applicationRef","componentFactoryResolver","injector","setGlobalRootViewContainer","container","InjectionService_1","globalRootViewContainer","getRootViewContainer","_container","components","Error","setRootViewContainer","getComponentRootNode","component","element","nativeElement","hostView","rootNodes","location","getRootViewContainerNode","projectComponentBindings","bindings","undefined","inputs","bindingKeys","getOwnPropertyNames","bindingKeys_1","bindingKeys_1_1","bindingName","instance","outputs","eventKeys","eventKeys_1","eventKeys_1_1","eventName","appendComponent","componentClass","appendLocation","portalHost","DomPortalHost","portal","ComponentPortal","componentRef","attach","ApplicationRef","ComponentFactoryResolver","Injector","Injectable","throttle","func","wait","options","context","args","result","timeout","previous","later","leading","Date","now","remaining","clearTimeout","trailing","setTimeout","throttleable","duration","descriptor","configurable","enumerable","get","caretOffset","verticalPosition","elDimensions","popoverDimensions","alignment","top","height","horizontalPosition","left","width","PositionHelper","calculateVerticalAlignment","window","innerHeight","calculateVerticalCaret","caretDimensions","popoverPosition","calculateHorizontalAlignment","innerWidth","calculateHorizontalCaret","shouldFlip","placement","spacing","flip","positionCaret","elmDim","hostDim","right","bottom","positionContent","determinePlacement","TooltipContentComponent","renderer","clz","type","cssClass","ngAfterViewInit","position","bind","_this","nativeElm","host","getBoundingClientRect","checkFlip","showCaret","addClass","_a","setStyle","caretElm","onWindowResize","ElementRef","Renderer2","Input","ViewChild","HostBinding","HostListener","Component","selector","template","encapsulation","ViewEncapsulation","None","InjectionRegisteryService","injectionService","defaults","Map","getByType","createByType","assignDefaults","injectComponent","register","destroy","compsByType","componentType","idx","indexOf","splice","destroyAll","destroyByType","comps","has","set","TooltipService","_super","ChartComponent","showLegend","animations","legendLabelClick","EventEmitter","legendLabelActivate","legendLabelDeactivate","ngOnChanges","changes","update","legendColumns","legendType","getLegendType","legendOptions","chartColumns","chartWidth","Math","floor","view","legendWidth","scaleType","Output","providers","changeDetection","ChangeDetectionStrategy","OnPush","trigger","transition","style","opacity","animate","VisibilityObserver","zone","visible","isVisible","runCheck","onVisibilityChange","run","emit","check","offsetHeight","offsetWidth","runOutsideAngular","NgZone","Directive","BaseChartComponent","chartElement","cd","scheme","schemeType","select","bindWindowResizeEvent","visibilityObserver","subscribe","ngOnDestroy","unbindEvents","unsubscribe","results","cloneData","dims","getContainerDims","markForCheck","hostElem","parentNode","formatDates","g","label","name","toLocaleDateString","series","j","resizeSubscription","subscription","observableFromEvent","pipe","debounceTime","data","data_1","data_1_1","item","copy","_c","e_2","_d","seriesItem","seriesItemCopy","JSON","parse","stringify","ChangeDetectorRef","AxisLabelComponent","textHeight","margin","strokeWidth","textAnchor","transform","orient","y","offset","x","trimLabel","max","trim","slice","reduceTicks","ticks","maxTicks","reduced","modulus","XAxisTicksComponent","tickArguments","tickStroke","trimTicks","maxTickLength","showGridLines","rotateTicks","dimensionsChanged","verticalSpacing","rotateLabels","innerTickSize","outerTickSize","tickPadding","maxTicksLength","maxAllowedLength","updateDims","parseInt","ticksElement","scale","getTicks","tickFormatting","tickFormat","toLocaleString","angle","getRotationAngle","adjustedScale","bandwidth","textTransform","tick","toString","tickLength","tickTrim","wordWidth","min","baseWidth","maxBaseWidth","cos","PI","getMaxTicks","maxScaleTicks","tickValues","domain","tickWidth","tickTransform","gridLineTransform","XAxisComponent","xOrient","xAxisOffset","xAxisClassName","labelOffset","fill","stroke","padding","xAxisTickCount","emitTicksHeight","newLabelOffset","roundedRect","w","h","_b","tl","tr","bl","br","retval","StyleTypes","AlignmentTypes","ShowTypes","YAxisTicksComponent","showRefLabels","showRefLines","referenceLineLength","sign","tickSpacing","referenceLines","setReferencelines","y2","y1","dy","x2","x1","refMin","map","refMax","referenceAreaPath","gridLineWidth","tickHeight","YAxisComponent","yOrient","yAxisOffset","yAxisClassName","yAxisTickCount","emitTicksWidth","AxesModule","NgModule","imports","CommonModule","declarations","exports","TooltipDirective","tooltipService","viewContainerRef","tooltipCssClass","tooltipTitle","tooltipAppendToBody","tooltipSpacing","tooltipDisabled","tooltipShowCaret","tooltipPlacement","tooltipAlignment","center","tooltipType","popover","tooltipCloseOnClickOutside","tooltipCloseOnMouseLeave","tooltipHideTimeout","tooltipShowTimeout","tooltipShowEvent","all","tooltipImmediateExit","show","hide","focus","mouseover","hideTooltip","onFocus","listensForFocus","showTooltip","onBlur","onMouseEnter","listensForHover","onMouseLeave","contains","onMouseClick","immediate","time","createBoundOptions","addHideListeners","tooltip","mouseEnterContentEvent","listen","mouseLeaveContentEvent","documentClickEvent","document","event","destroyFn","title","tooltipTemplate","tooltipContext","ViewContainerRef","TooltipModule","entryComponents","formatLabel","escapeLabel","replace","match","&","'","`","\"","<",">","cache","id","newId","random","pow","CircleSeriesComponent","activate","deactivate","barVisible","ngOnInit","gradientId","gradientFill","circle","getActiveCircle","indexActiveDataPoint","findIndex","visibleValue","mapDataPointToCircle","cx","seriesName","tooltipLabel","xScale","Number","color","cy","yScale","d1","range","colors","getColor","classNames","radius","gradientStops","getGradientStops","getTooltipText","getTooltipMinMaxText","onClick","isActive","entry","activeEntries","find","activateCircle","deactivateCircle","CircleComponent","isArray","join","GridPanelComponent","GridPanelSeriesComponent","gridPanels","getGridPanels","className","step","paddingInner","class","SvgLinearGradientComponent","orientation","SvgRadialGradientComponent","endOpacity","stopsInput","stopsDefault","startOpacity","AreaComponent","gradient","initialized","hasGradient","loadAnimation","stops","getGradient","updatePathEl","areaPath","startingPath","node","attr","path","easeOutExpo","count","countFrom","countTo","countDecimals","countDuration","callback","startTime","startVal","endVal","countDown","decimals","dec","requestAnimationFrame","timestamp","runCount","frameVal","progress","round","finished","val","decimalChecker","abs","root","CountUpDirective","countPrefix","countSuffix","countChange","countFinish","_countDecimals","_countTo","_countFrom","parseFloat","start","cancelAnimationFrame","animationReq","valueFormatting","global","MouseEvent","createMouseEvent","bubbles","cancelable","event_1","createEvent","initEvent","TooltipArea","anchorOpacity","anchorPos","anchorValues","showPercentage","hover","getValues","xVal","group","groupName","d0","toFixed","v","mouseMove","xPos","pageX","closestIndex","findClosestPointIndex","closestPoint","xSet","lastAnchorPos","ev","tooltipAnchor","dispatchEvent","minIndex","maxIndex","minDiff","MAX_VALUE","currentIndex","currentElement","curDiff","getToolTipText","tooltipItem","static","Timeline","onDomainChange","addBrush","getDims","offsetY","xDomain","getXDomain","getXScale","brush","updateBrush","filterId","filter","values","_e","_f","includes","scaleTime","scaleLinear","scalePoint","brushX","extent","on","newDomain","d3event","selection","invert","LegendComponent","horizontal","labelClick","labelActivate","labelDeactivate","legendEntries","getLegendEntries","items","formattedLabel","this_1","trackBy","index","LegendEntryComponent","toggle","ScaleLegendComponent","sanitizer","gradientValues","gradientString","direction","bypassSecurityTrustStyle","splits","pairs","reverse","forEach","DomSanitizer","AdvancedLegendComponent","legendItems","labelFormatting","percentageFormatting","percentage","defaultValueFormatting","getTotal","reduce","sum","total","roundedTotal","getLegendItems","_value","displayLabel","origialLabel","COMPONENTS","ChartCommonModule","calculateViewDimensions","margins","showXAxis","showYAxis","xAxisHeight","yAxisWidth","showXLabel","_g","showYLabel","_h","_j","_k","legendPosition","_l","columns","xOffset","chartHeight","colorSets","selectable","ColorHelper","customColors","cs","colorDomain","generateColorScheme","colorScale","scaleQuantile","scaleOrdinal","points","valueScale","formattedValue_1","found","mapping","toLowerCase","getLinearGradientStops","colorValueScale","scaleBand","endColor","startColor","currentVal","originalOffset","stops_1","stops_1_1","getUniqueXDomainValues","valueSet","Set","results_1","results_1_1","add","from","getScaleType","checkDateType","every","AreaChartComponent","legendTitle","baseValue","curve","curveLinear","trimXAxisTicks","trimYAxisTicks","rotateXAxisTicks","maxXAxisTickLength","maxYAxisTickLength","roundDomains","timelineHeight","timelinePadding","xAxis","yAxis","showXAxisLabel","showYAxisLabel","legend","timeline","filteredDomain","yDomain","getYDomain","seriesDomain","getSeriesDomain","getYScale","updateTimeline","setColors","getLegendOptions","clipPathId","clipPath","timelineWidth","timelineXDomain","timelineXScale","timelineYScale","timelineTransform","xScaleMin","xScaleMax","sort","a","aDate","getTime","bDate","autoScale","yScaleMin","yScaleMax","nice","date","num","values_1","values_1_1","isDate","updateDomain","updateHoveredVertical","hoveredVertical","deactivateAll","hideCircles","opts","updateYAxisWidth","updateXAxisHeight","onActivate","entries","onDeactivate","ContentChild","AreaChartNormalizedComponent","e_1","valueOf","AreaChartStackedComponent","this_2","sortLinear","property","sortByDomain","aVal","bVal","aIdx","bIdx","sortByTime","D0Types","AreaSeriesComponent","stacked","normalized","currentArea","startingArea","updateGradient","xProperty","area","y0","d0values","d1values","isInactive","AreaChartModule","BarComponent","roundEdges","noBarWhenZero","hideBar","checkToHideBar","getStartingPath","getPath","getStartOpacity","getRadius","edges","BarHorizontalComponent","barPadding","showDataLabel","dataLabelMaxWidth","negative","positive","rangeRound","onDataLabelMaxWidthChanged","size","fromLegend","BarHorizontal2DComponent","groupPadding","groupDomain","getGroupDomain","innerDomain","getInnerDomain","valuesDomain","getValueDomain","groupScale","getGroupScale","innerScale","getInnerScale","getValueScale","paddingOuter","e_3","e_5","groupTransform","groupIndex","flat","BarHorizontalNormalizedComponent","valueDomain","BarHorizontalStackedComponent","smallest","biggest","smallestSum","biggestSum","BarVerticalComponent","dataLabelMaxHeight","yAxisTicks","some","isNaN","onDataLabelMaxHeightChanged","BarVertical2DComponent","BarVerticalNormalizedComponent","BarVerticalStackedComponent","SeriesVerticalComponent","dataLabelHeightChanged","barsForDataLabels","updateTooltipSettings","d0Type","bars","getLabel","bar","offset1","offset0","ariaLabel","tooltipText","updateDataLabels","section","totalPositive","totalNegative","dataItem","trackDataLabelBy","barLabel","SeriesHorizontal","dataLabelWidthChanged","click","BarLabelComponent","horizontalPadding","verticalPadding","getSize","formatedValue","barX","barWidth","barY","barHeight","BarChartModule","getDomain","minVal","maxVal","getScale","BubbleChartComponent","maxRadius","minRadius","bubblePadding","rDomain","getRDomain","rScale","getRScale","setScales","getBubblePadding","yMin","xMin","yMax","xMax","xScaleType","yScaleType","e_4","e_6","Infinity","e_8","BubbleSeriesComponent","circles","getCircles","hasRadius","hasTooltipLabel","hasSeriesName","radiusValue","xAxisLabel","yAxisLabel","BubbleChartModule","HeatMapCellComponent","gradientUrl","animateToCurrentForm","HeatCellSeriesComponent","cells","getCells","row","cell","HeatMapComponent","innerPadding","rects","getRects","getDimension","N","L","split","f","yVal","rx","HeatMapModule","LineComponent","initialPath","strokeDasharray","strokeDashoffset","LineChartComponent","hasRange","LineSeriesComponent","updateGradients","sortData","lineGen","getLineGenerator","areaGen","getAreaGenerator","getRangeGenerator","outerPath","line","areaGradientStops","LineChartModule","twoPI","PolarChartComponent","curveCardinalClosed","rangeFillOpacity","showSeriesOnHover","yAxisMinScale","labelTrim","labelTrimSize","setDims","setTicks","halfWidth","halfHeight","outerRadius","yOffset","yAxisDims","transformYAxis","transformPlot","xValues","getXValues","yAxisScale","xAxisTickFormatting","thetaTicks","startAngle","dd","startPos","sin","innerRadius","endAngle","pos","radiusTicks","getYValues","PolarSeriesComponent","circleRadius","linearScaleType","seriesColor","getAngle","active","inactive","defaultTooltipText","lineRadial","AdvancedPieChartComponent","PieLabelComponent","isIE","test","navigator","userAgent","startRadius","explodeSlices","innerPos","arc","centroid","outerPos","textX","textY","midAngle","PieArcComponent","cornerRadius","pointerEvents","dblclick","getPointerEvents","calc","calculateArc","radialGradientId","updateAnimation","selectAll","attrTween","_current","copyOfD","interpolater","interpolate","_timeout","onDblClick","preventDefault","stopPropagation","nativeEvent","PieChartComponent","labels","doughnut","arcWidth","trimLabels","maxLabelLength","hasNoOptionalMarginsSet","translation","gridSize","len","minWidth","rows","cols","ceil","gridLayout","designatedTotal","res","cardWidth","cardHeight","extra","percent","PieGridComponent","getSeries","format","other","PieGridSeriesComponent","layout","pie","arcs","getArcs","PieSeriesComponent","arcData","pieGenerator","calculateLabelPositions","outerArc","pieData","labelPositions","labelVisible","myArc","showLabels","getTooltipTitle","labelText","PieChartModule","PolarChartModule","CardComponent","textFontSize","bandHeight","textPadding","labelFontSize","hasValue","card","textWidth","cardData","transformBand","paddedValue","setPadding","bandPath","scaleText","startCount","medianSize","repeat","val_1","decs","valueFormatting_1","textEl","availableWidth","availableHeight","resizeScale","invertColor","d3_color.rgb","shadeRGBColor","CardSeriesComponent","emptyColor","sortedLengths","cards","getCards","emptySlots","yPadding","xPadding","valueColor","cardColor","bandColor","textColor","NumberCardComponent","observers","NumberCardModule","TreeMapCellComponent","cellData","formattedValue","getTextColor","TreeMapCellSeriesComponent","children","depth","x0","valueType","TreeMapComponent","treemap","stratify","parentId","isRoot","TreeMapModule","LinearGaugeComponent","valueResizeScale","unitsResizeScale","valueTextTransform","valueTranslate","unitsTextTransform","unitsTranslate","hasPreviousValue","previousValue","displayValue","getDisplayValue","transformLine","el","valueTextEl","unitsTextEl","oldScale","resizeScaleWidth","resizeScaleHeight","GaugeComponent","bigSegments","smallSegments","showAxis","angleSpan","showText","rotation","availableRadius","radiusPerArc","textRadius","backgroundArc","valueArc","dataMin","dataMax","textValue","availableSpace","GaugeArcComponent","GaugeAxisComponent","rotate","rotationAngle","bigTickSegment","smallTickSegment","big","small","startDistance","textDist","angleDeg","getTextAnchor","skip","text","getTickPath","smallAngle","lineGenerator","GaugeModule","NgxChartsModule","SVGElement","HTMLDivElement","fieldType","groupByType","timeFormat","formatter"],"mappings":"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fyZ,GAAWzZ,IAOf,OAHAnF,EAAaC,KAAKqF,IAAI,EAAGtF,GACzB6e,EAAc5e,KAAKqF,IAAI,EAAGuZ,GAEnB,CACLvkB,MAAO2F,KAAKC,MAAMF,GAClB7F,OAAQ8F,KAAKC,MAAM2e,GACnBD,QAAS3e,KAAKC,MAAM0e,QCpEbE,GAAY,CACrB,CACE1b,KAAM,QACN2b,YAAY,EACZhH,MAAO,UACPxP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEnF,KAAM,UACN2b,YAAY,EACZhH,MAAO,UACPxP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEnF,KAAM,OACN2b,YAAY,EACZhH,MAAO,UACPxP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEnF,KAAM,OACN2b,YAAY,EACZhH,MAAO,UACPxP,OAAQ,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,YAExF,CACEnF,KAAM,QACN2b,YAAY,EACZhH,MAAO,aACPxP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEnF,KAAM,MACN2b,YAAY,EACZhH,MAAO,aACPxP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEnF,KAAM,OACN2b,YAAY,EACZhH,MAAO,aACPxP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEnF,KAAM,QACN2b,YAAY,EACZhH,MAAO,UACPxP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEnF,KAAM,QACN2b,YAAY,EACZhH,MAAO,UACPxP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEnF,KAAM,SACN2b,YAAY,EACZhH,MAAO,UACPxP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEnF,KAAM,UACN2b,YAAY,EACZhH,MAAO,UACPxP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEnF,KAAM,QACN2b,YAAY,EACZhH,MAAO,UACPxP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEnF,KAAM,SACN2b,YAAY,EACZhH,MAAO,UACPxP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEnF,KAAM,QACN2b,YAAY,EACZhH,MAAO,UACPxP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEnF,KAAM,cACN2b,YAAY,EACZhH,MAAO,UACPxP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,2BChPJ,SAAAyW,EAAY/c,EAAQlG,EAAMwM,EAAQ0W,GACV,iBAAXhd,IACTA,EAAS6c,GAAUtM,MAAK,SAAA0M,GACtB,OAAOA,EAAG9b,OAASnB,MAGvBrP,KAAKusB,YAAcld,EAAOsG,OAC1B3V,KAAKyN,UAAYtE,EACjBnJ,KAAK2V,OAASA,EACd3V,KAAKqsB,aAAeA,EAEpBrsB,KAAKoU,MAAQpU,KAAKwsB,oBAAoBnd,EAAQlG,EAAMnJ,KAAK2V,QA4I7D,OAzIEyW,EAAAlsB,UAAAssB,oBAAA,SAAoBnd,EAAQlG,EAAMwM,GAMhC,IAAI8W,EACJ,GANsB,iBAAXpd,IACTA,EAAS6c,GAAUtM,MAAK,SAAA0M,GACtB,OAAOA,EAAG9b,OAASnB,MAIV,aAATlG,EACFsjB,EAAaC,EAAAA,gBACV3N,MAAM1P,EAAOsG,QACbA,OAAOA,QACL,GAAa,YAATxM,EACTsjB,EAAaE,EAAAA,eACV5N,MAAM1P,EAAOsG,QACbA,OAAOA,QACL,GAAa,WAATxM,EAAmB,CAE5B,IAAMojB,EAAWjqB,EAAO+M,EAAOsG,QACJ,IAAvB4W,EAAY5rB,SACd4rB,EAAYnqB,KAAKmqB,EAAY,IAC7BvsB,KAAKusB,YAAcA,GAGrB,IAAMK,EAAS7N,EAAAA,MAAM,EAAG,EAAG,EAAMwN,EAAY5rB,QAC7C8rB,EAAa3E,EAAAA,cACVnS,OAAOiX,GACP7N,MAAMwN,GAGX,OAAOE,GAGTL,EAAAlsB,UAAA+e,SAAA,SAASld,GACP,GAAIA,MAAAA,EACF,MAAM,IAAIqB,MAAM,yBAElB,GAAuB,WAAnBpD,KAAKyN,UAAwB,CAC/B,IAAMof,EAAa/E,EAAAA,cAChBnS,OAAO3V,KAAK2V,QACZoJ,MAAM,CAAC,EAAG,IAEb,OAAO/e,KAAKoU,MAAMyY,EAAW9qB,IAE7B,GAAiC,mBAAtB/B,KAAKqsB,aACd,OAAOrsB,KAAKqsB,aAAatqB,GAG3B,IAAM+qB,EAAiB/qB,EAAMgT,WACzBgY,OAAK,EAOT,OANI/sB,KAAKqsB,cAAgBrsB,KAAKqsB,aAAa1rB,OAAS,IAClDosB,EAAQ/sB,KAAKqsB,aAAazM,MAAK,SAAAoN,GAC7B,OAAOA,EAAQxc,KAAKyc,gBAAkBH,EAAeG,kBAIrDF,EACKA,EAAMhrB,MAEN/B,KAAKoU,MAAMrS,IAKxBqqB,EAAAlsB,UAAAgtB,uBAAA,SAAuBnrB,EAAOgiB,gBACd/f,IAAV+f,IACFA,EAAQ/jB,KAAK2V,OAAO,IAGtB,IAAMkX,EAAa/E,EAAAA,cAChBnS,OAAO3V,KAAK2V,QACZoJ,MAAM,CAAC,EAAG,IAEPoO,EAAkBC,EAAAA,YACrBzX,OAAO3V,KAAKusB,aACZxN,MAAM,CAAC,EAAG,IAEPsO,EAAWrtB,KAAKif,SAASld,GAGzBugB,EAAWuK,EAAW9I,GACtBuJ,EAAattB,KAAKif,SAAS8E,GAE3BxB,EAASsK,EAAW9qB,GACtBvB,EAAI,EACJ+sB,EAAajL,EACXhB,EAAQ,GASd,IAPAA,EAAMlf,KAAK,CACTuc,MAAO2O,EACP/a,OAAQ+P,EACRkL,eAAgBlL,EAChBpU,QAAS,IAGJqf,EAAahL,GAAU/hB,EAAIR,KAAKusB,YAAY5rB,QAAQ,CACzD,IAAMge,EAAQ3e,KAAKusB,YAAY/rB,GACzB+R,EAAS4a,EAAgBxO,GAC/B,GAAIpM,GAAU+P,EACZ9hB,QADF,CAKA,GAAI+R,EAAO+S,QAAQ,KAAO/C,EAAS4K,EAAgBvY,aAAa0Q,QAAQ,GACtE,MAGFhE,EAAMlf,KAAK,CACTuc,MAAKA,EACLpM,OAAMA,EACNrE,QAAS,IAEXqf,EAAahb,EACb/R,KAWF,GARI8gB,EAAMA,EAAM3gB,OAAS,GAAG4R,OAAS,KACnC+O,EAAMlf,KAAK,CACTuc,MAAO0O,EACP9a,OAAQgQ,EACRrU,QAAS,IAITqU,IAAWD,EACbhB,EAAM,GAAG/O,OAAS,EAClB+O,EAAM,GAAG/O,OAAS,SAGlB,GAAuC,MAAnC+O,EAAMA,EAAM3gB,OAAS,GAAG4R,WAC1B,IAAgB,IAAAkb,EAAAhsB,EAAA6f,GAAKoM,EAAAD,EAAA3rB,QAAA4rB,EAAA1rB,KAAA0rB,EAAAD,EAAA3rB,OAAE,CAAlB,IAAMvB,EAACmtB,EAAA3rB,MACVxB,EAAEgS,QAAWhS,EAAEgS,OAAS+P,IAAaC,EAASD,GAAa,sGAKjE,OAAOhB,GAEX8K,KC7JA,SAAgBuB,GAAuB7d,eAC/B8d,EAAW,IAAIC,QACrB,IAAqB,IAAAC,EAAArsB,EAAAqO,GAAOie,EAAAD,EAAAhsB,QAAAisB,EAAA/rB,KAAA+rB,EAAAD,EAAAhsB,OAAE,CAAzB,IAAMkE,EAAM+nB,EAAAhsB,UACf,IAAgB,IAAAuP,GAAAC,OAAA,EAAA9P,EAAAuE,EAAO0K,SAAMc,EAAAF,EAAAxP,QAAA0P,EAAAxP,KAAAwP,EAAAF,EAAAxP,OAAE,CAA1B,IAAMxC,EAACkS,EAAAzP,MACV6rB,EAASI,IAAI1uB,EAAEkR,2MAGnB,OAAO7Q,MAAMsuB,KAAKL,GAOpB,SAAgBM,GAAazG,EAAe0G,GAC1C,SAD0C,IAAAA,IAAAA,GAAA,GACtCA,IACe1G,EAAO2G,OAAM,SAAArsB,GAAS,OAAAA,aAAiBsE,QAEtD,MAAO,OAKX,OADmBohB,EAAO2G,OAAM,SAAArsB,GAAS,MAAiB,iBAAVA,KAEvC,SAGF,6BC4HT,SAAAssB,IAAA,IAAA7kB,EAAA,OAAA4C,GAAAA,EAAAvL,MAAAb,KAAAU,YAAAV,YAEWwJ,EAAA8kB,YAAsB,SACtB9kB,EAAAqiB,eAAyB,QAIzBriB,EAAA+kB,UAAiB,OAQjB/kB,EAAA+J,eAAyB,EACzB/J,EAAAglB,MAAaC,EAAAA,YACbjlB,EAAAmW,cAAuB,GAEvBnW,EAAAklB,gBAA0B,EAC1BllB,EAAAmlB,gBAA0B,EAC1BnlB,EAAAolB,kBAA4B,EAC5BplB,EAAAqlB,mBAA6B,GAC7BrlB,EAAAslB,mBAA6B,GAK7BtlB,EAAAulB,cAAwB,EACxBvlB,EAAAoQ,iBAA2B,EAM1BpQ,EAAAkU,SAA8B,IAAIjR,EAAAA,aAClCjD,EAAAmU,WAAgC,IAAIlR,EAAAA,aAkB9CjD,EAAAyI,OAAS,CAAC,GAAI,GAAI,GAAI,IAEtBzI,EAAA6hB,YAAsB,EACtB7hB,EAAA8hB,WAAqB,EAKrB9hB,EAAAwlB,eAAyB,GAKzBxlB,EAAAylB,gBAA0B,KAsR5B,OAzVwCnvB,EAAAuuB,EAAAjiB,GAqEtCiiB,EAAAnuB,UAAA4M,OAAA,WACEV,EAAAlM,UAAM4M,OAAMlM,KAAAZ,MAEZA,KAAKgQ,KAAOib,GAAwB,CAClCvjB,MAAO1H,KAAK0H,MACZH,OAAQvH,KAAKuH,OACb2jB,QAASlrB,KAAKiS,OACdkZ,UAAWnrB,KAAKkvB,MAChB9D,UAAWprB,KAAKmvB,MAChB9D,YAAarrB,KAAKqrB,YAClBC,WAAYtrB,KAAKsrB,WACjBC,WAAYvrB,KAAKovB,eACjB3D,WAAYzrB,KAAKqvB,eACjB/iB,WAAYtM,KAAKsvB,OACjBtiB,WAAYhN,KAAKsP,WACjBuc,eAAgB7rB,KAAK6rB,iBAGnB7rB,KAAKuvB,WACPvvB,KAAKgQ,KAAKzI,QAAUvH,KAAKgvB,eAAiBhvB,KAAKiS,OAAO,GAAKjS,KAAKivB,iBAGlEjvB,KAAKknB,QAAUlnB,KAAKmnB,aAChBnnB,KAAKwvB,iBACPxvB,KAAKknB,QAAUlnB,KAAKwvB,gBAGtBxvB,KAAKyvB,QAAUzvB,KAAK0vB,aACpB1vB,KAAK2vB,aAAe3vB,KAAK4vB,kBAEzB5vB,KAAKye,OAASze,KAAKonB,UAAUpnB,KAAKknB,QAASlnB,KAAKgQ,KAAKtI,OACrD1H,KAAK6e,OAAS7e,KAAK6vB,UAAU7vB,KAAKyvB,QAASzvB,KAAKgQ,KAAKzI,QAErDvH,KAAK8vB,iBAEL9vB,KAAK+vB,YACL/vB,KAAKkN,cAAgBlN,KAAKgwB,mBAE1BhwB,KAAKoS,UAAY,aAAapS,KAAKgQ,KAAKgc,QAAO,KAAKhsB,KAAKiS,OAAO,GAAE,IAElEjS,KAAKiwB,WAAa,OAAS5S,KAAKtI,WAChC/U,KAAKkwB,SAAW,QAAQlwB,KAAKiwB,WAAU,KAGzC5B,EAAAnuB,UAAA4vB,eAAA,WACM9vB,KAAKuvB,WACPvvB,KAAKmwB,cAAgBnwB,KAAKgQ,KAAKtI,MAC/B1H,KAAKowB,gBAAkBpwB,KAAKmnB,aAC5BnnB,KAAKqwB,eAAiBrwB,KAAKonB,UAAUpnB,KAAKowB,gBAAiBpwB,KAAKmwB,eAChEnwB,KAAKswB,eAAiBtwB,KAAK6vB,UAAU7vB,KAAKyvB,QAASzvB,KAAKgvB,gBACxDhvB,KAAKuwB,kBAAoB,aAAavwB,KAAKgQ,KAAKgc,QAAO,MAAMhsB,KAAKiS,OAAO,GAAE,MAI/Eoc,EAAAnuB,UAAAinB,WAAA,WACE,IAAIM,EAASkG,GAAuB3tB,KAAK8P,SAEzC9P,KAAKyN,UAAYygB,GAAazG,GAC9B,IAMItS,EACAzC,EAPAiD,EAAS,GAgCb,MA9BuB,WAAnB3V,KAAKyN,YACPga,EAASA,EAAOrP,KAAI,SAAAmN,GAAK,OAAA7G,OAAO6G,OAKX,SAAnBvlB,KAAKyN,WAA2C,WAAnBzN,KAAKyN,YACpC0H,EAAMnV,KAAKwwB,UAAYxwB,KAAKwwB,UAAYnjB,KAAK8H,IAAGtU,MAARwM,KAAI/K,EAAQmlB,IAEpD/U,EAAM1S,KAAKywB,UAAYzwB,KAAKywB,UAAYpjB,KAAKqF,IAAG7R,MAARwM,KAAI/K,EAAQmlB,KAG/B,SAAnBznB,KAAKyN,WACPkI,EAAS,CAAC,IAAItP,KAAK8O,GAAM,IAAI9O,KAAKqM,IAClC1S,KAAK8lB,KAAOxjB,EAAImlB,GAAQiJ,MAAK,SAACC,EAAGpxB,GAC/B,IAAMqxB,EAAQD,EAAEE,UACVC,EAAQvxB,EAAEsxB,UAChB,OAAID,EAAQE,EAAc,EACtBA,EAAQF,GAAe,EACpB,MAEmB,WAAnB5wB,KAAKyN,WACdkI,EAAS,CAACR,EAAKzC,GAEf1S,KAAK8lB,KAAOxjB,EAAImlB,GAAQiJ,MAAK,SAACC,EAAGpxB,GAAM,OAAAoxB,EAAIpxB,OAE3CoW,EAAS8R,EACTznB,KAAK8lB,KAAO2B,GAGP9R,GAGT0Y,EAAAnuB,UAAAwvB,WAAA,uBACQ/Z,EAAS,OAEf,IAAsB,IAAArE,EAAA7P,EAAAzB,KAAK8P,SAAO0B,EAAAF,EAAAxP,QAAA0P,EAAAxP,KAAAwP,EAAAF,EAAAxP,OAAE,CAA/B,IAAMgO,EAAO0B,EAAAzP,UAChB,IAAgB,IAAA2lB,GAAAnW,OAAA,EAAA9P,EAAAqO,EAAQY,SAAMiX,EAAAD,EAAA5lB,QAAA6lB,EAAA3lB,KAAA2lB,EAAAD,EAAA5lB,OAAE,CAA3B,IAAMxC,EAACqoB,EAAA5lB,MACL4T,EAAOiS,SAAStoB,EAAEyC,QACrB4T,EAAOvT,KAAK9C,EAAEyC,4MAKpB,IAAM0lB,EAAMnlB,EAAOqT,GAYnB,OAXK3V,KAAK+wB,WACRtJ,EAAOrlB,KAAK,GAES,SAAnBpC,KAAKuuB,WACP9G,EAAOrlB,KAAKpC,KAAKuuB,WAOZ,CAJKvuB,KAAKgxB,UAAYhxB,KAAKgxB,UAAY3jB,KAAK8H,IAAGtU,MAARwM,KAAI/K,EAAQmlB,IAE9CznB,KAAKixB,UAAYjxB,KAAKixB,UAAY5jB,KAAKqF,IAAG7R,MAARwM,KAAI/K,EAAQmlB,MAK5D4G,EAAAnuB,UAAA0vB,gBAAA,WACE,OAAO5vB,KAAK8P,QAAQsI,KAAI,SAAA9Y,GAAK,OAAAA,EAAEkR,SAGjC6d,EAAAnuB,UAAAknB,UAAA,SAAUzR,EAAQjO,GAChB,IAAI0M,EAYJ,MAVuB,SAAnBpU,KAAKyN,UACP2G,EAAQyT,EAAAA,YACoB,WAAnB7nB,KAAKyN,UACd2G,EAAQ0T,EAAAA,cACoB,YAAnB9nB,KAAKyN,YACd2G,EAAQ2T,EAAAA,aAAazR,QAAQ,KAG/BlC,EAAM2K,MAAM,CAAC,EAAGrX,IAAQiO,OAAOA,GAExB3V,KAAK+uB,aAAe3a,EAAM8c,OAAS9c,GAG5Cia,EAAAnuB,UAAA2vB,UAAA,SAAUla,EAAQpO,GAChB,IAAM6M,EAAQ0T,EAAAA,cACX/I,MAAM,CAACxX,EAAQ,IACfoO,OAAOA,GACV,OAAO3V,KAAK+uB,aAAe3a,EAAM8c,OAAS9c,GAG5Cia,EAAAnuB,UAAAguB,aAAA,SAAazG,WACP0J,GAAO,EACPC,GAAM,MACV,IAAoB,IAAAC,EAAA5vB,EAAAgmB,GAAM6J,EAAAD,EAAAvvB,QAAAwvB,EAAAtvB,KAAAsvB,EAAAD,EAAAvvB,OAAE,CAAvB,IAAMC,EAAKuvB,EAAAvvB,MACT/B,KAAKuxB,OAAOxvB,KACfovB,GAAO,GAEY,iBAAVpvB,IACTqvB,GAAM,qGAIV,OAAID,EACK,OAGLC,EACK,SAGF,WAGT/C,EAAAnuB,UAAAqxB,OAAA,SAAOxvB,GACL,OAAIA,aAAiBsE,MAOvBgoB,EAAAnuB,UAAAsxB,aAAA,SAAa7b,GACX3V,KAAKwvB,eAAiB7Z,EACtB3V,KAAKknB,QAAUlnB,KAAKwvB,eACpBxvB,KAAKye,OAASze,KAAKonB,UAAUpnB,KAAKknB,QAASlnB,KAAKgQ,KAAKtI,QAGvD2mB,EAAAnuB,UAAAuxB,sBAAA,SAAsBrgB,GACpBpR,KAAK0xB,gBAAkBtgB,EAAKrP,MAC5B/B,KAAK2xB,iBAIPtD,EAAAnuB,UAAA0xB,YAAA,WACE5xB,KAAK0xB,gBAAkB,KACvB1xB,KAAK2xB,iBAGPtD,EAAAnuB,UAAAsf,QAAA,SAAQvO,EAAMP,GACRA,IACFO,EAAKP,OAASA,EAAOF,MAGvBxQ,KAAKuP,OAAOZ,KAAKsC,IAGnBod,EAAAnuB,UAAA+oB,QAAA,SAAQC,EAAO9X,GACb,OAAOA,EAAKZ,MAGd6d,EAAAnuB,UAAA6vB,UAAA,WACE,IAAIpa,EAEFA,EADsB,YAApB3V,KAAKsP,WACEtP,KAAK2vB,aAEL3vB,KAAKyvB,QAGhBzvB,KAAKgf,OAAS,IAAIoN,GAAYpsB,KAAKqP,OAAQrP,KAAKsP,WAAYqG,EAAQ3V,KAAKqsB,eAG3EgC,EAAAnuB,UAAA8vB,iBAAA,WACE,IAAM6B,EAAO,CACXpkB,UAAWzN,KAAKsP,WAChB0P,YAAQhb,EACR2R,OAAQ,GACRyG,WAAOpY,EACPsF,SAAUtJ,KAAK6rB,gBAUjB,MARuB,YAAnBgG,EAAKpkB,WACPokB,EAAKlc,OAAS3V,KAAK2vB,aACnBkC,EAAK7S,OAAShf,KAAKgf,OACnB6S,EAAKzV,MAAQpc,KAAKsuB,cAElBuD,EAAKlc,OAAS3V,KAAKyvB,QACnBoC,EAAK7S,OAAShf,KAAKgf,OAAO5K,OAErByd,GAGTxD,EAAAnuB,UAAA4xB,iBAAA,SAAiB/nB,OAAErC,EAAAqC,EAAArC,MACjB1H,KAAKsrB,WAAa5jB,EAClB1H,KAAK8M,UAGPuhB,EAAAnuB,UAAA6xB,kBAAA,SAAkBhoB,OAAExC,EAAAwC,EAAAxC,OAClBvH,KAAKqrB,YAAc9jB,EACnBvH,KAAK8M,UAGPuhB,EAAAnuB,UAAA8xB,WAAA,SAAW5gB,GACGpR,KAAK2f,cAAcxB,WAAU,SAAA7e,GACvC,OAAOA,EAAEkR,OAASY,EAAKZ,MAAQlR,EAAEyC,QAAUqP,EAAKrP,UAEvC,IAIX/B,KAAK2f,cAAard,EAAA,CAAI8O,GAASpR,KAAK2f,eACpC3f,KAAK0d,SAAS/O,KAAK,CAAE5M,MAAOqP,EAAM6gB,QAASjyB,KAAK2f,kBAGlD0O,EAAAnuB,UAAAgyB,aAAA,SAAa9gB,GACX,IAAMzF,EAAM3L,KAAK2f,cAAcxB,WAAU,SAAA7e,GACvC,OAAOA,EAAEkR,OAASY,EAAKZ,MAAQlR,EAAEyC,QAAUqP,EAAKrP,SAGlD/B,KAAK2f,cAAc9T,OAAOF,EAAK,GAC/B3L,KAAK2f,cAAard,EAAOtC,KAAK2f,eAE9B3f,KAAK2d,WAAWhP,KAAK,CAAE5M,MAAOqP,EAAM6gB,QAASjyB,KAAK2f,iBAGpD0O,EAAAnuB,UAAAyxB,cAAA,mBACE3xB,KAAK2f,cAAard,EAAOtC,KAAK2f,mBAC9B,IAAoB,IAAA9I,EAAApV,EAAAzB,KAAK2f,eAAarO,EAAAuF,EAAA/U,QAAAwP,EAAAtP,KAAAsP,EAAAuF,EAAA/U,OAAE,CAAnC,IAAM4d,EAAKpO,EAAAvP,MACd/B,KAAK2d,WAAWhP,KAAK,CAAE5M,MAAO2d,EAAOuS,QAAS,uGAEhDjyB,KAAK2f,cAAgB,IAtVd7e,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,2CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,gDACQvJ,EAAA,CAARuJ,EAAAA,kDACQvJ,EAAA,CAARuJ,EAAAA,kDACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,4CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,yCAESvJ,EAAA,CAAT4M,EAAAA,yCACS5M,EAAA,CAAT4M,EAAAA,2CAEgC5M,EAAA,CAAhCqxB,EAAAA,aAAa,0DACyBrxB,EAAA,CAAtCqxB,EAAAA,aAAa,sEA2NdrxB,EAAA,CADC0J,EAAAA,aAAa,+CAjQH6jB,EAAkBvtB,EAAA,CAzI9B2J,EAAAA,UAAU,CACTC,SAAU,wBACVC,SAAU,05IAmIViD,gBAAiBC,EAAAA,wBAAwBC,OAEzClD,cAAeC,EAAAA,kBAAkBC,ymDAEtBujB,IAA2Bnf,kBCExC,SAAAkjB,IAAA,IAAA5oB,EAAA,OAAA4C,GAAAA,EAAAvL,MAAAb,KAAAU,YAAAV,YACWwJ,EAAA8lB,QAAS,EACT9lB,EAAA8kB,YAAsB,SACtB9kB,EAAAqiB,eAAyB,QASzBriB,EAAA+J,eAAyB,EACzB/J,EAAAglB,MAAaC,EAAAA,YACbjlB,EAAAmW,cAAuB,GAEvBnW,EAAAklB,gBAA0B,EAC1BllB,EAAAmlB,gBAA0B,EAC1BnlB,EAAAolB,kBAA4B,EAC5BplB,EAAAqlB,mBAA6B,GAC7BrlB,EAAAslB,mBAA6B,GAK7BtlB,EAAAulB,cAAwB,EACxBvlB,EAAAoQ,iBAA2B,EAE1BpQ,EAAAkU,SAA8B,IAAIjR,EAAAA,aAClCjD,EAAAmU,WAAgC,IAAIlR,EAAAA,aAiB9CjD,EAAAyI,OAAS,CAAC,GAAI,GAAI,GAAI,IAGtBzI,EAAA6hB,YAAsB,EACtB7hB,EAAA8hB,WAAqB,EAKrB9hB,EAAAwlB,eAAyB,GAKzBxlB,EAAAylB,gBAA0B,KAiR5B,OA7UkDnvB,EAAAsyB,EAAAhmB,GA8DhDgmB,EAAAlyB,UAAA4M,OAAA,WAAA,IAAAtD,EAAAxJ,KACEoM,EAAAlM,UAAM4M,OAAMlM,KAAAZ,MAEZA,KAAKgQ,KAAOib,GAAwB,CAClCvjB,MAAO1H,KAAK0H,MACZH,OAAQvH,KAAKuH,OACb2jB,QAASlrB,KAAKiS,OACdkZ,UAAWnrB,KAAKkvB,MAChB9D,UAAWprB,KAAKmvB,MAChB9D,YAAarrB,KAAKqrB,YAClBC,WAAYtrB,KAAKsrB,WACjBC,WAAYvrB,KAAKovB,eACjB3D,WAAYzrB,KAAKqvB,eACjB/iB,WAAYtM,KAAKsvB,OACjBtiB,WAAYhN,KAAKsP,WACjBuc,eAAgB7rB,KAAK6rB,iBAGnB7rB,KAAKuvB,WACPvvB,KAAKgQ,KAAKzI,QAAUvH,KAAKgvB,eAAiBhvB,KAAKiS,OAAO,GAAKjS,KAAKivB,iBAGlEjvB,KAAKknB,QAAUlnB,KAAKmnB,aAChBnnB,KAAKwvB,iBACPxvB,KAAKknB,QAAUlnB,KAAKwvB,gBAGtBxvB,KAAKyvB,QAAUzvB,KAAK0vB,aACpB1vB,KAAK2vB,aAAe3vB,KAAK4vB,kBAEzB5vB,KAAKye,OAASze,KAAKonB,UAAUpnB,KAAKknB,QAASlnB,KAAKgQ,KAAKtI,OACrD1H,KAAK6e,OAAS7e,KAAK6vB,UAAU7vB,KAAKyvB,QAASzvB,KAAKgQ,KAAKzI,QAErD,mBAAS/G,eACD0iB,EAAM8F,EAAKlD,KAAKtlB,GAClB6kB,EAAK,EAELoF,EAAQ,MACZ,IAAoB,IAAAnZ,GAAA+gB,OAAA,EAAA5wB,EAAAunB,EAAKlZ,UAAO0B,EAAAF,EAAAxP,QAAA0P,EAAAxP,KAAAwP,EAAAF,EAAAxP,OAAE,EAC1BxC,GADG6lB,EAAK3T,EAAAzP,OACE2O,OAAOkP,MAAK,SAAAxO,GAC1B,IAAIuf,EAAIvf,EAAKZ,KACTjR,EAAI2jB,EAKR,MAJuB,SAAnB1Z,EAAKiE,YACPkjB,EAAIA,EAAE2B,UACN/yB,EAAIA,EAAE+yB,WAED3B,IAAMpxB,QAGbkrB,GAASnrB,EAAEyC,6GAIf,IAAoB,IAAA2lB,GAAAnW,OAAA,EAAA9P,EAAAunB,EAAKlZ,UAAO6X,EAAAD,EAAA5lB,QAAA6lB,EAAA3lB,KAAA2lB,EAAAD,EAAA5lB,OAAE,CAA7B,IAAMqjB,EACL7lB,GAAAA,GADK6lB,EAAKwC,EAAA5lB,OACA2O,OAAOkP,MAAK,SAAAxO,GACxB,IAAIuf,EAAIvf,EAAKZ,KACTjR,EAAI2jB,EAKR,MAJuB,SAAnB1Z,EAAKiE,YACPkjB,EAAIA,EAAE2B,UACN/yB,EAAIA,EAAE+yB,WAED3B,IAAMpxB,OAIbD,EAAE+lB,GAAKA,EACP/lB,EAAEwf,GAAKuG,EAAK/lB,EAAEyC,MACdsjB,GAAM/lB,EAAEyC,QAERzC,EAAI,CACFkR,KAAM0S,EACNnhB,MAAO,EACPsjB,GAAEA,EACFvG,GAAIuG,GAENF,EAAMzU,OAAOtO,KAAK9C,IAGhBmrB,EAAQ,GACVnrB,EAAE+lB,GAAa,IAAP/lB,EAAE+lB,GAAYoF,EACtBnrB,EAAEwf,GAAa,IAAPxf,EAAEwf,GAAY2L,IAEtBnrB,EAAE+lB,GAAK,EACP/lB,EAAEwf,GAAK,8GAlDJte,EAAI,EAAGA,EAAIR,KAAK8lB,KAAKnlB,OAAQH,MAA7BA,GAuDTR,KAAK8vB,iBAEL9vB,KAAK+vB,YACL/vB,KAAKkN,cAAgBlN,KAAKgwB,mBAE1BhwB,KAAKoS,UAAY,aAAapS,KAAKgQ,KAAKgc,QAAO,MAAMhsB,KAAKiS,OAAO,GAAE,IAEnEjS,KAAKiwB,WAAa,OAAS5S,KAAKtI,WAChC/U,KAAKkwB,SAAW,QAAQlwB,KAAKiwB,WAAU,KAGzCmC,EAAAlyB,UAAA4vB,eAAA,WACM9vB,KAAKuvB,WACPvvB,KAAKmwB,cAAgBnwB,KAAKgQ,KAAKtI,MAC/B1H,KAAKowB,gBAAkBpwB,KAAKmnB,aAC5BnnB,KAAKqwB,eAAiBrwB,KAAKonB,UAAUpnB,KAAKowB,gBAAiBpwB,KAAKmwB,eAChEnwB,KAAKswB,eAAiBtwB,KAAK6vB,UAAU7vB,KAAKyvB,QAASzvB,KAAKgvB,gBACxDhvB,KAAKuwB,kBAAoB,aAAavwB,KAAKgQ,KAAKgc,QAAO,MAAMhsB,KAAKiS,OAAO,GAAE,MAI/EmgB,EAAAlyB,UAAAinB,WAAA,WACE,IAAIM,EAASkG,GAAuB3tB,KAAK8P,SAEzC9P,KAAKyN,UAAYygB,GAAazG,GAC9B,IAAI9R,EAAS,GAEb,GAAuB,SAAnB3V,KAAKyN,UAAsB,CAC7B,IAAM0H,EAAM9H,KAAK8H,IAAGtU,MAARwM,KAAI/K,EAAQmlB,IAClB/U,EAAMrF,KAAKqF,IAAG7R,MAARwM,KAAI/K,EAAQmlB,IACxB9R,EAAS,CAAC,IAAItP,KAAK8O,GAAM,IAAI9O,KAAKqM,IAClC1S,KAAK8lB,KAAOxjB,EAAImlB,GAAQiJ,MAAK,SAACC,EAAGpxB,GAC/B,IAAMqxB,EAAQD,EAAEE,UACVC,EAAQvxB,EAAEsxB,UAChB,OAAID,EAAQE,EAAc,EACtBA,EAAQF,GAAe,EACpB,UAEJ,GAAuB,WAAnB5wB,KAAKyN,UAAwB,CACtCga,EAASA,EAAOrP,KAAI,SAAAmN,GAAK,OAAA7G,OAAO6G,MAGhC5P,EAAS,CAFHR,EAAM9H,KAAK8H,IAAGtU,MAARwM,KAAI/K,EAAQmlB,IAClB/U,EAAMrF,KAAKqF,IAAG7R,MAARwM,KAAI/K,EAAQmlB,KAGxBznB,KAAK8lB,KAAOxjB,EAAImlB,GAAQiJ,MAAK,SAACC,EAAGpxB,GAAM,OAAAoxB,EAAIpxB,UAE3CoW,EAAS8R,EACTznB,KAAK8lB,KAAO2B,EAGd,OAAO9R,GAGTyc,EAAAlyB,UAAAwvB,WAAA,WACE,MAAO,CAAC,EAAG,MAGb0C,EAAAlyB,UAAA0vB,gBAAA,WACE,OAAO5vB,KAAK8P,QAAQsI,KAAI,SAAA9Y,GAAK,OAAAA,EAAEkR,SAGjC4hB,EAAAlyB,UAAAknB,UAAA,SAAUzR,EAAQjO,GAChB,IAAI0M,EAYJ,MAVuB,SAAnBpU,KAAKyN,UACP2G,EAAQyT,EAAAA,YACoB,WAAnB7nB,KAAKyN,UACd2G,EAAQ0T,EAAAA,cACoB,YAAnB9nB,KAAKyN,YACd2G,EAAQ2T,EAAAA,aAAazR,QAAQ,KAG/BlC,EAAM2K,MAAM,CAAC,EAAGrX,IAAQiO,OAAOA,GAExB3V,KAAK+uB,aAAe3a,EAAM8c,OAAS9c,GAG5Cge,EAAAlyB,UAAA2vB,UAAA,SAAUla,EAAQpO,GAChB,IAAM6M,EAAQ0T,EAAAA,cACX/I,MAAM,CAACxX,EAAQ,IACfoO,OAAOA,GACV,OAAO3V,KAAK+uB,aAAe3a,EAAM8c,OAAS9c,GAG5Cge,EAAAlyB,UAAAsxB,aAAA,SAAa7b,GACX3V,KAAKwvB,eAAiB7Z,EACtB3V,KAAKknB,QAAUlnB,KAAKwvB,eACpBxvB,KAAKye,OAASze,KAAKonB,UAAUpnB,KAAKknB,QAASlnB,KAAKgQ,KAAKtI,QAGvD0qB,EAAAlyB,UAAAuxB,sBAAA,SAAsBrgB,GACpBpR,KAAK0xB,gBAAkBtgB,EAAKrP,MAC5B/B,KAAK2xB,iBAIPS,EAAAlyB,UAAA0xB,YAAA,WACE5xB,KAAK0xB,gBAAkB,KACvB1xB,KAAK2xB,iBAGPS,EAAAlyB,UAAAsf,QAAA,SAAQvO,EAAMP,GACRA,IACFO,EAAKP,OAASA,EAAOF,MAGvBxQ,KAAKuP,OAAOZ,KAAKsC,IAGnBmhB,EAAAlyB,UAAA+oB,QAAA,SAAQC,EAAO9X,GACb,OAAOA,EAAKZ,MAGd4hB,EAAAlyB,UAAA6vB,UAAA,WACE,IAAIpa,EAEFA,EADsB,YAApB3V,KAAKsP,WACEtP,KAAK2vB,aAEL3vB,KAAKyvB,QAGhBzvB,KAAKgf,OAAS,IAAIoN,GAAYpsB,KAAKqP,OAAQrP,KAAKsP,WAAYqG,EAAQ3V,KAAKqsB,eAG3E+F,EAAAlyB,UAAA8vB,iBAAA,WACE,IAAM6B,EAAO,CACXpkB,UAAWzN,KAAKsP,WAChB0P,YAAQhb,EACR2R,OAAQ,GACRyG,WAAOpY,EACPsF,SAAUtJ,KAAK6rB,gBAUjB,MARuB,YAAnBgG,EAAKpkB,WACPokB,EAAKlc,OAAS3V,KAAK2vB,aACnBkC,EAAK7S,OAAShf,KAAKgf,OACnB6S,EAAKzV,MAAQpc,KAAKsuB,cAElBuD,EAAKlc,OAAS3V,KAAKyvB,QACnBoC,EAAK7S,OAAShf,KAAKgf,OAAO5K,OAErByd,GAGTO,EAAAlyB,UAAA4xB,iBAAA,SAAiB/nB,OAAErC,EAAAqC,EAAArC,MACjB1H,KAAKsrB,WAAa5jB,EAClB1H,KAAK8M,UAGPslB,EAAAlyB,UAAA6xB,kBAAA,SAAkBhoB,OAAExC,EAAAwC,EAAAxC,OAClBvH,KAAKqrB,YAAc9jB,EACnBvH,KAAK8M,UAGPslB,EAAAlyB,UAAA8xB,WAAA,SAAW5gB,GACGpR,KAAK2f,cAAcxB,WAAU,SAAA7e,GACvC,OAAOA,EAAEkR,OAASY,EAAKZ,MAAQlR,EAAEyC,QAAUqP,EAAKrP,UAEvC,IAIX/B,KAAK2f,cAAard,EAAA,CAAI8O,GAASpR,KAAK2f,eACpC3f,KAAK0d,SAAS/O,KAAK,CAAE5M,MAAOqP,EAAM6gB,QAASjyB,KAAK2f,kBAGlDyS,EAAAlyB,UAAAgyB,aAAA,SAAa9gB,GACX,IAAMzF,EAAM3L,KAAK2f,cAAcxB,WAAU,SAAA7e,GACvC,OAAOA,EAAEkR,OAASY,EAAKZ,MAAQlR,EAAEyC,QAAUqP,EAAKrP,SAGlD/B,KAAK2f,cAAc9T,OAAOF,EAAK,GAC/B3L,KAAK2f,cAAard,EAAOtC,KAAK2f,eAE9B3f,KAAK2d,WAAWhP,KAAK,CAAE5M,MAAOqP,EAAM6gB,QAASjyB,KAAK2f,iBAGpDyS,EAAAlyB,UAAAyxB,cAAA,mBACE3xB,KAAK2f,cAAard,EAAOtC,KAAK2f,mBAC9B,IAAoB,IAAA9I,EAAApV,EAAAzB,KAAK2f,eAAarO,EAAAuF,EAAA/U,QAAAwP,EAAAtP,KAAAsP,EAAAuF,EAAA/U,OAAE,CAAnC,IAAM4d,EAAKpO,EAAAvP,MACd/B,KAAK2d,WAAWhP,KAAK,CAAE5M,MAAO2d,EAAOuS,QAAS,uGAEhDjyB,KAAK2f,cAAgB,IA1Ud7e,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,2CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,gDACQvJ,EAAA,CAARuJ,EAAAA,kDACQvJ,EAAA,CAARuJ,EAAAA,kDACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,4CACQvJ,EAAA,CAARuJ,EAAAA,+CAESvJ,EAAA,CAAT4M,EAAAA,yCACS5M,EAAA,CAAT4M,EAAAA,2CAEgC5M,EAAA,CAAhCqxB,EAAAA,aAAa,0DACyBrxB,EAAA,CAAtCqxB,EAAAA,aAAa,sEAsNdrxB,EAAA,CADC0J,EAAAA,aAAa,+CArPH4nB,EAA4BtxB,EAAA,CA3IxC2J,EAAAA,UAAU,CACTC,SAAU,mCACVC,SAAU,q9IAqIViD,gBAAiBC,EAAAA,wBAAwBC,OAEzClD,cAAeC,EAAAA,kBAAkBC,ymDAEtBsnB,IAAqCljB,kBCDlD,SAAAqjB,IAAA,IAAA/oB,EAAA,OAAA4C,GAAAA,EAAAvL,MAAAb,KAAAU,YAAAV,YACWwJ,EAAA8lB,QAAS,EACT9lB,EAAA8kB,YAAsB,SACtB9kB,EAAAqiB,eAAyB,QASzBriB,EAAA+J,eAAyB,EACzB/J,EAAAglB,MAAaC,EAAAA,YACbjlB,EAAAmW,cAAuB,GAEvBnW,EAAAklB,gBAA0B,EAC1BllB,EAAAmlB,gBAA0B,EAC1BnlB,EAAAolB,kBAA4B,EAC5BplB,EAAAqlB,mBAA6B,GAC7BrlB,EAAAslB,mBAA6B,GAK7BtlB,EAAAulB,cAAwB,EACxBvlB,EAAAoQ,iBAA2B,EAM1BpQ,EAAAkU,SAA8B,IAAIjR,EAAAA,aAClCjD,EAAAmU,WAAgC,IAAIlR,EAAAA,aAiB9CjD,EAAAyI,OAAS,CAAC,GAAI,GAAI,GAAI,IAEtBzI,EAAA6hB,YAAsB,EACtB7hB,EAAA8hB,WAAqB,EAKrB9hB,EAAAwlB,eAAyB,GAKzBxlB,EAAAylB,gBAA0B,KA0R5B,OAzV+CnvB,EAAAyyB,EAAAnmB,GAiE7CmmB,EAAAryB,UAAA4M,OAAA,WAAA,IAAAtD,EAAAxJ,KACEoM,EAAAlM,UAAM4M,OAAMlM,KAAAZ,MAEZA,KAAKgQ,KAAOib,GAAwB,CAClCvjB,MAAO1H,KAAK0H,MACZH,OAAQvH,KAAKuH,OACb2jB,QAASlrB,KAAKiS,OACdkZ,UAAWnrB,KAAKkvB,MAChB9D,UAAWprB,KAAKmvB,MAChB9D,YAAarrB,KAAKqrB,YAClBC,WAAYtrB,KAAKsrB,WACjBC,WAAYvrB,KAAKovB,eACjB3D,WAAYzrB,KAAKqvB,eACjB/iB,WAAYtM,KAAKsvB,OACjBtiB,WAAYhN,KAAKsP,WACjBuc,eAAgB7rB,KAAK6rB,iBAGnB7rB,KAAKuvB,WACPvvB,KAAKgQ,KAAKzI,QAAUvH,KAAKgvB,eAAiBhvB,KAAKiS,OAAO,GAAKjS,KAAKivB,iBAGlEjvB,KAAKknB,QAAUlnB,KAAKmnB,aAChBnnB,KAAKwvB,iBACPxvB,KAAKknB,QAAUlnB,KAAKwvB,gBAGtBxvB,KAAKyvB,QAAUzvB,KAAK0vB,aACpB1vB,KAAK2vB,aAAe3vB,KAAK4vB,kBAEzB5vB,KAAKye,OAASze,KAAKonB,UAAUpnB,KAAKknB,QAASlnB,KAAKgQ,KAAKtI,OACrD1H,KAAK6e,OAAS7e,KAAK6vB,UAAU7vB,KAAKyvB,QAASzvB,KAAKgQ,KAAKzI,QAErD,mBAAS/G,WACD0iB,EAAM8F,EAAKlD,KAAKtlB,GAClB6kB,EAAK,MACT,IAAoB,IAAAxO,GAAAwb,OAAA,EAAA5wB,EAAAunB,EAAKlZ,UAAOwB,EAAAuF,EAAA/U,QAAAwP,EAAAtP,KAAAsP,EAAAuF,EAAA/U,OAAE,CAA7B,IAAMqjB,EAAK7T,EAAAvP,MACVzC,EAAI6lB,EAAMzU,OAAOkP,MAAK,SAAAxO,GACxB,IAAIuf,EAAIvf,EAAKZ,KACTjR,EAAI2jB,EAKR,MAJuB,SAAnB1Z,EAAKiE,YACPkjB,EAAIA,EAAE2B,UACN/yB,EAAIA,EAAE+yB,WAED3B,IAAMpxB,KAGXD,GACFA,EAAE+lB,GAAKA,EACP/lB,EAAEwf,GAAKuG,EAAK/lB,EAAEyC,MACdsjB,GAAM/lB,EAAEyC,QAERzC,EAAI,CACFkR,KAAM0S,EACNnhB,MAAO,EACPsjB,GAAEA,EACFvG,GAAIuG,GAENF,EAAMzU,OAAOtO,KAAK9C,+GAzBfkB,EAAI,EAAGA,EAAIR,KAAK8lB,KAAKnlB,OAAQH,MAA7BA,GA8BTR,KAAK8vB,iBAEL9vB,KAAK+vB,YACL/vB,KAAKkN,cAAgBlN,KAAKgwB,mBAE1BhwB,KAAKoS,UAAY,aAAapS,KAAKgQ,KAAKgc,QAAO,MAAMhsB,KAAKiS,OAAO,GAAE,IAEnEjS,KAAKiwB,WAAa,OAAS5S,KAAKtI,WAChC/U,KAAKkwB,SAAW,QAAQlwB,KAAKiwB,WAAU,KAGzCsC,EAAAryB,UAAA4vB,eAAA,WACM9vB,KAAKuvB,WACPvvB,KAAKmwB,cAAgBnwB,KAAKgQ,KAAKtI,MAC/B1H,KAAKowB,gBAAkBpwB,KAAKmnB,aAC5BnnB,KAAKqwB,eAAiBrwB,KAAKonB,UAAUpnB,KAAKowB,gBAAiBpwB,KAAKmwB,eAChEnwB,KAAKswB,eAAiBtwB,KAAK6vB,UAAU7vB,KAAKyvB,QAASzvB,KAAKgvB,gBACxDhvB,KAAKuwB,kBAAoB,aAAavwB,KAAKgQ,KAAKgc,QAAO,MAAMhsB,KAAKiS,OAAO,GAAE,MAI/EsgB,EAAAryB,UAAAinB,WAAA,WACE,IAAIM,EAASkG,GAAuB3tB,KAAK8P,SAEzC9P,KAAKyN,UAAYygB,GAAazG,GAC9B,IAMItS,EACAzC,EAPAiD,EAAS,GAgCb,MA9BuB,WAAnB3V,KAAKyN,YACPga,EAASA,EAAOrP,KAAI,SAAAmN,GAAK,OAAA7G,OAAO6G,OAKX,SAAnBvlB,KAAKyN,WAA2C,WAAnBzN,KAAKyN,YACpC0H,EAAMnV,KAAKwwB,UAAYxwB,KAAKwwB,UAAYnjB,KAAK8H,IAAGtU,MAARwM,KAAI/K,EAAQmlB,IAEpD/U,EAAM1S,KAAKywB,UAAYzwB,KAAKywB,UAAYpjB,KAAKqF,IAAG7R,MAARwM,KAAI/K,EAAQmlB,KAG/B,SAAnBznB,KAAKyN,WACPkI,EAAS,CAAC,IAAItP,KAAK8O,GAAM,IAAI9O,KAAKqM,IAClC1S,KAAK8lB,KAAOxjB,EAAImlB,GAAQiJ,MAAK,SAACC,EAAGpxB,GAC/B,IAAMqxB,EAAQD,EAAEE,UACVC,EAAQvxB,EAAEsxB,UAChB,OAAID,EAAQE,EAAc,EACtBA,EAAQF,GAAe,EACpB,MAEmB,WAAnB5wB,KAAKyN,WACdkI,EAAS,CAACR,EAAKzC,GAEf1S,KAAK8lB,KAAOxjB,EAAImlB,GAAQiJ,MAAK,SAACC,EAAGpxB,GAAM,OAAAoxB,EAAIpxB,OAE3CoW,EAAS8R,EACTznB,KAAK8lB,KAAO2B,GAGP9R,GAGT4c,EAAAryB,UAAAwvB,WAAA,WAGE,IAHF,IAAAlmB,EAAAxJ,KACQ2V,EAAS,cAENnV,WACD0iB,EAAMsP,EAAK1M,KAAKtlB,GAClBgqB,EAAM,MACV,IAAoB,IAAA3T,GAAAtF,OAAA,EAAA9P,EAAA+wB,EAAK1iB,UAAOwB,EAAAuF,EAAA/U,QAAAwP,EAAAtP,KAAAsP,EAAAuF,EAAA/U,OAAE,CAA7B,IACGxC,EADQgS,EAAAvP,MACE2O,OAAOkP,MAAK,SAAAxO,GAC1B,IAAIuf,EAAIvf,EAAKZ,KACTjR,EAAI2jB,EAKR,MAJuB,SAAnB1Z,EAAKiE,YACPkjB,EAAIA,EAAE2B,UACN/yB,EAAIA,EAAE+yB,WAED3B,IAAMpxB,KAGXD,IACFkrB,GAAOlrB,EAAEyC,yGAIb4T,EAAOvT,KAAKooB,WAnBLhqB,EAAI,EAAGA,EAAIR,KAAK8lB,KAAKnlB,OAAQH,MAA7BA,GAyBT,MAAO,CAHKR,KAAKgxB,UAAYhxB,KAAKgxB,UAAY3jB,KAAK8H,IAAGtU,MAARwM,KAAI/K,EAAA,CAAK,GAAMqT,IAEjD3V,KAAKixB,UAAYjxB,KAAKixB,UAAY5jB,KAAKqF,IAAG7R,MAARwM,KAAI/K,EAAQqT,MAI5D4c,EAAAryB,UAAA0vB,gBAAA,WACE,OAAO5vB,KAAK8P,QAAQsI,KAAI,SAAA9Y,GAAK,OAAAA,EAAEkR,SAGjC+hB,EAAAryB,UAAAknB,UAAA,SAAUzR,EAAQjO,GAChB,IAAI0M,EAYJ,MAVuB,SAAnBpU,KAAKyN,UACP2G,EAAQyT,EAAAA,YACoB,WAAnB7nB,KAAKyN,UACd2G,EAAQ0T,EAAAA,cACoB,YAAnB9nB,KAAKyN,YACd2G,EAAQ2T,EAAAA,aAAazR,QAAQ,KAG/BlC,EAAM2K,MAAM,CAAC,EAAGrX,IAAQiO,OAAOA,GAExB3V,KAAK+uB,aAAe3a,EAAM8c,OAAS9c,GAG5Cme,EAAAryB,UAAA2vB,UAAA,SAAUla,EAAQpO,GAChB,IAAM6M,EAAQ0T,EAAAA,cACX/I,MAAM,CAACxX,EAAQ,IACfoO,OAAOA,GACV,OAAO3V,KAAK+uB,aAAe3a,EAAM8c,OAAS9c,GAG5Cme,EAAAryB,UAAAsxB,aAAA,SAAa7b,GACX3V,KAAKwvB,eAAiB7Z,EACtB3V,KAAKknB,QAAUlnB,KAAKwvB,eACpBxvB,KAAKye,OAASze,KAAKonB,UAAUpnB,KAAKknB,QAASlnB,KAAKgQ,KAAKtI,QAGvD6qB,EAAAryB,UAAAuxB,sBAAA,SAAsBrgB,GACpBpR,KAAK0xB,gBAAkBtgB,EAAKrP,MAC5B/B,KAAK2xB,iBAIPY,EAAAryB,UAAA0xB,YAAA,WACE5xB,KAAK0xB,gBAAkB,KACvB1xB,KAAK2xB,iBAGPY,EAAAryB,UAAAsf,QAAA,SAAQvO,EAAMP,GACRA,IACFO,EAAKP,OAASA,EAAOF,MAGvBxQ,KAAKuP,OAAOZ,KAAKsC,IAGnBshB,EAAAryB,UAAA+oB,QAAA,SAAQC,EAAO9X,GACb,OAAOA,EAAKZ,MAGd+hB,EAAAryB,UAAA6vB,UAAA,WACE,IAAIpa,EAEFA,EADsB,YAApB3V,KAAKsP,WACEtP,KAAK2vB,aAEL3vB,KAAKyvB,QAGhBzvB,KAAKgf,OAAS,IAAIoN,GAAYpsB,KAAKqP,OAAQrP,KAAKsP,WAAYqG,EAAQ3V,KAAKqsB,eAG3EkG,EAAAryB,UAAA8vB,iBAAA,WACE,IAAM6B,EAAO,CACXpkB,UAAWzN,KAAKsP,WAChB0P,YAAQhb,EACR2R,OAAQ,GACRyG,WAAOpY,EACPsF,SAAUtJ,KAAK6rB,gBAUjB,MARuB,YAAnBgG,EAAKpkB,WACPokB,EAAKlc,OAAS3V,KAAK2vB,aACnBkC,EAAK7S,OAAShf,KAAKgf,OACnB6S,EAAKzV,MAAQpc,KAAKsuB,cAElBuD,EAAKlc,OAAS3V,KAAKyvB,QACnBoC,EAAK7S,OAAShf,KAAKgf,OAAO5K,OAErByd,GAGTU,EAAAryB,UAAA4xB,iBAAA,SAAiB/nB,OAAErC,EAAAqC,EAAArC,MACjB1H,KAAKsrB,WAAa5jB,EAClB1H,KAAK8M,UAGPylB,EAAAryB,UAAA6xB,kBAAA,SAAkBhoB,OAAExC,EAAAwC,EAAAxC,OAClBvH,KAAKqrB,YAAc9jB,EACnBvH,KAAK8M,UAGPylB,EAAAryB,UAAA8xB,WAAA,SAAW5gB,GACGpR,KAAK2f,cAAcxB,WAAU,SAAA7e,GACvC,OAAOA,EAAEkR,OAASY,EAAKZ,MAAQlR,EAAEyC,QAAUqP,EAAKrP,UAEvC,IAIX/B,KAAK2f,cAAard,EAAA,CAAI8O,GAASpR,KAAK2f,eACpC3f,KAAK0d,SAAS/O,KAAK,CAAE5M,MAAOqP,EAAM6gB,QAASjyB,KAAK2f,kBAGlD4S,EAAAryB,UAAAgyB,aAAA,SAAa9gB,GACX,IAAMzF,EAAM3L,KAAK2f,cAAcxB,WAAU,SAAA7e,GACvC,OAAOA,EAAEkR,OAASY,EAAKZ,MAAQlR,EAAEyC,QAAUqP,EAAKrP,SAGlD/B,KAAK2f,cAAc9T,OAAOF,EAAK,GAC/B3L,KAAK2f,cAAard,EAAOtC,KAAK2f,eAE9B3f,KAAK2d,WAAWhP,KAAK,CAAE5M,MAAOqP,EAAM6gB,QAASjyB,KAAK2f,iBAGpD4S,EAAAryB,UAAAyxB,cAAA,mBACE3xB,KAAK2f,cAAard,EAAOtC,KAAK2f,mBAC9B,IAAoB,IAAA9I,EAAApV,EAAAzB,KAAK2f,eAAarO,EAAAuF,EAAA/U,QAAAwP,EAAAtP,KAAAsP,EAAAuF,EAAA/U,OAAE,CAAnC,IAAM4d,EAAKpO,EAAAvP,MACd/B,KAAK2d,WAAWhP,KAAK,CAAE5M,MAAO2d,EAAOuS,QAAS,uGAEhDjyB,KAAK2f,cAAgB,IAtVd7e,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,2CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,gDACQvJ,EAAA,CAARuJ,EAAAA,kDACQvJ,EAAA,CAARuJ,EAAAA,kDACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,4CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,yCAESvJ,EAAA,CAAT4M,EAAAA,yCACS5M,EAAA,CAAT4M,EAAAA,2CAEgC5M,EAAA,CAAhCqxB,EAAAA,aAAa,0DACyBrxB,EAAA,CAAtCqxB,EAAAA,aAAa,sEA8NdrxB,EAAA,CADC0J,EAAAA,aAAa,+CAjQH+nB,EAAyBzxB,EAAA,CA1IrC2J,EAAAA,UAAU,CACTC,SAAU,gCACVC,SAAU,07IAoIViD,gBAAiBC,EAAAA,wBAAwBC,OAEzClD,cAAeC,EAAAA,kBAAkBC,ymDAEtBynB,IAAkCrjB,YC9J/BujB,GAAWxhB,EAAMyhB,EAAUjJ,GACzC,YADyC,IAAAA,IAAAA,EAAA,OAClCxY,EAAKyf,MAAK,SAACC,EAAGpxB,GACnB,MAAkB,QAAdkqB,EACKkH,EAAE+B,GAAYnzB,EAAEmzB,GAEhBnzB,EAAEmzB,GAAY/B,EAAE+B,MAK7B,SAAgBC,GAAa1hB,EAAMyhB,EAAUjJ,EAAmB9T,GAC9D,YAD2C,IAAA8T,IAAAA,EAAA,OACpCxY,EAAKyf,MAAK,SAACC,EAAGpxB,GACnB,IAAMqzB,EAAOjC,EAAE+B,GACTG,EAAOtzB,EAAEmzB,GAETI,EAAOnd,EAAO/J,QAAQgnB,GACtBG,EAAOpd,EAAO/J,QAAQinB,GAE5B,MAAkB,QAAdpJ,EACKqJ,EAAOC,EAEPA,EAAOD,KAKpB,SAAgBE,GAAW/hB,EAAMyhB,EAAUjJ,GACzC,YADyC,IAAAA,IAAAA,EAAA,OAClCxY,EAAKyf,MAAK,SAACC,EAAGpxB,GACnB,IAAMqxB,EAAQD,EAAE+B,GAAU7B,UACpBC,EAAQvxB,EAAEmzB,GAAU7B,UAE1B,MAAkB,QAAdpH,EACEmH,EAAQE,EAAc,EACtBA,EAAQF,GAAe,EACpB,EAEHA,EAAQE,GAAe,EACvBA,EAAQF,EAAc,EACnB,SCjCDqC,iBC4BZ,SAAAC,IAIWlzB,KAAAuuB,UAAiB,OAGjBvuB,KAAAmzB,SAAmB,EACnBnzB,KAAAozB,YAAsB,EAItBpzB,KAAAuM,YAAsB,EAErBvM,KAAAuP,OAAS,IAAI9C,EAAAA,aAmGzB,OA1FEymB,EAAAhzB,UAAA0M,YAAA,SAAYC,GACV7M,KAAK8M,UAGPomB,EAAAhzB,UAAA4M,OAAA,WAAA,IAGMumB,EACAC,EAJN9pB,EAAAxJ,KACEA,KAAKuzB,iBAKL,IAAMC,EAAY,SAAAl0B,GAChB,IAAMiR,EAAQjR,EAAEkR,KAChB,OAAOhH,EAAKiV,OAAOlO,IAGjBvQ,KAAKmzB,SAAWnzB,KAAKozB,YACvBC,EAAcI,EAAAA,OACXjhB,EAAEghB,GACFE,IAAG,SAACp0B,EAAGkB,GAAM,OAAAgJ,EAAKqV,OAAOvf,EAAE+lB,OAC3BtN,IAAG,SAACzY,EAAGkB,GAAM,OAAAgJ,EAAKqV,OAAOvf,EAAEwf,OAE9BwU,EAAeG,EAAAA,OACZjhB,EAAEghB,GACFE,IAAG,SAAAp0B,GAAK,OAAAkK,EAAKqV,OAAOE,QAAQ,MAC5BhH,IAAG,SAAAzY,GAAK,OAAAkK,EAAKqV,OAAOE,QAAQ,QAE/BsU,EAAcI,EAAAA,OACXjhB,EAAEghB,GACFE,IAAG,WAAM,MAAoB,SAAnBlqB,EAAK+kB,UAAuB/kB,EAAKqV,OAAOE,QAAQ,GAAKvV,EAAKqV,OAAOrV,EAAK+kB,cAChFxW,IAAG,SAAAzY,GAAK,OAAAkK,EAAKqV,OAAOvf,EAAEyC,UAEzBuxB,EAAeG,EAAAA,OACZjhB,EAAEghB,GACFE,IAAG,SAAAp0B,GAAK,MAAoB,SAAnBkK,EAAK+kB,UAAuB/kB,EAAKqV,OAAOE,QAAQ,GAAKvV,EAAKqV,OAAOrV,EAAK+kB,cAC/ExW,IAAG,SAAAzY,GAAK,MAAoB,SAAnBkK,EAAK+kB,UAAuB/kB,EAAKqV,OAAOE,QAAQ,GAAKvV,EAAKqV,OAAOrV,EAAK+kB,eAGpF8E,EAAY7E,MAAMxuB,KAAKwuB,OACvB8E,EAAa9E,MAAMxuB,KAAKwuB,OAExBxuB,KAAKkO,QAAU,GAEf,IAAI+C,EAAOjR,KAAKiR,KAAKP,OAEnBO,EADqB,WAAnBjR,KAAKyN,UACAglB,GAAWxhB,EAAM,QACI,SAAnBjR,KAAKyN,UACPulB,GAAW/hB,EAAM,QAEjB0hB,GAAa1hB,EAAM,OAAQ,MAAOjR,KAAKye,OAAO9I,UAGvD3V,KAAK6hB,KAAOwR,EAAYpiB,GACxBjR,KAAK0hB,aAAe4R,EAAariB,IAGnCiiB,EAAAhzB,UAAAqzB,eAAA,WACE,GAA8B,WAA1BvzB,KAAKgf,OAAOvR,UAEd,GADAzN,KAAKohB,aAAc,EACfphB,KAAKmzB,SAAWnzB,KAAKozB,WAAY,CACnC,IAAMO,EAAW3zB,KAAKiR,KAAKP,OAAO0H,KAAI,SAAA9Y,GAAK,OAAAA,EAAE+lB,MACvCuO,EAAW5zB,KAAKiR,KAAKP,OAAO0H,KAAI,SAAA9Y,GAAK,OAAAA,EAAEwf,MACvCpM,EAAMrF,KAAKqF,IAAG7R,MAARwM,KAAI/K,EAAQsxB,IAClBze,EAAM9H,KAAK8H,IAAGtU,MAARwM,KAAI/K,EAAQqxB,IACxB3zB,KAAKof,cAAgBpf,KAAKgf,OAAOkO,uBAAuBxa,EAAKyC,OACxD,CACL,IAAMsS,EAASznB,KAAKiR,KAAKP,OAAO0H,KAAI,SAAA9Y,GAAK,OAAAA,EAAEyC,SACrC2Q,EAAMrF,KAAKqF,IAAG7R,MAARwM,KAAI/K,EAAQmlB,IACxBznB,KAAKof,cAAgBpf,KAAKgf,OAAOkO,uBAAuBxa,QAG1D1S,KAAKohB,aAAc,EACnBphB,KAAKof,mBAAgBpb,GAIzBkvB,EAAAhzB,UAAAuf,SAAA,SAASC,GACP,QAAK1f,KAAK2f,oBAIM3b,IAHHhE,KAAK2f,cAAcC,MAAK,SAAAtgB,GACnC,OAAOogB,EAAMlP,OAASlR,EAAEkR,SAK5B0iB,EAAAhzB,UAAA2zB,WAAA,SAAWnU,GACT,SAAK1f,KAAK2f,eAA+C,IAA9B3f,KAAK2f,cAAchf,cAI9BqD,IAHHhE,KAAK2f,cAAcC,MAAK,SAAAtgB,GACnC,OAAOogB,EAAMlP,OAASlR,EAAEkR,SA5GnB1P,EAAA,CAARuJ,EAAAA,oCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,uCACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,0CAESvJ,EAAA,CAAT4M,EAAAA,uCAdUwlB,EAAmBpyB,EAAA,CApB/B2J,EAAAA,UAAU,CACTC,SAAU,4BACVC,SAAU,gaAgBViD,gBAAiBC,EAAAA,wBAAwBC,UAE9BolB,oBCrBb,SAAAY,KAA8B,OAAjBA,EAAehzB,EAAA,CAL3BkY,EAAAA,SAAS,CACRC,QAAS,CAAC+R,IACV7R,aAAc,CAACkV,GAAoB+D,GAA8BG,GAA2BW,IAC5F9Z,QAAS,CAACiV,GAAoB+D,GAA8BG,GAA2BW,OAE5EY,oBCyDX,SAAAC,EAAYvwB,GAtBHxD,KAAAg0B,YAAsB,EACtBh0B,KAAAkhB,UAAoB,EACpBlhB,KAAAuS,OAAS,EACTvS,KAAAyf,UAAoB,EAEpBzf,KAAAuM,YAAsB,EAEtBvM,KAAAi0B,eAAyB,EAExBj0B,KAAAuP,OAAS,IAAI9C,EAAAA,aACbzM,KAAA0d,SAAW,IAAIjR,EAAAA,aACfzM,KAAA2d,WAAa,IAAIlR,EAAAA,aAQ3BzM,KAAAohB,aAAuB,EACvBphB,KAAAk0B,SAAmB,EAGjBl0B,KAAKwD,QAAUA,EAAQC,cAkK3B,OA/JEswB,EAAA7zB,UAAA0M,YAAA,SAAYC,GACNA,EAAQmnB,YACVh0B,KAAKqhB,gBAEPrhB,KAAK8M,UAGPinB,EAAA7zB,UAAA4M,OAAA,WACE9M,KAAK8d,WAAa,OAAST,KAAKtI,WAChC/U,KAAK+d,aAAe,QAAQ/d,KAAK8d,WAAU,IAEvC9d,KAAKkhB,UAAYlhB,KAAKshB,OACxBthB,KAAKof,cAAgBpf,KAAKuhB,cAC1BvhB,KAAKohB,aAAc,GAEnBphB,KAAKohB,aAAc,EAGrBphB,KAAKwhB,eACLxhB,KAAKm0B,kBAGPJ,EAAA7zB,UAAAmhB,cAAA,WACErhB,KAAK6hB,KAAO7hB,KAAKo0B,kBACjB1tB,WAAW1G,KAAK8M,OAAOvD,KAAKvJ,MAAO,MAGrC+zB,EAAA7zB,UAAAshB,aAAA,WACE,IAAMG,EAAOpS,EAAAA,OAAOvP,KAAKwD,SAAS+L,OAAO,QACnCsS,EAAO7hB,KAAKq0B,UACdr0B,KAAKuM,WACPoV,EACG3T,aACApH,SAAS,KACTgb,KAAK,IAAKC,GAEbF,EAAKC,KAAK,IAAKC,IAInBkS,EAAA7zB,UAAAqhB,YAAA,WACE,OAAIvhB,KAAKshB,MACAthB,KAAKshB,MAGP,CACL,CACE/O,OAAQ,EACRoM,MAAO3e,KAAKoW,KACZlI,QAASlO,KAAKs0B,mBAEhB,CACE/hB,OAAQ,IACRoM,MAAO3e,KAAKoW,KACZlI,QAAS,KAKf6lB,EAAA7zB,UAAAk0B,gBAAA,WACE,IAAKp0B,KAAKuM,WACR,OAAOvM,KAAKq0B,UAGd,IACIxS,EADA1C,EAASnf,KAAKu0B,YAmBlB,OAhBIv0B,KAAKg0B,WACkB,aAArBh0B,KAAK2gB,aACPxB,EAAS9R,KAAK8H,IAAInV,KAAKuH,OAAQ4X,GAC/B0C,EAAOnL,EAAY1W,KAAKwS,EAAGxS,KAAKsS,EAAItS,KAAKuH,OAAQvH,KAAK0H,MAAO,EAAG,EAAG1H,KAAKw0B,QAC1C,eAArBx0B,KAAK2gB,cACdxB,EAAS9R,KAAK8H,IAAInV,KAAK0H,MAAOyX,GAC9B0C,EAAOnL,EAAY1W,KAAKwS,EAAGxS,KAAKsS,EAAG,EAAGtS,KAAKuH,OAAQ,EAAGvH,KAAKw0B,QAGpC,aAArBx0B,KAAK2gB,YACPkB,EAAOnL,EAAY1W,KAAKwS,EAAGxS,KAAKsS,EAAItS,KAAKuH,OAAQvH,KAAK0H,MAAO,EAAG,EAAG1H,KAAKw0B,OAC1C,eAArBx0B,KAAK2gB,cACdkB,EAAOnL,EAAY1W,KAAKwS,EAAGxS,KAAKsS,EAAG,EAAGtS,KAAKuH,OAAQ,EAAGvH,KAAKw0B,QAIxD3S,GAGTkS,EAAA7zB,UAAAm0B,QAAA,WACE,IACIxS,EADA1C,EAASnf,KAAKu0B,YAelB,OAZIv0B,KAAKg0B,WACkB,aAArBh0B,KAAK2gB,aACPxB,EAAS9R,KAAK8H,IAAInV,KAAKuH,OAAQ4X,GAC/B0C,EAAOnL,EAAY1W,KAAKwS,EAAGxS,KAAKsS,EAAGtS,KAAK0H,MAAO1H,KAAKuH,OAAQ4X,EAAQnf,KAAKw0B,QAC3C,eAArBx0B,KAAK2gB,cACdxB,EAAS9R,KAAK8H,IAAInV,KAAK0H,MAAOyX,GAC9B0C,EAAOnL,EAAY1W,KAAKwS,EAAGxS,KAAKsS,EAAGtS,KAAK0H,MAAO1H,KAAKuH,OAAQ4X,EAAQnf,KAAKw0B,QAG3E3S,EAAOnL,EAAY1W,KAAKwS,EAAGxS,KAAKsS,EAAGtS,KAAK0H,MAAO1H,KAAKuH,OAAQ4X,EAAQnf,KAAKw0B,OAGpE3S,GAGTkS,EAAA7zB,UAAAq0B,UAAA,WACE,IAAIpV,EAAS,EAMb,OAJInf,KAAKg0B,YAAch0B,KAAKuH,OAAS,GAAKvH,KAAK0H,MAAQ,IACrDyX,EAAS9R,KAAKC,MAAMD,KAAK8H,IAAI,EAAGnV,KAAKuH,OAAS,EAAGvH,KAAK0H,MAAQ,KAGzDyX,GAGT4U,EAAA7zB,UAAAo0B,gBAAA,WACE,OAAIt0B,KAAKg0B,WACA,GAEA,IAIXx0B,OAAAgC,eAAIuyB,EAAA7zB,UAAA,QAAK,KAAT,WACE,IAAIs0B,EAAQ,EAAC,GAAO,GAAO,GAAO,GAgBlC,OAfIx0B,KAAKg0B,aACkB,aAArBh0B,KAAK2gB,YAEL6T,EADEx0B,KAAKiR,KAAKlP,MAAQ,EACZ,EAAC,GAAM,GAAM,GAAO,GAEpB,EAAC,GAAO,GAAO,GAAM,GAED,eAArB/B,KAAK2gB,cAEZ6T,EADEx0B,KAAKiR,KAAKlP,MAAQ,EACZ,EAAC,GAAO,GAAM,GAAO,GAErB,EAAC,GAAM,GAAO,GAAM,KAI3ByyB,mCAITT,EAAA7zB,UAAAib,aAAA,WACEnb,KAAK0d,SAAS/O,KAAK3O,KAAKiR,OAI1B8iB,EAAA7zB,UAAAmb,aAAA,WACErb,KAAK2d,WAAWhP,KAAK3O,KAAKiR,OAGpB8iB,EAAA7zB,UAAAi0B,eAAR,WACEn0B,KAAKk0B,QACHl0B,KAAKi0B,gBACkB,aAArBj0B,KAAK2gB,aAA8C,IAAhB3gB,KAAKuH,QAClB,eAArBvH,KAAK2gB,aAA+C,IAAf3gB,KAAK0H,iDAjK5ByC,EAAAA,cA7BZrJ,EAAA,CAARuJ,EAAAA,oCACQvJ,EAAA,CAARuJ,EAAAA,oCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,iCACQvJ,EAAA,CAARuJ,EAAAA,iCACQvJ,EAAA,CAARuJ,EAAAA,2CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,6CAESvJ,EAAA,CAAT4M,EAAAA,uCACS5M,EAAA,CAAT4M,EAAAA,yCACS5M,EAAA,CAAT4M,EAAAA,2CA+JD5M,EAAA,CADC0J,EAAAA,aAAa,gDAMd1J,EAAA,CADC0J,EAAAA,aAAa,gDAtLHupB,EAAYjzB,EAAA,CArBxB2J,EAAAA,UAAU,CACTC,SAAU,oBACVC,SAAU,ifAiBViD,gBAAiBC,EAAAA,wBAAwBC,UAE9BimB,qBCgDb,SAAAU,IAAA,IAAAjrB,EAAA,OAAA4C,GAAAA,EAAAvL,MAAAb,KAAAU,YAAAV,YACWwJ,EAAA8lB,QAAS,EACT9lB,EAAA8kB,YAAsB,SACtB9kB,EAAAqiB,eAAyB,QAOzBriB,EAAAoQ,iBAA2B,EAE3BpQ,EAAA+J,eAAyB,EACzB/J,EAAAmW,cAAuB,GAEvBnW,EAAAklB,gBAA0B,EAC1BllB,EAAAmlB,gBAA0B,EAC1BnlB,EAAAolB,kBAA4B,EAC5BplB,EAAAqlB,mBAA6B,GAC7BrlB,EAAAslB,mBAA6B,GAK7BtlB,EAAAkrB,WAAa,EACblrB,EAAAulB,cAAwB,EACxBvlB,EAAAwqB,YAAsB,EAGtBxqB,EAAAmrB,eAAyB,EAEzBnrB,EAAAyqB,eAAyB,EAExBzqB,EAAAkU,SAA8B,IAAIjR,EAAAA,aAClCjD,EAAAmU,WAAgC,IAAIlR,EAAAA,aAW9CjD,EAAAyI,OAAS,CAAC,GAAI,GAAI,GAAI,IACtBzI,EAAA6hB,YAAsB,EACtB7hB,EAAA8hB,WAAqB,EAErB9hB,EAAAorB,kBAAyB,CAAEC,SAAU,EAAGC,SAAU,KAmKpD,OApN4Ch1B,EAAA20B,EAAAroB,GAmD1CqoB,EAAAv0B,UAAA4M,OAAA,WACEV,EAAAlM,UAAM4M,OAAMlM,KAAAZ,MAEPA,KAAK20B,gBACR30B,KAAK40B,kBAAoB,CAAEC,SAAU,EAAGC,SAAU,IAGpD90B,KAAKiS,OAAS,CAAC,GAAI,GAAKjS,KAAK40B,kBAAkBE,SAAU,GAAI,GAAK90B,KAAK40B,kBAAkBC,UAEzF70B,KAAKgQ,KAAOib,GAAwB,CAClCvjB,MAAO1H,KAAK0H,MACZH,OAAQvH,KAAKuH,OACb2jB,QAASlrB,KAAKiS,OACdkZ,UAAWnrB,KAAKkvB,MAChB9D,UAAWprB,KAAKmvB,MAChB9D,YAAarrB,KAAKqrB,YAClBC,WAAYtrB,KAAKsrB,WACjBC,WAAYvrB,KAAKovB,eACjB3D,WAAYzrB,KAAKqvB,eACjB/iB,WAAYtM,KAAKsvB,OACjBtiB,WAAYhN,KAAKsP,WACjBuc,eAAgB7rB,KAAK6rB,iBAGvB7rB,KAAKqQ,cAELrQ,KAAKye,OAASze,KAAKonB,YACnBpnB,KAAK6e,OAAS7e,KAAK6vB,YAEnB7vB,KAAK+vB,YACL/vB,KAAKkN,cAAgBlN,KAAKgwB,mBAE1BhwB,KAAKoS,UAAY,aAAapS,KAAKgQ,KAAKgc,QAAO,MAAMhsB,KAAKiS,OAAO,GAAE,KAGrEwiB,EAAAv0B,UAAAknB,UAAA,WACEpnB,KAAKknB,QAAUlnB,KAAKmnB,aAEpB,IAAM/S,EAAQ0T,EAAAA,cACX/I,MAAM,CAAC,EAAG/e,KAAKgQ,KAAKtI,QACpBiO,OAAO3V,KAAKknB,SAEf,OAAOlnB,KAAK+uB,aAAe3a,EAAM8c,OAAS9c,GAG5CqgB,EAAAv0B,UAAA2vB,UAAA,WACE7vB,KAAKyvB,QAAUzvB,KAAK0vB,aACpB,IAAMnnB,EAAUvI,KAAKyvB,QAAQ9uB,QAAUX,KAAKgQ,KAAKzI,OAASvH,KAAK00B,WAAa,GAE5E,OAAOtH,EAAAA,YACJ2H,WAAW,CAAC,EAAG/0B,KAAKgQ,KAAKzI,SACzBiZ,aAAajY,GACboN,OAAO3V,KAAKyvB,UAGjBgF,EAAAv0B,UAAAinB,WAAA,WACE,IAAMM,EAASznB,KAAK8P,QAAQsI,KAAI,SAAA9Y,GAAK,OAAAA,EAAEyC,SAIvC,MAAO,CAHK/B,KAAKwwB,UAAYnjB,KAAK8H,IAAGtU,MAARwM,KAAI/K,EAAA,CAAKtC,KAAKwwB,WAAc/I,IAAUpa,KAAK8H,IAAGtU,MAARwM,KAAI/K,EAAA,CAAK,GAAMmlB,IAEtEznB,KAAKywB,UAAYpjB,KAAKqF,IAAG7R,MAARwM,KAAI/K,EAAA,CAAKtC,KAAKywB,WAAchJ,IAAUpa,KAAKqF,IAAG7R,MAARwM,KAAI/K,EAAA,CAAK,GAAMmlB,MAIpFgN,EAAAv0B,UAAAwvB,WAAA,WACE,OAAO1vB,KAAK8P,QAAQsI,KAAI,SAAA9Y,GAAK,OAAAA,EAAEiR,UAGjCkkB,EAAAv0B,UAAAsf,QAAA,SAAQvO,GACNjR,KAAKuP,OAAOZ,KAAKsC,IAGnBwjB,EAAAv0B,UAAA6vB,UAAA,WACE,IAAIpa,EAEFA,EADsB,YAApB3V,KAAKsP,WACEtP,KAAKyvB,QAELzvB,KAAKknB,QAGhBlnB,KAAKgf,OAAS,IAAIoN,GAAYpsB,KAAKqP,OAAQrP,KAAKsP,WAAYqG,EAAQ3V,KAAKqsB,eAG3EoI,EAAAv0B,UAAA8vB,iBAAA,WACE,IAAM6B,EAAO,CACXpkB,UAAWzN,KAAKsP,WAChB0P,YAAQhb,EACR2R,OAAQ,GACRyG,WAAOpY,EACPsF,SAAUtJ,KAAK6rB,gBAWjB,MATuB,YAAnBgG,EAAKpkB,WACPokB,EAAKlc,OAAS3V,KAAKyvB,QACnBoC,EAAK7S,OAAShf,KAAKgf,OACnB6S,EAAKzV,MAAQpc,KAAKsuB,cAElBuD,EAAKlc,OAAS3V,KAAKknB,QACnB2K,EAAK7S,OAAShf,KAAKgf,OAAO5K,OAGrByd,GAGT4C,EAAAv0B,UAAA4xB,iBAAA,SAAiB/nB,OAAErC,EAAAqC,EAAArC,MACjB1H,KAAKsrB,WAAa5jB,EAClB1H,KAAK8M,UAGP2nB,EAAAv0B,UAAA6xB,kBAAA,SAAkBhoB,OAAExC,EAAAwC,EAAAxC,OAClBvH,KAAKqrB,YAAc9jB,EACnBvH,KAAK8M,UAGP2nB,EAAAv0B,UAAA80B,2BAAA,SAA2B9Y,GAA3B,IAAA1S,EAAAxJ,KACMkc,EAAM+Y,KAAKJ,SACb70B,KAAK40B,kBAAkBC,SAAWxnB,KAAKqF,IAAI1S,KAAK40B,kBAAkBC,SAAU3Y,EAAM+Y,KAAKvtB,OAEvF1H,KAAK40B,kBAAkBE,SAAWznB,KAAKqF,IAAI1S,KAAK40B,kBAAkBE,SAAU5Y,EAAM+Y,KAAKvtB,OAErFwU,EAAMgN,QAAUlpB,KAAK8P,QAAQnP,OAAS,GACxC+F,YAAW,WAAM,OAAA8C,EAAKsD,aAI1B2nB,EAAAv0B,UAAA8xB,WAAA,SAAW5gB,EAAM8jB,QAAA,IAAAA,IAAAA,GAAA,GACf9jB,EAAOpR,KAAK8P,QAAQ8P,MAAK,SAAAtgB,GACvB,OAAI41B,EACK51B,EAAEiR,QAAUa,EAAKZ,KAEjBlR,EAAEkR,OAASY,EAAKZ,QAIfxQ,KAAK2f,cAAcxB,WAAU,SAAA7e,GACvC,OAAOA,EAAEkR,OAASY,EAAKZ,MAAQlR,EAAEyC,QAAUqP,EAAKrP,OAASzC,EAAEoR,SAAWU,EAAKV,WAElE,IAIX1Q,KAAK2f,cAAard,EAAA,CAAI8O,GAASpR,KAAK2f,eACpC3f,KAAK0d,SAAS/O,KAAK,CAAE5M,MAAOqP,EAAM6gB,QAASjyB,KAAK2f,kBAGlD8U,EAAAv0B,UAAAgyB,aAAA,SAAa9gB,EAAM8jB,QAAA,IAAAA,IAAAA,GAAA,GACjB9jB,EAAOpR,KAAK8P,QAAQ8P,MAAK,SAAAtgB,GACvB,OAAI41B,EACK51B,EAAEiR,QAAUa,EAAKZ,KAEjBlR,EAAEkR,OAASY,EAAKZ,QAI3B,IAAM7E,EAAM3L,KAAK2f,cAAcxB,WAAU,SAAA7e,GACvC,OAAOA,EAAEkR,OAASY,EAAKZ,MAAQlR,EAAEyC,QAAUqP,EAAKrP,OAASzC,EAAEoR,SAAWU,EAAKV,UAG7E1Q,KAAK2f,cAAc9T,OAAOF,EAAK,GAC/B3L,KAAK2f,cAAard,EAAOtC,KAAK2f,eAE9B3f,KAAK2d,WAAWhP,KAAK,CAAE5M,MAAOqP,EAAM6gB,QAASjyB,KAAK2f,iBAjN3C7e,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,2CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,gDACQvJ,EAAA,CAARuJ,EAAAA,kDACQvJ,EAAA,CAARuJ,EAAAA,kDACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,4CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,6CAESvJ,EAAA,CAAT4M,EAAAA,yCACS5M,EAAA,CAAT4M,EAAAA,2CAEgC5M,EAAA,CAAhCqxB,EAAAA,aAAa,0DApCHsC,EAAsB3zB,EAAA,CAvElC2J,EAAAA,UAAU,CACTC,SAAU,4BACVC,SAAU,4wEAiEViD,gBAAiBC,EAAAA,wBAAwBC,OAEzClD,cAAeC,EAAAA,kBAAkBC,ymDAEtB2pB,IAA+BvlB,kBC4B5C,SAAAimB,IAAA,IAAA3rB,EAAA,OAAA4C,GAAAA,EAAAvL,MAAAb,KAAAU,YAAAV,YACWwJ,EAAA8lB,QAAS,EACT9lB,EAAA8kB,YAAsB,SACtB9kB,EAAAqiB,eAAyB,QAOzBriB,EAAAoQ,iBAA2B,EAE3BpQ,EAAA+J,eAAyB,EACzB/J,EAAAmW,cAAuB,GAEvBnW,EAAAklB,gBAA0B,EAC1BllB,EAAAmlB,gBAA0B,EAC1BnlB,EAAAolB,kBAA4B,EAC5BplB,EAAAqlB,mBAA6B,GAC7BrlB,EAAAslB,mBAA6B,GAK7BtlB,EAAA4rB,aAAe,GACf5rB,EAAAkrB,WAAa,EACblrB,EAAAulB,cAAwB,EACxBvlB,EAAAwqB,YAAsB,EAEtBxqB,EAAAmrB,eAAyB,EAEzBnrB,EAAAyqB,eAAyB,EAExBzqB,EAAAkU,SAA8B,IAAIjR,EAAAA,aAClCjD,EAAAmU,WAAgC,IAAIlR,EAAAA,aAa9CjD,EAAAyI,OAAS,CAAC,GAAI,GAAI,GAAI,IACtBzI,EAAA6hB,YAAsB,EACtB7hB,EAAA8hB,WAAqB,EAErB9hB,EAAAorB,kBAAyB,CAAEC,SAAU,EAAGC,SAAU,KAyNpD,OA5Q8Ch1B,EAAAq1B,EAAA/oB,GAqD5C+oB,EAAAj1B,UAAA4M,OAAA,WACEV,EAAAlM,UAAM4M,OAAMlM,KAAAZ,MAEPA,KAAK20B,gBACR30B,KAAK40B,kBAAoB,CAAEC,SAAU,EAAGC,SAAU,IAGpD90B,KAAKiS,OAAS,CAAC,GAAI,GAAKjS,KAAK40B,kBAAkBE,SAAU,GAAI,GAAK90B,KAAK40B,kBAAkBC,UAEzF70B,KAAKgQ,KAAOib,GAAwB,CAClCvjB,MAAO1H,KAAK0H,MACZH,OAAQvH,KAAKuH,OACb2jB,QAASlrB,KAAKiS,OACdkZ,UAAWnrB,KAAKkvB,MAChB9D,UAAWprB,KAAKmvB,MAChB9D,YAAarrB,KAAKqrB,YAClBC,WAAYtrB,KAAKsrB,WACjBC,WAAYvrB,KAAKovB,eACjB3D,WAAYzrB,KAAKqvB,eACjB/iB,WAAYtM,KAAKsvB,OACjBtiB,WAAYhN,KAAKsP,WACjBuc,eAAgB7rB,KAAK6rB,iBAGvB7rB,KAAKqQ,cAELrQ,KAAKq1B,YAAcr1B,KAAKs1B,iBACxBt1B,KAAKu1B,YAAcv1B,KAAKw1B,iBACxBx1B,KAAKy1B,aAAez1B,KAAK01B,iBAEzB11B,KAAK21B,WAAa31B,KAAK41B,gBACvB51B,KAAK61B,WAAa71B,KAAK81B,gBACvB91B,KAAK6sB,WAAa7sB,KAAK+1B,gBAEvB/1B,KAAK+vB,YACL/vB,KAAKkN,cAAgBlN,KAAKgwB,mBAE1BhwB,KAAKoS,UAAY,aAAapS,KAAKgQ,KAAKgc,QAAO,MAAMhsB,KAAKiS,OAAO,GAAE,KAGrEkjB,EAAAj1B,UAAA01B,cAAA,WACE,IAAMrtB,EAAUvI,KAAKq1B,YAAY10B,QAAUX,KAAKgQ,KAAKzI,OAASvH,KAAKo1B,aAAe,GAElF,OAAOhI,EAAAA,YACJ2H,WAAW,CAAC,EAAG/0B,KAAKgQ,KAAKzI,SACzBiZ,aAAajY,GACbytB,aAAaztB,EAAU,GACvBoN,OAAO3V,KAAKq1B,cAGjBF,EAAAj1B,UAAA41B,cAAA,WACE,IAAMvuB,EAASvH,KAAK21B,WAAW/gB,YACzBrM,EAAUvI,KAAKu1B,YAAY50B,QAAU4G,EAASvH,KAAK00B,WAAa,GAEtE,OAAOtH,EAAAA,YACJ2H,WAAW,CAAC,EAAGxtB,IACfiZ,aAAajY,GACboN,OAAO3V,KAAKu1B,cAGjBJ,EAAAj1B,UAAA61B,cAAA,WACE,IAAM3hB,EAAQ0T,EAAAA,cACX/I,MAAM,CAAC,EAAG/e,KAAKgQ,KAAKtI,QACpBiO,OAAO3V,KAAKy1B,cAEf,OAAOz1B,KAAK+uB,aAAe3a,EAAM8c,OAAS9c,GAG5C+gB,EAAAj1B,UAAAo1B,eAAA,mBACQ3f,EAAS,OAEf,IAAoB,IAAAkB,EAAApV,EAAAzB,KAAK8P,SAAOwB,EAAAuF,EAAA/U,QAAAwP,EAAAtP,KAAAsP,EAAAuF,EAAA/U,OAAE,CAA7B,IAAMqjB,EAAK7T,EAAAvP,MACT4T,EAAOiS,SAASzC,EAAM5U,QACzBoF,EAAOvT,KAAK+iB,EAAM5U,yGAItB,OAAOoF,GAGTwf,EAAAj1B,UAAAs1B,eAAA,uBACQ7f,EAAS,OAEf,IAAoB,IAAArE,EAAA7P,EAAAzB,KAAK8P,SAAO0B,EAAAF,EAAAxP,QAAA0P,EAAAxP,KAAAwP,EAAAF,EAAAxP,OAAE,CAA7B,IAAMqjB,EAAK3T,EAAAzP,UACd,IAAgB,IAAA2lB,GAAAuO,OAAA,EAAAx0B,EAAA0jB,EAAMzU,SAAMiX,EAAAD,EAAA5lB,QAAA6lB,EAAA3lB,KAAA2lB,EAAAD,EAAA5lB,OAAE,CAAzB,IAAMxC,EAACqoB,EAAA5lB,MACL4T,EAAOiS,SAAStoB,EAAEiR,QACrBoF,EAAOvT,KAAK9C,EAAEiR,4MAKpB,OAAOoF,GAGTwf,EAAAj1B,UAAAw1B,eAAA,uBACQ/f,EAAS,OAEf,IAAoB,IAAArE,EAAA7P,EAAAzB,KAAK8P,SAAO0B,EAAAF,EAAAxP,QAAA0P,EAAAxP,KAAAwP,EAAAF,EAAAxP,OAAE,CAA7B,IAAMqjB,EAAK3T,EAAAzP,UACd,IAAgB,IAAA2lB,GAAAwO,OAAA,EAAAz0B,EAAA0jB,EAAMzU,SAAMiX,EAAAD,EAAA5lB,QAAA6lB,EAAA3lB,KAAA2lB,EAAAD,EAAA5lB,OAAE,CAAzB,IAAMxC,EAACqoB,EAAA5lB,MACL4T,EAAOiS,SAAStoB,EAAEyC,QACrB4T,EAAOvT,KAAK9C,EAAEyC,4MAOpB,MAAO,CAFKsL,KAAK8H,IAAGtU,MAARwM,KAAI/K,EAAA,CAAK,GAAMqT,IACf3V,KAAKywB,UAAYpjB,KAAKqF,IAAG7R,MAARwM,KAAI/K,EAAA,CAAKtC,KAAKywB,WAAc9a,IAAUtI,KAAKqF,IAAG7R,MAARwM,KAAI/K,EAAA,CAAK,GAAMqT,MAIpFwf,EAAAj1B,UAAAi2B,eAAA,SAAehR,GACb,MAAO,gBAAgBnlB,KAAK21B,WAAWxQ,EAAM5U,OAAM,KAGrD4kB,EAAAj1B,UAAAsf,QAAA,SAAQvO,EAAMkU,GACRA,IACFlU,EAAKP,OAASyU,EAAM3U,MAGtBxQ,KAAKuP,OAAOZ,KAAKsC,IAGnBkkB,EAAAj1B,UAAA+oB,QAAA,SAAQC,EAAO9X,GACb,OAAOA,EAAKZ,MAGd2kB,EAAAj1B,UAAA6vB,UAAA,WACE,IAAIpa,EAEFA,EADsB,YAApB3V,KAAKsP,WACEtP,KAAKu1B,YAELv1B,KAAKy1B,aAGhBz1B,KAAKgf,OAAS,IAAIoN,GAAYpsB,KAAKqP,OAAQrP,KAAKsP,WAAYqG,EAAQ3V,KAAKqsB,eAG3E8I,EAAAj1B,UAAA8vB,iBAAA,WACE,IAAM6B,EAAO,CACXpkB,UAAWzN,KAAKsP,WAChB0P,YAAQhb,EACR2R,OAAQ,GACRyG,WAAOpY,EACPsF,SAAUtJ,KAAK6rB,gBAWjB,MATuB,YAAnBgG,EAAKpkB,WACPokB,EAAKlc,OAAS3V,KAAKu1B,YACnB1D,EAAK7S,OAAShf,KAAKgf,OACnB6S,EAAKzV,MAAQpc,KAAKsuB,cAElBuD,EAAKlc,OAAS3V,KAAKy1B,aACnB5D,EAAK7S,OAAShf,KAAKgf,OAAO5K,OAGrByd,GAGTsD,EAAAj1B,UAAA4xB,iBAAA,SAAiB/nB,OAAErC,EAAAqC,EAAArC,MACjB1H,KAAKsrB,WAAa5jB,EAClB1H,KAAK8M,UAGPqoB,EAAAj1B,UAAA6xB,kBAAA,SAAkBhoB,OAAExC,EAAAwC,EAAAxC,OAClBvH,KAAKqrB,YAAc9jB,EACnBvH,KAAK8M,UAGPqoB,EAAAj1B,UAAA80B,2BAAA,SAA2B9Y,EAAOka,GAAlC,IAAA5sB,EAAAxJ,KACMkc,EAAM+Y,KAAKJ,SACb70B,KAAK40B,kBAAkBC,SAAWxnB,KAAKqF,IAAI1S,KAAK40B,kBAAkBC,SAAU3Y,EAAM+Y,KAAKvtB,OAEvF1H,KAAK40B,kBAAkBE,SAAWznB,KAAKqF,IAAI1S,KAAK40B,kBAAkBE,SAAU5Y,EAAM+Y,KAAKvtB,OAErF0uB,IAAep2B,KAAK8P,QAAQnP,OAAS,GACvC+F,YAAW,WAAM,OAAA8C,EAAKsD,aAI1BqoB,EAAAj1B,UAAA8xB,WAAA,SAAW9V,EAAOiJ,EAAO+P,QAAA,IAAAA,IAAAA,GAAA,GACvB,IAAM9jB,EAAO5R,OAAOa,OAAO,GAAI6b,GAC3BiJ,IACF/T,EAAKV,OAASyU,EAAM3U,MAGtB,IAAMsY,EAAQ9oB,KAAK8P,QAChBsI,KAAI,SAAA9H,GAAK,OAAAA,EAAEI,UACX2lB,OACA7O,QAAO,SAAAhnB,GACN,OAAI00B,EACK10B,EAAE+P,QAAUa,EAAKZ,KAEjBhQ,EAAEgQ,OAASY,EAAKZ,MAAQhQ,EAAEkQ,SAAWU,EAAKV,UAIvD1Q,KAAK2f,cAAard,EAAOwmB,GACzB9oB,KAAK0d,SAAS/O,KAAK,CAAE5M,MAAOqP,EAAM6gB,QAASjyB,KAAK2f,iBAGlDwV,EAAAj1B,UAAAgyB,aAAA,SAAahW,EAAOiJ,EAAO+P,QAAA,IAAAA,IAAAA,GAAA,GACzB,IAAM9jB,EAAO5R,OAAOa,OAAO,GAAI6b,GAC3BiJ,IACF/T,EAAKV,OAASyU,EAAM3U,MAGtBxQ,KAAK2f,cAAgB3f,KAAK2f,cAAc6H,QAAO,SAAAhnB,GAC7C,OAAI00B,EACK10B,EAAE+P,QAAUa,EAAKZ,OAEfhQ,EAAEgQ,OAASY,EAAKZ,MAAQhQ,EAAEkQ,SAAWU,EAAKV,WAIvD1Q,KAAK2d,WAAWhP,KAAK,CAAE5M,MAAOqP,EAAM6gB,QAASjyB,KAAK2f,iBAzQ3C7e,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,2CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,gDACQvJ,EAAA,CAARuJ,EAAAA,kDACQvJ,EAAA,CAARuJ,EAAAA,kDACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,4CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,4CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,6CAESvJ,EAAA,CAAT4M,EAAAA,yCACS5M,EAAA,CAAT4M,EAAAA,2CAEgC5M,EAAA,CAAhCqxB,EAAAA,aAAa,0DApCHgD,EAAwBr0B,EAAA,CAjGpC2J,EAAAA,UAAU,CACTC,SAAU,+BACVC,SAAU,u1FAgFViD,gBAAiBC,EAAAA,wBAAwBC,OAEzClD,cAAeC,EAAAA,kBAAkBC,KACjCyB,WAAY,CACVwB,EAAAA,QAAQ,iBAAkB,CACxBC,EAAAA,WAAW,SAAU,CACnBC,EAAAA,MAAM,CACJC,QAAS,EACTkE,UAAW,MAEbjE,EAAAA,QAAQ,IAAKF,EAAAA,MAAM,CAAEC,QAAS,EAAGkE,UAAW,unDAKvC+iB,IAAiCjmB,kBCZ9C,SAAAonB,IAAA,IAAA9sB,EAAA,OAAA4C,GAAAA,EAAAvL,MAAAb,KAAAU,YAAAV,YACWwJ,EAAA8lB,QAAS,EACT9lB,EAAA8kB,YAAsB,SACtB9kB,EAAAqiB,eAAyB,QAOzBriB,EAAAoQ,iBAA2B,EAE3BpQ,EAAA+J,eAAyB,EACzB/J,EAAAmW,cAAuB,GAEvBnW,EAAAklB,gBAA0B,EAC1BllB,EAAAmlB,gBAA0B,EAC1BnlB,EAAAolB,kBAA4B,EAC5BplB,EAAAqlB,mBAA6B,GAC7BrlB,EAAAslB,mBAA6B,GAK7BtlB,EAAAkrB,WAAa,EACblrB,EAAAulB,cAAwB,EACxBvlB,EAAAyqB,eAAyB,EAExBzqB,EAAAkU,SAA8B,IAAIjR,EAAAA,aAClCjD,EAAAmU,WAAgC,IAAIlR,EAAAA,aAY9CjD,EAAAyI,OAAS,CAAC,GAAI,GAAI,GAAI,IACtBzI,EAAA6hB,YAAsB,EACtB7hB,EAAA8hB,WAAqB,IAgLvB,OA3NsDxrB,EAAAw2B,EAAAlqB,GA8CpDkqB,EAAAp2B,UAAA4M,OAAA,WACEV,EAAAlM,UAAM4M,OAAMlM,KAAAZ,MAEZA,KAAKgQ,KAAOib,GAAwB,CAClCvjB,MAAO1H,KAAK0H,MACZH,OAAQvH,KAAKuH,OACb2jB,QAASlrB,KAAKiS,OACdkZ,UAAWnrB,KAAKkvB,MAChB9D,UAAWprB,KAAKmvB,MAChB9D,YAAarrB,KAAKqrB,YAClBC,WAAYtrB,KAAKsrB,WACjBC,WAAYvrB,KAAKovB,eACjB3D,WAAYzrB,KAAKqvB,eACjB/iB,WAAYtM,KAAKsvB,OACjBtiB,WAAYhN,KAAKsP,WACjBuc,eAAgB7rB,KAAK6rB,iBAGvB7rB,KAAKqQ,cAELrQ,KAAKq1B,YAAcr1B,KAAKs1B,iBACxBt1B,KAAKu1B,YAAcv1B,KAAKw1B,iBACxBx1B,KAAKu2B,YAAcv2B,KAAK01B,iBAExB11B,KAAKye,OAASze,KAAKonB,YACnBpnB,KAAK6e,OAAS7e,KAAK6vB,YAEnB7vB,KAAK+vB,YACL/vB,KAAKkN,cAAgBlN,KAAKgwB,mBAE1BhwB,KAAKoS,UAAY,aAAapS,KAAKgQ,KAAKgc,QAAO,MAAMhsB,KAAKiS,OAAO,GAAE,KAGrEqkB,EAAAp2B,UAAAo1B,eAAA,mBACQ3f,EAAS,OAEf,IAAoB,IAAAkB,EAAApV,EAAAzB,KAAK8P,SAAOwB,EAAAuF,EAAA/U,QAAAwP,EAAAtP,KAAAsP,EAAAuF,EAAA/U,OAAE,CAA7B,IAAMqjB,EAAK7T,EAAAvP,MACT4T,EAAOiS,SAASzC,EAAM5U,QACzBoF,EAAOvT,KAAK+iB,EAAM5U,yGAItB,OAAOoF,GAGT2gB,EAAAp2B,UAAAs1B,eAAA,uBACQ7f,EAAS,OAEf,IAAoB,IAAArE,EAAA7P,EAAAzB,KAAK8P,SAAO0B,EAAAF,EAAAxP,QAAA0P,EAAAxP,KAAAwP,EAAAF,EAAAxP,OAAE,CAA7B,IAAMqjB,EAAK3T,EAAAzP,UACd,IAAgB,IAAA2lB,GAAAuO,OAAA,EAAAx0B,EAAA0jB,EAAMzU,SAAMiX,EAAAD,EAAA5lB,QAAA6lB,EAAA3lB,KAAA2lB,EAAAD,EAAA5lB,OAAE,CAAzB,IAAMxC,EAACqoB,EAAA5lB,MACL4T,EAAOiS,SAAStoB,EAAEiR,QACrBoF,EAAOvT,KAAK9C,EAAEiR,4MAKpB,OAAOoF,GAGT2gB,EAAAp2B,UAAAw1B,eAAA,WACE,MAAO,CAAC,EAAG,MAGbY,EAAAp2B,UAAA2vB,UAAA,WACE,IAAMtnB,EAAUvI,KAAKq1B,YAAY10B,QAAUX,KAAKgQ,KAAKzI,OAASvH,KAAK00B,WAAa,GAEhF,OAAOtH,EAAAA,YACJ2H,WAAW,CAAC,EAAG/0B,KAAKgQ,KAAKzI,SACzBiZ,aAAajY,GACboN,OAAO3V,KAAKq1B,cAGjBiB,EAAAp2B,UAAAknB,UAAA,WACE,IAAMhT,EAAQ0T,EAAAA,cACX/I,MAAM,CAAC,EAAG/e,KAAKgQ,KAAKtI,QACpBiO,OAAO3V,KAAKu2B,aACf,OAAOv2B,KAAK+uB,aAAe3a,EAAM8c,OAAS9c,GAG5CkiB,EAAAp2B,UAAAi2B,eAAA,SAAehR,GACb,MAAO,gBAAgBnlB,KAAK6e,OAAOsG,EAAM3U,MAAK,KAGhD8lB,EAAAp2B,UAAAsf,QAAA,SAAQvO,EAAMkU,GACRA,IACFlU,EAAKP,OAASyU,EAAM3U,MAGtBxQ,KAAKuP,OAAOZ,KAAKsC,IAGnBqlB,EAAAp2B,UAAA+oB,QAAA,SAAQC,EAAO9X,GACb,OAAOA,EAAKZ,MAGd8lB,EAAAp2B,UAAA6vB,UAAA,WACE,IAAIpa,EAEFA,EADsB,YAApB3V,KAAKsP,WACEtP,KAAKu1B,YAELv1B,KAAKu2B,YAGhBv2B,KAAKgf,OAAS,IAAIoN,GAAYpsB,KAAKqP,OAAQrP,KAAKsP,WAAYqG,EAAQ3V,KAAKqsB,eAG3EiK,EAAAp2B,UAAA8vB,iBAAA,WACE,IAAM6B,EAAO,CACXpkB,UAAWzN,KAAKsP,WAChB0P,YAAQhb,EACR2R,OAAQ,GACRyG,WAAOpY,EACPsF,SAAUtJ,KAAK6rB,gBAWjB,MATuB,YAAnBgG,EAAKpkB,WACPokB,EAAKlc,OAAS3V,KAAKu1B,YACnB1D,EAAK7S,OAAShf,KAAKgf,OACnB6S,EAAKzV,MAAQpc,KAAKsuB,cAElBuD,EAAKlc,OAAS3V,KAAKu2B,YACnB1E,EAAK7S,OAAShf,KAAKgf,OAAO5K,OAGrByd,GAGTyE,EAAAp2B,UAAA4xB,iBAAA,SAAiB/nB,OAAErC,EAAAqC,EAAArC,MACjB1H,KAAKsrB,WAAa5jB,EAClB1H,KAAK8M,UAGPwpB,EAAAp2B,UAAA6xB,kBAAA,SAAkBhoB,OAAExC,EAAAwC,EAAAxC,OAClBvH,KAAKqrB,YAAc9jB,EACnBvH,KAAK8M,UAGPwpB,EAAAp2B,UAAA8xB,WAAA,SAAW9V,EAAOiJ,EAAO+P,QAAA,IAAAA,IAAAA,GAAA,GACvB,IAAM9jB,EAAO5R,OAAOa,OAAO,GAAI6b,GAC3BiJ,IACF/T,EAAKV,OAASyU,EAAM3U,MAGtB,IAAMsY,EAAQ9oB,KAAK8P,QAChBsI,KAAI,SAAA9H,GAAK,OAAAA,EAAEI,UACX2lB,OACA7O,QAAO,SAAAhnB,GACN,OAAI00B,EACK10B,EAAE+P,QAAUa,EAAKZ,KAEjBhQ,EAAEgQ,OAASY,EAAKZ,MAAQhQ,EAAEkQ,SAAWU,EAAKV,UAIvD1Q,KAAK2f,cAAard,EAAOwmB,GACzB9oB,KAAK0d,SAAS/O,KAAK,CAAE5M,MAAOqP,EAAM6gB,QAASjyB,KAAK2f,iBAGlD2W,EAAAp2B,UAAAgyB,aAAA,SAAahW,EAAOiJ,EAAO+P,QAAA,IAAAA,IAAAA,GAAA,GACzB,IAAM9jB,EAAO5R,OAAOa,OAAO,GAAI6b,GAC3BiJ,IACF/T,EAAKV,OAASyU,EAAM3U,MAGtBxQ,KAAK2f,cAAgB3f,KAAK2f,cAAc6H,QAAO,SAAAhnB,GAC7C,OAAI00B,EACK10B,EAAE+P,QAAUa,EAAKZ,OAEfhQ,EAAEgQ,OAASY,EAAKZ,MAAQhQ,EAAEkQ,SAAWU,EAAKV,WAIvD1Q,KAAK2d,WAAWhP,KAAK,CAAE5M,MAAOqP,EAAM6gB,QAASjyB,KAAK2f,iBAxN3C7e,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,2CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,gDACQvJ,EAAA,CAARuJ,EAAAA,kDACQvJ,EAAA,CAARuJ,EAAAA,kDACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,4CACQvJ,EAAA,CAARuJ,EAAAA,6CAESvJ,EAAA,CAAT4M,EAAAA,yCACS5M,EAAA,CAAT4M,EAAAA,2CAEgC5M,EAAA,CAAhCqxB,EAAAA,aAAa,0DA/BHmE,EAAgCx1B,EAAA,CArF5C2J,EAAAA,UAAU,CACTC,SAAU,uCACVC,SAAU,81EAoEViD,gBAAiBC,EAAAA,wBAAwBC,OAEzClD,cAAeC,EAAAA,kBAAkBC,KACjCyB,WAAY,CACVwB,EAAAA,QAAQ,iBAAkB,CACxBC,EAAAA,WAAW,SAAU,CACnBC,EAAAA,MAAM,CACJC,QAAS,EACTkE,UAAW,MAEbjE,EAAAA,QAAQ,IAAKF,EAAAA,MAAM,CAAEC,QAAS,EAAGkE,UAAW,unDAKvCkkB,IAAyCpnB,kBCItD,SAAAsnB,IAAA,IAAAhtB,EAAA,OAAA4C,GAAAA,EAAAvL,MAAAb,KAAAU,YAAAV,YACWwJ,EAAA8lB,QAAS,EACT9lB,EAAA8kB,YAAsB,SACtB9kB,EAAAqiB,eAAyB,QAOzBriB,EAAAoQ,iBAA2B,EAE3BpQ,EAAA+J,eAAyB,EACzB/J,EAAAmW,cAAuB,GAEvBnW,EAAAklB,gBAA0B,EAC1BllB,EAAAmlB,gBAA0B,EAC1BnlB,EAAAolB,kBAA4B,EAC5BplB,EAAAqlB,mBAA6B,GAC7BrlB,EAAAslB,mBAA6B,GAK7BtlB,EAAAkrB,WAAa,EACblrB,EAAAulB,cAAwB,EAExBvlB,EAAAmrB,eAAyB,EAEzBnrB,EAAAyqB,eAAyB,EAExBzqB,EAAAkU,SAA8B,IAAIjR,EAAAA,aAClCjD,EAAAmU,WAAgC,IAAIlR,EAAAA,aAY9CjD,EAAAyI,OAAS,CAAC,GAAI,GAAI,GAAI,IACtBzI,EAAA6hB,YAAsB,EACtB7hB,EAAA8hB,WAAqB,EAErB9hB,EAAAorB,kBAAyB,CAAEC,SAAU,EAAGC,SAAU,KAuNpD,OAvQmDh1B,EAAA02B,EAAApqB,GAkDjDoqB,EAAAt2B,UAAA4M,OAAA,WACEV,EAAAlM,UAAM4M,OAAMlM,KAAAZ,MAEPA,KAAK20B,gBACR30B,KAAK40B,kBAAoB,CAAEC,SAAU,EAAGC,SAAU,IAGpD90B,KAAKiS,OAAS,CAAC,GAAI,GAAKjS,KAAK40B,kBAAkBE,SAAU,GAAI,GAAK90B,KAAK40B,kBAAkBC,UAEzF70B,KAAKgQ,KAAOib,GAAwB,CAClCvjB,MAAO1H,KAAK0H,MACZH,OAAQvH,KAAKuH,OACb2jB,QAASlrB,KAAKiS,OACdkZ,UAAWnrB,KAAKkvB,MAChB9D,UAAWprB,KAAKmvB,MAChB9D,YAAarrB,KAAKqrB,YAClBC,WAAYtrB,KAAKsrB,WACjBC,WAAYvrB,KAAKovB,eACjB3D,WAAYzrB,KAAKqvB,eACjB/iB,WAAYtM,KAAKsvB,OACjBtiB,WAAYhN,KAAKsP,WACjBuc,eAAgB7rB,KAAK6rB,iBAGvB7rB,KAAKqQ,cAELrQ,KAAKq1B,YAAcr1B,KAAKs1B,iBACxBt1B,KAAKu1B,YAAcv1B,KAAKw1B,iBACxBx1B,KAAKu2B,YAAcv2B,KAAK01B,iBAExB11B,KAAKye,OAASze,KAAKonB,YACnBpnB,KAAK6e,OAAS7e,KAAK6vB,YAEnB7vB,KAAK+vB,YACL/vB,KAAKkN,cAAgBlN,KAAKgwB,mBAE1BhwB,KAAKoS,UAAY,aAAapS,KAAKgQ,KAAKgc,QAAO,MAAMhsB,KAAKiS,OAAO,GAAE,KAGrEukB,EAAAt2B,UAAAo1B,eAAA,mBACQ3f,EAAS,OAEf,IAAoB,IAAAkB,EAAApV,EAAAzB,KAAK8P,SAAOwB,EAAAuF,EAAA/U,QAAAwP,EAAAtP,KAAAsP,EAAAuF,EAAA/U,OAAE,CAA7B,IAAMqjB,EAAK7T,EAAAvP,MACT4T,EAAOiS,SAASzC,EAAM5U,QACzBoF,EAAOvT,KAAK+iB,EAAM5U,yGAItB,OAAOoF,GAGT6gB,EAAAt2B,UAAAs1B,eAAA,uBACQ7f,EAAS,OAEf,IAAoB,IAAArE,EAAA7P,EAAAzB,KAAK8P,SAAO0B,EAAAF,EAAAxP,QAAA0P,EAAAxP,KAAAwP,EAAAF,EAAAxP,OAAE,CAA7B,IAAMqjB,EAAK3T,EAAAzP,UACd,IAAgB,IAAA2lB,GAAAuO,OAAA,EAAAx0B,EAAA0jB,EAAMzU,SAAMiX,EAAAD,EAAA5lB,QAAA6lB,EAAA3lB,KAAA2lB,EAAAD,EAAA5lB,OAAE,CAAzB,IAAMxC,EAACqoB,EAAA5lB,MACL4T,EAAOiS,SAAStoB,EAAEiR,QACrBoF,EAAOvT,KAAK9C,EAAEiR,4MAKpB,OAAOoF,GAGT6gB,EAAAt2B,UAAAw1B,eAAA,uBACQ/f,EAAS,GACX8gB,EAAW,EACXC,EAAU,MACd,IAAoB,IAAAplB,EAAA7P,EAAAzB,KAAK8P,SAAO0B,EAAAF,EAAAxP,QAAA0P,EAAAxP,KAAAwP,EAAAF,EAAAxP,OAAE,CAA7B,IAAMqjB,EAAK3T,EAAAzP,MACV40B,EAAc,EACdC,EAAa,MACjB,IAAgB,IAAAlP,GAAAwO,OAAA,EAAAz0B,EAAA0jB,EAAMzU,SAAMiX,EAAAD,EAAA5lB,QAAA6lB,EAAA3lB,KAAA2lB,EAAAD,EAAA5lB,OAAE,CAAzB,IAAMxC,EAACqoB,EAAA5lB,MACNzC,EAAEyC,MAAQ,EACZ40B,GAAer3B,EAAEyC,MAEjB60B,GAAct3B,EAAEyC,MAElB00B,EAAWn3B,EAAEyC,MAAQ00B,EAAWn3B,EAAEyC,MAAQ00B,EAC1CC,EAAUp3B,EAAEyC,MAAQ20B,EAAUp3B,EAAEyC,MAAQ20B,oGAE1C/gB,EAAOvT,KAAKu0B,GACZhhB,EAAOvT,KAAKw0B,qGAOd,OALAjhB,EAAOvT,KAAKq0B,GACZ9gB,EAAOvT,KAAKs0B,GAIL,CAFKrpB,KAAK8H,IAAGtU,MAARwM,KAAI/K,EAAA,CAAK,GAAMqT,IACf3V,KAAKywB,UAAYpjB,KAAKqF,IAAG7R,MAARwM,KAAI/K,EAAA,CAAKtC,KAAKywB,WAAc9a,IAAUtI,KAAKqF,IAAG7R,MAARwM,KAAI/K,EAAQqT,MAIjF6gB,EAAAt2B,UAAA2vB,UAAA,WACE,IAAMtnB,EAAUvI,KAAKq1B,YAAY10B,QAAUX,KAAKgQ,KAAKzI,OAASvH,KAAK00B,WAAa,GAEhF,OAAOtH,EAAAA,YACJ2H,WAAW,CAAC,EAAG/0B,KAAKgQ,KAAKzI,SACzBiZ,aAAajY,GACboN,OAAO3V,KAAKq1B,cAGjBmB,EAAAt2B,UAAAknB,UAAA,WACE,IAAMhT,EAAQ0T,EAAAA,cACX/I,MAAM,CAAC,EAAG/e,KAAKgQ,KAAKtI,QACpBiO,OAAO3V,KAAKu2B,aACf,OAAOv2B,KAAK+uB,aAAe3a,EAAM8c,OAAS9c,GAG5CoiB,EAAAt2B,UAAAi2B,eAAA,SAAehR,GACb,MAAO,gBAAgBnlB,KAAK6e,OAAOsG,EAAM3U,MAAK,KAGhDgmB,EAAAt2B,UAAAsf,QAAA,SAAQvO,EAAMkU,GACRA,IACFlU,EAAKP,OAASyU,EAAM3U,MAGtBxQ,KAAKuP,OAAOZ,KAAKsC,IAGnBulB,EAAAt2B,UAAA+oB,QAAA,SAAQC,EAAO9X,GACb,OAAOA,EAAKZ,MAGdgmB,EAAAt2B,UAAA6vB,UAAA,WACE,IAAIpa,EAEFA,EADsB,YAApB3V,KAAKsP,WACEtP,KAAKu1B,YAELv1B,KAAKu2B,YAGhBv2B,KAAKgf,OAAS,IAAIoN,GAAYpsB,KAAKqP,OAAQrP,KAAKsP,WAAYqG,EAAQ3V,KAAKqsB,eAG3EmK,EAAAt2B,UAAA8vB,iBAAA,WACE,IAAM6B,EAAO,CACXpkB,UAAWzN,KAAKsP,WAChB0P,YAAQhb,EACR2R,OAAQ,GACRyG,WAAOpY,EACPsF,SAAUtJ,KAAK6rB,gBAWjB,MATuB,YAAnBgG,EAAKpkB,WACPokB,EAAKlc,OAAS3V,KAAKu1B,YACnB1D,EAAK7S,OAAShf,KAAKgf,OACnB6S,EAAKzV,MAAQpc,KAAKsuB,cAElBuD,EAAKlc,OAAS3V,KAAKu2B,YACnB1E,EAAK7S,OAAShf,KAAKgf,OAAO5K,OAGrByd,GAGT2E,EAAAt2B,UAAA4xB,iBAAA,SAAiB/nB,OAAErC,EAAAqC,EAAArC,MACjB1H,KAAKsrB,WAAa5jB,EAClB1H,KAAK8M,UAGP0pB,EAAAt2B,UAAA6xB,kBAAA,SAAkBhoB,OAAExC,EAAAwC,EAAAxC,OAClBvH,KAAKqrB,YAAc9jB,EACnBvH,KAAK8M,UAGP0pB,EAAAt2B,UAAA80B,2BAAA,SAA2B9Y,EAAOka,GAAlC,IAAA5sB,EAAAxJ,KACMkc,EAAM+Y,KAAKJ,SACb70B,KAAK40B,kBAAkBC,SAAWxnB,KAAKqF,IAAI1S,KAAK40B,kBAAkBC,SAAU3Y,EAAM+Y,KAAKvtB,OAEvF1H,KAAK40B,kBAAkBE,SAAWznB,KAAKqF,IAAI1S,KAAK40B,kBAAkBE,SAAU5Y,EAAM+Y,KAAKvtB,OAErF0uB,IAAep2B,KAAK8P,QAAQnP,OAAS,GACvC+F,YAAW,WAAM,OAAA8C,EAAKsD,aAI1B0pB,EAAAt2B,UAAA8xB,WAAA,SAAW9V,EAAOiJ,EAAO+P,QAAA,IAAAA,IAAAA,GAAA,GACvB,IAAM9jB,EAAO5R,OAAOa,OAAO,GAAI6b,GAC3BiJ,IACF/T,EAAKV,OAASyU,EAAM3U,MAGtB,IAAMsY,EAAQ9oB,KAAK8P,QAChBsI,KAAI,SAAA9H,GAAK,OAAAA,EAAEI,UACX2lB,OACA7O,QAAO,SAAAhnB,GACN,OAAI00B,EACK10B,EAAE+P,QAAUa,EAAKZ,KAEjBhQ,EAAEgQ,OAASY,EAAKZ,MAAQhQ,EAAEkQ,SAAWU,EAAKV,UAIvD1Q,KAAK2f,cAAard,EAAOwmB,GACzB9oB,KAAK0d,SAAS/O,KAAK,CAAE5M,MAAOqP,EAAM6gB,QAASjyB,KAAK2f,iBAGlD6W,EAAAt2B,UAAAgyB,aAAA,SAAahW,EAAOiJ,EAAO+P,QAAA,IAAAA,IAAAA,GAAA,GACzB,IAAM9jB,EAAO5R,OAAOa,OAAO,GAAI6b,GAC3BiJ,IACF/T,EAAKV,OAASyU,EAAM3U,MAGtBxQ,KAAK2f,cAAgB3f,KAAK2f,cAAc6H,QAAO,SAAAhnB,GAC7C,OAAI00B,EACK10B,EAAE+P,QAAUa,EAAKZ,OAEfhQ,EAAEgQ,OAASY,EAAKZ,MAAQhQ,EAAEkQ,SAAWU,EAAKV,WAIvD1Q,KAAK2d,WAAWhP,KAAK,CAAE5M,MAAOqP,EAAM6gB,QAASjyB,KAAK2f,iBApQ3C7e,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,2CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,gDACQvJ,EAAA,CAARuJ,EAAAA,kDACQvJ,EAAA,CAARuJ,EAAAA,kDACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,4CACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,6CAESvJ,EAAA,CAAT4M,EAAAA,yCACS5M,EAAA,CAAT4M,EAAAA,2CAEgC5M,EAAA,CAAhCqxB,EAAAA,aAAa,0DAlCHqE,EAA6B11B,EAAA,CAzFzC2J,EAAAA,UAAU,CACTC,SAAU,oCACVC,SAAU,2lFAwEViD,gBAAiBC,EAAAA,wBAAwBC,OAEzClD,cAAeC,EAAAA,kBAAkBC,KACjCyB,WAAY,CACVwB,EAAAA,QAAQ,iBAAkB,CACxBC,EAAAA,WAAW,SAAU,CACnBC,EAAAA,MAAM,CACJC,QAAS,EACTkE,UAAW,MAEbjE,EAAAA,QAAQ,IAAKF,EAAAA,MAAM,CAAEC,QAAS,EAAGkE,UAAW,unDAKvCokB,IAAsCtnB,kBCnBnD,SAAA2nB,IAAA,IAAArtB,EAAA,OAAA4C,GAAAA,EAAAvL,MAAAb,KAAAU,YAAAV,YACWwJ,EAAA8lB,QAAS,EACT9lB,EAAA8kB,YAAsB,SACtB9kB,EAAAqiB,eAAyB,QAOzBriB,EAAAoQ,iBAA2B,EAE3BpQ,EAAA+J,eAAyB,EACzB/J,EAAAmW,cAAuB,GAEvBnW,EAAAklB,gBAA0B,EAC1BllB,EAAAmlB,gBAA0B,EAC1BnlB,EAAAolB,kBAA4B,EAC5BplB,EAAAqlB,mBAA6B,GAC7BrlB,EAAAslB,mBAA6B,GAK7BtlB,EAAAkrB,WAAa,EACblrB,EAAAulB,cAAwB,EACxBvlB,EAAAwqB,YAAsB,EAGtBxqB,EAAAmrB,eAAyB,EAEzBnrB,EAAAyqB,eAAyB,EAExBzqB,EAAAkU,SAA8B,IAAIjR,EAAAA,aAClCjD,EAAAmU,WAAgC,IAAIlR,EAAAA,aAW9CjD,EAAAyI,OAAgB,CAAC,GAAI,GAAI,GAAI,IAC7BzI,EAAA6hB,YAAsB,EACtB7hB,EAAA8hB,WAAqB,EAErB9hB,EAAAstB,mBAA0B,CAAEjC,SAAU,EAAGC,SAAU,KAwKrD,OAzN0Ch1B,EAAA+2B,EAAAzqB,GAmDxCyqB,EAAA32B,UAAA4M,OAAA,WACEV,EAAAlM,UAAM4M,OAAMlM,KAAAZ,MAEPA,KAAK20B,gBACR30B,KAAK82B,mBAAqB,CAAEjC,SAAU,EAAGC,SAAU,IAErD90B,KAAKiS,OAAS,CAAC,GAAKjS,KAAK82B,mBAAmBhC,SAAU,GAAI,GAAK90B,KAAK82B,mBAAmBjC,SAAU,IAEjG70B,KAAKgQ,KAAOib,GAAwB,CAClCvjB,MAAO1H,KAAK0H,MACZH,OAAQvH,KAAKuH,OACb2jB,QAASlrB,KAAKiS,OACdkZ,UAAWnrB,KAAKkvB,MAChB9D,UAAWprB,KAAKmvB,MAChB9D,YAAarrB,KAAKqrB,YAClBC,WAAYtrB,KAAKsrB,WACjBC,WAAYvrB,KAAKovB,eACjB3D,WAAYzrB,KAAKqvB,eACjB/iB,WAAYtM,KAAKsvB,OACjBtiB,WAAYhN,KAAKsP,WACjBuc,eAAgB7rB,KAAK6rB,iBAGvB7rB,KAAKqQ,cAEDrQ,KAAK20B,gBACP30B,KAAKgQ,KAAKzI,QAAUvH,KAAK82B,mBAAmBjC,UAE9C70B,KAAKye,OAASze,KAAKonB,YACnBpnB,KAAK6e,OAAS7e,KAAK6vB,YAEnB7vB,KAAK+vB,YACL/vB,KAAKkN,cAAgBlN,KAAKgwB,mBAE1BhwB,KAAKoS,UAAY,aAAapS,KAAKgQ,KAAKgc,QAAO,OAAMhsB,KAAKiS,OAAO,GAAKjS,KAAK82B,mBAAmBjC,UAAQ,KAGxGgC,EAAA32B,UAAAknB,UAAA,WACEpnB,KAAKknB,QAAUlnB,KAAKmnB,aACpB,IAAM5e,EAAUvI,KAAKknB,QAAQvmB,QAAUX,KAAKgQ,KAAKtI,MAAQ1H,KAAK00B,WAAa,GAC3E,OAAOtH,EAAAA,YACJrO,MAAM,CAAC,EAAG/e,KAAKgQ,KAAKtI,QACpB8Y,aAAajY,GACboN,OAAO3V,KAAKknB,UAGjB2P,EAAA32B,UAAA2vB,UAAA,WACE7vB,KAAKyvB,QAAUzvB,KAAK0vB,aACpB,IAAMtb,EAAQ0T,EAAAA,cACX/I,MAAM,CAAC/e,KAAKgQ,KAAKzI,OAAQ,IACzBoO,OAAO3V,KAAKyvB,SACf,OAAOzvB,KAAK+uB,aAAe3a,EAAM8c,OAAS9c,GAG5CyiB,EAAA32B,UAAAinB,WAAA,WACE,OAAOnnB,KAAK8P,QAAQsI,KAAI,SAAA9Y,GAAK,OAAAA,EAAEiR,UAGjCsmB,EAAA32B,UAAAwvB,WAAA,WACE,IAAMjI,EAASznB,KAAK8P,QAAQsI,KAAI,SAAA9Y,GAAK,OAAAA,EAAEyC,SAEnCoT,EAAMnV,KAAKgxB,UAAY3jB,KAAK8H,IAAGtU,MAARwM,KAAI/K,EAAA,CAAKtC,KAAKgxB,WAAcvJ,IAAUpa,KAAK8H,IAAGtU,MAARwM,KAAI/K,EAAA,CAAK,GAAMmlB,IAC5EznB,KAAK+2B,aAAe/2B,KAAK+2B,WAAWC,KAAKC,SAC3C9hB,EAAM9H,KAAK8H,IAAGtU,MAARwM,KAAI/K,EAAA,CAAK6S,GAAQnV,KAAK+2B,cAG9B,IAAIrkB,EAAM1S,KAAKixB,UAAY5jB,KAAKqF,IAAG7R,MAARwM,KAAI/K,EAAA,CAAKtC,KAAKixB,WAAcxJ,IAAUpa,KAAKqF,IAAG7R,MAARwM,KAAI/K,EAAA,CAAK,GAAMmlB,IAIhF,OAHIznB,KAAK+2B,aAAe/2B,KAAK+2B,WAAWC,KAAKC,SAC3CvkB,EAAMrF,KAAKqF,IAAG7R,MAARwM,KAAI/K,EAAA,CAAKoQ,GAAQ1S,KAAK+2B,cAEvB,CAAC5hB,EAAKzC,IAGfmkB,EAAA32B,UAAAsf,QAAA,SAAQvO,GACNjR,KAAKuP,OAAOZ,KAAKsC,IAGnB4lB,EAAA32B,UAAA6vB,UAAA,WACE,IAAIpa,EAEFA,EADsB,YAApB3V,KAAKsP,WACEtP,KAAKknB,QAELlnB,KAAKyvB,QAGhBzvB,KAAKgf,OAAS,IAAIoN,GAAYpsB,KAAKqP,OAAQrP,KAAKsP,WAAYqG,EAAQ3V,KAAKqsB,eAG3EwK,EAAA32B,UAAA8vB,iBAAA,WACE,IAAM6B,EAAO,CACXpkB,UAAWzN,KAAKsP,WAChB0P,YAAQhb,EACR2R,OAAQ,GACRyG,WAAOpY,EACPsF,SAAUtJ,KAAK6rB,gBAUjB,MARuB,YAAnBgG,EAAKpkB,WACPokB,EAAKlc,OAAS3V,KAAKknB,QACnB2K,EAAK7S,OAAShf,KAAKgf,OACnB6S,EAAKzV,MAAQpc,KAAKsuB,cAElBuD,EAAKlc,OAAS3V,KAAKyvB,QACnBoC,EAAK7S,OAAShf,KAAKgf,OAAO5K,OAErByd,GAGTgF,EAAA32B,UAAA4xB,iBAAA,SAAiB/nB,OAAErC,EAAAqC,EAAArC,MACjB1H,KAAKsrB,WAAa5jB,EAClB1H,KAAK8M,UAGP+pB,EAAA32B,UAAA6xB,kBAAA,SAAkBhoB,OAAExC,EAAAwC,EAAAxC,OAClBvH,KAAKqrB,YAAc9jB,EACnBvH,KAAK8M,UAGP+pB,EAAA32B,UAAAg3B,4BAAA,SAA4Bhb,GAA5B,IAAA1S,EAAAxJ,KACMkc,EAAM+Y,KAAKJ,SACb70B,KAAK82B,mBAAmBjC,SAAWxnB,KAAKqF,IAAI1S,KAAK82B,mBAAmBjC,SAAU3Y,EAAM+Y,KAAK1tB,QAEzFvH,KAAK82B,mBAAmBhC,SAAWznB,KAAKqF,IAAI1S,KAAK82B,mBAAmBhC,SAAU5Y,EAAM+Y,KAAK1tB,QAEvF2U,EAAMgN,QAAUlpB,KAAK8P,QAAQnP,OAAS,GACxC+F,YAAW,WAAM,OAAA8C,EAAKsD,aAI1B+pB,EAAA32B,UAAA8xB,WAAA,SAAW5gB,EAAM8jB,QAAA,IAAAA,IAAAA,GAAA,GACf9jB,EAAOpR,KAAK8P,QAAQ8P,MAAK,SAAAtgB,GACvB,OAAI41B,EACK51B,EAAEiR,QAAUa,EAAKZ,KAEjBlR,EAAEkR,OAASY,EAAKZ,QAIfxQ,KAAK2f,cAAcxB,WAAU,SAAA7e,GACvC,OAAOA,EAAEkR,OAASY,EAAKZ,MAAQlR,EAAEyC,QAAUqP,EAAKrP,OAASzC,EAAEoR,SAAWU,EAAKV,WAElE,IAIX1Q,KAAK2f,cAAard,EAAA,CAAI8O,GAASpR,KAAK2f,eACpC3f,KAAK0d,SAAS/O,KAAK,CAAE5M,MAAOqP,EAAM6gB,QAASjyB,KAAK2f,kBAGlDkX,EAAA32B,UAAAgyB,aAAA,SAAa9gB,EAAM8jB,QAAA,IAAAA,IAAAA,GAAA,GACjB9jB,EAAOpR,KAAK8P,QAAQ8P,MAAK,SAAAtgB,GACvB,OAAI41B,EACK51B,EAAEiR,QAAUa,EAAKZ,KAEjBlR,EAAEkR,OAASY,EAAKZ,QAI3B,IAAM7E,EAAM3L,KAAK2f,cAAcxB,WAAU,SAAA7e,GACvC,OAAOA,EAAEkR,OAASY,EAAKZ,MAAQlR,EAAEyC,QAAUqP,EAAKrP,OAASzC,EAAEoR,SAAWU,EAAKV,UAG7E1Q,KAAK2f,cAAc9T,OAAOF,EAAK,GAC/B3L,KAAK2f,cAAard,EAAOtC,KAAK2f,eAE9B3f,KAAK2d,WAAWhP,KAAK,CAAE5M,MAAOqP,EAAM6gB,QAASjyB,KAAK2f,iBAtN3C7e,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,2CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,gDACQvJ,EAAA,CAARuJ,EAAAA,kDACQvJ,EAAA,CAARuJ,EAAAA,kDACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,4CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,6CAESvJ,EAAA,CAAT4M,EAAAA,yCACS5M,EAAA,CAAT4M,EAAAA,2CAEgC5M,EAAA,CAAhCqxB,EAAAA,aAAa,0DApCH0E,EAAoB/1B,EAAA,CAvEhC2J,EAAAA,UAAU,CACTC,SAAU,0BACVC,SAAU,6wEAiEViD,gBAAiBC,EAAAA,wBAAwBC,OAEzClD,cAAeC,EAAAA,kBAAkBC,ymDAEtB+rB,IAA6B3nB,kBCuB1C,SAAAioB,IAAA,IAAA3tB,EAAA,OAAA4C,GAAAA,EAAAvL,MAAAb,KAAAU,YAAAV,YACWwJ,EAAA8lB,QAAS,EACT9lB,EAAA8kB,YAAsB,SACtB9kB,EAAAqiB,eAAyB,QAOzBriB,EAAAoQ,iBAA2B,EAC3BpQ,EAAAiE,UAAY,UAEZjE,EAAA+J,eAAyB,EACzB/J,EAAAmW,cAAuB,GAEvBnW,EAAAklB,gBAA0B,EAC1BllB,EAAAmlB,gBAA0B,EAC1BnlB,EAAAolB,kBAA4B,EAC5BplB,EAAAqlB,mBAA6B,GAC7BrlB,EAAAslB,mBAA6B,GAK7BtlB,EAAA4rB,aAAe,GACf5rB,EAAAkrB,WAAa,EACblrB,EAAAulB,cAAwB,EACxBvlB,EAAAwqB,YAAsB,EAEtBxqB,EAAAmrB,eAAyB,EAEzBnrB,EAAAyqB,eAAyB,EAExBzqB,EAAAkU,SAA8B,IAAIjR,EAAAA,aAClCjD,EAAAmU,WAAgC,IAAIlR,EAAAA,aAa9CjD,EAAAyI,OAAS,CAAC,GAAI,GAAI,GAAI,IACtBzI,EAAA6hB,YAAsB,EACtB7hB,EAAA8hB,WAAqB,EAErB9hB,EAAAstB,mBAA0B,CAAEjC,SAAU,EAAGC,SAAU,KAuNrD,OA3Q4Ch1B,EAAAq3B,EAAA/qB,GAsD1C+qB,EAAAj3B,UAAA4M,OAAA,WACEV,EAAAlM,UAAM4M,OAAMlM,KAAAZ,MAEPA,KAAK20B,gBACR30B,KAAK82B,mBAAqB,CAAEjC,SAAU,EAAGC,SAAU,IAErD90B,KAAKiS,OAAS,CAAC,GAAKjS,KAAK82B,mBAAmBhC,SAAU,GAAI,GAAK90B,KAAK82B,mBAAmBjC,SAAU,IAEjG70B,KAAKgQ,KAAOib,GAAwB,CAClCvjB,MAAO1H,KAAK0H,MACZH,OAAQvH,KAAKuH,OACb2jB,QAASlrB,KAAKiS,OACdkZ,UAAWnrB,KAAKkvB,MAChB9D,UAAWprB,KAAKmvB,MAChB9D,YAAarrB,KAAKqrB,YAClBC,WAAYtrB,KAAKsrB,WACjBC,WAAYvrB,KAAKovB,eACjB3D,WAAYzrB,KAAKqvB,eACjB/iB,WAAYtM,KAAKsvB,OACjBtiB,WAAYhN,KAAKsP,WACjBuc,eAAgB7rB,KAAK6rB,iBAGnB7rB,KAAK20B,gBACP30B,KAAKgQ,KAAKzI,QAAUvH,KAAK82B,mBAAmBjC,UAG9C70B,KAAKqQ,cAELrQ,KAAKq1B,YAAcr1B,KAAKs1B,iBACxBt1B,KAAKu1B,YAAcv1B,KAAKw1B,iBACxBx1B,KAAKy1B,aAAez1B,KAAK01B,iBAEzB11B,KAAK21B,WAAa31B,KAAK41B,gBACvB51B,KAAK61B,WAAa71B,KAAK81B,gBACvB91B,KAAK6sB,WAAa7sB,KAAK+1B,gBAEvB/1B,KAAK+vB,YACL/vB,KAAKkN,cAAgBlN,KAAKgwB,mBAC1BhwB,KAAKoS,UAAY,aAAapS,KAAKgQ,KAAKgc,QAAO,OAAMhsB,KAAKiS,OAAO,GAAKjS,KAAK82B,mBAAmBjC,UAAQ,KAGxGsC,EAAAj3B,UAAAg3B,4BAAA,SAA4Bhb,EAAOka,GAAnC,IAAA5sB,EAAAxJ,KACMkc,EAAM+Y,KAAKJ,SACb70B,KAAK82B,mBAAmBjC,SAAWxnB,KAAKqF,IAAI1S,KAAK82B,mBAAmBjC,SAAU3Y,EAAM+Y,KAAK1tB,QAEzFvH,KAAK82B,mBAAmBhC,SAAWznB,KAAKqF,IAAI1S,KAAK82B,mBAAmBhC,SAAU5Y,EAAM+Y,KAAK1tB,QAEvF6uB,IAAep2B,KAAK8P,QAAQnP,OAAS,GACvC+F,YAAW,WAAM,OAAA8C,EAAKsD,aAI1BqqB,EAAAj3B,UAAA01B,cAAA,WACE,IAAMrtB,EAAUvI,KAAKq1B,YAAY10B,QAAUX,KAAKgQ,KAAKzI,OAASvH,KAAKo1B,aAAe,GAElF,OAAOhI,EAAAA,YACJ2H,WAAW,CAAC,EAAG/0B,KAAKgQ,KAAKtI,QACzB8Y,aAAajY,GACbytB,aAAaztB,EAAU,GACvBoN,OAAO3V,KAAKq1B,cAGjB8B,EAAAj3B,UAAA41B,cAAA,WACE,IAAMpuB,EAAQ1H,KAAK21B,WAAW/gB,YACxBrM,EAAUvI,KAAKu1B,YAAY50B,QAAU+G,EAAQ1H,KAAK00B,WAAa,GACrE,OAAOtH,EAAAA,YACJ2H,WAAW,CAAC,EAAGrtB,IACf8Y,aAAajY,GACboN,OAAO3V,KAAKu1B,cAGjB4B,EAAAj3B,UAAA61B,cAAA,WACE,IAAM3hB,EAAQ0T,EAAAA,cACX/I,MAAM,CAAC/e,KAAKgQ,KAAKzI,OAAQ,IACzBoO,OAAO3V,KAAKy1B,cACf,OAAOz1B,KAAK+uB,aAAe3a,EAAM8c,OAAS9c,GAG5C+iB,EAAAj3B,UAAAo1B,eAAA,mBACQ3f,EAAS,OACf,IAAoB,IAAAkB,EAAApV,EAAAzB,KAAK8P,SAAOwB,EAAAuF,EAAA/U,QAAAwP,EAAAtP,KAAAsP,EAAAuF,EAAA/U,OAAE,CAA7B,IAAMqjB,EAAK7T,EAAAvP,MACT4T,EAAOiS,SAASzC,EAAM5U,QACzBoF,EAAOvT,KAAK+iB,EAAM5U,yGAItB,OAAOoF,GAGTwhB,EAAAj3B,UAAAs1B,eAAA,uBACQ7f,EAAS,OACf,IAAoB,IAAArE,EAAA7P,EAAAzB,KAAK8P,SAAO0B,EAAAF,EAAAxP,QAAA0P,EAAAxP,KAAAwP,EAAAF,EAAAxP,OAAE,CAA7B,IAAMqjB,EAAK3T,EAAAzP,UACd,IAAgB,IAAA2lB,GAAAuO,OAAA,EAAAx0B,EAAA0jB,EAAMzU,SAAMiX,EAAAD,EAAA5lB,QAAA6lB,EAAA3lB,KAAA2lB,EAAAD,EAAA5lB,OAAE,CAAzB,IAAMxC,EAACqoB,EAAA5lB,MACL4T,EAAOiS,SAAStoB,EAAEiR,QACrBoF,EAAOvT,KAAK9C,EAAEiR,4MAKpB,OAAOoF,GAGTwhB,EAAAj3B,UAAAw1B,eAAA,uBACQ/f,EAAS,OACf,IAAoB,IAAArE,EAAA7P,EAAAzB,KAAK8P,SAAO0B,EAAAF,EAAAxP,QAAA0P,EAAAxP,KAAAwP,EAAAF,EAAAxP,OAAE,CAA7B,IAAMqjB,EAAK3T,EAAAzP,UACd,IAAgB,IAAA2lB,GAAAwO,OAAA,EAAAz0B,EAAA0jB,EAAMzU,SAAMiX,EAAAD,EAAA5lB,QAAA6lB,EAAA3lB,KAAA2lB,EAAAD,EAAA5lB,OAAE,CAAzB,IAAMxC,EAACqoB,EAAA5lB,MACL4T,EAAOiS,SAAStoB,EAAEyC,QACrB4T,EAAOvT,KAAK9C,EAAEyC,4MAQpB,MAAO,CAHKsL,KAAK8H,IAAGtU,MAARwM,KAAI/K,EAAA,CAAK,GAAMqT,IACf3V,KAAKixB,UAAY5jB,KAAKqF,IAAG7R,MAARwM,KAAI/K,EAAA,CAAKtC,KAAKixB,WAActb,IAAUtI,KAAKqF,IAAG7R,MAARwM,KAAI/K,EAAA,CAAK,GAAMqT,MAKpFwhB,EAAAj3B,UAAAi2B,eAAA,SAAehR,GACb,MAAO,aAAanlB,KAAK21B,WAAWxQ,EAAM5U,OAAM,QAGlD4mB,EAAAj3B,UAAAsf,QAAA,SAAQvO,EAAMkU,GACRA,IACFlU,EAAKP,OAASyU,EAAM3U,MAGtBxQ,KAAKuP,OAAOZ,KAAKsC,IAGnBkmB,EAAAj3B,UAAA+oB,QAAA,SAAQC,EAAO9X,GACb,OAAOA,EAAKZ,MAGd2mB,EAAAj3B,UAAA6vB,UAAA,WACE,IAAIpa,EAEFA,EADsB,YAApB3V,KAAKsP,WACEtP,KAAKu1B,YAELv1B,KAAKy1B,aAGhBz1B,KAAKgf,OAAS,IAAIoN,GAAYpsB,KAAKqP,OAAQrP,KAAKsP,WAAYqG,EAAQ3V,KAAKqsB,eAG3E8K,EAAAj3B,UAAA8vB,iBAAA,WACE,IAAM6B,EAAO,CACXpkB,UAAWzN,KAAKsP,WAChB0P,YAAQhb,EACR2R,OAAQ,GACRyG,WAAOpY,EACPsF,SAAUtJ,KAAK6rB,gBAWjB,MATuB,YAAnBgG,EAAKpkB,WACPokB,EAAKlc,OAAS3V,KAAKu1B,YACnB1D,EAAK7S,OAAShf,KAAKgf,OACnB6S,EAAKzV,MAAQpc,KAAKsuB,cAElBuD,EAAKlc,OAAS3V,KAAKy1B,aACnB5D,EAAK7S,OAAShf,KAAKgf,OAAO5K,OAGrByd,GAGTsF,EAAAj3B,UAAA4xB,iBAAA,SAAiB/nB,OAAErC,EAAAqC,EAAArC,MACjB1H,KAAKsrB,WAAa5jB,EAClB1H,KAAK8M,UAGPqqB,EAAAj3B,UAAA6xB,kBAAA,SAAkBhoB,OAAExC,EAAAwC,EAAAxC,OAClBvH,KAAKqrB,YAAc9jB,EACnBvH,KAAK8M,UAGPqqB,EAAAj3B,UAAA8xB,WAAA,SAAW9V,EAAOiJ,EAAO+P,QAAA,IAAAA,IAAAA,GAAA,GACvB,IAAM9jB,EAAO5R,OAAOa,OAAO,GAAI6b,GAC3BiJ,IACF/T,EAAKV,OAASyU,EAAM3U,MAGtB,IAAMsY,EAAQ9oB,KAAK8P,QAChBsI,KAAI,SAAA9H,GAAK,OAAAA,EAAEI,UACX2lB,OACA7O,QAAO,SAAAhnB,GACN,OAAI00B,EACK10B,EAAE+P,QAAUa,EAAKZ,KAEjBhQ,EAAEgQ,OAASY,EAAKZ,MAAQhQ,EAAEkQ,SAAWU,EAAKV,UAIvD1Q,KAAK2f,cAAard,EAAOwmB,GACzB9oB,KAAK0d,SAAS/O,KAAK,CAAE5M,MAAOqP,EAAM6gB,QAASjyB,KAAK2f,iBAGlDwX,EAAAj3B,UAAAgyB,aAAA,SAAahW,EAAOiJ,EAAO+P,QAAA,IAAAA,IAAAA,GAAA,GACzB,IAAM9jB,EAAO5R,OAAOa,OAAO,GAAI6b,GAC3BiJ,IACF/T,EAAKV,OAASyU,EAAM3U,MAGtBxQ,KAAK2f,cAAgB3f,KAAK2f,cAAc6H,QAAO,SAAAhnB,GAC7C,OAAI00B,EACK10B,EAAE+P,QAAUa,EAAKZ,OAEfhQ,EAAEgQ,OAASY,EAAKZ,MAAQhQ,EAAEkQ,SAAWU,EAAKV,WAIvD1Q,KAAK2d,WAAWhP,KAAK,CAAE5M,MAAOqP,EAAM6gB,QAASjyB,KAAK2f,iBAxQ3C7e,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,2CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,gDACQvJ,EAAA,CAARuJ,EAAAA,kDACQvJ,EAAA,CAARuJ,EAAAA,kDACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,4CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,4CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,6CAESvJ,EAAA,CAAT4M,EAAAA,yCACS5M,EAAA,CAAT4M,EAAAA,2CAEgC5M,EAAA,CAAhCqxB,EAAAA,aAAa,0DArCHgF,EAAsBr2B,EAAA,CA9FlC2J,EAAAA,UAAU,CACTC,SAAU,6BACVC,SAAU,6vFA8EVC,cAAeC,EAAAA,kBAAkBC,KACjC8C,gBAAiBC,EAAAA,wBAAwBC,OACzCvB,WAAY,CACVwB,EAAAA,QAAQ,iBAAkB,CACxBC,EAAAA,WAAW,SAAU,CACnBC,EAAAA,MAAM,CACJC,QAAS,EACTkE,UAAW,MAEbjE,EAAAA,QAAQ,IAAKF,EAAAA,MAAM,CAAEC,QAAS,EAAGkE,UAAW,unDAKvC+kB,IAA+BjoB,kBCT5C,SAAAkoB,IAAA,IAAA5tB,EAAA,OAAA4C,GAAAA,EAAAvL,MAAAb,KAAAU,YAAAV,YACWwJ,EAAA8lB,QAAS,EACT9lB,EAAA8kB,YAAsB,SACtB9kB,EAAAqiB,eAAyB,QAOzBriB,EAAAoQ,iBAA2B,EAE3BpQ,EAAA+J,eAAyB,EACzB/J,EAAAmW,cAAuB,GAEvBnW,EAAAklB,gBAA0B,EAC1BllB,EAAAmlB,gBAA0B,EAC1BnlB,EAAAolB,kBAA4B,EAC5BplB,EAAAqlB,mBAA6B,GAC7BrlB,EAAAslB,mBAA6B,GAK7BtlB,EAAAkrB,WAAa,EACblrB,EAAAulB,cAAwB,EACxBvlB,EAAAyqB,eAAyB,EAExBzqB,EAAAkU,SAA8B,IAAIjR,EAAAA,aAClCjD,EAAAmU,WAAgC,IAAIlR,EAAAA,aAY9CjD,EAAAyI,OAAS,CAAC,GAAI,GAAI,GAAI,IACtBzI,EAAA6hB,YAAsB,EACtB7hB,EAAA8hB,WAAqB,IA8KvB,OAzNoDxrB,EAAAs3B,EAAAhrB,GA8ClDgrB,EAAAl3B,UAAA4M,OAAA,WACEV,EAAAlM,UAAM4M,OAAMlM,KAAAZ,MAEZA,KAAKgQ,KAAOib,GAAwB,CAClCvjB,MAAO1H,KAAK0H,MACZH,OAAQvH,KAAKuH,OACb2jB,QAASlrB,KAAKiS,OACdkZ,UAAWnrB,KAAKkvB,MAChB9D,UAAWprB,KAAKmvB,MAChB9D,YAAarrB,KAAKqrB,YAClBC,WAAYtrB,KAAKsrB,WACjBC,WAAYvrB,KAAKovB,eACjB3D,WAAYzrB,KAAKqvB,eACjB/iB,WAAYtM,KAAKsvB,OACjBtiB,WAAYhN,KAAKsP,WACjBuc,eAAgB7rB,KAAK6rB,iBAGvB7rB,KAAKqQ,cAELrQ,KAAKq1B,YAAcr1B,KAAKs1B,iBACxBt1B,KAAKu1B,YAAcv1B,KAAKw1B,iBACxBx1B,KAAKu2B,YAAcv2B,KAAK01B,iBAExB11B,KAAKye,OAASze,KAAKonB,YACnBpnB,KAAK6e,OAAS7e,KAAK6vB,YAEnB7vB,KAAK+vB,YACL/vB,KAAKkN,cAAgBlN,KAAKgwB,mBAE1BhwB,KAAKoS,UAAY,aAAapS,KAAKgQ,KAAKgc,QAAO,MAAMhsB,KAAKiS,OAAO,GAAE,KAGrEmlB,EAAAl3B,UAAAo1B,eAAA,mBACQ3f,EAAS,OACf,IAAoB,IAAAkB,EAAApV,EAAAzB,KAAK8P,SAAOwB,EAAAuF,EAAA/U,QAAAwP,EAAAtP,KAAAsP,EAAAuF,EAAA/U,OAAE,CAA7B,IAAMqjB,EAAK7T,EAAAvP,MACT4T,EAAOiS,SAASzC,EAAM5U,QACzBoF,EAAOvT,KAAK+iB,EAAM5U,yGAItB,OAAOoF,GAGTyhB,EAAAl3B,UAAAs1B,eAAA,uBACQ7f,EAAS,OACf,IAAoB,IAAArE,EAAA7P,EAAAzB,KAAK8P,SAAO0B,EAAAF,EAAAxP,QAAA0P,EAAAxP,KAAAwP,EAAAF,EAAAxP,OAAE,CAA7B,IAAMqjB,EAAK3T,EAAAzP,UACd,IAAgB,IAAA2lB,GAAAuO,OAAA,EAAAx0B,EAAA0jB,EAAMzU,SAAMiX,EAAAD,EAAA5lB,QAAA6lB,EAAA3lB,KAAA2lB,EAAAD,EAAA5lB,OAAE,CAAzB,IAAMxC,EAACqoB,EAAA5lB,MACL4T,EAAOiS,SAAStoB,EAAEiR,QACrBoF,EAAOvT,KAAK9C,EAAEiR,4MAKpB,OAAOoF,GAGTyhB,EAAAl3B,UAAAw1B,eAAA,WACE,MAAO,CAAC,EAAG,MAGb0B,EAAAl3B,UAAAknB,UAAA,WACE,IAAM7e,EAAUvI,KAAKq1B,YAAY10B,QAAUX,KAAKgQ,KAAKtI,MAAQ1H,KAAK00B,WAAa,GAE/E,OAAOtH,EAAAA,YACJ2H,WAAW,CAAC,EAAG/0B,KAAKgQ,KAAKtI,QACzB8Y,aAAajY,GACboN,OAAO3V,KAAKq1B,cAGjB+B,EAAAl3B,UAAA2vB,UAAA,WACE,IAAMzb,EAAQ0T,EAAAA,cACX/I,MAAM,CAAC/e,KAAKgQ,KAAKzI,OAAQ,IACzBoO,OAAO3V,KAAKu2B,aACf,OAAOv2B,KAAK+uB,aAAe3a,EAAM8c,OAAS9c,GAG5CgjB,EAAAl3B,UAAAi2B,eAAA,SAAehR,GACb,MAAO,aAAanlB,KAAKye,OAAO0G,EAAM3U,MAAK,QAG7C4mB,EAAAl3B,UAAAsf,QAAA,SAAQvO,EAAMkU,GACRA,IACFlU,EAAKP,OAASyU,EAAM3U,MAGtBxQ,KAAKuP,OAAOZ,KAAKsC,IAGnBmmB,EAAAl3B,UAAA+oB,QAAA,SAAQC,EAAO9X,GACb,OAAOA,EAAKZ,MAGd4mB,EAAAl3B,UAAA6vB,UAAA,WACE,IAAIpa,EAEFA,EADsB,YAApB3V,KAAKsP,WACEtP,KAAKu1B,YAELv1B,KAAKu2B,YAGhBv2B,KAAKgf,OAAS,IAAIoN,GAAYpsB,KAAKqP,OAAQrP,KAAKsP,WAAYqG,EAAQ3V,KAAKqsB,eAG3E+K,EAAAl3B,UAAA8vB,iBAAA,WACE,IAAM6B,EAAO,CACXpkB,UAAWzN,KAAKsP,WAChB0P,YAAQhb,EACR2R,OAAQ,GACRyG,WAAOpY,EACPsF,SAAUtJ,KAAK6rB,gBAWjB,MATuB,YAAnBgG,EAAKpkB,WACPokB,EAAKlc,OAAS3V,KAAKu1B,YACnB1D,EAAK7S,OAAShf,KAAKgf,OACnB6S,EAAKzV,MAAQpc,KAAKsuB,cAElBuD,EAAKlc,OAAS3V,KAAKu2B,YACnB1E,EAAK7S,OAAShf,KAAKgf,OAAO5K,OAGrByd,GAGTuF,EAAAl3B,UAAA4xB,iBAAA,SAAiB/nB,OAAErC,EAAAqC,EAAArC,MACjB1H,KAAKsrB,WAAa5jB,EAClB1H,KAAK8M,UAGPsqB,EAAAl3B,UAAA6xB,kBAAA,SAAkBhoB,OAAExC,EAAAwC,EAAAxC,OAClBvH,KAAKqrB,YAAc9jB,EACnBvH,KAAK8M,UAGPsqB,EAAAl3B,UAAA8xB,WAAA,SAAW9V,EAAOiJ,EAAO+P,QAAA,IAAAA,IAAAA,GAAA,GACvB,IAAM9jB,EAAO5R,OAAOa,OAAO,GAAI6b,GAC3BiJ,IACF/T,EAAKV,OAASyU,EAAM3U,MAGtB,IAAMsY,EAAQ9oB,KAAK8P,QAChBsI,KAAI,SAAA9H,GAAK,OAAAA,EAAEI,UACX2lB,OACA7O,QAAO,SAAAhnB,GACN,OAAI00B,EACK10B,EAAE+P,QAAUa,EAAKZ,KAEjBhQ,EAAEgQ,OAASY,EAAKZ,MAAQhQ,EAAEkQ,SAAWU,EAAKV,UAIvD1Q,KAAK2f,cAAard,EAAOwmB,GACzB9oB,KAAK0d,SAAS/O,KAAK,CAAE5M,MAAOqP,EAAM6gB,QAASjyB,KAAK2f,iBAGlDyX,EAAAl3B,UAAAgyB,aAAA,SAAahW,EAAOiJ,EAAO+P,QAAA,IAAAA,IAAAA,GAAA,GACzB,IAAM9jB,EAAO5R,OAAOa,OAAO,GAAI6b,GAC3BiJ,IACF/T,EAAKV,OAASyU,EAAM3U,MAGtBxQ,KAAK2f,cAAgB3f,KAAK2f,cAAc6H,QAAO,SAAAhnB,GAC7C,OAAI00B,EACK10B,EAAE+P,QAAUa,EAAKZ,OAEfhQ,EAAEgQ,OAASY,EAAKZ,MAAQhQ,EAAEkQ,SAAWU,EAAKV,WAIvD1Q,KAAK2d,WAAWhP,KAAK,CAAE5M,MAAOqP,EAAM6gB,QAASjyB,KAAK2f,iBAtN3C7e,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,2CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,gDACQvJ,EAAA,CAARuJ,EAAAA,kDACQvJ,EAAA,CAARuJ,EAAAA,kDACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,4CACQvJ,EAAA,CAARuJ,EAAAA,6CAESvJ,EAAA,CAAT4M,EAAAA,yCACS5M,EAAA,CAAT4M,EAAAA,2CAEgC5M,EAAA,CAAhCqxB,EAAAA,aAAa,0DA/BHiF,EAA8Bt2B,EAAA,CArF1C2J,EAAAA,UAAU,CACTC,SAAU,qCACVC,SAAU,41EAqEVC,cAAeC,EAAAA,kBAAkBC,KACjC8C,gBAAiBC,EAAAA,wBAAwBC,OACzCvB,WAAY,CACVwB,EAAAA,QAAQ,iBAAkB,CACxBC,EAAAA,WAAW,SAAU,CACnBC,EAAAA,MAAM,CACJC,QAAS,EACTkE,UAAW,MAEbjE,EAAAA,QAAQ,IAAKF,EAAAA,MAAM,CAAEC,QAAS,EAAGkE,UAAW,unDAKvCglB,IAAuCloB,kBCIpD,SAAAmoB,IAAA,IAAA7tB,EAAA,OAAA4C,GAAAA,EAAAvL,MAAAb,KAAAU,YAAAV,YACWwJ,EAAA8lB,QAAS,EACT9lB,EAAA8kB,YAAsB,SACtB9kB,EAAAqiB,eAAyB,QAOzBriB,EAAAoQ,iBAA2B,EAE3BpQ,EAAA+J,eAAyB,EACzB/J,EAAAmW,cAAuB,GAEvBnW,EAAAklB,gBAA0B,EAC1BllB,EAAAmlB,gBAA0B,EAC1BnlB,EAAAolB,kBAA4B,EAC5BplB,EAAAqlB,mBAA6B,GAC7BrlB,EAAAslB,mBAA6B,GAK7BtlB,EAAAkrB,WAAa,EACblrB,EAAAulB,cAAwB,EAExBvlB,EAAAmrB,eAAyB,EAEzBnrB,EAAAyqB,eAAyB,EAExBzqB,EAAAkU,SAA8B,IAAIjR,EAAAA,aAClCjD,EAAAmU,WAAgC,IAAIlR,EAAAA,aAa9CjD,EAAAyI,OAAS,CAAC,GAAI,GAAI,GAAI,IACtBzI,EAAA6hB,YAAsB,EACtB7hB,EAAA8hB,WAAqB,EAErB9hB,EAAAstB,mBAA0B,CAAEjC,SAAU,EAAGC,SAAU,KAqNrD,OAtQiDh1B,EAAAu3B,EAAAjrB,GAmD/CirB,EAAAn3B,UAAA4M,OAAA,WACEV,EAAAlM,UAAM4M,OAAMlM,KAAAZ,MAEPA,KAAK20B,gBACR30B,KAAK82B,mBAAqB,CAAEjC,SAAU,EAAGC,SAAU,IAErD90B,KAAKiS,OAAS,CAAC,GAAKjS,KAAK82B,mBAAmBhC,SAAU,GAAI,GAAK90B,KAAK82B,mBAAmBjC,SAAU,IAEjG70B,KAAKgQ,KAAOib,GAAwB,CAClCvjB,MAAO1H,KAAK0H,MACZH,OAAQvH,KAAKuH,OACb2jB,QAASlrB,KAAKiS,OACdkZ,UAAWnrB,KAAKkvB,MAChB9D,UAAWprB,KAAKmvB,MAChB9D,YAAarrB,KAAKqrB,YAClBC,WAAYtrB,KAAKsrB,WACjBC,WAAYvrB,KAAKovB,eACjB3D,WAAYzrB,KAAKqvB,eACjB/iB,WAAYtM,KAAKsvB,OACjBtiB,WAAYhN,KAAKsP,WACjBuc,eAAgB7rB,KAAK6rB,iBAGnB7rB,KAAK20B,gBACP30B,KAAKgQ,KAAKzI,QAAUvH,KAAK82B,mBAAmBjC,UAG9C70B,KAAKqQ,cAELrQ,KAAKq1B,YAAcr1B,KAAKs1B,iBACxBt1B,KAAKu1B,YAAcv1B,KAAKw1B,iBACxBx1B,KAAKu2B,YAAcv2B,KAAK01B,iBAExB11B,KAAKye,OAASze,KAAKonB,YACnBpnB,KAAK6e,OAAS7e,KAAK6vB,YAEnB7vB,KAAK+vB,YACL/vB,KAAKkN,cAAgBlN,KAAKgwB,mBAE1BhwB,KAAKoS,UAAY,aAAapS,KAAKgQ,KAAKgc,QAAO,OAAMhsB,KAAKiS,OAAO,GAAKjS,KAAK82B,mBAAmBjC,UAAQ,KAGxGwC,EAAAn3B,UAAAo1B,eAAA,mBACQ3f,EAAS,OACf,IAAoB,IAAAkB,EAAApV,EAAAzB,KAAK8P,SAAOwB,EAAAuF,EAAA/U,QAAAwP,EAAAtP,KAAAsP,EAAAuF,EAAA/U,OAAE,CAA7B,IAAMqjB,EAAK7T,EAAAvP,MACT4T,EAAOiS,SAASzC,EAAM5U,QACzBoF,EAAOvT,KAAK+iB,EAAM5U,yGAGtB,OAAOoF,GAGT0hB,EAAAn3B,UAAAs1B,eAAA,uBACQ7f,EAAS,OACf,IAAoB,IAAArE,EAAA7P,EAAAzB,KAAK8P,SAAO0B,EAAAF,EAAAxP,QAAA0P,EAAAxP,KAAAwP,EAAAF,EAAAxP,OAAE,CAA7B,IAAMqjB,EAAK3T,EAAAzP,UACd,IAAgB,IAAA2lB,GAAAuO,OAAA,EAAAx0B,EAAA0jB,EAAMzU,SAAMiX,EAAAD,EAAA5lB,QAAA6lB,EAAA3lB,KAAA2lB,EAAAD,EAAA5lB,OAAE,CAAzB,IAAMxC,EAACqoB,EAAA5lB,MACL4T,EAAOiS,SAAStoB,EAAEiR,QACrBoF,EAAOvT,KAAK9C,EAAEiR,4MAIpB,OAAOoF,GAGT0hB,EAAAn3B,UAAAw1B,eAAA,uBACQ/f,EAAS,GACX8gB,EAAW,EACXC,EAAU,MACd,IAAoB,IAAAplB,EAAA7P,EAAAzB,KAAK8P,SAAO0B,EAAAF,EAAAxP,QAAA0P,EAAAxP,KAAAwP,EAAAF,EAAAxP,OAAE,CAA7B,IAAMqjB,EAAK3T,EAAAzP,MACV40B,EAAc,EACdC,EAAa,MACjB,IAAgB,IAAAlP,GAAAwO,OAAA,EAAAz0B,EAAA0jB,EAAMzU,SAAMiX,EAAAD,EAAA5lB,QAAA6lB,EAAA3lB,KAAA2lB,EAAAD,EAAA5lB,OAAE,CAAzB,IAAMxC,EAACqoB,EAAA5lB,MACNzC,EAAEyC,MAAQ,EACZ40B,GAAer3B,EAAEyC,MAEjB60B,GAAct3B,EAAEyC,MAElB00B,EAAWn3B,EAAEyC,MAAQ00B,EAAWn3B,EAAEyC,MAAQ00B,EAC1CC,EAAUp3B,EAAEyC,MAAQ20B,EAAUp3B,EAAEyC,MAAQ20B,oGAE1C/gB,EAAOvT,KAAKu0B,GACZhhB,EAAOvT,KAAKw0B,qGAOd,OALAjhB,EAAOvT,KAAKq0B,GACZ9gB,EAAOvT,KAAKs0B,GAIL,CAFKrpB,KAAK8H,IAAGtU,MAARwM,KAAI/K,EAAA,CAAK,GAAMqT,IACf3V,KAAKixB,UAAY5jB,KAAKqF,IAAG7R,MAARwM,KAAI/K,EAAA,CAAKtC,KAAKixB,WAActb,IAAUtI,KAAKqF,IAAG7R,MAARwM,KAAI/K,EAAQqT,MAIjF0hB,EAAAn3B,UAAAknB,UAAA,WACE,IAAM7e,EAAUvI,KAAKq1B,YAAY10B,QAAUX,KAAKgQ,KAAKtI,MAAQ1H,KAAK00B,WAAa,GAC/E,OAAOtH,EAAAA,YACJ2H,WAAW,CAAC,EAAG/0B,KAAKgQ,KAAKtI,QACzB8Y,aAAajY,GACboN,OAAO3V,KAAKq1B,cAGjBgC,EAAAn3B,UAAA2vB,UAAA,WACE,IAAMzb,EAAQ0T,EAAAA,cACX/I,MAAM,CAAC/e,KAAKgQ,KAAKzI,OAAQ,IACzBoO,OAAO3V,KAAKu2B,aACf,OAAOv2B,KAAK+uB,aAAe3a,EAAM8c,OAAS9c,GAG5CijB,EAAAn3B,UAAAg3B,4BAAA,SAA4Bhb,EAAOka,GAAnC,IAAA5sB,EAAAxJ,KACMkc,EAAM+Y,KAAKJ,SACb70B,KAAK82B,mBAAmBjC,SAAWxnB,KAAKqF,IAAI1S,KAAK82B,mBAAmBjC,SAAU3Y,EAAM+Y,KAAK1tB,QAEzFvH,KAAK82B,mBAAmBhC,SAAWznB,KAAKqF,IAAI1S,KAAK82B,mBAAmBhC,SAAU5Y,EAAM+Y,KAAK1tB,QAEvF6uB,IAAep2B,KAAK8P,QAAQnP,OAAS,GACvC+F,YAAW,WAAM,OAAA8C,EAAKsD,aAI1BuqB,EAAAn3B,UAAAi2B,eAAA,SAAehR,GACb,MAAO,cAAanlB,KAAKye,OAAO0G,EAAM3U,OAAS,GAAC,QAGlD6mB,EAAAn3B,UAAAsf,QAAA,SAAQvO,EAAMkU,GACRA,IACFlU,EAAKP,OAASyU,EAAM3U,MAGtBxQ,KAAKuP,OAAOZ,KAAKsC,IAGnBomB,EAAAn3B,UAAA+oB,QAAA,SAAQC,EAAO9X,GACb,OAAOA,EAAKZ,MAGd6mB,EAAAn3B,UAAA6vB,UAAA,WACE,IAAIpa,EAEFA,EADsB,YAApB3V,KAAKsP,WACEtP,KAAKu1B,YAELv1B,KAAKu2B,YAGhBv2B,KAAKgf,OAAS,IAAIoN,GAAYpsB,KAAKqP,OAAQrP,KAAKsP,WAAYqG,EAAQ3V,KAAKqsB,eAG3EgL,EAAAn3B,UAAA8vB,iBAAA,WACE,IAAM6B,EAAO,CACXpkB,UAAWzN,KAAKsP,WAChB0P,YAAQhb,EACR2R,OAAQ,GACRyG,WAAOpY,EACPsF,SAAUtJ,KAAK6rB,gBAWjB,MATuB,YAAnBgG,EAAKpkB,WACPokB,EAAKlc,OAAS3V,KAAKu1B,YACnB1D,EAAK7S,OAAShf,KAAKgf,OACnB6S,EAAKzV,MAAQpc,KAAKsuB,cAElBuD,EAAKlc,OAAS3V,KAAKu2B,YACnB1E,EAAK7S,OAAShf,KAAKgf,OAAO5K,OAGrByd,GAGTwF,EAAAn3B,UAAA4xB,iBAAA,SAAiB/nB,OAAErC,EAAAqC,EAAArC,MACjB1H,KAAKsrB,WAAa5jB,EAClB1H,KAAK8M,UAGPuqB,EAAAn3B,UAAA6xB,kBAAA,SAAkBhoB,OAAExC,EAAAwC,EAAAxC,OAClBvH,KAAKqrB,YAAc9jB,EACnBvH,KAAK8M,UAGPuqB,EAAAn3B,UAAA8xB,WAAA,SAAW9V,EAAOiJ,EAAO+P,QAAA,IAAAA,IAAAA,GAAA,GACvB,IAAM9jB,EAAO5R,OAAOa,OAAO,GAAI6b,GAC3BiJ,IACF/T,EAAKV,OAASyU,EAAM3U,MAGtB,IAAMsY,EAAQ9oB,KAAK8P,QAChBsI,KAAI,SAAA9H,GAAK,OAAAA,EAAEI,UACX2lB,OACA7O,QAAO,SAAAhnB,GACN,OAAI00B,EACK10B,EAAE+P,QAAUa,EAAKZ,KAEjBhQ,EAAEgQ,OAASY,EAAKZ,MAAQhQ,EAAEkQ,SAAWU,EAAKV,UAIvD1Q,KAAK2f,cAAard,EAAOwmB,GACzB9oB,KAAK0d,SAAS/O,KAAK,CAAE5M,MAAOqP,EAAM6gB,QAASjyB,KAAK2f,iBAGlD0X,EAAAn3B,UAAAgyB,aAAA,SAAahW,EAAOiJ,EAAO+P,QAAA,IAAAA,IAAAA,GAAA,GACzB,IAAM9jB,EAAO5R,OAAOa,OAAO,GAAI6b,GAC3BiJ,IACF/T,EAAKV,OAASyU,EAAM3U,MAGtBxQ,KAAK2f,cAAgB3f,KAAK2f,cAAc6H,QAAO,SAAAhnB,GAC7C,OAAI00B,EACK10B,EAAE+P,QAAUa,EAAKZ,OAEfhQ,EAAEgQ,OAASY,EAAKZ,MAAQhQ,EAAEkQ,SAAWU,EAAKV,WAIvD1Q,KAAK2d,WAAWhP,KAAK,CAAE5M,MAAOqP,EAAM6gB,QAASjyB,KAAK2f,iBAnQ3C7e,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,2CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,gDACQvJ,EAAA,CAARuJ,EAAAA,kDACQvJ,EAAA,CAARuJ,EAAAA,kDACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,4CACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,6CAESvJ,EAAA,CAAT4M,EAAAA,yCACS5M,EAAA,CAAT4M,EAAAA,2CAEgC5M,EAAA,CAAhCqxB,EAAAA,aAAa,0DAlCHkF,EAA2Bv2B,EAAA,CAzFvC2J,EAAAA,UAAU,CACTC,SAAU,kCACVC,SAAU,4lFAyEVC,cAAeC,EAAAA,kBAAkBC,KACjC8C,gBAAiBC,EAAAA,wBAAwBC,OACzCvB,WAAY,CACVwB,EAAAA,QAAQ,iBAAkB,CACxBC,EAAAA,WAAW,SAAU,CACnBC,EAAAA,MAAM,CACJC,QAAS,EACTkE,UAAW,MAEbjE,EAAAA,QAAQ,IAAKF,EAAAA,MAAM,CAAEC,QAAS,EAAGkE,UAAW,unDAKvCilB,IAAoCnoB,IXrGrC+jB,GAAAA,EAAAA,UAAAA,EAAAA,QAAO,KACjB,SAAA,WACAA,GAAA,SAAA,WA+DF,IAAAqE,GAAA,WAAA,SAAAA,IAEWt3B,KAAAmJ,KAAO,WAQPnJ,KAAA4Z,iBAA2B,EAG3B5Z,KAAAuM,YAAsB,EACtBvM,KAAA20B,eAAyB,EAEzB30B,KAAAi0B,eAAyB,EAExBj0B,KAAAuP,OAAS,IAAI9C,EAAAA,aACbzM,KAAA0d,SAAW,IAAIjR,EAAAA,aACfzM,KAAA2d,WAAa,IAAIlR,EAAAA,aACjBzM,KAAAu3B,uBAAyB,IAAI9qB,EAAAA,aAQvCzM,KAAAw3B,kBAAmH,GAoLrH,OAlLEF,EAAAp3B,UAAA0M,YAAA,SAAYC,GACV7M,KAAK8M,UAGPwqB,EAAAp3B,UAAA4M,OAAA,iBAEMpF,EAFN8B,EAAAxJ,KACEA,KAAKy3B,wBAEDz3B,KAAK0Q,OAAO/P,SACd+G,EAAQ1H,KAAKye,OAAO7J,aAEtBlN,EAAQ2F,KAAK2V,MAAMtb,GACnB,IAQI+iB,EAREuG,EAAY3jB,KAAKqF,IAAI1S,KAAK6e,OAAOlJ,SAAS,GAAI,GAE9C0P,IAAEtb,EAAA,IACLkpB,EAAAA,QAAQ6B,UAAW,EACpB/qB,EAACkpB,EAAAA,QAAQ4B,UAAW,KAElB6C,EAASzE,EAAAA,QAAQ6B,SAGH,eAAd90B,KAAKmJ,OACPshB,EAAQzqB,KAAK0Q,OAAO0H,KAAI,SAAA9Y,GAAK,OAAAA,EAAEyC,SAAOwoB,QAAO,SAACC,EAAKlrB,GAAM,OAAAkrB,EAAMlrB,IAAG,IAGpEU,KAAK23B,KAAO33B,KAAK0Q,OAAO0H,KAAI,SAAC9Y,EAAG4pB,GAC9B,IAAInnB,EAAQzC,EAAEyC,MACRwO,EAAQ/G,EAAKouB,SAASt4B,GACtBypB,EAAiBrM,EAAYnM,GAC7ByjB,EAAaxqB,EAAKwqB,WACxB0D,EAAS31B,EAAQ,EAAIkxB,EAAAA,QAAQ6B,SAAW7B,EAAAA,QAAQ4B,SAEhD,IAAMgD,EAAW,CACf91B,MAAKA,EACLwO,MAAKA,EACLyjB,WAAUA,EACV/iB,KAAM3R,EACNoI,MAAKA,EACLqhB,eAAcA,EACdxhB,OAAQ,EACRiL,EAAG,EACHF,EAAG,GAGL,GAAkB,aAAd9I,EAAKL,KACP0uB,EAAItwB,OAAS8F,KAAK+V,IAAI5Z,EAAKqV,OAAO9c,GAASyH,EAAKqV,OAAOmS,IACvD6G,EAAIrlB,EAAIhJ,EAAKiV,OAAOlO,GAGlBsnB,EAAIvlB,EADFvQ,EAAQ,EACFyH,EAAKqV,OAAO,GAEZrV,EAAKqV,OAAO9c,QAEjB,GAAkB,YAAdyH,EAAKL,KAAoB,CAClC,IACM2uB,GADAC,EAAU1S,EAAGqS,IACO31B,EAC1BsjB,EAAGqS,IAAW31B,EAEd81B,EAAItwB,OAASiC,EAAKqV,OAAOkZ,GAAWvuB,EAAKqV,OAAOiZ,GAChDD,EAAIrlB,EAAI,EACRqlB,EAAIvlB,EAAI9I,EAAKqV,OAAOiZ,GACpBD,EAAIE,QAAUA,EACdF,EAAIC,QAAUA,OACT,GAAkB,eAAdtuB,EAAKL,KAAuB,CACrC,IAAI4uB,EACAD,GADAC,EAAU1S,EAAGqS,IACO31B,EACxBsjB,EAAGqS,IAAW31B,EAEV0oB,EAAQ,GACVsN,EAAqB,IAAVA,EAAiBtN,EAC5BqN,EAAqB,IAAVA,EAAiBrN,IAE5BsN,EAAU,EACVD,EAAU,GAGZD,EAAItwB,OAASiC,EAAKqV,OAAOkZ,GAAWvuB,EAAKqV,OAAOiZ,GAChDD,EAAIrlB,EAAI,EACRqlB,EAAIvlB,EAAI9I,EAAKqV,OAAOiZ,GACpBD,EAAIE,QAAUA,EACdF,EAAIC,QAAUA,EACd/1B,GAAS+1B,EAAUC,GAASzS,QAAQ,GAAK,IAGb,YAA1B9b,EAAKwV,OAAOvR,UACdoqB,EAAIlZ,MAAQnV,EAAKwV,OAAOC,SAAS1O,GAEf,aAAd/G,EAAKL,MACP0uB,EAAIlZ,MAAQnV,EAAKwV,OAAOC,SAASld,GACjC81B,EAAIzY,cAAgB5V,EAAKwV,OAAOkO,uBAAuBnrB,KAEvD81B,EAAIlZ,MAAQnV,EAAKwV,OAAOC,SAAS4Y,EAAIC,SACrCD,EAAIzY,cAAgB5V,EAAKwV,OAAOkO,uBAAuB2K,EAAIC,QAASD,EAAIE,UAI5E,IAAIvZ,EAAeuK,EAenB,OAdA8O,EAAIG,UAAYjP,EAAiB,IAAMhnB,EAAMyS,iBACzChL,EAAK+U,aACPC,EAAkBhV,EAAK+U,WAAU,MAAMwK,EACvC8O,EAAI5mB,KAAKP,OAASlH,EAAK+U,WACvBsZ,EAAIG,UAAYxuB,EAAK+U,WAAa,IAAMsZ,EAAIG,WAG9CH,EAAII,YAAczuB,EAAKoQ,qBACnB5V,EACA,yCAC4B2Y,GAAY6B,GAAa,8CAC3Bzc,EAAMyS,iBAAgB,kBAG7CqjB,KAGT73B,KAAKk4B,oBAGPZ,EAAAp3B,UAAAg4B,iBAAA,WAAA,IAAA1uB,EAAAxJ,KACE,GAAkB,YAAdA,KAAKmJ,KAAoB,CAC3BnJ,KAAKw3B,kBAAoB,GACzB,IAAMW,EAAe,GACrBA,EAAQznB,OAAS1Q,KAAKue,WACtB,IAAM6Z,EAAgBp4B,KAAK0Q,OAAO0H,KAAI,SAAA9Y,GAAK,OAAAA,EAAEyC,SAAOwoB,QAAO,SAACC,EAAKlrB,GAAM,OAACA,EAAI,EAAIkrB,EAAMlrB,EAAIkrB,IAAM,GAC1F6N,EAAgBr4B,KAAK0Q,OAAO0H,KAAI,SAAA9Y,GAAK,OAAAA,EAAEyC,SAAOwoB,QAAO,SAACC,EAAKlrB,GAAM,OAACA,EAAI,EAAIkrB,EAAMlrB,EAAIkrB,IAAM,GAChG2N,EAAQ1N,MAAQ2N,EAAgBC,EAChCF,EAAQ3lB,EAAI,EACZ2lB,EAAQ7lB,EAAI,EACR6lB,EAAQ1N,MAAQ,EAClB0N,EAAQ5wB,OAASvH,KAAK6e,OAAOuZ,GAE7BD,EAAQ5wB,OAASvH,KAAK6e,OAAOwZ,GAE/BF,EAAQzwB,MAAQ1H,KAAKye,OAAO7J,YAC5B5U,KAAKw3B,kBAAkBp1B,KAAK+1B,QAE5Bn4B,KAAKw3B,kBAAoBx3B,KAAK0Q,OAAO0H,KAAI,SAAA9Y,GACvC,IAAM64B,EAAe,GAOrB,OANAA,EAAQznB,OAASlH,EAAK+U,WAAa/U,EAAK+U,WAAajf,EAAEiR,MACvD4nB,EAAQ1N,MAAQnrB,EAAEyC,MAClBo2B,EAAQ3lB,EAAIhJ,EAAKiV,OAAOnf,EAAEiR,OAC1B4nB,EAAQ7lB,EAAI9I,EAAKqV,OAAO,GACxBsZ,EAAQ5wB,OAASiC,EAAKqV,OAAOsZ,EAAQ1N,OAASjhB,EAAKqV,OAAO,GAC1DsZ,EAAQzwB,MAAQ8B,EAAKiV,OAAO7J,YACrBujB,MAKbb,EAAAp3B,UAAAu3B,sBAAA,WACEz3B,KAAK8Z,iBAAmB9Z,KAAK4Z,qBAAkB5V,EAAY,MAC3DhE,KAAKia,YAAcja,KAAK4Z,qBAAkB5V,EAAY,WAGxDszB,EAAAp3B,UAAAuf,SAAA,SAASC,GACP,QAAK1f,KAAK2f,oBAIM3b,IAHHhE,KAAK2f,cAAcC,MAAK,SAAAtgB,GACnC,OAAOogB,EAAMlP,OAASlR,EAAEkR,MAAQkP,EAAMhP,SAAWpR,EAAEoR,WAKvD4mB,EAAAp3B,UAAAsf,QAAA,SAAQvO,GACNjR,KAAKuP,OAAOZ,KAAKsC,IAGnBqmB,EAAAp3B,UAAA03B,SAAA,SAASU,GACP,OAAIA,EAAS/nB,MACJ+nB,EAAS/nB,MAEX+nB,EAAS9nB,MAGlB8mB,EAAAp3B,UAAA+oB,QAAA,SAAQC,EAAO2O,GACb,OAAOA,EAAItnB,OAGb+mB,EAAAp3B,UAAAq4B,iBAAA,SAAiBrP,EAAOsP,GACtB,OAAOtP,EAAQ,IAAMsP,EAAS9nB,OAAS,IAAM8nB,EAAS/N,OA9M/C3pB,EAAA,CAARuJ,EAAAA,oCACQvJ,EAAA,CAARuJ,EAAAA,oCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,6CAESvJ,EAAA,CAAT4M,EAAAA,uCACS5M,EAAA,CAAT4M,EAAAA,yCACS5M,EAAA,CAAT4M,EAAAA,2CACS5M,EAAA,CAAT4M,EAAAA,uDArBU4pB,EAAuBx2B,EAAA,CA5DnC2J,EAAAA,UAAU,CACTC,SAAU,gCACVC,SAAU,2+CA8CViD,gBAAiBC,EAAAA,wBAAwBC,OACzCvB,WAAY,CACVwB,EAAAA,QAAQ,iBAAkB,CACxBC,EAAAA,WAAW,SAAU,CACnBC,EAAAA,MAAM,CACJC,QAAS,IAEXC,EAAAA,QAAQ,IAAKF,EAAAA,MAAM,CAAEC,QAAS,aAKzBopB,GAAb,iBYIA,SAAAmB,IAIEz4B,KAAAw3B,kBAAmH,GAG1Gx3B,KAAAmJ,KAAO,WAKPnJ,KAAA4Z,iBAA2B,EAM3B5Z,KAAAuM,YAAsB,EACtBvM,KAAA20B,eAAyB,EAEzB30B,KAAAi0B,eAAyB,EAExBj0B,KAAAuP,OAAS,IAAI9C,EAAAA,aACbzM,KAAA0d,SAAW,IAAIjR,EAAAA,aACfzM,KAAA2d,WAAa,IAAIlR,EAAAA,aACjBzM,KAAA04B,sBAAwB,IAAIjsB,EAAAA,aA+KxC,OA1KEgsB,EAAAv4B,UAAA0M,YAAA,SAAYC,GACV7M,KAAK8M,UAGP2rB,EAAAv4B,UAAA4M,OAAA,iBAAAtD,EAAAxJ,KACEA,KAAKy3B,wBACL,IAIIC,EAEAjN,EANEpF,IAAEtb,EAAA,IACLkpB,EAAAA,QAAQ6B,UAAW,EACpB/qB,EAACkpB,EAAAA,QAAQ4B,UAAW,KAGtB6C,EAASzE,EAAAA,QAAQ6B,SAEC,eAAd90B,KAAKmJ,OACPshB,EAAQzqB,KAAK0Q,OAAO0H,KAAI,SAAA9Y,GAAK,OAAAA,EAAEyC,SAAOwoB,QAAO,SAACC,EAAKlrB,GAAM,OAAAkrB,EAAMlrB,IAAG,IAEpE,IAAMkxB,EAAYnjB,KAAKqF,IAAI1S,KAAKye,OAAO9I,SAAS,GAAI,GAEpD3V,KAAK23B,KAAO33B,KAAK0Q,OAAO0H,KAAI,SAAC9Y,EAAG4pB,GAC9B,IAAInnB,EAAQzC,EAAEyC,MACRwO,EAAQ/G,EAAKouB,SAASt4B,GACtBypB,EAAiBrM,EAAYnM,GAC7ByjB,EAAaxqB,EAAKwqB,WACxB0D,EAAS31B,EAAQ,EAAIkxB,EAAAA,QAAQ6B,SAAW7B,EAAAA,QAAQ4B,SAEhD,IAAMgD,EAAW,CACf91B,MAAKA,EACLwO,MAAKA,EACLyjB,WAAUA,EACV/iB,KAAM3R,EACNypB,eAAcA,GAKhB,GAFA8O,EAAItwB,OAASiC,EAAKqV,OAAOjK,YAEP,aAAdpL,EAAKL,KACP0uB,EAAInwB,MAAQ2F,KAAK+V,IAAI5Z,EAAKiV,OAAO1c,GAASyH,EAAKiV,OAAO+R,IAEpDqH,EAAIrlB,EADFzQ,EAAQ,EACFyH,EAAKiV,OAAO1c,GAEZyH,EAAKiV,OAAO+R,GAEtBqH,EAAIvlB,EAAI9I,EAAKqV,OAAOtO,QACf,GAAkB,YAAd/G,EAAKL,KAAoB,CAClC,IACM2uB,GADAC,EAAU1S,EAAGqS,IACO31B,EAC1BsjB,EAAGqS,IAAW31B,EAEd81B,EAAInwB,MAAQ8B,EAAKiV,OAAOqZ,GAAWtuB,EAAKiV,OAAOsZ,GAC/CF,EAAIrlB,EAAIhJ,EAAKiV,OAAOsZ,GACpBF,EAAIvlB,EAAI,EACRulB,EAAIE,QAAUA,EACdF,EAAIC,QAAUA,OACT,GAAkB,eAAdtuB,EAAKL,KAAuB,CACrC,IAAI4uB,EACAD,GADAC,EAAU1S,EAAGqS,IACO31B,EACxBsjB,EAAGqS,IAAW31B,EAEV0oB,EAAQ,GACVsN,EAAqB,IAAVA,EAAiBtN,EAC5BqN,EAAqB,IAAVA,EAAiBrN,IAE5BsN,EAAU,EACVD,EAAU,GAGZD,EAAInwB,MAAQ8B,EAAKiV,OAAOqZ,GAAWtuB,EAAKiV,OAAOsZ,GAC/CF,EAAIrlB,EAAIhJ,EAAKiV,OAAOsZ,GACpBF,EAAIvlB,EAAI,EACRulB,EAAIE,QAAUA,EACdF,EAAIC,QAAUA,EACd/1B,GAAS+1B,EAAUC,GAASzS,QAAQ,GAAK,IAGb,YAA1B9b,EAAKwV,OAAOvR,UACdoqB,EAAIlZ,MAAQnV,EAAKwV,OAAOC,SAAS1O,GAEf,aAAd/G,EAAKL,MACP0uB,EAAIlZ,MAAQnV,EAAKwV,OAAOC,SAASld,GACjC81B,EAAIzY,cAAgB5V,EAAKwV,OAAOkO,uBAAuBnrB,KAEvD81B,EAAIlZ,MAAQnV,EAAKwV,OAAOC,SAAS4Y,EAAIC,SACrCD,EAAIzY,cAAgB5V,EAAKwV,OAAOkO,uBAAuB2K,EAAIC,QAASD,EAAIE,UAI5E,IAAIvZ,EAAeuK,EAenB,OAdA8O,EAAIG,UAAYjP,EAAiB,IAAMhnB,EAAMyS,iBACzChL,EAAK+U,aACPC,EAAkBhV,EAAK+U,WAAU,MAAMwK,EACvC8O,EAAI5mB,KAAKP,OAASlH,EAAK+U,WACvBsZ,EAAIG,UAAYxuB,EAAK+U,WAAa,IAAMsZ,EAAIG,WAG9CH,EAAII,YAAczuB,EAAKoQ,qBACnB5V,EACA,yCAC4B2Y,GAAY6B,GAAa,8CAC3Bzc,EAAMyS,iBAAgB,kBAG7CqjB,KAGT73B,KAAKk4B,oBAGPO,EAAAv4B,UAAAg4B,iBAAA,WAAA,IAAA1uB,EAAAxJ,KACE,GAAkB,YAAdA,KAAKmJ,KAAoB,CAC3BnJ,KAAKw3B,kBAAoB,GACzB,IAAMW,EAAe,GACrBA,EAAQznB,OAAS1Q,KAAKue,WACtB,IAAM6Z,EAAgBp4B,KAAK0Q,OAAO0H,KAAI,SAAA9Y,GAAK,OAAAA,EAAEyC,SAAOwoB,QAAO,SAACC,EAAKlrB,GAAM,OAACA,EAAI,EAAIkrB,EAAMlrB,EAAIkrB,IAAM,GAC1F6N,EAAgBr4B,KAAK0Q,OAAO0H,KAAI,SAAA9Y,GAAK,OAAAA,EAAEyC,SAAOwoB,QAAO,SAACC,EAAKlrB,GAAM,OAACA,EAAI,EAAIkrB,EAAMlrB,EAAIkrB,IAAM,GAChG2N,EAAQ1N,MAAQ2N,EAAgBC,EAChCF,EAAQ3lB,EAAI,EACZ2lB,EAAQ7lB,EAAI,EAER6lB,EAAQ1N,MAAQ,EAClB0N,EAAQzwB,MAAQ1H,KAAKye,OAAO2Z,GAE5BD,EAAQzwB,MAAQ1H,KAAKye,OAAO4Z,GAE9BF,EAAQ5wB,OAASvH,KAAK6e,OAAOjK,YAC7B5U,KAAKw3B,kBAAkBp1B,KAAK+1B,QAE5Bn4B,KAAKw3B,kBAAoBx3B,KAAK0Q,OAAO0H,KAAI,SAAA9Y,GACvC,IAAM64B,EAAe,GAOrB,OANAA,EAAQznB,OAASlH,EAAK+U,WAAa/U,EAAK+U,WAAajf,EAAEiR,MACvD4nB,EAAQ1N,MAAQnrB,EAAEyC,MAClBo2B,EAAQ3lB,EAAIhJ,EAAKiV,OAAO,GACxB0Z,EAAQ7lB,EAAI9I,EAAKqV,OAAOvf,EAAEiR,OAC1B4nB,EAAQzwB,MAAQ8B,EAAKiV,OAAO0Z,EAAQ1N,OAASjhB,EAAKiV,OAAO,GACzD0Z,EAAQ5wB,OAASiC,EAAKqV,OAAOjK,YACtBujB,MAKbM,EAAAv4B,UAAAu3B,sBAAA,WACEz3B,KAAK8Z,iBAAmB9Z,KAAK4Z,qBAAkB5V,EAAY,MAC3DhE,KAAKia,YAAcja,KAAK4Z,qBAAkB5V,EAAY,WAGxDy0B,EAAAv4B,UAAAuf,SAAA,SAASC,GACP,QAAK1f,KAAK2f,oBAIM3b,IAHHhE,KAAK2f,cAAcC,MAAK,SAAAtgB,GACnC,OAAOogB,EAAMlP,OAASlR,EAAEkR,MAAQkP,EAAMhP,SAAWpR,EAAEoR,WAKvD+nB,EAAAv4B,UAAA03B,SAAA,SAASU,GACP,OAAIA,EAAS/nB,MACJ+nB,EAAS/nB,MAEX+nB,EAAS9nB,MAGlBioB,EAAAv4B,UAAA+oB,QAAA,SAAQC,EAAO2O,GACb,OAAOA,EAAItnB,OAGbkoB,EAAAv4B,UAAAq4B,iBAAA,SAAiBrP,EAAOsP,GACtB,OAAOtP,EAAQ,IAAMsP,EAAS9nB,OAAS,IAAM8nB,EAAS/N,OAGxDgO,EAAAv4B,UAAAy4B,MAAA,SAAM1nB,GACJjR,KAAKuP,OAAOZ,KAAKsC,IAjMVnQ,EAAA,CAARuJ,EAAAA,oCACQvJ,EAAA,CAARuJ,EAAAA,oCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,6CAESvJ,EAAA,CAAT4M,EAAAA,uCACS5M,EAAA,CAAT4M,EAAAA,yCACS5M,EAAA,CAAT4M,EAAAA,2CACS5M,EAAA,CAAT4M,EAAAA,sDA1BU+qB,EAAgB33B,EAAA,CA3D5B2J,EAAAA,UAAU,CACTC,SAAU,kCACVC,SAAU,08CA6CViD,gBAAiBC,EAAAA,wBAAwBC,OACzCvB,WAAY,CACVwB,EAAAA,QAAQ,iBAAkB,CACxBC,EAAAA,WAAW,SAAU,CACnBC,EAAAA,MAAM,CACJC,QAAS,IAEXC,EAAAA,QAAQ,IAAKF,EAAAA,MAAM,CAAEC,QAAS,aAKzBuqB,oBCzBX,SAAAG,EAAYp1B,GAXFxD,KAAAyT,kBAAuC,IAAIhH,EAAAA,aAKrDzM,KAAA64B,kBAA4B,EAC5B74B,KAAA84B,gBAA0B,EAMxB94B,KAAKwD,QAAUA,EAAQC,cAmD3B,OAhDEm1B,EAAA14B,UAAA0M,YAAA,SAAYC,GACV7M,KAAK8M,UAGP8rB,EAAA14B,UAAA64B,QAAA,WAGE,MAAO,CAAExxB,OAFCvH,KAAKwD,QAAQmG,wBAAwBpC,OAE3BG,MADV1H,KAAKwD,QAAQmG,wBAAwBjC,MACjBmtB,SAAU70B,KAAK+B,MAAQ,IAGvD62B,EAAA14B,UAAAmJ,gBAAA,WACErJ,KAAKyT,kBAAkB9E,KAAK3O,KAAK+4B,YAGnCH,EAAA14B,UAAA4M,OAAA,WACM9M,KAAKkkB,gBACPlkB,KAAKg5B,cAAgBh5B,KAAKkkB,gBAAgBlkB,KAAK+B,OAE/C/B,KAAKg5B,cAAgBtc,EAAY1c,KAAK+B,OAGf,eAArB/B,KAAK2gB,aACP3gB,KAAKwS,EAAIxS,KAAKi5B,KAAOj5B,KAAKk5B,SAGtBl5B,KAAK+B,MAAQ,GACf/B,KAAKwS,EAAIxS,KAAKwS,EAAIxS,KAAK64B,kBACvB74B,KAAKmS,WAAa,QAElBnS,KAAKwS,EAAIxS,KAAKwS,EAAIxS,KAAK64B,kBACvB74B,KAAKmS,WAAa,SAEpBnS,KAAKsS,EAAItS,KAAKm5B,KAAOn5B,KAAKo5B,UAAY,IAGtCp5B,KAAKwS,EAAIxS,KAAKi5B,KAAOj5B,KAAKk5B,SAAW,EACrCl5B,KAAKsS,EAAItS,KAAKm5B,KAAOn5B,KAAKo5B,UAEtBp5B,KAAK+B,MAAQ,GACf/B,KAAKsS,EAAItS,KAAKsS,EAAItS,KAAK84B,gBACvB94B,KAAKmS,WAAa,QAElBnS,KAAKsS,EAAItS,KAAKsS,EAAItS,KAAK84B,gBACvB94B,KAAKmS,WAAa,SAEpBnS,KAAKoS,UAAY,eAAepS,KAAKwS,EAAC,MAAMxS,KAAKsS,EAAC,+CAjDjCnI,EAAAA,cAnBZrJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,oCACQvJ,EAAA,CAARuJ,EAAAA,oCACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,2CAESvJ,EAAA,CAAT4M,EAAAA,kDATUkrB,EAAiB93B,EAAA,CAjB7B2J,EAAAA,UAAU,CACTC,SAAU,0BACVC,SAAU,4PAaViD,gBAAiBC,EAAAA,wBAAwBC,oDAE9B8qB,oBCiBb,SAAAS,KAA6B,OAAhBA,EAAcv4B,EAAA,CA/B1BkY,EAAAA,SAAS,CACRC,QAAS,CAAC+R,IACV7R,aAAc,CACZ4a,GACAU,GACAU,GACAmB,GACAE,GACAK,GACAM,GACAC,GACAC,GACAuB,GACAH,GACAnB,IAEFle,QAAS,CACP2a,GACAU,GACAU,GACAmB,GACAE,GACAK,GACAM,GACAC,GACAC,GACAuB,GACAH,GACAnB,OAGS+B,eC5CGC,GAAU7R,EAAQha,EAAWsjB,EAAWwI,EAASC,GAC/D,IAAI7jB,EAAmB,IACL,WAAdlI,IACFga,EAASA,EAAOrP,KAAI,SAAAmN,GAAK,OAAA7G,OAAO6G,MAC3BwL,GACHtJ,EAAOrlB,KAAK,IAIE,SAAdqL,GAAsC,WAAdA,GAI1BkI,EAAS,CAHG4jB,GAAkBlsB,KAAK8H,IAAGtU,MAARwM,KAAI/K,EAAQmlB,IAC9B+R,GAAkBnsB,KAAKqF,IAAG7R,MAARwM,KAAI/K,EAAQmlB,KAI1C9R,EAAS8R,EAGX,OAAO9R,EAGT,SAAgB8jB,GAAS9jB,EAAQoJ,EAAiBtR,EAAWshB,GAC3D,IAAI3a,EAoBJ,MAlBkB,SAAd3G,EACF2G,EAAQyT,EAAAA,YACL9I,MAAMA,GACNpJ,OAAOA,GACa,WAAdlI,GACT2G,EAAQ0T,EAAAA,cACL/I,MAAMA,GACNpJ,OAAOA,GAENoZ,IACF3a,EAAQA,EAAM8c,SAEO,YAAdzjB,IACT2G,EAAQ2T,EAAAA,aACLhJ,MAAM,CAACA,EAAM,GAAIA,EAAM,KACvBpJ,OAAOA,IAGLvB,qBCkFT,SAAAslB,IAAA,IAAAlwB,EAAA,OAAA4C,GAAAA,EAAAvL,MAAAb,KAAAU,YAAAV,YACWwJ,EAAA+J,eAAyB,EACzB/J,EAAA8lB,QAAS,EACT9lB,EAAA8kB,YAAsB,SACtB9kB,EAAAqiB,eAAyB,QACzBriB,EAAA0lB,OAAiB,EACjB1lB,EAAA2lB,OAAiB,EAKjB3lB,EAAAklB,gBAA0B,EAC1BllB,EAAAmlB,gBAA0B,EAC1BnlB,EAAAolB,kBAA4B,EAC5BplB,EAAAqlB,mBAA6B,GAC7BrlB,EAAAslB,mBAA6B,GAK7BtlB,EAAAulB,cAAwB,EACxBvlB,EAAAmwB,UAAY,GACZnwB,EAAAowB,UAAY,EAEZpwB,EAAA8F,WAAa,UACb9F,EAAAoQ,iBAA2B,EAM1BpQ,EAAAkU,SAA8B,IAAIjR,EAAAA,aAClCjD,EAAAmU,WAAgC,IAAIlR,EAAAA,aAM9CjD,EAAAiE,UAAY,SACZjE,EAAAyI,OAAS,CAAC,GAAI,GAAI,GAAI,IACtBzI,EAAAqwB,cAAgB,CAAC,EAAG,EAAG,EAAG,GAqB1BrwB,EAAA6hB,YAAsB,EACtB7hB,EAAA8hB,WAAqB,EAErB9hB,EAAAmW,cAAuB,KAiOzB,OAjS0C7f,EAAA45B,EAAAttB,GAkExCstB,EAAAx5B,UAAA4M,OAAA,WACEV,EAAAlM,UAAM4M,OAAMlM,KAAAZ,MAEZA,KAAKgQ,KAAOib,GAAwB,CAClCvjB,MAAO1H,KAAK0H,MACZH,OAAQvH,KAAKuH,OACb2jB,QAASlrB,KAAKiS,OACdkZ,UAAWnrB,KAAKkvB,MAChB9D,UAAWprB,KAAKmvB,MAChB9D,YAAarrB,KAAKqrB,YAClBC,WAAYtrB,KAAKsrB,WACjBC,WAAYvrB,KAAKovB,eACjB3D,WAAYzrB,KAAKqvB,eACjB/iB,WAAYtM,KAAKsvB,OACjBtiB,WAAYhN,KAAKsP,WACjBuc,eAAgB7rB,KAAK6rB,iBAGvB7rB,KAAK2vB,aAAe3vB,KAAK8P,QAAQsI,KAAI,SAAA9Y,GAAK,OAAAA,EAAEkR,QAC5CxQ,KAAK85B,QAAU95B,KAAK+5B,aACpB/5B,KAAKknB,QAAUlnB,KAAKmnB,aACpBnnB,KAAKyvB,QAAUzvB,KAAK0vB,aAEpB1vB,KAAKoS,UAAY,aAAapS,KAAKgQ,KAAKgc,QAAO,IAAIhsB,KAAKiS,OAAO,GAAE,IAEjE,IAAMsa,EAAkC,YAApBvsB,KAAKsP,WAA2BtP,KAAK2vB,aAAe3vB,KAAK85B,QAC7E95B,KAAKgf,OAAS,IAAIoN,GAAYpsB,KAAKqP,OAAQrP,KAAKsP,WAAYid,EAAavsB,KAAKqsB,cAE9ErsB,KAAKiR,KAAOjR,KAAK8P,QAEjB9P,KAAK45B,UAAYvsB,KAAKqF,IAAI1S,KAAK45B,UAAW,GAC1C55B,KAAK25B,UAAYtsB,KAAKqF,IAAI1S,KAAK25B,UAAW,GAE1C35B,KAAKg6B,OAASh6B,KAAKi6B,UAAUj6B,KAAK85B,QAAS,CAAC95B,KAAK45B,UAAW55B,KAAK25B,YAEjE35B,KAAK65B,cAAgB,CAAC,EAAG,EAAG,EAAG,GAC/B75B,KAAKk6B,YAELl6B,KAAK65B,cAAgB75B,KAAKm6B,mBAC1Bn6B,KAAKk6B,YAELl6B,KAAKkN,cAAgBlN,KAAKgwB,mBAE1BhwB,KAAKiwB,WAAa,OAAS5S,KAAKtI,WAChC/U,KAAKkwB,SAAW,QAAQlwB,KAAKiwB,WAAU,KAIzCyJ,EAAAx5B,UAAA0xB,YAAA,WACE5xB,KAAK2xB,iBAGP+H,EAAAx5B,UAAAsf,QAAA,SAAQvO,EAAMP,GACRA,IACFO,EAAKP,OAASA,EAAOF,MAGvBxQ,KAAKuP,OAAOZ,KAAKsC,IAGnByoB,EAAAx5B,UAAAi6B,iBAAA,uBACMC,EAAO,EACPC,EAAO,EACPC,EAAOt6B,KAAKgQ,KAAKzI,OACjBgzB,EAAOv6B,KAAKgQ,KAAKtI,UAErB,IAAgB,IAAA4J,EAAA7P,EAAAzB,KAAKiR,MAAIO,EAAAF,EAAAxP,QAAA0P,EAAAxP,KAAAwP,EAAAF,EAAAxP,OAAE,CAAtB,IAAMvB,EAACiR,EAAAzP,UACV,IAAgB,IAAA2lB,GAAAnW,OAAA,EAAA9P,EAAAlB,EAAEmQ,SAAMiX,EAAAD,EAAA5lB,QAAA6lB,EAAA3lB,KAAA2lB,EAAAD,EAAA5lB,OAAE,CAArB,IAAMxC,EAACqoB,EAAA5lB,MACJX,EAAIpB,KAAKg6B,OAAO16B,EAAE8B,GAClBkd,EAAyB,WAApBte,KAAKw6B,WAA0Bx6B,KAAKye,OAAOC,OAAOpf,EAAEkT,IAAMxS,KAAKye,OAAOnf,EAAEkT,GAC7EoM,EAAyB,WAApB5e,KAAKy6B,WAA0Bz6B,KAAK6e,OAAOH,OAAOpf,EAAEgT,IAAMtS,KAAK6e,OAAOvf,EAAEgT,GACnF+nB,EAAOhtB,KAAKqF,IAAItR,EAAIkd,EAAI+b,GACxBD,EAAO/sB,KAAKqF,IAAItR,EAAIwd,EAAIwb,GACxBE,EAAOjtB,KAAKqF,IAAIkM,EAAKxd,EAAGk5B,GACxBC,EAAOltB,KAAKqF,IAAI4L,EAAKld,EAAGm5B,wMAO5B,MAAO,CAACH,EAHRG,EAAOltB,KAAKqF,IAAI6nB,EAAOv6B,KAAKgQ,KAAKtI,MAAO,GACxC4yB,EAAOjtB,KAAKqF,IAAI4nB,EAAOt6B,KAAKgQ,KAAKzI,OAAQ,GAEf8yB,IAG5BX,EAAAx5B,UAAAg6B,UAAA,WACE,IAAIxyB,EAAQ1H,KAAKgQ,KAAKtI,WACC1D,IAAnBhE,KAAKwwB,gBAA8CxsB,IAAnBhE,KAAKywB,YACvC/oB,GAAgB1H,KAAK65B,cAAc,IAErC,IAAItyB,EAASvH,KAAKgQ,KAAKzI,YACAvD,IAAnBhE,KAAKgxB,gBAA8ChtB,IAAnBhE,KAAKixB,YACvC1pB,GAAkBvH,KAAK65B,cAAc,IAEvC75B,KAAKye,OAASze,KAAKonB,UAAUpnB,KAAKknB,QAASxf,GAC3C1H,KAAK6e,OAAS7e,KAAK6vB,UAAU7vB,KAAKyvB,QAASloB,IAG7CmyB,EAAAx5B,UAAA2vB,UAAA,SAAUla,EAAQpO,GAChB,OAAOkyB,GAAS9jB,EAAQ,CAACpO,EAAQvH,KAAK65B,cAAc,IAAK75B,KAAKy6B,WAAYz6B,KAAK+uB,eAGjF2K,EAAAx5B,UAAAknB,UAAA,SAAUzR,EAAQjO,GAChB,OAAO+xB,GAAS9jB,EAAQ,CAAC3V,KAAK65B,cAAc,GAAInyB,GAAQ1H,KAAKw6B,WAAYx6B,KAAK+uB,eAGhF2K,EAAAx5B,UAAA+5B,UAAA,SAAUtkB,EAAQoJ,GAChB,IAAM3K,EAAQ0T,EAAAA,cACX/I,MAAMA,GACNpJ,OAAOA,GAEV,OAAO3V,KAAK+uB,aAAe3a,EAAM8c,OAAS9c,GAG5CslB,EAAAx5B,UAAA8vB,iBAAA,WACE,IAAM6B,EAAO,CACXpkB,UAAWzN,KAAKsP,WAChB0P,YAAQhb,EACR2R,OAAQ,GACRrM,SAAUtJ,KAAK6rB,eACfzP,WAAOpY,GAYT,MATuB,YAAnB6tB,EAAKpkB,WACPokB,EAAKlc,OAAS3V,KAAK2vB,aACnBkC,EAAK7S,OAAShf,KAAKgf,OACnB6S,EAAKzV,MAAQpc,KAAKsuB,cAElBuD,EAAKlc,OAAS3V,KAAK85B,QACnBjI,EAAK7S,OAAShf,KAAKgf,OAAO5K,OAGrByd,GAGT6H,EAAAx5B,UAAAinB,WAAA,uBACQM,EAAS,OAEf,IAAsB,IAAAnW,EAAA7P,EAAAzB,KAAK8P,SAAO0B,EAAAF,EAAAxP,QAAA0P,EAAAxP,KAAAwP,EAAAF,EAAAxP,OAAE,CAA/B,IAAMgO,EAAO0B,EAAAzP,UAChB,IAAgB,IAAA2lB,GAAAgT,OAAA,EAAAj5B,EAAAqO,EAAQY,SAAMiX,EAAAD,EAAA5lB,QAAA6lB,EAAA3lB,KAAA2lB,EAAAD,EAAA5lB,OAAE,CAA3B,IAAMxC,EAACqoB,EAAA5lB,MACL0lB,EAAOG,SAAStoB,EAAEkT,IACrBiV,EAAOrlB,KAAK9C,EAAEkT,wMAMpB,OADAxS,KAAKw6B,WAAatM,GAAazG,GACxB6R,GAAU7R,EAAQznB,KAAKw6B,WAAYx6B,KAAK+wB,UAAW/wB,KAAKwwB,UAAWxwB,KAAKywB,YAGjFiJ,EAAAx5B,UAAAwvB,WAAA,uBACQjI,EAAS,OAEf,IAAsB,IAAAnW,EAAA7P,EAAAzB,KAAK8P,SAAO0B,EAAAF,EAAAxP,QAAA0P,EAAAxP,KAAAwP,EAAAF,EAAAxP,OAAE,CAA/B,IAAMgO,EAAO0B,EAAAzP,UAChB,IAAgB,IAAA2lB,GAAAiT,OAAA,EAAAl5B,EAAAqO,EAAQY,SAAMiX,EAAAD,EAAA5lB,QAAA6lB,EAAA3lB,KAAA2lB,EAAAD,EAAA5lB,OAAE,CAA3B,IAAMxC,EAACqoB,EAAA5lB,MACL0lB,EAAOG,SAAStoB,EAAEgT,IACrBmV,EAAOrlB,KAAK9C,EAAEgT,wMAMpB,OADAtS,KAAKy6B,WAAavM,GAAazG,GACxB6R,GAAU7R,EAAQznB,KAAKy6B,WAAYz6B,KAAK+wB,UAAW/wB,KAAKgxB,UAAWhxB,KAAKixB,YAGjFyI,EAAAx5B,UAAA65B,WAAA,uBACM5kB,EAAMylB,EAAAA,EACNloB,GAAOkoB,EAAAA,MAEX,IAAsB,IAAAtpB,EAAA7P,EAAAzB,KAAK8P,SAAO0B,EAAAF,EAAAxP,QAAA0P,EAAAxP,KAAAwP,EAAAF,EAAAxP,OAAE,CAA/B,IAAMgO,EAAO0B,EAAAzP,UAChB,IAAgB,IAAA2lB,GAAAmT,OAAA,EAAAp5B,EAAAqO,EAAQY,SAAMiX,EAAAD,EAAA5lB,QAAA6lB,EAAA3lB,KAAA2lB,EAAAD,EAAA5lB,OAAE,CAA3B,IAAMxC,EAACqoB,EAAA5lB,MACJA,EAAQ2c,OAAOpf,EAAE8B,IAAM,EAC7B+T,EAAM9H,KAAK8H,IAAIA,EAAKpT,GACpB2Q,EAAMrF,KAAKqF,IAAIA,EAAK3Q,wMAIxB,MAAO,CAACoT,EAAKzC,IAGfgnB,EAAAx5B,UAAA4xB,iBAAA,SAAiB/nB,OAAErC,EAAAqC,EAAArC,MACjB1H,KAAKsrB,WAAa5jB,EAClB1H,KAAK8M,UAGP4sB,EAAAx5B,UAAA6xB,kBAAA,SAAkBhoB,OAAExC,EAAAwC,EAAAxC,OAClBvH,KAAKqrB,YAAc9jB,EACnBvH,KAAK8M,UAGP4sB,EAAAx5B,UAAA8xB,WAAA,SAAW5gB,GACGpR,KAAK2f,cAAcxB,WAAU,SAAA7e,GACvC,OAAOA,EAAEkR,OAASY,EAAKZ,SAEd,IAIXxQ,KAAK2f,cAAard,EAAA,CAAI8O,GAASpR,KAAK2f,eACpC3f,KAAK0d,SAAS/O,KAAK,CAAE5M,MAAOqP,EAAM6gB,QAASjyB,KAAK2f,kBAGlD+Z,EAAAx5B,UAAAgyB,aAAA,SAAa9gB,GACX,IAAMzF,EAAM3L,KAAK2f,cAAcxB,WAAU,SAAA7e,GACvC,OAAOA,EAAEkR,OAASY,EAAKZ,QAGzBxQ,KAAK2f,cAAc9T,OAAOF,EAAK,GAC/B3L,KAAK2f,cAAard,EAAOtC,KAAK2f,eAE9B3f,KAAK2d,WAAWhP,KAAK,CAAE5M,MAAOqP,EAAM6gB,QAASjyB,KAAK2f,iBAGpD+Z,EAAAx5B,UAAAyxB,cAAA,mBACE3xB,KAAK2f,cAAard,EAAOtC,KAAK2f,mBAC9B,IAAoB,IAAA9I,EAAApV,EAAAzB,KAAK2f,eAAarO,EAAAuF,EAAA/U,QAAAwP,EAAAtP,KAAAsP,EAAAuF,EAAA/U,OAAE,CAAnC,IAAM4d,EAAKpO,EAAAvP,MACd/B,KAAK2d,WAAWhP,KAAK,CAAE5M,MAAO2d,EAAOuS,QAAS,uGAEhDjyB,KAAK2f,cAAgB,IAGvB+Z,EAAAx5B,UAAA+oB,QAAA,SAAQC,EAAO9X,GACb,OAAOA,EAAKZ,MA9RL1P,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,2CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,gDACQvJ,EAAA,CAARuJ,EAAAA,kDACQvJ,EAAA,CAARuJ,EAAAA,kDACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,4CACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,yCAESvJ,EAAA,CAAT4M,EAAAA,yCACS5M,EAAA,CAAT4M,EAAAA,2CAEgC5M,EAAA,CAAhCqxB,EAAAA,aAAa,0DAgFdrxB,EAAA,CADC0J,EAAAA,aAAa,+CAjHHkvB,EAAoB54B,EAAA,CAzGhC2J,EAAAA,UAAU,CACTC,SAAU,0BACVC,SAAU,03FAqFViD,gBAAiBC,EAAAA,wBAAwBC,OACzClD,cAAeC,EAAAA,kBAAkBC,KACjCyB,WAAY,CACVwB,EAAAA,QAAQ,iBAAkB,CACxBC,EAAAA,WAAW,SAAU,CACnBC,EAAAA,MAAM,CACJC,QAAS,IAEXC,EAAAA,QACE,IACAF,EAAAA,MAAM,CACJC,QAAS,8mDAORwrB,IAA6BxqB,iBCpE1C,SAAA4rB,IAYW96B,KAAA4Z,iBAA2B,EAG1B5Z,KAAAuP,OAAS,IAAI9C,EAAAA,aACbzM,KAAA0d,SAAW,IAAIjR,EAAAA,aACfzM,KAAA2d,WAAa,IAAIlR,EAAAA,aA+H7B,OA1HEquB,EAAA56B,UAAA0M,YAAA,SAAYC,GACV7M,KAAK8M,UAGPguB,EAAA56B,UAAA4M,OAAA,WACE9M,KAAK+6B,QAAU/6B,KAAKg7B,cAGtBF,EAAA56B,UAAA86B,WAAA,WAAA,IAAAxxB,EAAAxJ,KACQue,EAAave,KAAKiR,KAAKT,KAE7B,OAAOxQ,KAAKiR,KAAKP,OACd0H,KAAI,SAAC9Y,EAAGkB,GACP,QAAmB,IAARlB,EAAEgT,QAAoC,IAARhT,EAAEkT,EAAmB,CAC5D,IAAMF,EAAIhT,EAAEgT,EACNE,EAAIlT,EAAEkT,EACNpR,EAAI9B,EAAE8B,EAEN+d,EAAS3V,EAAKwwB,OAAO54B,GAAK,GAC1Bod,EAAe9B,EAAYpd,EAAEkR,MAE7B8N,EAAyB,WAApB9U,EAAKgxB,WAA0BhxB,EAAKiV,OAAOC,OAAOlM,IAAMhJ,EAAKiV,OAAOjM,GACzEoM,EAAyB,WAApBpV,EAAKixB,WAA0BjxB,EAAKqV,OAAOH,OAAOpM,IAAM9I,EAAKqV,OAAOvM,GAEzEqM,EAAkC,WAA1BnV,EAAKwV,OAAOvR,UAAyBjE,EAAKwV,OAAOC,SAAS7d,GAAKoI,EAAKwV,OAAOC,SAASV,GAE5FkB,GAAYjW,EAAKmW,cAAchf,QAAgB6I,EAAKiW,SAAS,CAAEjP,KAAM+N,IACrErQ,EAAUuR,EAAW,EAAI,GAU/B,MAAO,CACLxO,KATWzR,OAAOa,OAAO,GAAIf,EAAG,CAChCoR,OAAQ6N,EACR/N,KAAMlR,EAAEkR,KACRzO,MAAOzC,EAAEgT,EACTE,EAAGlT,EAAEkT,EACL2M,OAAQ7f,EAAE8B,IAKVoR,EAACA,EACDF,EAACA,EACDlR,EAACA,EACD8d,WAAY,CAAC,eAAe1e,GAC5BuB,MAAOuQ,EACP/B,MAAOiC,EACP8L,GAAEA,EACFM,GAAEA,EACFO,OAAMA,EACNX,aAAYA,EACZG,MAAKA,EACLzQ,QAAOA,EACPqQ,WAAUA,EACVkB,SAAQA,EACRrN,UAAW,aAAakM,EAAE,IAAIM,EAAE,SAIrC4I,QAAO,SAAAxJ,GAAU,YAAWha,IAAXga,MAGtB8c,EAAA56B,UAAAof,eAAA,SAAetB,GACb,IAAMid,OAAgC,IAAbjd,EAAO5c,EAC1B85B,EAAkBld,EAAOQ,cAAgBR,EAAOQ,aAAa7d,OAC7Dw6B,EAAgBnd,EAAOO,YAAcP,EAAOO,WAAW5d,OAEvDy6B,EAAcH,EAAYve,EAAYsB,EAAO5c,GAAK,GAClDi6B,EAAar7B,KAAKq7B,YAAkC,KAApBr7B,KAAKq7B,WAAuBr7B,KAAKq7B,WAAU,IAAM,GACjFC,EAAat7B,KAAKs7B,YAAkC,KAApBt7B,KAAKs7B,WAAuBt7B,KAAKs7B,WAAU,IAAM,GACjF9oB,EAAIkK,EAAYsB,EAAOxL,GACvBF,EAAIoK,EAAYsB,EAAO1L,GACvB9B,EACJ2qB,GAAiBD,EACVld,EAAOO,WAAU,MAAMP,EAAOQ,aACjCR,EAAOO,WAAaP,EAAOQ,aAIjC,MAAO,YAFL2c,GAAiBD,EAAkB,+BAA+Bve,GAAYnM,GAAK,UAAY,IAGjF,wDAEHmM,GAAY0e,GAAW,YAAY1e,GAAYnK,GAAE,0BACjDmK,GAAY2e,GAAW,YAAY3e,GAAYrK,GAAE,8DAGxDqK,GAAYye,GAAY,yBAKhCN,EAAA56B,UAAAsf,QAAA,SAAQvO,GACNjR,KAAKuP,OAAOZ,KAAKsC,IAGnB6pB,EAAA56B,UAAAuf,SAAA,SAASC,GACP,QAAK1f,KAAK2f,oBAIM3b,IAHHhE,KAAK2f,cAAcC,MAAK,SAAAtgB,GACnC,OAAOogB,EAAMlP,OAASlR,EAAEkR,SAK5BsqB,EAAA56B,UAAAqO,UAAA,SAAUyP,GACR,OAAIhe,KAAK2f,cAAchf,OAAS,EACvBX,KAAKyf,SAAS,CAAEjP,KAAMwN,EAAOO,aAGZ,IAAnBP,EAAO9P,SAGhB4sB,EAAA56B,UAAA2f,eAAA,SAAe7B,GACbA,EAAOJ,YAAa,EACpB5d,KAAK0d,SAAS/O,KAAK,CAAE6B,KAAMxQ,KAAKiR,KAAKT,QAGvCsqB,EAAA56B,UAAA4f,iBAAA,SAAiB9B,GACfA,EAAOJ,YAAa,EACpB5d,KAAK2d,WAAWhP,KAAK,CAAE6B,KAAMxQ,KAAKiR,KAAKT,QAGzCsqB,EAAA56B,UAAA+oB,QAAA,SAAQC,EAAOlL,GACb,OAAUA,EAAO/M,KAAKP,OAAM,IAAIsN,EAAO/M,KAAKT,MA7IrC1P,EAAA,CAARuJ,EAAAA,oCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,4CACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,+CAESvJ,EAAA,CAAT4M,EAAAA,uCACS5M,EAAA,CAAT4M,EAAAA,yCACS5M,EAAA,CAAT4M,EAAAA,2CAjBUotB,EAAqBh6B,EAAA,CA7CjC2J,EAAAA,UAAU,CACTC,SAAU,8BACVC,SAAU,ihCA8BViD,gBAAiBC,EAAAA,wBAAwBC,OACzCvB,WAAY,CACVwB,EAAAA,QAAQ,iBAAkB,CACxBC,EAAAA,WAAW,SAAU,CACnBC,EAAAA,MAAM,CACJC,QAAS,EACTkE,UAAW,aAEbjE,EAAAA,QAAQ,IAAKF,EAAAA,MAAM,CAAEC,QAAS,EAAGkE,UAAW,sBAKvC0oB,oBChDb,SAAAS,KAAgC,OAAnBA,EAAiBz6B,EAAA,CAL7BkY,EAAAA,SAAS,CACRC,QAAS,CAAC+R,IACV7R,aAAc,CAACugB,GAAsBoB,IACrC1hB,QAAS,CAACsgB,GAAsBoB,OAErBS,oBCgDX,SAAAC,EAAYh4B,GAfHxD,KAAAkhB,UAAoB,EACpBlhB,KAAAuM,YAAsB,EAErBvM,KAAAuP,OAAS,IAAI9C,EAAAA,aACbzM,KAAA0d,SAAW,IAAIjR,EAAAA,aACfzM,KAAA2d,WAAa,IAAIlR,EAAAA,aAWzBzM,KAAKwD,QAAUA,EAAQC,cA2D3B,OAxDE+3B,EAAAt7B,UAAA0M,YAAA,SAAYC,GACV7M,KAAKoS,UAAY,aAAapS,KAAKwS,EAAC,MAAMxS,KAAKsS,EAAC,IAEhDtS,KAAKghB,aAAe,GACpBhhB,KAAK8d,WAAa,OAAST,KAAKtI,WAChC/U,KAAKy7B,YAAc,QAAQz7B,KAAK8d,WAAU,IAC1C9d,KAAKof,cAAgBpf,KAAKqf,mBAEtBrf,KAAKuM,YACPvM,KAAKqhB,iBAITma,EAAAt7B,UAAAmf,iBAAA,WACE,MAAO,CACL,CACE9M,OAAQ,EACRoM,MAAO3e,KAAKoW,KACZlI,QAASlO,KAAKghB,cAEhB,CACEzO,OAAQ,IACRoM,MAAO3e,KAAKoW,KACZlI,QAAS,KAKfstB,EAAAt7B,UAAAmhB,cAAA,WACe9R,EAAAA,OAAOvP,KAAKwD,SAAS+L,OAAO,SACpCqS,KAAK,UAAW,GACrB5hB,KAAK07B,wBAGPF,EAAAt7B,UAAAw7B,qBAAA,WACensB,EAAAA,OAAOvP,KAAKwD,SAAS+L,OAAO,SAGtCvB,aACApH,SAAS,KACTgb,KAAK,UAAW,IAGrB4Z,EAAAt7B,UAAAsf,QAAA,WACExf,KAAKuP,OAAOZ,KAAK3O,KAAKiR,OAIxBuqB,EAAAt7B,UAAAib,aAAA,WACEnb,KAAK0d,SAAS/O,KAAK3O,KAAKiR,OAI1BuqB,EAAAt7B,UAAAmb,aAAA,WACErb,KAAK2d,WAAWhP,KAAK3O,KAAKiR,gDA1DP9G,EAAAA,cAtBZrJ,EAAA,CAARuJ,EAAAA,oCACQvJ,EAAA,CAARuJ,EAAAA,iCACQvJ,EAAA,CAARuJ,EAAAA,iCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,oCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,0CAESvJ,EAAA,CAAT4M,EAAAA,uCACS5M,EAAA,CAAT4M,EAAAA,yCACS5M,EAAA,CAAT4M,EAAAA,2CA8DD5M,EAAA,CADC0J,EAAAA,aAAa,gDAMd1J,EAAA,CADC0J,EAAAA,aAAa,gDA/EHgxB,EAAoB16B,EAAA,CApBhC2J,EAAAA,UAAU,CACTC,SAAU,8BACVC,SAAU,ieAgBViD,gBAAiBC,EAAAA,wBAAwBC,UAE9B0tB,oBCMb,SAAAG,IAMW37B,KAAA4Z,iBAA2B,EAG3B5Z,KAAAuM,YAAsB,EAErBvM,KAAAuP,OAAS,IAAI9C,EAAAA,aACbzM,KAAA0d,SAA8B,IAAIjR,EAAAA,aAClCzM,KAAA2d,WAAgC,IAAIlR,EAAAA,aA0DhD,OAtDEkvB,EAAAz7B,UAAA2d,SAAA,WACO7d,KAAKi4B,cACRj4B,KAAKi4B,YAAcj4B,KAAKsf,iBAI5Bqc,EAAAz7B,UAAA0M,YAAA,SAAYC,GACV7M,KAAK8M,UAGP6uB,EAAAz7B,UAAA4M,OAAA,WACE9M,KAAK47B,MAAQ57B,KAAK67B,YAGpBF,EAAAz7B,UAAA27B,SAAA,WAAA,IAAAryB,EAAAxJ,KACQ47B,EAAQ,GAsBd,OApBA57B,KAAKiR,KAAKmH,KAAI,SAAA0jB,GACZA,EAAIprB,OAAO0H,KAAI,SAAA2jB,GACb,IAAMh6B,EAAQg6B,EAAKh6B,MACnBg6B,EAAKrrB,OAASorB,EAAItrB,KAElBorB,EAAMx5B,KAAK,CACT05B,IAAGA,EACHC,KAAIA,EACJvpB,EAAGhJ,EAAKiV,OAAOqd,EAAItrB,MACnB8B,EAAG9I,EAAKqV,OAAOkd,EAAKvrB,MACpB9I,MAAO8B,EAAKiV,OAAO7J,YACnBrN,OAAQiC,EAAKqV,OAAOjK,YACpBwB,KAAM5M,EAAKwV,OAAOC,SAASld,GAC3BkP,KAAMlP,EACNwO,MAAOmM,EAAYqf,EAAKvrB,MACxBE,OAAQorB,EAAItrB,aAKXorB,GAGTD,EAAAz7B,UAAAof,eAAA,SAAevV,OAAEwG,EAAAxG,EAAAwG,MAAOU,EAAAlH,EAAAkH,KACtB,MAAO,uCACyB0L,GAFJ5S,EAAA2G,QAEuB,MAAMiM,GAAYpM,GAAM,4CAC7CU,EAAKuD,iBAAgB,iBAIrDmnB,EAAAz7B,UAAA+oB,QAAA,SAAQC,EAAO9X,GACb,OAAOA,EAAK6mB,aAGd0D,EAAAz7B,UAAAsf,QAAA,SAAQvO,GACNjR,KAAKuP,OAAOZ,KAAKsC,IApEVnQ,EAAA,CAARuJ,EAAAA,oCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,2CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,0CAESvJ,EAAA,CAAT4M,EAAAA,uCACS5M,EAAA,CAAT4M,EAAAA,yCACS5M,EAAA,CAAT4M,EAAAA,2CAbUiuB,EAAuB76B,EAAA,CA5BnC2J,EAAAA,UAAU,CACTC,SAAU,qCACVC,SAAU,ivBAwBViD,gBAAiBC,EAAAA,wBAAwBC,UAE9B6tB,qBC6Cb,SAAAK,IAAA,IAAAxyB,EAAA,OAAA4C,GAAAA,EAAAvL,MAAAb,KAAAU,YAAAV,YAEWwJ,EAAA8kB,YAAsB,SACtB9kB,EAAAqiB,eAAyB,QAQzBriB,EAAAyyB,aAAkC,EAClCzyB,EAAAklB,gBAA0B,EAC1BllB,EAAAmlB,gBAA0B,EAC1BnlB,EAAAolB,kBAA4B,EAC5BplB,EAAAqlB,mBAA6B,GAC7BrlB,EAAAslB,mBAA6B,GAK7BtlB,EAAAoQ,iBAA2B,EAI3BpQ,EAAAmW,cAAuB,GAEtBnW,EAAAkU,SAA8B,IAAIjR,EAAAA,aAClCjD,EAAAmU,WAAgC,IAAIlR,EAAAA,aAe9CjD,EAAAyI,OAAS,CAAC,GAAI,GAAI,GAAI,IACtBzI,EAAA6hB,YAAsB,EACtB7hB,EAAA8hB,WAAqB,EAErB9hB,EAAAiE,UAAoB,WA6NtB,OA5QsC3N,EAAAk8B,EAAA5vB,GAiDpC4vB,EAAA97B,UAAA4M,OAAA,WA0BE,GAzBAV,EAAAlM,UAAM4M,OAAMlM,KAAAZ,MAEZA,KAAKqQ,cAELrQ,KAAKknB,QAAUlnB,KAAKmnB,aACpBnnB,KAAKyvB,QAAUzvB,KAAK0vB,aACpB1vB,KAAKu2B,YAAcv2B,KAAK01B,iBAExB11B,KAAKyN,UAAYygB,GAAaluB,KAAKu2B,aAAa,GAEhDv2B,KAAKgQ,KAAOib,GAAwB,CAClCvjB,MAAO1H,KAAK0H,MACZH,OAAQvH,KAAKuH,OACb2jB,QAASlrB,KAAKiS,OACdkZ,UAAWnrB,KAAKkvB,MAChB9D,UAAWprB,KAAKmvB,MAChB9D,YAAarrB,KAAKqrB,YAClBC,WAAYtrB,KAAKsrB,WACjBC,WAAYvrB,KAAKovB,eACjB3D,WAAYzrB,KAAKqvB,eACjB/iB,WAAYtM,KAAKsvB,OACjBtiB,WAAYhN,KAAKyN,UACjBoe,eAAgB7rB,KAAK6rB,iBAGA,WAAnB7rB,KAAKyN,UAAwB,CAC/B,IAAI0H,EAAMnV,KAAKmV,IACXzC,EAAM1S,KAAK0S,IACV1S,KAAKmV,MACRA,EAAM9H,KAAK8H,IAAGtU,MAARwM,KAAI/K,EAAA,CAAK,GAAMtC,KAAKu2B,eAEvBv2B,KAAK0S,MACRA,EAAMrF,KAAKqF,IAAG7R,MAARwM,KAAI/K,EAAQtC,KAAKu2B,eAEzBv2B,KAAKu2B,YAAc,CAACphB,EAAKzC,GAG3B1S,KAAKye,OAASze,KAAKonB,YACnBpnB,KAAK6e,OAAS7e,KAAK6vB,YAEnB7vB,KAAK+vB,YACL/vB,KAAKkN,cAAgBlN,KAAKgwB,mBAE1BhwB,KAAKoS,UAAY,aAAapS,KAAKgQ,KAAKgc,QAAO,MAAMhsB,KAAKiS,OAAO,GAAE,IACnEjS,KAAKk8B,MAAQl8B,KAAKm8B,YAGpBH,EAAA97B,UAAAinB,WAAA,mBACQxR,EAAS,OACf,IAAoB,IAAAkB,EAAApV,EAAAzB,KAAK8P,SAAOwB,EAAAuF,EAAA/U,QAAAwP,EAAAtP,KAAAsP,EAAAuF,EAAA/U,OAAE,CAA7B,IAAMqjB,EAAK7T,EAAAvP,MACT4T,EAAOiS,SAASzC,EAAM3U,OACzBmF,EAAOvT,KAAK+iB,EAAM3U,wGAItB,OAAOmF,GAGTqmB,EAAA97B,UAAAwvB,WAAA,uBACQ/Z,EAAS,OAEf,IAAoB,IAAArE,EAAA7P,EAAAzB,KAAK8P,SAAO0B,EAAAF,EAAAxP,QAAA0P,EAAAxP,KAAAwP,EAAAF,EAAAxP,OAAE,CAA7B,IAAMqjB,EAAK3T,EAAAzP,UACd,IAAgB,IAAA2lB,GAAAuO,OAAA,EAAAx0B,EAAA0jB,EAAMzU,SAAMiX,EAAAD,EAAA5lB,QAAA6lB,EAAA3lB,KAAA2lB,EAAAD,EAAA5lB,OAAE,CAAzB,IAAMxC,EAACqoB,EAAA5lB,MACL4T,EAAOiS,SAAStoB,EAAEkR,OACrBmF,EAAOvT,KAAK9C,EAAEkR,2MAKpB,OAAOmF,GAGTqmB,EAAA97B,UAAAw1B,eAAA,uBACQ/f,EAAS,OAEf,IAAoB,IAAArE,EAAA7P,EAAAzB,KAAK8P,SAAO0B,EAAAF,EAAAxP,QAAA0P,EAAAxP,KAAAwP,EAAAF,EAAAxP,OAAE,CAA7B,IAAMqjB,EAAK3T,EAAAzP,UACd,IAAgB,IAAA2lB,GAAAwO,OAAA,EAAAz0B,EAAA0jB,EAAMzU,SAAMiX,EAAAD,EAAA5lB,QAAA6lB,EAAA3lB,KAAA2lB,EAAAD,EAAA5lB,OAAE,CAAzB,IAAMxC,EAACqoB,EAAA5lB,MACL4T,EAAOiS,SAAStoB,EAAEyC,QACrB4T,EAAOvT,KAAK9C,EAAEyC,4MAKpB,OAAO4T,GAaTqmB,EAAA97B,UAAAk8B,aAAA,SAAar6B,EAAiDmnB,EAAWmT,EAAWC,GAalF,YAb4D,IAAApT,IAAAA,EAAA,GACvC,iBAAVnnB,IACTA,EAAQA,EACL6a,QAAQ,IAAK,IACbA,QAAQ,IAAK,IACbA,QAAQ,KAAM,IAEdA,QAAQ,IAAK,KAENgL,SAAS,OACjB7lB,EAAQA,EAAMw6B,MAAM,MAGpB58B,MAAMqgB,QAAQje,IAA2B,iBAAVmnB,EAC1BlpB,KAAKo8B,aAAar6B,EAAMmnB,GAAQ,KAAMmT,EAAGC,GAE7B,iBAAVv6B,GAAsBA,EAAM6lB,SAAS,MACtC7lB,EAAM6a,QAAQ,IAAK,IAAM,IAE5Byf,GAAKC,GAAKv6B,EAAQ,IAG3Bi6B,EAAA97B,UAAAknB,UAAA,WACE,IAAMoV,EAAIx8B,KAAKo8B,aAAap8B,KAAKi8B,aAAc,EAAGj8B,KAAKknB,QAAQvmB,OAAQX,KAAKgQ,KAAKtI,OACjF,OAAO0lB,EAAAA,YACJ2H,WAAW,CAAC,EAAG/0B,KAAKgQ,KAAKtI,QACzBiO,OAAO3V,KAAKknB,SACZ1G,aAAagc,IAGlBR,EAAA97B,UAAA2vB,UAAA,WACE,IAAM2M,EAAIx8B,KAAKo8B,aAAap8B,KAAKi8B,aAAc,EAAGj8B,KAAKyvB,QAAQ9uB,OAAQX,KAAKgQ,KAAKzI,QACjF,OAAO6lB,EAAAA,YACJ2H,WAAW,CAAC/0B,KAAKgQ,KAAKzI,OAAQ,IAC9BoO,OAAO3V,KAAKyvB,SACZjP,aAAagc,IAGlBR,EAAA97B,UAAAi8B,SAAA,WAAA,IAAA3yB,EAAAxJ,KACQk8B,EAAQ,GAed,OAbAl8B,KAAKknB,QAAQ9O,KAAI,SAAA8M,GACf1b,EAAKimB,QAAQrX,KAAI,SAAAqkB,GACfP,EAAM95B,KAAK,CACToQ,EAAGhJ,EAAKiV,OAAOyG,GACf5S,EAAG9I,EAAKqV,OAAO4d,GACfC,GAAI,EACJh1B,MAAO8B,EAAKiV,OAAO7J,YACnBrN,OAAQiC,EAAKqV,OAAOjK,YACpBwB,KAAM,iCAKL8lB,GAGTF,EAAA97B,UAAAsf,QAAA,SAAQvO,GACNjR,KAAKuP,OAAOZ,KAAKsC,IAGnB+qB,EAAA97B,UAAA6vB,UAAA,WACE/vB,KAAKgf,OAAS,IAAIoN,GAAYpsB,KAAKqP,OAAQrP,KAAKyN,UAAWzN,KAAKu2B,cAGlEyF,EAAA97B,UAAA8vB,iBAAA,WACE,MAAO,CACLviB,UAAWzN,KAAKyN,UAChBkI,OAAQ3V,KAAKu2B,YACbvX,OAA2B,YAAnBhf,KAAKyN,UAA0BzN,KAAKgf,OAAShf,KAAKgf,OAAO5K,MACjEgI,MAA0B,YAAnBpc,KAAKyN,UAA0BzN,KAAKsuB,iBAActqB,EACzDsF,SAAUtJ,KAAK6rB,iBAInBmQ,EAAA97B,UAAA4xB,iBAAA,SAAiB/nB,OAAErC,EAAAqC,EAAArC,MACjB1H,KAAKsrB,WAAa5jB,EAClB1H,KAAK8M,UAGPkvB,EAAA97B,UAAA6xB,kBAAA,SAAkBhoB,OAAExC,EAAAwC,EAAAxC,OAClBvH,KAAKqrB,YAAc9jB,EACnBvH,KAAK8M,UAGPkvB,EAAA97B,UAAA8xB,WAAA,SAAW9V,EAAOiJ,EAAO+P,QAAA,IAAAA,IAAAA,GAAA,GACvB,IAAM9jB,EAAO5R,OAAOa,OAAO,GAAI6b,GAC3BiJ,IACF/T,EAAKV,OAASyU,EAAM3U,MAGtB,IAAMsY,EAAQ9oB,KAAK8P,QAChBsI,KAAI,SAAA9H,GAAK,OAAAA,EAAEI,UACX2lB,OACA7O,QAAO,SAAAhnB,GACN,OAAI00B,EACK10B,EAAE+P,QAAUa,EAAKZ,KAEjBhQ,EAAEgQ,OAASY,EAAKZ,MAAQhQ,EAAEkQ,SAAWU,EAAKV,UAIvD1Q,KAAK2f,cAAard,EAAOwmB,GACzB9oB,KAAK0d,SAAS/O,KAAK,CAAE5M,MAAOqP,EAAM6gB,QAASjyB,KAAK2f,iBAGlDqc,EAAA97B,UAAAgyB,aAAA,SAAahW,EAAOiJ,EAAO+P,QAAA,IAAAA,IAAAA,GAAA,GACzB,IAAM9jB,EAAO5R,OAAOa,OAAO,GAAI6b,GAC3BiJ,IACF/T,EAAKV,OAASyU,EAAM3U,MAGtBxQ,KAAK2f,cAAgB3f,KAAK2f,cAAc6H,QAAO,SAAAhnB,GAC7C,OAAI00B,EACK10B,EAAE+P,QAAUa,EAAKZ,OAEfhQ,EAAEgQ,OAASY,EAAKZ,MAAQhQ,EAAEkQ,SAAWU,EAAKV,WAIvD1Q,KAAK2d,WAAWhP,KAAK,CAAE5M,MAAOqP,EAAM6gB,QAASjyB,KAAK2f,iBAzQ3C7e,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,2CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,4CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,gDACQvJ,EAAA,CAARuJ,EAAAA,kDACQvJ,EAAA,CAARuJ,EAAAA,kDACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,2CACQvJ,EAAA,CAARuJ,EAAAA,mCACQvJ,EAAA,CAARuJ,EAAAA,mCACQvJ,EAAA,CAARuJ,EAAAA,6CAESvJ,EAAA,CAAT4M,EAAAA,yCACS5M,EAAA,CAAT4M,EAAAA,2CAEgC5M,EAAA,CAAhCqxB,EAAAA,aAAa,0DA9BH6J,EAAgBl7B,EAAA,CArE5B2J,EAAAA,UAAU,CACTC,SAAU,sBACVC,SAAU,qhEA+DViD,gBAAiBC,EAAAA,wBAAwBC,OAEzClD,cAAeC,EAAAA,kBAAkBC,ymDAEtBkxB,IAAyB9sB,iBC3EtC,SAAAytB,KAA4B,OAAfA,EAAa77B,EAAA,CALzBkY,EAAAA,SAAS,CACRC,QAAS,CAAC+R,IACV7R,aAAc,CAACqiB,GAAsBG,GAAyBK,IAC9D5iB,QAAS,CAACoiB,GAAsBG,GAAyBK,OAE9CW,oBC4CX,SAAAC,EAAoBp5B,GAAAxD,KAAAwD,QAAAA,EARXxD,KAAAoW,KAAe,OACfpW,KAAAuM,YAAsB,EAErBvM,KAAAuP,OAAS,IAAI9C,EAAAA,aAEvBzM,KAAAmhB,aAAuB,EA0BzB,OArBEyb,EAAA18B,UAAA0M,YAAA,SAAYC,GACL7M,KAAKmhB,YAIRnhB,KAAKwhB,gBAHLxhB,KAAKmhB,aAAc,EACnBnhB,KAAK68B,YAAc78B,KAAK6hB,OAM5B+a,EAAA18B,UAAAshB,aAAA,WACE,IAAMG,EAAOpS,EAAAA,OAAOvP,KAAKwD,QAAQC,eAAe8L,OAAO,SAEnDvP,KAAKuM,WACPoV,EACG3T,aACApH,SAAS,KACTgb,KAAK,IAAK5hB,KAAK6hB,MAElBF,EAAKC,KAAK,IAAK5hB,KAAK6hB,gDApBK1X,EAAAA,cAXpBrJ,EAAA,CAARuJ,EAAAA,oCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,oCACQvJ,EAAA,CAARuJ,EAAAA,oCACQvJ,EAAA,CAARuJ,EAAAA,0CAESvJ,EAAA,CAAT4M,EAAAA,uCAPUkvB,EAAa97B,EAAA,CA9BzB2J,EAAAA,UAAU,CACTC,SAAU,qBACVC,SAAU,0MAUViD,gBAAiBC,EAAAA,wBAAwBC,OACzCvB,WAAY,CACVwB,EAAAA,QAAQ,iBAAkB,CACxBC,EAAAA,WAAW,SAAU,CACnBC,EAAAA,MAAM,CACJ6uB,gBAAiB,IACjBC,iBAAkB,MAEpB5uB,EAAAA,QACE,IACAF,EAAAA,MAAM,CACJ8uB,iBAAkB,aAOjBH,qBCoIb,SAAAI,IAAA,IAAAxzB,EAAA,OAAA4C,GAAAA,EAAAvL,MAAAb,KAAAU,YAAAV,YAEWwJ,EAAA8kB,YAAsB,SACtB9kB,EAAAqiB,eAAyB,QAUzBriB,EAAA+J,eAAyB,EACzB/J,EAAAglB,MAAaC,EAAAA,YACbjlB,EAAAmW,cAAuB,GAGvBnW,EAAAklB,gBAA0B,EAC1BllB,EAAAmlB,gBAA0B,EAC1BnlB,EAAAolB,kBAA4B,EAC5BplB,EAAAqlB,mBAA6B,GAC7BrlB,EAAAslB,mBAA6B,GAK7BtlB,EAAAulB,cAAwB,EACxBvlB,EAAAoQ,iBAA2B,EAC3BpQ,EAAAgO,cAAwB,EAExBhO,EAAA+N,eAAyB,EAMxB/N,EAAAkU,SAA8B,IAAIjR,EAAAA,aAClCjD,EAAAmU,WAAgC,IAAIlR,EAAAA,aAmB9CjD,EAAAyI,OAAS,CAAC,GAAI,GAAI,GAAI,IAEtBzI,EAAA6hB,YAAsB,EACtB7hB,EAAA8hB,WAAqB,EAKrB9hB,EAAAwlB,eAAyB,GAKzBxlB,EAAAylB,gBAA0B,KAuQ5B,OA7UwCnvB,EAAAk9B,EAAA5wB,GAwEtC4wB,EAAA98B,UAAA4M,OAAA,WACEV,EAAAlM,UAAM4M,OAAMlM,KAAAZ,MAEZA,KAAKgQ,KAAOib,GAAwB,CAClCvjB,MAAO1H,KAAK0H,MACZH,OAAQvH,KAAKuH,OACb2jB,QAASlrB,KAAKiS,OACdkZ,UAAWnrB,KAAKkvB,MAChB9D,UAAWprB,KAAKmvB,MAChB9D,YAAarrB,KAAKqrB,YAClBC,WAAYtrB,KAAKsrB,WACjBC,WAAYvrB,KAAKovB,eACjB3D,WAAYzrB,KAAKqvB,eACjB/iB,WAAYtM,KAAKsvB,OACjBtiB,WAAYhN,KAAKsP,WACjBuc,eAAgB7rB,KAAK6rB,iBAGnB7rB,KAAKuvB,WACPvvB,KAAKgQ,KAAKzI,QAAUvH,KAAKgvB,eAAiBhvB,KAAKiS,OAAO,GAAKjS,KAAKivB,iBAGlEjvB,KAAKknB,QAAUlnB,KAAKmnB,aAChBnnB,KAAKwvB,iBACPxvB,KAAKknB,QAAUlnB,KAAKwvB,gBAGtBxvB,KAAKyvB,QAAUzvB,KAAK0vB,aACpB1vB,KAAK2vB,aAAe3vB,KAAK4vB,kBAEzB5vB,KAAKye,OAASze,KAAKonB,UAAUpnB,KAAKknB,QAASlnB,KAAKgQ,KAAKtI,OACrD1H,KAAK6e,OAAS7e,KAAK6vB,UAAU7vB,KAAKyvB,QAASzvB,KAAKgQ,KAAKzI,QAErDvH,KAAK8vB,iBAEL9vB,KAAK+vB,YACL/vB,KAAKkN,cAAgBlN,KAAKgwB,mBAE1BhwB,KAAKoS,UAAY,aAAapS,KAAKgQ,KAAKgc,QAAO,MAAMhsB,KAAKiS,OAAO,GAAE,IAEnEjS,KAAKiwB,WAAa,OAAS5S,KAAKtI,WAChC/U,KAAKkwB,SAAW,QAAQlwB,KAAKiwB,WAAU,KAGzC+M,EAAA98B,UAAA4vB,eAAA,WACM9vB,KAAKuvB,WACPvvB,KAAKmwB,cAAgBnwB,KAAKgQ,KAAKtI,MAC/B1H,KAAKowB,gBAAkBpwB,KAAKmnB,aAC5BnnB,KAAKqwB,eAAiBrwB,KAAKonB,UAAUpnB,KAAKowB,gBAAiBpwB,KAAKmwB,eAChEnwB,KAAKswB,eAAiBtwB,KAAK6vB,UAAU7vB,KAAKyvB,QAASzvB,KAAKgvB,gBACxDhvB,KAAKuwB,kBAAoB,aAAavwB,KAAKgQ,KAAKgc,QAAO,MAAMhsB,KAAKiS,OAAO,GAAE,MAI/E+qB,EAAA98B,UAAAinB,WAAA,WACE,IAAIM,EAASkG,GAAuB3tB,KAAK8P,SAEzC9P,KAAKyN,UAAYygB,GAAazG,GAC9B,IAMItS,EACAzC,EAPAiD,EAAS,GAgCb,MA9BuB,WAAnB3V,KAAKyN,YACPga,EAASA,EAAOrP,KAAI,SAAAmN,GAAK,OAAA7G,OAAO6G,OAKX,SAAnBvlB,KAAKyN,WAA2C,WAAnBzN,KAAKyN,YACpC0H,EAAMnV,KAAKwwB,UAAYxwB,KAAKwwB,UAAYnjB,KAAK8H,IAAGtU,MAARwM,KAAI/K,EAAQmlB,IAEpD/U,EAAM1S,KAAKywB,UAAYzwB,KAAKywB,UAAYpjB,KAAKqF,IAAG7R,MAARwM,KAAI/K,EAAQmlB,KAG/B,SAAnBznB,KAAKyN,WACPkI,EAAS,CAAC,IAAItP,KAAK8O,GAAM,IAAI9O,KAAKqM,IAClC1S,KAAK8lB,KAAOxjB,EAAImlB,GAAQiJ,MAAK,SAACC,EAAGpxB,GAC/B,IAAMqxB,EAAQD,EAAEE,UACVC,EAAQvxB,EAAEsxB,UAChB,OAAID,EAAQE,EAAc,EACtBA,EAAQF,GAAe,EACpB,MAEmB,WAAnB5wB,KAAKyN,WACdkI,EAAS,CAACR,EAAKzC,GAEf1S,KAAK8lB,KAAOxjB,EAAImlB,GAAQiJ,MAAK,SAACC,EAAGpxB,GAAM,OAAAoxB,EAAIpxB,OAE3CoW,EAAS8R,EACTznB,KAAK8lB,KAAO2B,GAGP9R,GAGTqnB,EAAA98B,UAAAwvB,WAAA,uBACQ/Z,EAAS,OACf,IAAsB,IAAArE,EAAA7P,EAAAzB,KAAK8P,SAAO0B,EAAAF,EAAAxP,QAAA0P,EAAAxP,KAAAwP,EAAAF,EAAAxP,OAAE,CAA/B,IAAMgO,EAAO0B,EAAAzP,UAChB,IAAgB,IAAA2lB,GAAAnW,OAAA,EAAA9P,EAAAqO,EAAQY,SAAMiX,EAAAD,EAAA5lB,QAAA6lB,EAAA3lB,KAAA2lB,EAAAD,EAAA5lB,OAAE,CAA3B,IAAMxC,EAACqoB,EAAA5lB,MACN4T,EAAO/J,QAAQtM,EAAEyC,OAAS,GAC5B4T,EAAOvT,KAAK9C,EAAEyC,YAEFiC,IAAV1E,EAAE6V,MACJnV,KAAKi9B,UAAW,EACZtnB,EAAO/J,QAAQtM,EAAE6V,KAAO,GAC1BQ,EAAOvT,KAAK9C,EAAE6V,WAGJnR,IAAV1E,EAAEoT,MACJ1S,KAAKi9B,UAAW,EACZtnB,EAAO/J,QAAQtM,EAAEoT,KAAO,GAC1BiD,EAAOvT,KAAK9C,EAAEoT,2MAMtB,IAAM+U,EAAMnlB,EAAOqT,GASnB,OARK3V,KAAK+wB,WACRtJ,EAAOrlB,KAAK,GAOP,CAJKpC,KAAKgxB,UAAYhxB,KAAKgxB,UAAY3jB,KAAK8H,IAAGtU,MAARwM,KAAI/K,EAAQmlB,IAE9CznB,KAAKixB,UAAYjxB,KAAKixB,UAAY5jB,KAAKqF,IAAG7R,MAARwM,KAAI/K,EAAQmlB,MAK5DuV,EAAA98B,UAAA0vB,gBAAA,WACE,OAAO5vB,KAAK8P,QAAQsI,KAAI,SAAA9Y,GAAK,OAAAA,EAAEkR,SAGjCwsB,EAAA98B,UAAAknB,UAAA,SAAUzR,EAAQjO,GAChB,IAAI0M,EAqBJ,MAnBuB,SAAnBpU,KAAKyN,UACP2G,EAAQyT,EAAAA,YACL9I,MAAM,CAAC,EAAGrX,IACViO,OAAOA,GACkB,WAAnB3V,KAAKyN,WACd2G,EAAQ0T,EAAAA,cACL/I,MAAM,CAAC,EAAGrX,IACViO,OAAOA,GAEN3V,KAAK+uB,eACP3a,EAAQA,EAAM8c,SAEY,YAAnBlxB,KAAKyN,YACd2G,EAAQ2T,EAAAA,aACLhJ,MAAM,CAAC,EAAGrX,IACV4O,QAAQ,IACRX,OAAOA,IAGLvB,GAGT4oB,EAAA98B,UAAA2vB,UAAA,SAAUla,EAAQpO,GAChB,IAAM6M,EAAQ0T,EAAAA,cACX/I,MAAM,CAACxX,EAAQ,IACfoO,OAAOA,GAEV,OAAO3V,KAAK+uB,aAAe3a,EAAM8c,OAAS9c,GAG5C4oB,EAAA98B,UAAAsxB,aAAA,SAAa7b,GACX3V,KAAKwvB,eAAiB7Z,EACtB3V,KAAKknB,QAAUlnB,KAAKwvB,eACpBxvB,KAAKye,OAASze,KAAKonB,UAAUpnB,KAAKknB,QAASlnB,KAAKgQ,KAAKtI,QAGvDs1B,EAAA98B,UAAAuxB,sBAAA,SAAsBrgB,GACpBpR,KAAK0xB,gBAAkBtgB,EAAKrP,MAC5B/B,KAAK2xB,iBAIPqL,EAAA98B,UAAA0xB,YAAA,WACE5xB,KAAK0xB,gBAAkB,KACvB1xB,KAAK2xB,iBAGPqL,EAAA98B,UAAAsf,QAAA,SAAQvO,GACNjR,KAAKuP,OAAOZ,KAAKsC,IAGnB+rB,EAAA98B,UAAA+oB,QAAA,SAAQC,EAAO9X,GACb,OAAOA,EAAKZ,MAGdwsB,EAAA98B,UAAA6vB,UAAA,WACE,IAAIpa,EAEFA,EADsB,YAApB3V,KAAKsP,WACEtP,KAAK2vB,aAEL3vB,KAAKyvB,QAGhBzvB,KAAKgf,OAAS,IAAIoN,GAAYpsB,KAAKqP,OAAQrP,KAAKsP,WAAYqG,EAAQ3V,KAAKqsB,eAG3E2Q,EAAA98B,UAAA8vB,iBAAA,WACE,IAAM6B,EAAO,CACXpkB,UAAWzN,KAAKsP,WAChB0P,YAAQhb,EACR2R,OAAQ,GACRyG,WAAOpY,EACPsF,SAAUtJ,KAAK6rB,gBAUjB,MARuB,YAAnBgG,EAAKpkB,WACPokB,EAAKlc,OAAS3V,KAAK2vB,aACnBkC,EAAK7S,OAAShf,KAAKgf,OACnB6S,EAAKzV,MAAQpc,KAAKsuB,cAElBuD,EAAKlc,OAAS3V,KAAKyvB,QACnBoC,EAAK7S,OAAShf,KAAKgf,OAAO5K,OAErByd,GAGTmL,EAAA98B,UAAA4xB,iBAAA,SAAiB/nB,OAAErC,EAAAqC,EAAArC,MACjB1H,KAAKsrB,WAAa5jB,EAClB1H,KAAK8M,UAGPkwB,EAAA98B,UAAA6xB,kBAAA,SAAkBhoB,OAAExC,EAAAwC,EAAAxC,OAClBvH,KAAKqrB,YAAc9jB,EACnBvH,KAAK8M,UAGPkwB,EAAA98B,UAAA8xB,WAAA,SAAW5gB,GACTpR,KAAK2xB,gBAEO3xB,KAAK2f,cAAcxB,WAAU,SAAA7e,GACvC,OAAOA,EAAEkR,OAASY,EAAKZ,MAAQlR,EAAEyC,QAAUqP,EAAKrP,UAEvC,IAIX/B,KAAK2f,cAAgB,CAACvO,GACtBpR,KAAK0d,SAAS/O,KAAK,CAAE5M,MAAOqP,EAAM6gB,QAASjyB,KAAK2f,kBAGlDqd,EAAA98B,UAAAgyB,aAAA,SAAa9gB,GACX,IAAMzF,EAAM3L,KAAK2f,cAAcxB,WAAU,SAAA7e,GACvC,OAAOA,EAAEkR,OAASY,EAAKZ,MAAQlR,EAAEyC,QAAUqP,EAAKrP,SAGlD/B,KAAK2f,cAAc9T,OAAOF,EAAK,GAC/B3L,KAAK2f,cAAard,EAAOtC,KAAK2f,eAE9B3f,KAAK2d,WAAWhP,KAAK,CAAE5M,MAAOqP,EAAM6gB,QAASjyB,KAAK2f,iBAGpDqd,EAAA98B,UAAAyxB,cAAA,mBACE3xB,KAAK2f,cAAard,EAAOtC,KAAK2f,mBAC9B,IAAoB,IAAA9I,EAAApV,EAAAzB,KAAK2f,eAAarO,EAAAuF,EAAA/U,QAAAwP,EAAAtP,KAAAsP,EAAAuF,EAAA/U,OAAE,CAAnC,IAAM4d,EAAKpO,EAAAvP,MACd/B,KAAK2d,WAAWhP,KAAK,CAAE5M,MAAO2d,EAAOuS,QAAS,uGAEhDjyB,KAAK2f,cAAgB,IA1Ud7e,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,2CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,gDACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,gDACQvJ,EAAA,CAARuJ,EAAAA,kDACQvJ,EAAA,CAARuJ,EAAAA,kDACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,4CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,4CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,yCAESvJ,EAAA,CAAT4M,EAAAA,yCACS5M,EAAA,CAAT4M,EAAAA,2CAEgC5M,EAAA,CAAhCqxB,EAAAA,aAAa,0DACyBrxB,EAAA,CAAtCqxB,EAAAA,aAAa,sEA+MdrxB,EAAA,CADC0J,EAAAA,aAAa,+CAvPHwyB,EAAkBl8B,EAAA,CA1J9B2J,EAAAA,UAAU,CACTC,SAAU,wBACVC,SAAU,2hJAsIVC,cAAeC,EAAAA,kBAAkBC,KACjC8C,gBAAiBC,EAAAA,wBAAwBC,OACzCvB,WAAY,CACVwB,EAAAA,QAAQ,iBAAkB,CACxBC,EAAAA,WAAW,SAAU,CACnBC,EAAAA,MAAM,CACJC,QAAS,IAEXC,EAAAA,QACE,IACAF,EAAAA,MAAM,CACJC,QAAS,8mDAOR8uB,IAA2B9tB,iBCpHxC,SAAAguB,IAUWl9B,KAAAuM,YAAsB,EA2IjC,OA/HE2wB,EAAAh9B,UAAA0M,YAAA,SAAYC,GACV7M,KAAK8M,UAGPowB,EAAAh9B,UAAA4M,OAAA,WACE9M,KAAKm9B,kBAEL,IAAMlsB,EAAOjR,KAAKo9B,SAASp9B,KAAKiR,KAAKP,QAE/B2sB,EAAUr9B,KAAKs9B,mBACrBt9B,KAAK6hB,KAAOwb,EAAQpsB,IAAS,GAE7B,IAAMssB,EAAUv9B,KAAKw9B,mBAGrB,GAFAx9B,KAAKyhB,SAAW8b,EAAQtsB,IAAS,GAE7BjR,KAAKi9B,SAAU,CACjB,IAAMle,EAAQ/e,KAAKy9B,oBACnBz9B,KAAK09B,UAAY3e,EAAM9N,IAAS,GAGlC,GAAIjR,KAAKohB,YAAa,CACpBphB,KAAKqW,OAASrW,KAAKy7B,YACnB,IAAMhU,EAASznB,KAAKiR,KAAKP,OAAO0H,KAAI,SAAA9Y,GAAK,OAAAA,EAAEyC,SACrC2Q,EAAMrF,KAAKqF,IAAG7R,MAARwM,KAAI/K,EAAQmlB,IAEpB/U,IADQrF,KAAK8H,IAAGtU,MAARwM,KAAI/K,EAAQmlB,MAEtBznB,KAAKqW,OAASrW,KAAKgf,OAAOC,SAASvM,SAGrC1S,KAAKqW,OAASrW,KAAKgf,OAAOC,SAASjf,KAAKiR,KAAKT,OAIjD0sB,EAAAh9B,UAAAo9B,iBAAA,WAAA,IAAA9zB,EAAAxJ,KACE,OAAO29B,EAAAA,OACJnrB,GAAE,SAAAlT,GACD,IAAMiR,EAAQjR,EAAEkR,KAShB,MAPuB,SAAnBhH,EAAKiE,UACCjE,EAAKiV,OAAOlO,GACQ,WAAnB/G,EAAKiE,UACNjE,EAAKiV,OAAOC,OAAOnO,IAEnB/G,EAAKiV,OAAOlO,MAIvB+B,GAAE,SAAAhT,GAAK,OAAAkK,EAAKqV,OAAOvf,EAAEyC,UACrBysB,MAAMxuB,KAAKwuB,QAGhB0O,EAAAh9B,UAAAu9B,kBAAA,WAAA,IAAAj0B,EAAAxJ,KACE,OAAOyzB,EAAAA,OACJjhB,GAAE,SAAAlT,GACD,IAAMiR,EAAQjR,EAAEkR,KAShB,MAPuB,SAAnBhH,EAAKiE,UACCjE,EAAKiV,OAAOlO,GACQ,WAAnB/G,EAAKiE,UACNjE,EAAKiV,OAAOC,OAAOnO,IAEnB/G,EAAKiV,OAAOlO,MAIvBmjB,IAAG,SAAAp0B,GAAK,OAAAkK,EAAKqV,OAAwB,iBAAVvf,EAAE6V,IAAmB7V,EAAE6V,IAAM7V,EAAEyC,UAC1DgW,IAAG,SAAAzY,GAAK,OAAAkK,EAAKqV,OAAwB,iBAAVvf,EAAEoT,IAAmBpT,EAAEoT,IAAMpT,EAAEyC,UAC1DysB,MAAMxuB,KAAKwuB,QAGhB0O,EAAAh9B,UAAAs9B,iBAAA,WAAA,IAAAh0B,EAAAxJ,KAME,OAAOyzB,EAAAA,OACJjhB,GANe,SAAAlT,GAChB,IAAMiR,EAAQjR,EAAEkR,KAChB,OAAOhH,EAAKiV,OAAOlO,MAKlBmjB,IAAG,WAAM,OAAAlqB,EAAKqV,OAAOE,QAAQ,MAC7BhH,IAAG,SAAAzY,GAAK,OAAAkK,EAAKqV,OAAOvf,EAAEyC,UACtBysB,MAAMxuB,KAAKwuB,QAGhB0O,EAAAh9B,UAAAk9B,SAAA,SAASnsB,GASP,OAPEA,EADqB,WAAnBjR,KAAKyN,UACAglB,GAAWxhB,EAAM,QACI,SAAnBjR,KAAKyN,UACPulB,GAAW/hB,EAAM,QAEjB0hB,GAAa1hB,EAAM,OAAQ,MAAOjR,KAAKye,OAAO9I,WAMzDunB,EAAAh9B,UAAAi9B,gBAAA,WACE,GAA8B,WAA1Bn9B,KAAKgf,OAAOvR,UAAwB,CACtCzN,KAAKohB,aAAc,EACnBphB,KAAK8d,WAAa,OAAST,KAAKtI,WAChC/U,KAAKy7B,YAAc,QAAQz7B,KAAK8d,WAAU,IAC1C,IAAM2J,EAASznB,KAAKiR,KAAKP,OAAO0H,KAAI,SAAA9Y,GAAK,OAAAA,EAAEyC,SACrC2Q,EAAMrF,KAAKqF,IAAG7R,MAARwM,KAAI/K,EAAQmlB,IAClBtS,EAAM9H,KAAK8H,IAAGtU,MAARwM,KAAI/K,EAAQmlB,IACxBznB,KAAKof,cAAgBpf,KAAKgf,OAAOkO,uBAAuBxa,EAAKyC,GAC7DnV,KAAK49B,kBAAoB59B,KAAKgf,OAAOkO,uBAAuBxa,QAE5D1S,KAAKohB,aAAc,EACnBphB,KAAKof,mBAAgBpb,EACrBhE,KAAK49B,uBAAoB55B,GAI7Bk5B,EAAAh9B,UAAAuf,SAAA,SAASC,GACP,QAAK1f,KAAK2f,oBAIM3b,IAHHhE,KAAK2f,cAAcC,MAAK,SAAAtgB,GACnC,OAAOogB,EAAMlP,OAASlR,EAAEkR,SAK5B0sB,EAAAh9B,UAAA2zB,WAAA,SAAWnU,GACT,SAAK1f,KAAK2f,eAA+C,IAA9B3f,KAAK2f,cAAchf,cAI9BqD,IAHHhE,KAAK2f,cAAcC,MAAK,SAAAtgB,GACnC,OAAOogB,EAAMlP,OAASlR,EAAEkR,SAhJnB1P,EAAA,CAARuJ,EAAAA,oCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,gDACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,0CAVU6yB,EAAmBp8B,EAAA,CArD/B2J,EAAAA,UAAU,CACTC,SAAU,4BACVC,SAAU,41CAiDViD,gBAAiBC,EAAAA,wBAAwBC,UAE9BovB,oBChDb,SAAAW,KAA8B,OAAjBA,EAAe/8B,EAAA,CAL3BkY,EAAAA,SAAS,CACRC,QAAS,CAAC+R,IACV7R,aAAc,CAACyjB,GAAeI,GAAoBE,IAClD9jB,QAAS,CAACwjB,GAAeI,GAAoBE,OAElCW,MCSb,IAAMC,GAAQ,EAAIzwB,KAAKkI,GAkHvBwoB,GAAA,SAAA3xB,GAAA,SAAA2xB,IAAA,IAAAv0B,EAAA,OAAA4C,GAAAA,EAAAvL,MAAAb,KAAAU,YAAAV,YAEWwJ,EAAA8kB,YAAsB,SACtB9kB,EAAAqiB,eAAyB,QAQzBriB,EAAA+J,eAAyB,EACzB/J,EAAAglB,MAAawP,EAAAA,oBACbx0B,EAAAmW,cAAuB,GAEvBnW,EAAAy0B,iBAA2B,IAC3Bz0B,EAAAmlB,gBAA0B,EAC1BnlB,EAAAslB,mBAA6B,GAG7BtlB,EAAAulB,cAAwB,EACxBvlB,EAAAoQ,iBAA2B,EAC3BpQ,EAAA00B,mBAA6B,EAC7B10B,EAAA0X,UAAoB,EACpB1X,EAAA20B,cAAwB,EACxB30B,EAAA40B,WAAqB,EACrB50B,EAAA60B,cAAwB,GAEvB70B,EAAAkU,SAA8B,IAAIjR,EAAAA,aAClCjD,EAAAmU,WAAgC,IAAIlR,EAAAA,aAoB9CjD,EAAAyI,OAAS,CAAC,GAAI,GAAI,GAAI,IACtBzI,EAAA6hB,YAAsB,EACtB7hB,EAAA8hB,WAAqB,IAqSvB,OAxVyCxrB,EAAAi+B,EAAA3xB,GA0DvC2xB,EAAA79B,UAAA4M,OAAA,WACEV,EAAAlM,UAAM4M,OAAMlM,KAAAZ,MAEZA,KAAKs+B,UAELt+B,KAAKk6B,YACLl6B,KAAK+vB,YACL/vB,KAAKkN,cAAgBlN,KAAKgwB,mBAE1BhwB,KAAKu+B,YAGPR,EAAA79B,UAAAo+B,QAAA,WACEt+B,KAAKgQ,KAAOib,GAAwB,CAClCvjB,MAAO1H,KAAK0H,MACZH,OAAQvH,KAAKuH,OACb2jB,QAASlrB,KAAKiS,OACdkZ,UAAWnrB,KAAKkvB,MAChB9D,UAAWprB,KAAKmvB,MAChB9D,YAAarrB,KAAKqrB,YAClBC,WAAYtrB,KAAKsrB,WACjBC,WAAYvrB,KAAKovB,eACjB3D,WAAYzrB,KAAKqvB,eACjB/iB,WAAYtM,KAAKsvB,OACjBtiB,WAAYhN,KAAKsP,WACjBuc,eAAgB7rB,KAAK6rB,iBAGvB,IAAM2S,EAAYnxB,KAAKC,MAAMtN,KAAKgQ,KAAKtI,MAAQ,GACzC+2B,EAAapxB,KAAKC,MAAMtN,KAAKgQ,KAAKzI,OAAS,GAE3Cm3B,EAAe1+B,KAAK0+B,YAAcrxB,KAAK8H,IAAIspB,EAAa,IAAKD,EAAY,KAEzEG,EAAUtxB,KAAKqF,IAAI,EAAG+rB,EAAaC,GAEzC1+B,KAAK4+B,UAASx+B,EAAAA,EAAA,GACTJ,KAAKgQ,MAAI,CACZtI,MAAO82B,IAGTx+B,KAAKoS,UAAY,aAAapS,KAAKgQ,KAAKgc,QAAO,KAAKhsB,KAAKiS,OAAO,GAAE,IAClEjS,KAAK6+B,eAAiB,gBAAgBF,EAAO,IAC7C3+B,KAAKmW,YAAcnW,KAAKgQ,KAAKzI,OAAS,GACtCvH,KAAK8+B,cAAgB,aAAaN,EAAS,KAAKC,EAAU,KAG5DV,EAAA79B,UAAAg6B,UAAA,WACE,IAAM6E,EAAU/+B,KAAKg/B,aACrBh/B,KAAKyN,UAAYygB,GAAa6Q,GAC9B/+B,KAAKknB,QAAUlnB,KAAKwvB,gBAAkBxvB,KAAKmnB,WAAW4X,GAEtD/+B,KAAKyvB,QAAUzvB,KAAK0vB,aACpB1vB,KAAK2vB,aAAe3vB,KAAK4vB,kBAEzB5vB,KAAKye,OAASze,KAAKonB,UAAUpnB,KAAKknB,QAAS4W,IAC3C99B,KAAK6e,OAAS7e,KAAK6vB,UAAU7vB,KAAKyvB,QAASzvB,KAAK0+B,aAChD1+B,KAAKi/B,WAAaj/B,KAAK6vB,UAAU7vB,KAAKyvB,QAAQ5F,UAAW7pB,KAAK0+B,cAGhEX,EAAA79B,UAAAq+B,SAAA,WAAA,IACMhqB,EADN/K,EAAAxJ,KAGIuU,EADEvU,KAAKk/B,oBACMl/B,KAAKk/B,oBACTl/B,KAAKye,OAAOlK,WACRvU,KAAKye,OAAOlK,WAAW1T,MAAMb,KAAKye,OAAQ,CAAC,IAE3C,SAAAnf,GACX,OCnQeyC,EDmQJzC,EClQe,kBAAzByV,SAASnU,KAAKmB,GDmQNzC,EAAEmR,qBAEJnR,EAAEkV,qBCtQMzS,GD0QnB,IAAM28B,EAAc1+B,KAAK0+B,YAGzB1+B,KAAKm/B,WAAan/B,KAAKknB,QAAQ9O,KAAI,SAAA9Y,GACjC,IAAM8/B,EAAa51B,EAAKiV,OAAOnf,GACzB+/B,EAJE,IAIOX,GAAeU,EAAa/xB,KAAKkI,IAAM,EAAI,GACpDhF,EAAQgE,EAAWjV,GAEnBggC,EAAW,CAACZ,EAAcrxB,KAAKkyB,IAAIH,IAAcV,EAAcrxB,KAAKiI,IAAI8pB,IAE9E,MAAO,CACLI,YAAa,EACbd,YAAWA,EACXU,WAAUA,EACVK,SAAUL,EACVr9B,MAAO28B,EACPnuB,MAAKA,EACL+uB,SAAQA,EACRI,IATU,CAACL,EARL,IAQaC,EAAS,QAgBhC,IAHA,IAGS9+B,EAAI,EAAGA,EAAIR,KAAKm/B,WAAWx+B,OAAS,EAAGH,IAG9C,IAFA,IAAMmwB,EAAI3wB,KAAKm/B,WAAW3+B,GAEjBmQ,EAAInQ,EAAI,EAAGmQ,EAAI3Q,KAAKm/B,WAAWx+B,OAAQgQ,IAAK,CACnD,IAAMpR,EAAIS,KAAKm/B,WAAWxuB,GAE1B,GAAIpR,EAAEmgC,IAAI,GAAK/O,EAAE+O,IAAI,GAAK,EAAG,CAE3B,IAAMh+B,EAXQ,GAWU2L,KAAK+V,IAAI7jB,EAAEmgC,IAAI,GAAK/O,EAAE+O,IAAI,IAC9Ch+B,EAAI,IAENnC,EAAEmgC,IAAI,IAAMryB,KAAKqK,KAAKnY,EAAEmgC,IAAI,IAAMh+B,IAM1C1B,KAAK2/B,YAAc3/B,KAAKi/B,WAAWnsB,MAAMzF,KAAKC,MAAMtN,KAAKgQ,KAAKzI,OAAS,KAAK6Q,KAAI,SAAA9Y,GAAK,OAAAkK,EAAKqV,OAAOvf,OAGnGy+B,EAAA79B,UAAA8+B,WAAA,uBACQvX,EAAS,OACf,IAAsB,IAAAnW,EAAA7P,EAAAzB,KAAK8P,SAAO0B,EAAAF,EAAAxP,QAAA0P,EAAAxP,KAAAwP,EAAAF,EAAAxP,OAAE,CAA/B,IAAMgO,EAAO0B,EAAAzP,UAChB,IAAgB,IAAA2lB,GAAAnW,OAAA,EAAA9P,EAAAqO,EAAQY,SAAMiX,EAAAD,EAAA5lB,QAAA6lB,EAAA3lB,KAAA2lB,EAAAD,EAAA5lB,OAAE,CAA3B,IAAMxC,EAACqoB,EAAA5lB,MACL0lB,EAAOG,SAAStoB,EAAEkR,OACrBiX,EAAOrlB,KAAK9C,EAAEkR,2MAIpB,OAAOiX,GAGTsW,EAAA79B,UAAAinB,WAAA,SAAWM,GACT,YADS,IAAAA,IAAAA,EAASznB,KAAKg/B,cACA,SAAnBh/B,KAAKyN,UAGA,CAFKJ,KAAK8H,IAAGtU,MAARwM,KAAI/K,EAAQmlB,IACZpa,KAAKqF,IAAG7R,MAARwM,KAAI/K,EAAQmlB,KAEI,WAAnBznB,KAAKyN,WACdga,EAASA,EAAOrP,KAAI,SAAAmN,GAAK,OAAA7G,OAAO6G,MAGzB,CAFKlY,KAAK8H,IAAGtU,MAARwM,KAAI/K,EAAQmlB,IACZpa,KAAKqF,IAAG7R,MAARwM,KAAI/K,EAAQmlB,MAGnBA,GAGTsW,EAAA79B,UAAA0/B,WAAA,uBACQjqB,EAAS,OAEf,IAAsB,IAAArE,EAAA7P,EAAAzB,KAAK8P,SAAO0B,EAAAF,EAAAxP,QAAA0P,EAAAxP,KAAAwP,EAAAF,EAAAxP,OAAE,CAA/B,IAAMgO,EAAO0B,EAAAzP,UAChB,IAAgB,IAAA2lB,GAAAgT,OAAA,EAAAj5B,EAAAqO,EAAQY,SAAMiX,EAAAD,EAAA5lB,QAAA6lB,EAAA3lB,KAAA2lB,EAAAD,EAAA5lB,OAAE,CAA3B,IAAMxC,EAACqoB,EAAA5lB,MACN4T,EAAO/J,QAAQtM,EAAEyC,OAAS,GAC5B4T,EAAOvT,KAAK9C,EAAEyC,YAEFiC,IAAV1E,EAAE6V,KACAQ,EAAO/J,QAAQtM,EAAE6V,KAAO,GAC1BQ,EAAOvT,KAAK9C,EAAE6V,UAGJnR,IAAV1E,EAAEoT,KACAiD,EAAO/J,QAAQtM,EAAEoT,KAAO,GAC1BiD,EAAOvT,KAAK9C,EAAEoT,0MAKtB,OAAOiD,GAGTooB,EAAA79B,UAAAwvB,WAAA,SAAW/Z,QAAA,IAAAA,IAAAA,EAAS3V,KAAK4/B,cACvB,IAAIzqB,EAAM9H,KAAK8H,IAAGtU,MAARwM,KAAI/K,EAAQqT,IAChBjD,EAAMrF,KAAKqF,IAAG7R,MAARwM,KAAI/K,EAAA,CAAKtC,KAAKm+B,eAAkBxoB,IAO5C,OALAR,EAAM9H,KAAKqF,IAAI,EAAGyC,GACbnV,KAAK+wB,YACR5b,EAAM9H,KAAK8H,IAAI,EAAGA,IAGb,CAACA,EAAKzC,IAGfqrB,EAAA79B,UAAA0vB,gBAAA,WACE,OAAO5vB,KAAK8P,QAAQsI,KAAI,SAAA9Y,GAAK,OAAAA,EAAEkR,SAGjCutB,EAAA79B,UAAAknB,UAAA,SAAUzR,EAAQjO,GAChB,OAAQ1H,KAAKyN,WACX,IAAK,OACH,OAAOoa,EAAAA,YACJ9I,MAAM,CAAC,EAAGrX,IACViO,OAAOA,GACZ,IAAK,SACH,IAAMvB,EAAQ0T,EAAAA,cACX/I,MAAM,CAAC,EAAGrX,IACViO,OAAOA,GACV,OAAO3V,KAAK+uB,aAAe3a,EAAM8c,OAAS9c,EAC5C,QACE,OAAO2T,EAAAA,aACJhJ,MAAM,CAAC,EAAGrX,EAAQo2B,GAAQnoB,EAAOhV,SACjC2V,QAAQ,GACRX,OAAOA,KAIhBooB,EAAA79B,UAAA2vB,UAAA,SAAUla,EAAQpO,GAChB,IAAM6M,EAAQ0T,EAAAA,cACX/I,MAAM,CAAC,EAAGxX,IACVoO,OAAOA,GAEV,OAAO3V,KAAK+uB,aAAe3a,EAAM8c,OAAS9c,GAG5C2pB,EAAA79B,UAAAsf,QAAA,SAAQvO,EAAMP,GACRA,IACFO,EAAKP,OAASA,EAAOF,MAGvBxQ,KAAKuP,OAAOZ,KAAKsC,IAGnB8sB,EAAA79B,UAAA6vB,UAAA,WACE,IAAMpa,EAA6B,YAApB3V,KAAKsP,WAA2BtP,KAAK2vB,aAAe3vB,KAAKyvB,QAAQ5F,UAChF7pB,KAAKgf,OAAS,IAAIoN,GAAYpsB,KAAKqP,OAAQrP,KAAKsP,WAAYqG,EAAQ3V,KAAKqsB,eAG3E0R,EAAA79B,UAAA8vB,iBAAA,WACE,MAAwB,YAApBhwB,KAAKsP,WACA,CACL7B,UAAWzN,KAAKsP,WAChB0P,OAAQhf,KAAKgf,OACbrJ,OAAQ3V,KAAK2vB,aACbvT,MAAOpc,KAAKsuB,YACZhlB,SAAUtJ,KAAK6rB,gBAGZ,CACLpe,UAAWzN,KAAKsP,WAChB0P,OAAQhf,KAAKgf,OAAO5K,MACpBuB,OAAQ3V,KAAKyvB,QACbrT,WAAOpY,EACPsF,SAAUtJ,KAAK6rB,iBAInBkS,EAAA79B,UAAA4xB,iBAAA,SAAiB/nB,OAAErC,EAAAqC,EAAArC,MACjB1H,KAAKsrB,WAAa5jB,EAClB1H,KAAK8M,UAGPixB,EAAA79B,UAAA6xB,kBAAA,SAAkBhoB,OAAExC,EAAAwC,EAAAxC,OAClBvH,KAAKqrB,YAAc9jB,EACnBvH,KAAK8M,UAGPixB,EAAA79B,UAAA8xB,WAAA,SAAW5gB,GACGpR,KAAK2f,cAAcxB,WAAU,SAAA7e,GACvC,OAAOA,EAAEkR,OAASY,EAAKZ,MAAQlR,EAAEyC,QAAUqP,EAAKrP,UAEvC,IAGX/B,KAAK2f,cAAgB3f,KAAKk+B,kBAAiB57B,EAAA,CAAI8O,GAASpR,KAAK2f,eAAiB3f,KAAK2f,cACnF3f,KAAK0d,SAAS/O,KAAK,CAAE5M,MAAOqP,EAAM6gB,QAASjyB,KAAK2f,kBAGlDoe,EAAA79B,UAAAgyB,aAAA,SAAa9gB,GACX,IAAMzF,EAAM3L,KAAK2f,cAAcxB,WAAU,SAAA7e,GACvC,OAAOA,EAAEkR,OAASY,EAAKZ,MAAQlR,EAAEyC,QAAUqP,EAAKrP,SAGlD/B,KAAK2f,cAAc9T,OAAOF,EAAK,GAC/B3L,KAAK2f,cAAard,EAAOtC,KAAK2f,eAE9B3f,KAAK2d,WAAWhP,KAAK,CAAE5M,MAAOqP,EAAM6gB,QAASjyB,KAAK2f,iBAGpDoe,EAAA79B,UAAAyxB,cAAA,mBACE3xB,KAAK2f,cAAard,EAAOtC,KAAK2f,mBAC9B,IAAoB,IAAA9I,EAAApV,EAAAzB,KAAK2f,eAAarO,EAAAuF,EAAA/U,QAAAwP,EAAAtP,KAAAsP,EAAAuF,EAAA/U,OAAE,CAAnC,IAAM4d,EAAKpO,EAAAvP,MACd/B,KAAK2d,WAAWhP,KAAK,CAAE5M,MAAO2d,EAAOuS,QAAS,uGAEhDjyB,KAAK2f,cAAgB,IAGvBoe,EAAA79B,UAAA+oB,QAAA,SAAQC,EAAO9X,GACb,OAAOA,EAAKZ,MArVL1P,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,2CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,gDACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,kDACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,mDACQvJ,EAAA,CAARuJ,EAAAA,4CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,iDACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,6CAESvJ,EAAA,CAAT4M,EAAAA,yCACS5M,EAAA,CAAT4M,EAAAA,2CAEgC5M,EAAA,CAAhCqxB,EAAAA,aAAa,0DA/BH4L,EAAmBj9B,EAAA,CAhH/B2J,EAAAA,UAAU,CACTC,SAAU,yBACVC,SAAU,ijGA4FVC,cAAeC,EAAAA,kBAAkBC,KACjC8C,gBAAiBC,EAAAA,wBAAwBC,OACzCvB,WAAY,CACVwB,EAAAA,QAAQ,iBAAkB,CACxBC,EAAAA,WAAW,SAAU,CACnBC,EAAAA,MAAM,CACJC,QAAS,IAEXC,EAAAA,QACE,IACAF,EAAAA,MAAM,CACJC,QAAS,i4EAOR6vB,GAAb,CAAyC7uB,iBEnEzC,SAAA2wB,IAUW7/B,KAAA4Z,iBAA2B,EAE3B5Z,KAAAkhB,UAAoB,EAEpBlhB,KAAAuM,YAAsB,EAErBvM,KAAAuP,OAAS,IAAI9C,EAAAA,aACbzM,KAAA0d,SAAW,IAAIjR,EAAAA,aACfzM,KAAA2d,WAAa,IAAIlR,EAAAA,aAI3BzM,KAAA8/B,aAAuB,EAoIzB,OAtHED,EAAA3/B,UAAA0M,YAAA,SAAYC,GACV7M,KAAK8M,UAGP+yB,EAAA3/B,UAAA4M,OAAA,WAAA,IAAAtD,EAAAxJ,KACEA,KAAKm9B,kBAEL,IAAMQ,EAAO39B,KAAKs9B,mBAEZrsB,EAAOjR,KAAKo9B,SAASp9B,KAAKiR,KAAKP,QAE/B6N,EAAave,KAAKiR,KAAKT,KACvBuvB,EAA4C,WAA1B//B,KAAKgf,OAAOvR,UAC9B0H,EAAMnV,KAAK6e,OAAOlJ,SAAS,GACjC3V,KAAKggC,YAAchgC,KAAKgf,OAAOC,SAAS8gB,EAAkB5qB,EAAMoJ,GAEhEve,KAAK6hB,KAAO8b,EAAK1sB,IAAS,GAE1BjR,KAAK+6B,QAAU9pB,EAAKmH,KAAI,SAAA9Y,GACtB,IAAMqxB,EAAInnB,EAAKy2B,SAAS3gC,GAClB8B,EAAIoI,EAAK+qB,UAAUj1B,GACnByC,EAAQzC,EAAEyC,MAEV4c,EAAQnV,EAAKwV,OAAOC,SAAS8gB,EAAkB1yB,KAAK+V,IAAIrhB,GAASwc,GAQvE,MAAO,CACLtN,KAPYzR,OAAOa,OAAO,GAAIf,EAAG,CACjCoR,OAAQ6N,EACRxc,MAAKA,EACLyO,KAAMlR,EAAEkR,OAKR8N,GAAIld,EAAIiM,KAAKkyB,IAAI5O,GACjB/R,IAAKxd,EAAIiM,KAAKiI,IAAIqb,GAClB5uB,MAAKA,EACL4c,MAAKA,EACLpO,MAAOjR,EAAEkR,SAIbxQ,KAAKkgC,OAASlgC,KAAKyf,SAASzf,KAAKiR,MACjCjR,KAAKmgC,SAAWngC,KAAK6zB,WAAW7zB,KAAKiR,MACrCjR,KAAKi4B,YAAcj4B,KAAKi4B,aAAW,SAAK92B,GAAK,OAAAqI,EAAK42B,mBAAmBj/B,KAGvE0+B,EAAA3/B,UAAA+/B,SAAA,SAAS3gC,GACP,IAAMiR,EAAQjR,EAAEkR,KAChB,MAAuB,SAAnBxQ,KAAKyN,UACAzN,KAAKye,OAAOlO,GACS,WAAnBvQ,KAAKyN,UACPzN,KAAKye,OAAOC,OAAOnO,IAErBvQ,KAAKye,OAAOlO,IAGrBsvB,EAAA3/B,UAAAq0B,UAAA,SAAUj1B,GACR,OAAOU,KAAK6e,OAAOvf,EAAEyC,QAGvB89B,EAAA3/B,UAAAo9B,iBAAA,WAAA,IAAA9zB,EAAAxJ,KACE,OAAOqgC,EAAAA,aACJ5rB,OAAM,SAAAnV,GAAK,OAAAkK,EAAKy2B,SAAS3gC,MACzB6f,QAAO,SAAA7f,GAAK,OAAAkK,EAAK+qB,UAAUj1B,MAC3BkvB,MAAMxuB,KAAKwuB,QAGhBqR,EAAA3/B,UAAAk9B,SAAA,SAASnsB,GACP,MAAuB,WAAnBjR,KAAKyN,UACAglB,GAAWxhB,EAAM,QACI,SAAnBjR,KAAKyN,UACPulB,GAAW/hB,EAAM,QAEnB0hB,GAAa1hB,EAAM,OAAQ,MAAOjR,KAAKye,OAAO9I,WAGvDkqB,EAAA3/B,UAAAuf,SAAA,SAASC,GACP,QAAK1f,KAAK2f,oBAIM3b,IAHHhE,KAAK2f,cAAcC,MAAK,SAAAtgB,GACnC,OAAOogB,EAAMlP,OAASlR,EAAEkR,SAK5BqvB,EAAA3/B,UAAA2zB,WAAA,SAAWnU,GACT,SAAK1f,KAAK2f,eAA+C,IAA9B3f,KAAK2f,cAAchf,cAI9BqD,IAHHhE,KAAK2f,cAAcC,MAAK,SAAAtgB,GACnC,OAAOogB,EAAMlP,OAASlR,EAAEkR,SAK5BqvB,EAAA3/B,UAAAkgC,mBAAA,SAAmBr2B,OAAEwG,EAAAxG,EAAAwG,MAAOxO,EAAAgI,EAAAhI,MAC1B,MAAO,uCACyB4a,GAAY3c,KAAKiR,KAAKT,MAAK,MAAMmM,GAAYpM,GAAM,4CACrDxO,EAAMyS,iBAAgB,iBAItDqrB,EAAA3/B,UAAAi9B,gBAAA,WAGE,GAFAn9B,KAAKohB,YAAcphB,KAAKkhB,UAAsC,WAA1BlhB,KAAKgf,OAAOvR,UAE3CzN,KAAKohB,YAOV,GAHAphB,KAAK8d,WAAa,OAAST,KAAKtI,WAChC/U,KAAKy7B,YAAc,QAAQz7B,KAAK8d,WAAU,IAEZ,WAA1B9d,KAAKgf,OAAOvR,UAAwB,CACtC,IAAMga,EAASznB,KAAKiR,KAAKP,OAAO0H,KAAI,SAAA9Y,GAAK,OAAAA,EAAEyC,SACrC2Q,EAAMrF,KAAKqF,IAAG7R,MAARwM,KAAI/K,EAAQmlB,IAClBtS,EAAM9H,KAAK8H,IAAGtU,MAARwM,KAAI/K,EAAQmlB,IACxBznB,KAAKof,cAAgBpf,KAAKgf,OAAOkO,uBAAuBxa,EAAKyC,QAE7DnV,KAAKof,mBAAgBpb,GAtJhBlD,EAAA,CAARuJ,EAAAA,oCACQvJ,EAAA,CAARuJ,EAAAA,oCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,gDACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,2CACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,0CAESvJ,EAAA,CAAT4M,EAAAA,uCACS5M,EAAA,CAAT4M,EAAAA,yCACS5M,EAAA,CAAT4M,EAAAA,2CAlBUmyB,EAAoB/+B,EAAA,CAnDhC2J,EAAAA,UAAU,CACTC,SAAU,6BACVC,SAAU,g/CA+CViD,gBAAiBC,EAAAA,wBAAwBC,UAE9B+xB,qBCHb,SAAAS,IAAA,IAAA92B,EAAA,OAAA4C,GAAAA,EAAAvL,MAAAb,KAAAU,YAAAV,YAEWwJ,EAAAmW,cAAuB,GACvBnW,EAAAoQ,iBAA2B,EAE3BpQ,EAAA+G,MAAgB,QAEf/G,EAAAkU,SAA8B,IAAIjR,EAAAA,aAClCjD,EAAAmU,WAAgC,IAAIlR,EAAAA,aAY9CjD,EAAAyI,OAAS,CAAC,GAAI,GAAI,GAAI,MAgFxB,OApG+CnS,EAAAwgC,EAAAl0B,GA0B7Ck0B,EAAApgC,UAAA4M,OAAA,WACEV,EAAAlM,UAAM4M,OAAMlM,KAAAZ,MAEZA,KAAKgQ,KAAOib,GAAwB,CAClCvjB,MAAqB,EAAb1H,KAAK0H,MAAa,GAC1BH,OAAQvH,KAAKuH,OACb2jB,QAASlrB,KAAKiS,SAGhBjS,KAAKqQ,cAELrQ,KAAK2V,OAAS3V,KAAKs5B,YACnBt5B,KAAK+vB,YAEL,IAAM/D,EAAUhsB,KAAKgQ,KAAKtI,MAAQ,EAC5Bi3B,EAAU3+B,KAAKiS,OAAO,GAAKjS,KAAKgQ,KAAKzI,OAAS,EACpDvH,KAAKwN,YAAcxN,KAAK0H,MAAQ1H,KAAKgQ,KAAKtI,MAAQ1H,KAAKiS,OAAO,GAE9DjS,KAAK0+B,YAAcrxB,KAAK8H,IAAInV,KAAKgQ,KAAKtI,MAAO1H,KAAKgQ,KAAKzI,QAAU,IACjEvH,KAAKw/B,YAAiC,IAAnBx/B,KAAK0+B,YAExB1+B,KAAKoS,UAAY,aAAa4Z,EAAO,MAAM2S,EAAO,KAGpD2B,EAAApgC,UAAAo5B,UAAA,WACE,OAAOt5B,KAAK8P,QAAQsI,KAAI,SAAA9Y,GAAK,OAAAA,EAAEiR,UAGjC+vB,EAAApgC,UAAAsf,QAAA,SAAQvO,GACNjR,KAAKuP,OAAOZ,KAAKsC,IAGnBqvB,EAAApgC,UAAA6vB,UAAA,WACE/vB,KAAKgf,OAAS,IAAIoN,GAAYpsB,KAAKqP,OAAQ,UAAWrP,KAAK2V,OAAQ3V,KAAKqsB,eAG1EiU,EAAApgC,UAAA8xB,WAAA,SAAW5gB,EAAM8jB,QAAA,IAAAA,IAAAA,GAAA,GACf9jB,EAAOpR,KAAK8P,QAAQ8P,MAAK,SAAAtgB,GACvB,OAAI41B,EACK51B,EAAEiR,QAAUa,EAAKZ,KAEjBlR,EAAEkR,OAASY,EAAKZ,QAIfxQ,KAAK2f,cAAcxB,WAAU,SAAA7e,GACvC,OAAOA,EAAEkR,OAASY,EAAKZ,MAAQlR,EAAEyC,QAAUqP,EAAKrP,OAASzC,EAAEoR,SAAWU,EAAKV,WAElE,IAIX1Q,KAAK2f,cAAard,EAAA,CAAI8O,GAASpR,KAAK2f,eACpC3f,KAAK0d,SAAS/O,KAAK,CAAE5M,MAAOqP,EAAM6gB,QAASjyB,KAAK2f,kBAGlD2gB,EAAApgC,UAAAgyB,aAAA,SAAa9gB,EAAM8jB,QAAA,IAAAA,IAAAA,GAAA,GACjB9jB,EAAOpR,KAAK8P,QAAQ8P,MAAK,SAAAtgB,GACvB,OAAI41B,EACK51B,EAAEiR,QAAUa,EAAKZ,KAEjBlR,EAAEkR,OAASY,EAAKZ,QAI3B,IAAM7E,EAAM3L,KAAK2f,cAAcxB,WAAU,SAAA7e,GACvC,OAAOA,EAAEkR,OAASY,EAAKZ,MAAQlR,EAAEyC,QAAUqP,EAAKrP,OAASzC,EAAEoR,SAAWU,EAAKV,UAG7E1Q,KAAK2f,cAAc9T,OAAOF,EAAK,GAC/B3L,KAAK2f,cAAard,EAAOtC,KAAK2f,eAE9B3f,KAAK2d,WAAWhP,KAAK,CAAE5M,MAAOqP,EAAM6gB,QAASjyB,KAAK2f,iBAjG3C7e,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,2CACQvJ,EAAA,CAARuJ,EAAAA,qCAESvJ,EAAA,CAAT4M,EAAAA,yCACS5M,EAAA,CAAT4M,EAAAA,2CAEgC5M,EAAA,CAAhCqxB,EAAAA,aAAa,0DAYLrxB,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,oDAxBUi2B,EAAyBx/B,EAAA,CAhDrC2J,EAAAA,UAAU,CACTC,SAAU,gCACVC,SAAU,ssDA2CVC,cAAeC,EAAAA,kBAAkBC,KACjC8C,gBAAiBC,EAAAA,wBAAwBC,8sDAE9BwyB,IAAkCpxB,iBCjB7C,SAAAqxB,IATSvgC,KAAAuM,YAAsB,EACtBvM,KAAAo+B,WAAqB,EACrBp+B,KAAAq+B,cAAwB,GAKhBr+B,KAAAwgC,KAAO,uBAAuBC,KAAKC,UAAUC,WAG5D3gC,KAAKyS,UAAYA,EAwDrB,OArDE8tB,EAAArgC,UAAA0M,YAAA,SAAYC,GACV7M,KAAK8M,UAGPyzB,EAAArgC,UAAA4M,OAAA,WACE,IAAI8zB,EAAc5gC,KAAKmf,OACnBnf,KAAK6gC,gBACPD,EAAe5gC,KAAKmf,OAASnf,KAAK+B,MAAS/B,KAAK0S,KAGlD,IAKMouB,EALWC,EAAAA,MACdvB,YAAYoB,GACZlC,YAAYkC,GAGWI,SAAShhC,KAAKiR,MAEpCmD,EAAQpU,KAAKiR,KAAKyuB,IAAI,GAAKoB,EAAS,GACf,IAArB9gC,KAAKiR,KAAKyuB,IAAI,IAA4B,IAAhBoB,EAAS,KACrC1sB,EAAQ,GAEV,IAAM6sB,EAAW,CAAC7sB,EAAQ0sB,EAAS,GAAI1sB,EAAQ0sB,EAAS,IAExD9gC,KAAK29B,KAAO,IAAImD,EAAQ,IAAIG,EAAQ,IAAIjhC,KAAKiR,KAAKyuB,KAGpDlgC,OAAAgC,eAAI++B,EAAArgC,UAAA,QAAK,KAAT,WACE,OAAOF,KAAKiR,KAAKyuB,IAAI,oCAGvBlgC,OAAAgC,eAAI++B,EAAArgC,UAAA,QAAK,KAAT,WACE,OAAOF,KAAKiR,KAAKyuB,IAAI,oCAGvBlgC,OAAAgC,eAAI++B,EAAArgC,UAAA,iBAAc,KAAlB,WACE,OAAOF,KAAKwgC,KAAO,KAAO,eAAexgC,KAAKkhC,MAAK,MAAMlhC,KAAKmhC,MAAK,0CAGrE3hC,OAAAgC,eAAI++B,EAAArgC,UAAA,gBAAa,KAAjB,WACE,OAAQF,KAAKwgC,KAAc,aAAaxgC,KAAKkhC,MAAK,IAAIlhC,KAAKmhC,MAAK,IAA5C,sCAGtB3hC,OAAAgC,eAAI++B,EAAArgC,UAAA,iBAAc,KAAlB,WACE,OAAOF,KAAKwgC,OAASxgC,KAAKuM,WAAa,KAAO,mDAGhDg0B,EAAArgC,UAAAiS,WAAA,WACE,OAAOnS,KAAKohC,SAASphC,KAAKiR,MAAQ5D,KAAKkI,GAAK,QAAU,OAGxDgrB,EAAArgC,UAAAkhC,SAAA,SAAS9hC,GACP,OAAOA,EAAE8/B,YAAc9/B,EAAEmgC,SAAWngC,EAAE8/B,YAAc,GAvE7Ct+B,EAAA,CAARuJ,EAAAA,oCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,mCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,6CAVUk2B,EAAiBz/B,EAAA,CAzB7B2J,EAAAA,UAAU,CACTC,SAAU,0BACVC,SAAU,8nBAqBViD,gBAAiBC,EAAAA,wBAAwBC,UAE9ByyB,oBC8CX,SAAAc,EAAY79B,GA5BHxD,KAAAo/B,WAAqB,EACrBp/B,KAAAy/B,SAA6B,EAAVpyB,KAAKkI,GAGxBvV,KAAAshC,aAAuB,EAIvBthC,KAAA6gC,eAAyB,EACzB7gC,KAAAkhB,UAAoB,EACpBlhB,KAAAmO,SAAmB,EACnBnO,KAAAuhC,eAAyB,EACzBvhC,KAAAyf,UAAoB,EAEnBzf,KAAAuP,OAAS,IAAI9C,EAAAA,aACbzM,KAAA0d,SAAW,IAAIjR,EAAAA,aACfzM,KAAA2d,WAAa,IAAIlR,EAAAA,aACjBzM,KAAAwhC,SAAW,IAAI/0B,EAAAA,aAQzBzM,KAAAmhB,aAAuB,EAIrBnhB,KAAKwD,QAAUA,EAAQC,cA+G3B,OA5GE49B,EAAAnhC,UAAA0M,YAAA,SAAYC,GACV7M,KAAK8M,UAGPu0B,EAAAnhC,UAAAqhB,YAAA,WACE,OAAOvhB,KAAKkhB,SAAWlhB,KAAK+d,aAAe/d,KAAKoW,MAGlDirB,EAAAnhC,UAAAuhC,iBAAA,WACE,OAAOzhC,KAAKuhC,cAAgB,OAAS,QAGvCF,EAAAnhC,UAAA4M,OAAA,WACE,IAAM40B,EAAO1hC,KAAK2hC,eAClB3hC,KAAKghB,aAAe,GACpBhhB,KAAK4hC,iBAAmB,aAAevkB,KAAKtI,WAC5C/U,KAAK+d,aAAe,QAAQ/d,KAAK4hC,iBAAgB,IAE7C5hC,KAAKmO,QACHnO,KAAKmhB,YACPnhB,KAAK6hC,mBAEL7hC,KAAKqhB,gBACLrhB,KAAKmhB,aAAc,GAGrBnhB,KAAK6hB,KAAO6f,EAAKtC,WAAWp/B,KAAKo/B,YAAYK,SAASz/B,KAAKy/B,SAA/CiC,IAIhBL,EAAAnhC,UAAAyhC,aAAA,WACE,IAAIjD,EAAc1+B,KAAK0+B,YAKvB,OAJI1+B,KAAK6gC,eAAsC,IAArB7gC,KAAKw/B,cAC7Bd,EAAe1+B,KAAK0+B,YAAc1+B,KAAK+B,MAAS/B,KAAK0S,KAGhDquB,EAAAA,MACJvB,YAAYx/B,KAAKw/B,aACjBd,YAAYA,GACZ4C,aAAathC,KAAKshC,eAGvBD,EAAAnhC,UAAAmhB,cAAA,WACE,IAAMM,EAAOpS,EAAAA,OAAOvP,KAAKwD,SACtBs+B,UAAU,QACV7wB,KAAK,CAAC,CAAEmuB,WAAYp/B,KAAKo/B,WAAYK,SAAUz/B,KAAKy/B,YAEjDiC,EAAO1hC,KAAK2hC,eAElBhgB,EACG3T,aACA+zB,UAAU,KAAK,SAASziC,GACjBU,KAAMgiC,SAAiBhiC,KAAMgiC,UAAY1iC,EAC/C,IAAM2iC,EAAUziC,OAAOa,OAAO,GAAIf,GAClC2iC,EAAQxC,SAAWwC,EAAQ7C,WAC3B,IAAM8C,EAAeC,EAAAA,YAAYF,EAASA,GAE1C,OADMjiC,KAAMgiC,SAAWE,EAAa,GAC7B,SAAS5hC,GACd,OAAOohC,EAAKQ,EAAa5hC,QAG5B0N,aACApH,SAAS,KACTm7B,UAAU,KAAK,SAASziC,GACjBU,KAAMgiC,SAAiBhiC,KAAMgiC,UAAY1iC,EAC/C,IAAM4iC,EAAeC,EAAAA,YAAkBniC,KAAMgiC,SAAU1iC,GAEvD,OADMU,KAAMgiC,SAAWE,EAAa,GAC7B,SAAS5hC,GACd,OAAOohC,EAAKQ,EAAa5hC,SAKjC+gC,EAAAnhC,UAAA2hC,gBAAA,WACE,IAAMlgB,EAAOpS,EAAAA,OAAOvP,KAAKwD,SACtBs+B,UAAU,QACV7wB,KAAK,CAAC,CAAEmuB,WAAYp/B,KAAKo/B,WAAYK,SAAUz/B,KAAKy/B,YAEjDiC,EAAO1hC,KAAK2hC,eAElBhgB,EACG3T,aACApH,SAAS,KACTm7B,UAAU,KAAK,SAASziC,GACjBU,KAAMgiC,SAAiBhiC,KAAMgiC,UAAY1iC,EAC/C,IAAM4iC,EAAeC,EAAAA,YAAkBniC,KAAMgiC,SAAU1iC,GAEvD,OADMU,KAAMgiC,SAAWE,EAAa,GAC7B,SAAS5hC,GACd,OAAOohC,EAAKQ,EAAa5hC,SAKjC+gC,EAAAnhC,UAAAsf,QAAA,WAAA,IAAAhW,EAAAxJ,KACEwG,aAAaxG,KAAKoiC,UAClBpiC,KAAKoiC,SAAW17B,YAAW,WAAM,OAAA8C,EAAK+F,OAAOZ,KAAKnF,EAAKyH,QAAO,MAGhEowB,EAAAnhC,UAAAmiC,WAAA,SAAWnmB,GACTA,EAAMomB,iBACNpmB,EAAMqmB,kBACN/7B,aAAaxG,KAAKoiC,UAElBpiC,KAAKwhC,SAAS7yB,KAAK,CACjBsC,KAAMjR,KAAKiR,KACXuxB,YAAatmB,8CA7GI/R,EAAAA,cA7BZrJ,EAAA,CAARuJ,EAAAA,oCACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,2CACQvJ,EAAA,CAARuJ,EAAAA,2CACQvJ,EAAA,CAARuJ,EAAAA,4CACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,mCACQvJ,EAAA,CAARuJ,EAAAA,oCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,uCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,wCAESvJ,EAAA,CAAT4M,EAAAA,uCACS5M,EAAA,CAAT4M,EAAAA,yCACS5M,EAAA,CAAT4M,EAAAA,2CACS5M,EAAA,CAAT4M,EAAAA,yCAnBU2zB,EAAevgC,EAAA,CA5B3B2J,EAAAA,UAAU,CACTC,SAAU,wBACVC,SAAU,gqBAwBViD,gBAAiBC,EAAAA,wBAAwBC,UAE9BuzB,qBCYb,SAAAoB,IAAA,IAAAj5B,EAAA,OAAA4C,GAAAA,EAAAvL,MAAAb,KAAAU,YAAAV,YACWwJ,EAAAk5B,QAAS,EACTl5B,EAAA8lB,QAAS,EACT9lB,EAAA8kB,YAAsB,SACtB9kB,EAAAqiB,eAAyB,QACzBriB,EAAAq3B,eAAgB,EAChBr3B,EAAAm5B,UAAW,EACXn5B,EAAAo5B,SAAW,IAEXp5B,EAAAmW,cAAuB,GACvBnW,EAAAoQ,iBAA2B,EAE3BpQ,EAAAq5B,YAAsB,EACtBr5B,EAAAs5B,eAAyB,GAExBt5B,EAAAg4B,SAAW,IAAI/0B,EAAAA,aAGfjD,EAAA+F,OAAS,IAAI9C,EAAAA,aACbjD,EAAAkU,SAA8B,IAAIjR,EAAAA,aAClCjD,EAAAmU,WAAgC,IAAIlR,EAAAA,eA2HhD,OA/IuC3M,EAAA2iC,EAAAr2B,GAiCrCq2B,EAAAviC,UAAA4M,OAAA,WAAA,IAAAtD,EAAAxJ,KACEoM,EAAAlM,UAAM4M,OAAMlM,KAAAZ,MAERA,KAAK0iC,QAAU1iC,KAAK+iC,0BACtB/iC,KAAKkrB,QAAU,CAAC,GAAI,GAAI,GAAI,KAClBlrB,KAAK0iC,QAAU1iC,KAAK+iC,4BAE9B/iC,KAAKkrB,QAAU,CAAC,GAAI,GAAI,GAAI,KAG9BlrB,KAAKgQ,KAAOib,GAAwB,CAClCvjB,MAAO1H,KAAK0H,MACZH,OAAQvH,KAAKuH,OACb2jB,QAASlrB,KAAKkrB,QACd5e,WAAYtM,KAAKsvB,OACjBzD,eAAgB7rB,KAAK6rB,iBAGvB7rB,KAAKqQ,cAEL,IAAM2b,EAAUhsB,KAAKkrB,QAAQ,GAAKlrB,KAAKgQ,KAAKtI,MAAQ,EAC9Ci3B,EAAU3+B,KAAKkrB,QAAQ,GAAKlrB,KAAKgQ,KAAKzI,OAAS,EACrDvH,KAAKgjC,YAAc,aAAahX,EAAO,KAAK2S,EAAO,IACnD3+B,KAAK0+B,YAAcrxB,KAAK8H,IAAInV,KAAKgQ,KAAKtI,MAAO1H,KAAKgQ,KAAKzI,QACnDvH,KAAK0iC,OAEP1iC,KAAK0+B,aAAe,EAEpB1+B,KAAK0+B,aAAe,EAEtB1+B,KAAKw/B,YAAc,EACfx/B,KAAK2iC,WACP3iC,KAAKw/B,YAAcx/B,KAAK0+B,aAAe,EAAI1+B,KAAK4iC,WAGlD5iC,KAAK2V,OAAS3V,KAAKs5B,YAGnBt5B,KAAKiR,KAAOjR,KAAK8P,QAAQ4gB,MAAK,SAACC,EAAGpxB,GAChC,OAAOiK,EAAKmM,OAAO/J,QAAQ+kB,EAAEngB,MAAQhH,EAAKmM,OAAO/J,QAAQrM,EAAEiR,SAG7DxQ,KAAK+vB,YACL/vB,KAAKkN,cAAgBlN,KAAKgwB,oBAG5ByS,EAAAviC,UAAAo5B,UAAA,WACE,OAAOt5B,KAAK8P,QAAQsI,KAAI,SAAA9Y,GAAK,OAAAA,EAAEiR,UAGjCkyB,EAAAviC,UAAAsf,QAAA,SAAQvO,GACNjR,KAAKuP,OAAOZ,KAAKsC,IAGnBwxB,EAAAviC,UAAA6vB,UAAA,WACE/vB,KAAKgf,OAAS,IAAIoN,GAAYpsB,KAAKqP,OAAQ,UAAWrP,KAAK2V,OAAQ3V,KAAKqsB,eAG1EoW,EAAAviC,UAAA8vB,iBAAA,WACE,MAAO,CACLviB,UAAW,UACXkI,OAAQ3V,KAAK2V,OACbqJ,OAAQhf,KAAKgf,OACb5C,MAAOpc,KAAKsuB,YACZhlB,SAAUtJ,KAAK6rB,iBAInB4W,EAAAviC,UAAA8xB,WAAA,SAAW5gB,EAAM8jB,QAAA,IAAAA,IAAAA,GAAA,GACf9jB,EAAOpR,KAAK8P,QAAQ8P,MAAK,SAAAtgB,GACvB,OAAI41B,EACK51B,EAAEiR,QAAUa,EAAKZ,KAEjBlR,EAAEkR,OAASY,EAAKZ,QAIfxQ,KAAK2f,cAAcxB,WAAU,SAAA7e,GACvC,OAAOA,EAAEkR,OAASY,EAAKZ,MAAQlR,EAAEyC,QAAUqP,EAAKrP,OAASzC,EAAEoR,SAAWU,EAAKV,WAElE,IAIX1Q,KAAK2f,cAAard,EAAA,CAAI8O,GAASpR,KAAK2f,eACpC3f,KAAK0d,SAAS/O,KAAK,CAAE5M,MAAOqP,EAAM6gB,QAASjyB,KAAK2f,kBAGlD8iB,EAAAviC,UAAAgyB,aAAA,SAAa9gB,EAAM8jB,QAAA,IAAAA,IAAAA,GAAA,GACjB9jB,EAAOpR,KAAK8P,QAAQ8P,MAAK,SAAAtgB,GACvB,OAAI41B,EACK51B,EAAEiR,QAAUa,EAAKZ,KAEjBlR,EAAEkR,OAASY,EAAKZ,QAI3B,IAAM7E,EAAM3L,KAAK2f,cAAcxB,WAAU,SAAA7e,GACvC,OAAOA,EAAEkR,OAASY,EAAKZ,MAAQlR,EAAEyC,QAAUqP,EAAKrP,OAASzC,EAAEoR,SAAWU,EAAKV,UAG7E1Q,KAAK2f,cAAc9T,OAAOF,EAAK,GAC/B3L,KAAK2f,cAAard,EAAOtC,KAAK2f,eAE9B3f,KAAK2d,WAAWhP,KAAK,CAAE5M,MAAOqP,EAAM6gB,QAASjyB,KAAK2f,iBAG5C8iB,EAAAviC,UAAA6iC,wBAAR,WACE,OAAQ/iC,KAAKkrB,SAAWlrB,KAAKkrB,QAAQvqB,QAAU,GA5IxCG,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,2CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,2CACSvJ,EAAA,CAAT4M,EAAAA,yCAEQ5M,EAAA,CAARuJ,EAAAA,uCACSvJ,EAAA,CAAT4M,EAAAA,uCACS5M,EAAA,CAAT4M,EAAAA,yCACS5M,EAAA,CAAT4M,EAAAA,2CAEgC5M,EAAA,CAAhCqxB,EAAAA,aAAa,0DAtBHsQ,EAAiB3hC,EAAA,CA3C7B2J,EAAAA,UAAU,CACTC,SAAU,uBACVC,SAAU,oxCAsCVC,cAAeC,EAAAA,kBAAkBC,KACjC8C,gBAAiBC,EAAAA,wBAAwBC,6oEAE9B20B,IAA0BvzB,YCxDvB+zB,GAASjzB,EAAMkzB,EAAKC,GAClC,IAAIC,EAAO,EACPC,EAAOH,EACLx7B,EAAQsI,EAAKtI,MAEnB,GAAIA,EAAQy7B,EACV,KAAOz7B,EAAQ27B,EAAOF,GACpBC,GAAQ,EACRC,EAAOh2B,KAAKi2B,KAAKJ,EAAME,GAI3B,MAAO,CAACC,EAAMD,GAGhB,SAAgBG,GAAWvzB,EAAMiB,EAAMkyB,EAAUK,GAU/C,IATA,IAAM/kB,EAAc2O,EAAAA,YACdvO,EAAcuO,EAAAA,YACd1lB,EAAQsI,EAAKtI,MACbH,EAASyI,EAAKzI,OAEdwC,EAAA9H,EAAAghC,GAAAjzB,EAAAiB,EAAAtQ,OAAAwiC,GAAA,GAACpX,EAAAhiB,EAAA,GAASq5B,EAAAr5B,EAAA,GAEVmd,EAAU,GACVuI,EAAU,GACPjvB,EAAI,EAAGA,EAAI4iC,EAAM5iC,IACxBivB,EAAQrtB,KAAK5B,GAEf,IAASA,EAAI,EAAGA,EAAIurB,EAASvrB,IAC3B0mB,EAAQ9kB,KAAK5B,GAEfie,EAAO9I,OAAOuR,GACdrI,EAAOlJ,OAAO8Z,GAEdhR,EAAOsW,WAAW,CAAC,EAAGrtB,GAAQ,IAC9BmX,EAAOkW,WAAW,CAAC,EAAGxtB,GAAS,IAE/B,IAAMk8B,EAAM,GACNhZ,EAAQ+Y,GAA6CvyB,EAwB5CmH,KAAI,SAAA9Y,GAAK,OAACA,EAAIA,EAAEyC,MAAQ,KAAIwoB,QAAO,SAACC,EAAKtH,GAAQ,OAAAsH,EAAMtH,IAAK,GAvBrEwgB,EAAYjlB,EAAO7J,YACnB+uB,EAAa9kB,EAAOjK,YAE1B,IAASpU,EAAI,EAAGA,EAAIyQ,EAAKtQ,OAAQH,IAC/BijC,EAAIjjC,GAAK,GACTijC,EAAIjjC,GAAGyQ,KAAO,CACZT,KAAMS,EAAKzQ,GAAKyQ,EAAKzQ,GAAGgQ,KAAO,GAC/BzO,MAAOkP,EAAKzQ,GAAKyQ,EAAKzQ,GAAGuB,WAAQiC,EACjC4/B,MAAO3yB,EAAKzQ,GAAKyQ,EAAKzQ,GAAGojC,WAAQ5/B,EACjCuM,MAAOU,EAAKzQ,GAAKyQ,EAAKzQ,GAAG+P,MAAQ,IAEnCkzB,EAAIjjC,GAAGgS,EAAIiM,EAAOje,EAAIurB,GACtB0X,EAAIjjC,GAAG8R,EAAIuM,EAAOxR,KAAKC,MAAM9M,EAAIurB,IACjC0X,EAAIjjC,GAAGkH,MAAQg8B,EACfD,EAAIjjC,GAAG+G,OAASo8B,EAChBF,EAAIjjC,GAAGyQ,KAAK4yB,QAAUpZ,EAAQ,EAAIgZ,EAAIjjC,GAAGyQ,KAAKlP,MAAQ0oB,EAAQ,EAC9DgZ,EAAIjjC,GAAGyQ,KAAKwZ,MAAQA,EAGtB,OAAOgZ,qBC+BT,SAAAK,IAAA,IAAAt6B,EAAA,OAAA4C,GAAAA,EAAAvL,MAAAb,KAAAU,YAAAV,YAEWwJ,EAAAoQ,iBAA2B,EAE3BpQ,EAAA+G,MAAgB,QAChB/G,EAAA25B,SAAmB,IACnB35B,EAAAmW,cAAuB,GAEtBnW,EAAAkU,SAA8B,IAAIjR,EAAAA,aAClCjD,EAAAmU,WAAgC,IAAIlR,EAAAA,aAQ9CjD,EAAAyI,OAAS,CAAC,GAAI,GAAI,GAAI,MA0IxB,OA3JsCnS,EAAAgkC,EAAA13B,GAqBpC03B,EAAA5jC,UAAA4M,OAAA,WACEV,EAAAlM,UAAM4M,OAAMlM,KAAAZ,MAEZA,KAAKgQ,KAAOib,GAAwB,CAClCvjB,MAAO1H,KAAK0H,MACZH,OAAQvH,KAAKuH,OACb2jB,QAASlrB,KAAKiS,SAGhBjS,KAAKqQ,cAELrQ,KAAK2V,OAAS3V,KAAKs5B,YAEnBt5B,KAAKiR,KAAOsyB,GAAWvjC,KAAKgQ,KAAMhQ,KAAK8P,QAAS9P,KAAKmjC,SAAUnjC,KAAKwjC,iBACpExjC,KAAKoS,UAAY,aAAapS,KAAKiS,OAAO,GAAE,MAAMjS,KAAKiS,OAAO,GAAE,IAEhEjS,KAAK0Q,OAAS1Q,KAAK+jC,YACnB/jC,KAAK+vB,YAEL/vB,KAAKi4B,YAAcj4B,KAAKi4B,aAAej4B,KAAKogC,oBAG9C0D,EAAA5jC,UAAAkgC,mBAAA,SAAmBr2B,OAAEkH,EAAAlH,EAAAkH,KAGnB,MAAO,uCAFOwB,EAAUiK,EAAYzL,EAAKT,OAGJ,4CAFzBS,EAAKlP,MAAMyS,iBAGU,iBAInCsvB,EAAA5jC,UAAAo5B,UAAA,WACE,OAAOt5B,KAAK8P,QAAQsI,KAAI,SAAA9Y,GAAK,OAAAA,EAAEiR,UAGjCuzB,EAAA5jC,UAAA6jC,UAAA,WAAA,IAAAv6B,EAAAxJ,KACQyqB,EAAQzqB,KAAKwjC,gBAAkBxjC,KAAKwjC,gBAAkBxjC,KAAKsqB,WAEjE,OAAOtqB,KAAKiR,KAAKmH,KAAI,SAAA9Y,GACnB,IAEMkR,EAAOlR,EAAE2R,KAAKT,KACdD,EAAQmM,EAAYlM,GACpBzO,EAAQzC,EAAE2R,KAAKlP,MACfod,EAAShK,EAAAA,IAAI,CAAC7V,EAAEoI,MAJN,GAIuBpI,EAAEiI,OALb,KAK8C,EAAI,EACxEi4B,EAAuB,GAATrgB,EAEhB4C,EAAQ,EAaZ,MAAO,CACL3P,UAAW,cAJA9S,EAAEkT,GAAKlT,EAAEoI,MAjBN,IAiByB,GAIX,MAHjBpI,EAAEgT,GAAKhT,EAAEiI,OAnBM,IAmB0B,GAGf,IACrCyX,OAda,WAEb,OAAc,KADd+C,GAAS,GAEA,wBAEAvY,EAAKijB,WAAWxN,SAAS1O,IAUlCivB,YAAWA,EACXd,YAAavf,EACb3O,KAAIA,EACJD,MAAOkC,EAAUlC,GACjBka,MAAO1oB,EACPA,MAAKA,EACL8hC,QAASG,EAAAA,OAAO,MAAPA,CAAc1kC,EAAE2R,KAAK4yB,SAC9B5yB,KAAM,CACJ3R,EACA,CACE2R,KAAM,CACJgzB,OAAO,EACPliC,MAAO0oB,EAAQ1oB,EACfyO,KAAMlR,EAAE2R,KAAKT,aAQzBszB,EAAA5jC,UAAAoqB,SAAA,WACE,OAAOtqB,KAAK8P,QAAQsI,KAAI,SAAA9Y,GAAK,OAAAA,EAAEyC,SAAOwoB,QAAO,SAACC,EAAKlrB,GAAM,OAAAkrB,EAAMlrB,IAAG,IAGpEwkC,EAAA5jC,UAAAsf,QAAA,SAAQvO,GACNjR,KAAKuP,OAAOZ,KAAKsC,IAGnB6yB,EAAA5jC,UAAA6vB,UAAA,WACE/vB,KAAKysB,WAAa,IAAIL,GAAYpsB,KAAKqP,OAAQ,UAAWrP,KAAK2V,OAAQ3V,KAAKqsB,eAG9EyX,EAAA5jC,UAAA8xB,WAAA,SAAW5gB,EAAM8jB,QAAA,IAAAA,IAAAA,GAAA,GACf9jB,EAAOpR,KAAK8P,QAAQ8P,MAAK,SAAAtgB,GACvB,OAAI41B,EACK51B,EAAEiR,QAAUa,EAAKZ,KAEjBlR,EAAEkR,OAASY,EAAKZ,QAIfxQ,KAAK2f,cAAcxB,WAAU,SAAA7e,GACvC,OAAOA,EAAEkR,OAASY,EAAKZ,MAAQlR,EAAEyC,QAAUqP,EAAKrP,OAASzC,EAAEoR,SAAWU,EAAKV,WAElE,IAIX1Q,KAAK2f,cAAard,EAAA,CAAI8O,GAASpR,KAAK2f,eACpC3f,KAAK0d,SAAS/O,KAAK,CAAE5M,MAAOqP,EAAM6gB,QAASjyB,KAAK2f,kBAGlDmkB,EAAA5jC,UAAAgyB,aAAA,SAAa9gB,EAAM8jB,QAAA,IAAAA,IAAAA,GAAA,GACjB9jB,EAAOpR,KAAK8P,QAAQ8P,MAAK,SAAAtgB,GACvB,OAAI41B,EACK51B,EAAEiR,QAAUa,EAAKZ,KAEjBlR,EAAEkR,OAASY,EAAKZ,QAI3B,IAAM7E,EAAM3L,KAAK2f,cAAcxB,WAAU,SAAA7e,GACvC,OAAOA,EAAEkR,OAASY,EAAKZ,MAAQlR,EAAEyC,QAAUqP,EAAKrP,OAASzC,EAAEoR,SAAWU,EAAKV,UAG7E1Q,KAAK2f,cAAc9T,OAAOF,EAAK,GAC/B3L,KAAK2f,cAAard,EAAOtC,KAAK2f,eAE9B3f,KAAK2d,WAAWhP,KAAK,CAAE5M,MAAOqP,EAAM6gB,QAASjyB,KAAK2f,iBAxJ3C7e,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,2CACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,6CAESvJ,EAAA,CAAT4M,EAAAA,yCACS5M,EAAA,CAAT4M,EAAAA,2CAUgC5M,EAAA,CAAhCqxB,EAAAA,aAAa,0DAnBH2R,EAAgBhjC,EAAA,CAtE5B2J,EAAAA,UAAU,CACTC,SAAU,sBACVC,SAAU,80EAiEVC,cAAeC,EAAAA,kBAAkBC,KACjC8C,gBAAiBC,EAAAA,wBAAwBC,isDAE9Bg2B,IAAyB50B,iBCtCpC,SAAAg1B,EAAY1gC,GAZHxD,KAAAw/B,YAAc,GACdx/B,KAAA0+B,YAAc,GACd1+B,KAAAuM,YAAsB,EAErBvM,KAAAuP,OAAS,IAAI9C,EAAAA,aACbzM,KAAA0d,SAAW,IAAIjR,EAAAA,aACfzM,KAAA2d,WAAa,IAAIlR,EAAAA,aAOzBzM,KAAKwD,QAAUA,EAAQC,cAoD3B,OAjDEygC,EAAAhkC,UAAA0M,YAAA,SAAYC,GACV7M,KAAK8M,UAGPo3B,EAAAhkC,UAAA4M,OAAA,WACE9M,KAAKmkC,OAASC,EAAAA,MACXriC,OAAM,SAAAzC,GAAK,OAAAA,EAAE2R,KAAKlP,SAClB2uB,KAAK,MAER1wB,KAAKqkC,KAAOrkC,KAAKskC,WAGnBJ,EAAAhkC,UAAAokC,QAAA,WAAA,IAAA96B,EAAAxJ,KACE,OAAOA,KAAKmkC,OAAOnkC,KAAKiR,MAAMmH,KAAI,SAAC2oB,EAAK7X,GACtC,IAAM3Y,EAAQwwB,EAAI9vB,KAAKA,KAAKT,KACtByzB,EAAQlD,EAAI9vB,KAAKA,KAAKgzB,MAEd,IAAV/a,IACF6X,EAAI3B,WAAa,GAGnB,IAAMzgB,EAAQnV,EAAKwV,OAAOzO,GAC1B,MAAO,CACLU,KAAM8vB,EAAI9vB,KAAKA,KACfwP,MAAO,UAAiByI,EACxB9S,KAAMuI,EACNygB,WAAY6E,EAAQ,EAAIlD,EAAI3B,WAC5BK,SAAUsB,EAAItB,SACdtxB,QAAS3E,EAAK+C,aAAe03B,EAC7B1C,eAAgB0C,OAKtBC,EAAAhkC,UAAAsf,QAAA,SAAQvO,GACNjR,KAAKuP,OAAOZ,KAAK3O,KAAKiR,KAAK,GAAGA,OAGhCizB,EAAAhkC,UAAA+oB,QAAA,SAAQC,EAAO9X,GACb,OAAOA,EAAKH,KAAKT,MAGnB0zB,EAAAhkC,UAAAqQ,MAAA,SAAMwwB,GACJ,OAAOA,EAAI9vB,KAAKT,MAGlB0zB,EAAAhkC,UAAAye,MAAA,SAAMoiB,GACJ,OAAO/gC,KAAKgf,OAAOhf,KAAKuQ,MAAMwwB,8CAnDX52B,EAAAA,cAdZrJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,oCACQvJ,EAAA,CAARuJ,EAAAA,2CACQvJ,EAAA,CAARuJ,EAAAA,2CACQvJ,EAAA,CAARuJ,EAAAA,0CAESvJ,EAAA,CAAT4M,EAAAA,uCACS5M,EAAA,CAAT4M,EAAAA,yCACS5M,EAAA,CAAT4M,EAAAA,2CATUw2B,EAAsBpjC,EAAA,CA1BlC2J,EAAAA,UAAU,CACTC,SAAU,gCACVC,SAAU,iqBAsBViD,gBAAiBC,EAAAA,wBAAwBC,UAE9Bo2B,oBCyBb,SAAAK,IAEWvkC,KAAA0Q,OAAc,GAEd1Q,KAAAw/B,YAAc,GACdx/B,KAAA0+B,YAAc,GAMd1+B,KAAA6iC,YAAsB,EACtB7iC,KAAA8iC,eAAyB,GAEzB9iC,KAAA4Z,iBAA2B,EAE3B5Z,KAAAuM,YAAsB,EAErBvM,KAAAuP,OAAS,IAAI9C,EAAAA,aACbzM,KAAA0d,SAAW,IAAIjR,EAAAA,aACfzM,KAAA2d,WAAa,IAAIlR,EAAAA,aACjBzM,KAAAwhC,SAAW,IAAI/0B,EAAAA,aAwH3B,OAnHE83B,EAAArkC,UAAA0M,YAAA,SAAYC,GACV7M,KAAK8M,UAGPy3B,EAAArkC,UAAA4M,OAAA,WACE,IAIM03B,EAJeJ,EAAAA,MAClBriC,OAAM,SAAAzC,GAAK,OAAAA,EAAEyC,SACb2uB,KAAK,KAEQ+T,CAAazkC,KAAK0Q,QAElC1Q,KAAK0S,IAAMA,EAAAA,IAAI8xB,GAAS,SAAAllC,GACtB,OAAOA,EAAEyC,SAGX/B,KAAKiR,KAAOjR,KAAK0kC,wBAAwBF,GACzCxkC,KAAKi4B,YAAcj4B,KAAKi4B,aAAej4B,KAAKogC,oBAG9CmE,EAAArkC,UAAAkhC,SAAA,SAAS9hC,GACP,OAAOA,EAAE8/B,YAAc9/B,EAAEmgC,SAAWngC,EAAE8/B,YAAc,GAGtDmF,EAAArkC,UAAAykC,SAAA,WAGE,OAAO5D,EAAAA,MACJvB,YAHY,IAGAx/B,KAAK0+B,aACjBA,YAJY,IAIA1+B,KAAK0+B,cAGtB6F,EAAArkC,UAAAwkC,wBAAA,SAAwBE,GAAxB,IAAAp7B,EAAAxJ,KAGQ6kC,EAAiBD,EAEvBC,EAAe/a,SAAQ,SAAAxqB,GACrBA,EAAEogC,IAAMl2B,EAAKm7B,WAAW3D,SAAS1hC,GACjCA,EAAEogC,IAAI,GANO,IAMOl2B,EAAKk1B,aAAel1B,EAAK43B,SAAS9hC,GAAK+N,KAAKkI,GAAK,GAAK,MAG5E,IAAK,IAAI/U,EAAI,EAAGA,EAAIqkC,EAAelkC,OAAS,EAAGH,IAAK,CAClD,IAAMmwB,EAAIkU,EAAerkC,GACzB,GAAKR,KAAK8kC,aAAanU,GAIvB,IAAK,IAAIhgB,EAAInQ,EAAI,EAAGmQ,EAAIk0B,EAAelkC,OAAQgQ,IAAK,CAClD,IAAMpR,EAAIslC,EAAel0B,GACzB,GAAK3Q,KAAK8kC,aAAavlC,IAInBA,EAAEmgC,IAAI,GAAK/O,EAAE+O,IAAI,GAAK,EAAG,CAE3B,IAAMh+B,EAtBQ,GAsBU2L,KAAK+V,IAAI7jB,EAAEmgC,IAAI,GAAK/O,EAAE+O,IAAI,IAC9Ch+B,EAAI,IAENnC,EAAEmgC,IAAI,IAAMryB,KAAKqK,KAAKnY,EAAEmgC,IAAI,IAAMh+B,KAM1C,OAAOmjC,GAGTN,EAAArkC,UAAA4kC,aAAA,SAAaC,GACX,OAAO/kC,KAAKglC,YAAcD,EAAMtF,SAAWsF,EAAM3F,WAAa/xB,KAAKkI,GAAK,IAG1EgvB,EAAArkC,UAAA+kC,gBAAA,SAAgBtU,GACd,OAAO3wB,KAAKqc,qBAAkBrY,EAAYhE,KAAKi4B,YAAYtH,IAG7D4T,EAAArkC,UAAAglC,UAAA,SAAUH,GACR,OAAI/kC,KAAKkqB,gBACAlqB,KAAKkqB,gBAAgB6a,EAAM9zB,KAAKT,MAElCxQ,KAAKuQ,MAAMw0B,IAGpBR,EAAArkC,UAAAqQ,MAAA,SAAMw0B,GACJ,OAAOroB,EAAYqoB,EAAM9zB,KAAKT,OAGhC+zB,EAAArkC,UAAAkgC,mBAAA,SAAmB2E,GACjB,IAAMx0B,EAAQvQ,KAAKuQ,MAAMw0B,GACnB7hB,EAAMxG,EAAYqoB,EAAM9zB,KAAKlP,OAEnC,MAAO,uCACyB4a,GAAYpM,GAAM,4CACpB2S,EAAG,iBAInCqhB,EAAArkC,UAAAye,MAAA,SAAMomB,GACJ,OAAO/kC,KAAKgf,OAAOC,SAASjf,KAAKuQ,MAAMw0B,KAGzCR,EAAArkC,UAAA+oB,QAAA,SAAQC,EAAO9X,GACb,OAAOA,EAAKH,KAAKT,MAGnB+zB,EAAArkC,UAAAsf,QAAA,SAAQvO,GACNjR,KAAKuP,OAAOZ,KAAKsC,IAGnBszB,EAAArkC,UAAAuf,SAAA,SAASC,GACP,QAAK1f,KAAK2f,oBAIM3b,IAHHhE,KAAK2f,cAAcC,MAAK,SAAAtgB,GACnC,OAAOogB,EAAMlP,OAASlR,EAAEkR,MAAQkP,EAAMhP,SAAWpR,EAAEoR,WAxI9C5P,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,oCACQvJ,EAAA,CAARuJ,EAAAA,2CACQvJ,EAAA,CAARuJ,EAAAA,2CACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,2CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,0CAESvJ,EAAA,CAAT4M,EAAAA,uCACS5M,EAAA,CAAT4M,EAAAA,yCACS5M,EAAA,CAAT4M,EAAAA,2CACS5M,EAAA,CAAT4M,EAAAA,yCArBU62B,EAAkBzjC,EAAA,CAhD9B2J,EAAAA,UAAU,CACTC,SAAU,2BACVC,SAAU,s3CA4CViD,gBAAiBC,EAAAA,wBAAwBC,UAE9By2B,oBChCb,SAAAY,KAA6B,OAAhBA,EAAcrkC,EAAA,CArB1BkY,EAAAA,SAAS,CACRC,QAAS,CAAC+R,IACV7R,aAAc,CACZmnB,GACAC,GACAc,GACAoB,GACAqB,GACAI,GACAK,IAEFnrB,QAAS,CACPknB,GACAC,GACAc,GACAoB,GACAqB,GACAI,GACAK,OAGSY,oBCnBb,SAAAC,KAA+B,OAAlBA,EAAgBtkC,EAAA,CAL5BkY,EAAAA,SAAS,CACRC,QAAS,CAAC+R,GAAmBma,GAAgBtH,IAC7C1kB,aAAc,CAAC4kB,GAAqB8B,IACpCzmB,QAAS,CAAC2kB,GAAqB8B,OAEpBuF,oBC6FX,SAAAC,EAAY7hC,EAA6B4L,EAA+Bf,GAA/BrO,KAAAoP,GAAAA,EAA+BpP,KAAAqO,KAAAA,EAzB/DrO,KAAAuM,YAAsB,EAErBvM,KAAAuP,OAAS,IAAI9C,EAAAA,aAKvBzM,KAAA+B,MAAgB,GAMhB/B,KAAAslC,aAAuB,GACvBtlC,KAAA6U,cAAwB,GACxB7U,KAAAmhB,aAAuB,EAGvBnhB,KAAAulC,WAAqB,GAErBvlC,KAAAwlC,YAAc,CAAC,GAAI,GAAI,EAAG,IAC1BxlC,KAAAylC,cAAgB,GAKdzlC,KAAKwD,QAAUA,EAAQC,cAgH3B,OA7GE4hC,EAAAnlC,UAAA0M,YAAA,SAAYC,GACV7M,KAAK8M,UAGPu4B,EAAAnlC,UAAAyP,YAAA,WACEqU,qBAAqBhkB,KAAKikB,eAG5BohB,EAAAnlC,UAAA4M,OAAA,WAAA,IAAAtD,EAAAxJ,KACEA,KAAKqO,KAAKK,KAAI,WACZ,IAAMg3B,EAAWl8B,EAAKyH,WAAmC,IAApBzH,EAAKyH,KAAKlP,MACzCmiB,EAAkB1a,EAAK0a,iBAAe,SAAKyhB,GAAQ,OAAAA,EAAK5jC,MAAMyS,kBAC9D0V,EAAkB1gB,EAAK0gB,iBAAe,SAAKyb,GAAQ,OAAAhpB,GAAYlK,EAAUkzB,EAAKp1B,MAAO,MAE3F/G,EAAK4I,UAAY,aAAa5I,EAAKgJ,EAAC,MAAMhJ,EAAK8I,EAAC,IAEhD9I,EAAKo8B,UAAYv4B,KAAKqF,IAAI,EAAGlJ,EAAK9B,OAAS8B,EAAKg8B,YAAY,GAAKh8B,EAAKg8B,YAAY,GAClFh8B,EAAKk6B,UAAYr2B,KAAKqF,IAAI,EAAGlJ,EAAK9B,OAClC8B,EAAKm6B,WAAat2B,KAAKqF,IAAI,EAAGlJ,EAAKjC,QAEnCiC,EAAK+G,MAAQ/G,EAAK+G,MAAQ/G,EAAK+G,MAAQ/G,EAAKyH,KAAKT,KAEjD,IAAMq1B,EAAW,CACft1B,MAAO/G,EAAK+G,MACZU,KAAMzH,EAAKyH,KACXlP,MAAOyH,EAAKyH,KAAKlP,OAGnByH,EAAKuf,eAAiBmB,EAAgB2b,GACtCr8B,EAAKs8B,cAAgB,kBAAiBt8B,EAAKm6B,WAAan6B,EAAK+7B,YAAU,IAEvE,IAAMxjC,EAAQ2jC,EAAWxhB,EAAgB2hB,GAAY,GAErDr8B,EAAKzH,MAAQyH,EAAKu8B,YAAYhkC,GAC9ByH,EAAKw8B,aAELx8B,EAAKy8B,SAAWvvB,EAAY,EAAG,EAAGlN,EAAKk6B,UAAWl6B,EAAK+7B,WAAY,EAAG,EAAC,GAAO,GAAO,GAAM,IAE3F7+B,YAAW,WACT8C,EAAK08B,YACL18B,EAAKzH,MAAQA,EACT2jC,IAAal8B,EAAK2X,aACpBza,YAAW,WAAM,OAAA8C,EAAK28B,eAAc,MAErC,OAIPd,EAAAnlC,UAAA6lC,YAAA,SAAYhkC,GAIV,OAHI/B,KAAKomC,YAAcpmC,KAAKomC,WAAarkC,EAAMpB,SAC7CoB,GAAS,IAASskC,OAAOrmC,KAAKomC,WAAarkC,EAAMpB,SAE5CoB,GAGTsjC,EAAAnlC,UAAAimC,WAAA,WAAA,IAAA38B,EAAAxJ,KACE,IAAKA,KAAKmhB,aAAenhB,KAAKuM,WAAY,CACxCyX,qBAAqBhkB,KAAKikB,cAE1B,IAAMqiB,EAAMtmC,KAAKiR,KAAKlP,MAChBwkC,EAAOpjB,GAAemjB,GACtBE,EAAkBxmC,KAAKkkB,iBAAe,SAAKyhB,GAAQ,OAAAA,EAAK5jC,MAAMyS,kBAapExU,KAAKikB,aAAelC,GAAM,EAAGukB,EAAKC,EAAM,GAXvB,SAACx8B,OAAEhI,EAAAgI,EAAAhI,MAAOkhB,EAAAlZ,EAAAkZ,SACzBzZ,EAAK6E,KAAKK,KAAI,WACZ3M,EAAQkhB,EAAWqjB,EAAMvkC,EACzByH,EAAKzH,MAAQykC,EAAgB,CAAEj2B,MAAO/G,EAAK+G,MAAOU,KAAMzH,EAAKyH,KAAMlP,MAAKA,IACnEkhB,IACHzZ,EAAKzH,MAAQyH,EAAKu8B,YAAYv8B,EAAKzH,QAErCyH,EAAK4F,GAAGc,qBAKZlQ,KAAKmhB,aAAc,IAIvBkkB,EAAAnlC,UAAAgmC,UAAA,WAAA,IAAA18B,EAAAxJ,KACEA,KAAKqO,KAAKK,KAAI,WACN,IAAA3E,EAAAP,EAAAi9B,OAAAhjC,cAAAkG,wBAAEjC,EAAAqC,EAAArC,MAAOH,EAAAwC,EAAAxC,OACf,GAAc,IAAVG,GAA0B,IAAXH,EAAnB,CAIA,IAAMi+B,EAAeh8B,EAAKg8B,YAAY,GAAKh8B,EAAKg8B,YAAY,GAAKh8B,EAAKk6B,UAAY,EAC5EgD,EAAiBl9B,EAAKk6B,UAAY,EAAI8B,EACtCmB,EAAkBn9B,EAAKm6B,WAAa,EAEpCiD,EAAcv5B,KAAK8H,IAAIuxB,EAAiBh/B,EAAOi/B,EAAkBp/B,GACvEiC,EAAK87B,aAAej4B,KAAKC,MAAM9D,EAAK87B,aAAesB,GACnDp9B,EAAKi8B,cAAgBp4B,KAAK8H,IAAI3L,EAAK87B,aAAc,IAEjD97B,EAAKw8B,aACLx8B,EAAK4F,GAAGc,oBAIZm1B,EAAAnlC,UAAA8lC,WAAA,WACEhmC,KAAKwlC,YAAY,GAAKxlC,KAAKwlC,YAAY,GAAKxlC,KAAK0jC,UAAY,EAC7D,IAAMptB,EAAUtW,KAAK2jC,WAAa,EAClC3jC,KAAKwlC,YAAY,GAAKlvB,EAAUtW,KAAKslC,aAAetlC,KAAKylC,cAAgB,EACzEzlC,KAAKwlC,YAAY,GAAKlvB,EAAUtW,KAAKylC,eAGvCJ,EAAAnlC,UAAAsf,QAAA,WACExf,KAAKuP,OAAOZ,KAAK3O,KAAKiR,gDA/GH9G,EAAAA,kBAAwB2H,EAAAA,yBAAiC9C,EAAAA,UAtCrElO,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,yCAEQvJ,EAAA,CAARuJ,EAAAA,iCACQvJ,EAAA,CAARuJ,EAAAA,iCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,oCACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,0CAESvJ,EAAA,CAAT4M,EAAAA,uCAEuC5M,EAAA,CAAvCwJ,EAAAA,UAAU,SAAU,CAAEsc,QAAQ,kCAlBpBye,EAAavkC,EAAA,CA/CzB2J,EAAAA,UAAU,CACTC,SAAU,qBACVC,SAAU,s0CA2CViD,gBAAiBC,EAAAA,wBAAwBC,UAE9Bu3B,MChDb,SAAgBwB,GAAY9kC,GAC1B,IAAM4c,EAAQmoB,EAAAA,IAAa/kC,GACnBX,EAAAud,EAAAvd,EAAGkP,EAAAqO,EAAArO,EAAG/Q,EAAAof,EAAApf,EACd,OAAgB,IADCof,EAAAzQ,QAERyQ,EAAM5J,WAKRgyB,GAAcpoB,GAHJ,IAAJvd,EAAc,IAAJkP,EAAc,IAAJ/Q,GAAW,KACvB,KAAO,GAAM,IAYpC,SAAgBwnC,GAAch9B,EAAa85B,OAAXziC,EAAA2I,EAAA3I,EAAGkP,EAAAvG,EAAAuG,EAAG/Q,EAAAwK,EAAAxK,EAC9Be,EAAIujC,EAAU,EAAI,EAAI,IACtBjkC,EAAIikC,EAAU,GAAe,EAAXA,EAAeA,EAMvC,MAAO,QAJPziC,EAAIiM,KAAK2V,OAAO1iB,EAAIc,GAAKxB,GAAKwB,GAIf,MAHfkP,EAAIjD,KAAK2V,OAAO1iB,EAAIgQ,GAAK1Q,GAAK0Q,GAGT,MAFrB/Q,EAAI8N,KAAK2V,OAAO1iB,EAAIf,GAAKK,GAAKL,GAEH,sBCY7B,SAAAynC,IAKWhnC,KAAAi8B,aAAe,GAIfj8B,KAAAinC,WAAa,mBAIbjnC,KAAAuM,YAAsB,EAErBvM,KAAAuP,OAAS,IAAI9C,EAAAA,aA0EzB,OApEEu6B,EAAA9mC,UAAA0M,YAAA,SAAYC,GACV7M,KAAK8M,UAGPk6B,EAAA9mC,UAAA4M,OAAA,WACE,GAAI9M,KAAKiR,KAAKtQ,OAAS,EAAG,CACxB,IAAM6lC,EAAkBxmC,KAAKkkB,iBAAe,SAAKyhB,GAAQ,OAAAA,EAAK5jC,MAAMyS,kBAE9D0yB,EAAgBlnC,KAAKiR,KACxBmH,KAAI,SAAA9Y,GAEH,OADiBA,GAAKA,EAAE2R,WAAgC,IAAjB3R,EAAE2R,KAAKlP,OAA0C,OAAjBzC,EAAE2R,KAAKlP,MAE1EykC,EAAgB,CACdv1B,KAAM3R,EAAE2R,KACRV,MAAOjR,EAAIA,EAAE2R,KAAKT,KAAO,GACzBzO,MAAOzC,GAAKA,EAAE2R,KAAO3R,EAAE2R,KAAKlP,MAAQ,KACnCpB,OACH,KAEL+vB,MAAK,SAACC,EAAGpxB,GAAM,OAAAA,EAAIoxB,KAChBhlB,EAAM0B,KAAKi2B,KAAKtjC,KAAKiR,KAAKtQ,OAAS,GACzCX,KAAKomC,WAAac,EAAcv7B,GAGlC,IAAMw7B,EAAQnnC,KAAKonC,WACnBpnC,KAAKmnC,MAAQA,EAAM3f,QAAO,SAAAloB,GAAK,OAAiB,OAAjBA,EAAE2R,KAAKlP,SACtC/B,KAAKqnC,WAAaF,EAAM3f,QAAO,SAAAloB,GAAK,OAAiB,OAAjBA,EAAE2R,KAAKlP,UAG7CilC,EAAA9mC,UAAAknC,SAAA,WAAA,IAAA59B,EAAAxJ,KACQsnC,EACyB,iBAAtBtnC,KAAKi8B,aAA4Bj8B,KAAKi8B,aAAej8B,KAAKi8B,aAAa,GAAKj8B,KAAKi8B,aAAa,GACjGsL,EACyB,iBAAtBvnC,KAAKi8B,aAA4Bj8B,KAAKi8B,aAAej8B,KAAKi8B,aAAa,GAAKj8B,KAAKi8B,aAAa,GAEvG,OAAOj8B,KAAKiR,KAAKmH,KAAI,SAAC9Y,EAAG4pB,GACvB,IAAI3Y,EAAQjR,EAAE2R,KAAKT,KAEjBD,EADEA,GAAoC,SAA3BA,EAAMtQ,YAAYuQ,KACrBD,EAAME,qBAENF,EAAQA,EAAMiE,iBAAmBjE,EAG3C,IAAMxO,EAAQzC,EAAE2R,KAAKlP,MACfylC,EAAaj3B,EAAQ/G,EAAKwV,OAAOC,SAAS1O,GAAS/G,EAAKy9B,WACxDtoB,EAAQnV,EAAKi+B,WAAaD,GAAc,OAC9C,MAAO,CACLh1B,EAAGlT,EAAEkT,EACLF,EAAGhT,EAAEgT,EACL5K,MAAOpI,EAAEoI,MAAQ6/B,EACjBhgC,OAAQjI,EAAEiI,OAAS+/B,EACnB3oB,MAAKA,EACL+oB,UAAWl+B,EAAKk+B,WAAaF,EAC7BG,UAAWn+B,EAAKm+B,WAAad,GAAYloB,GACzCpO,MAAKA,EACLU,KAAM3R,EAAE2R,KACRgnB,YAAgB1nB,EAAK,KAAKxO,OAKhCilC,EAAA9mC,UAAA+oB,QAAA,SAAQC,EAAOyc,GACb,OAAOA,EAAKp1B,OAGdy2B,EAAA9mC,UAAAsf,QAAA,SAAQvO,GACNjR,KAAKuP,OAAOZ,KAAKsC,IAtFVnQ,EAAA,CAARuJ,EAAAA,oCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,oCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,4CAEQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,0CAESvJ,EAAA,CAAT4M,EAAAA,uCAfUs5B,EAAmBlmC,EAAA,CAnC/B2J,EAAAA,UAAU,CACTC,SAAU,4BACVC,SAAU,4wBA+BViD,gBAAiBC,EAAAA,wBAAwBC,UAE9Bk5B,qBCxBb,SAAAY,IAAA,IAAAp+B,EAAA,OAAA4C,GAAAA,EAAAvL,MAAAb,KAAAU,YAAAV,YAGWwJ,EAAAy9B,WAAqB,mBACrBz9B,EAAAyyB,aAAe,GAYxBzyB,EAAAyI,OAAS,CAAC,GAAI,GAAI,GAAI,MA+CxB,OA/DyCnS,EAAA8nC,EAAAx7B,GAoBvC5M,OAAAgC,eAAIomC,EAAA1nC,UAAA,YAAS,KAAb,WACE,QAASF,KAAKuP,OAAOs4B,UAAUlnC,wCAGjCinC,EAAA1nC,UAAA4M,OAAA,WACEV,EAAAlM,UAAM4M,OAAMlM,KAAAZ,MAEZA,KAAKgQ,KAAOib,GAAwB,CAClCvjB,MAAO1H,KAAK0H,MACZH,OAAQvH,KAAKuH,OACb2jB,QAASlrB,KAAKiS,SAGhBjS,KAAKqQ,cAELrQ,KAAK2V,OAAS3V,KAAKs5B,YAEnBt5B,KAAK+vB,YACL/vB,KAAKoS,UAAY,aAAapS,KAAKgQ,KAAKgc,QAAO,MAAMhsB,KAAKiS,OAAO,GAAE,IAOnE,IALA,IAAMgjB,EAAOgO,GAASjjC,KAAKgQ,KAAMhQ,KAAK8P,QAAQnP,OAAQ,KAChD07B,EAAIpH,EAAK,GAAKA,EAAK,GAEnBhkB,EAAOjR,KAAK8P,QAAQ8C,QAEnB3B,EAAKtQ,OAAS07B,GACnBprB,EAAK7O,KAAK,CAAEL,MAAO,OAGrB/B,KAAKiR,KAAOsyB,GAAWvjC,KAAKgQ,KAAMiB,EAAM,IAAKjR,KAAKwjC,kBAGpDoE,EAAA1nC,UAAAo5B,UAAA,WACE,OAAOt5B,KAAK8P,QAAQsI,KAAI,SAAA9Y,GAAK,OAAAA,EAAEiR,UAGjCq3B,EAAA1nC,UAAAsf,QAAA,SAAQvO,GACNjR,KAAKuP,OAAOZ,KAAKsC,IAGnB22B,EAAA1nC,UAAA6vB,UAAA,WACE/vB,KAAKgf,OAAS,IAAIoN,GAAYpsB,KAAKqP,OAAQ,UAAWrP,KAAK2V,OAAQ3V,KAAKqsB,eA5DjEvrB,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,4CACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,+CARUu9B,EAAmB9mC,EAAA,CA3B/B2J,EAAAA,UAAU,CACTC,SAAU,yBACVC,SAAU,iuBAsBVC,cAAeC,EAAAA,kBAAkBC,KACjC8C,gBAAiBC,EAAAA,wBAAwBC,wjEAE9B85B,IAA4B14B,iBCtBzC,SAAA44B,KAA+B,OAAlBA,EAAgBhnC,EAAA,CAL5BkY,EAAAA,SAAS,CACRC,QAAS,CAAC+R,IACV7R,aAAc,CAACksB,GAAe2B,GAAqBY,IACnDxuB,QAAS,CAACisB,GAAe2B,GAAqBY,OAEnCE,oBCsEX,SAAAC,EAAYvkC,GAfHxD,KAAAkhB,UAAoB,EACpBlhB,KAAAuM,YAAsB,EAErBvM,KAAAuP,OAAS,IAAI9C,EAAAA,aAUvBzM,KAAAmhB,aAAuB,EAGrBnhB,KAAKwD,QAAUA,EAAQC,cAyF3B,OAtFEskC,EAAA7nC,UAAA0M,YAAA,WACE5M,KAAK8M,SAEL9M,KAAKkkB,gBAAkBlkB,KAAKkkB,iBAAe,SAAKniB,GAAS,OAAAA,EAAMyS,kBAC/D,IAAM0V,EAAkBlqB,KAAKkqB,iBAAe,SAAK6R,GAAQ,OAAApf,GAAYlK,EAAUspB,EAAKxrB,MAAO,MAErFy3B,EAAW,CACf/2B,KAAMjR,KAAKiR,KACXV,MAAOvQ,KAAKuQ,MACZxO,MAAO/B,KAAK+B,OAGd/B,KAAKioC,eAAiBjoC,KAAKkkB,gBAAgB8jB,EAASjmC,OACpD/B,KAAK+oB,eAAiBmB,EAAgB8d,GAEtChoC,KAAK8d,WAAa,OAAST,KAAKtI,WAChC/U,KAAKy7B,YAAc,QAAQz7B,KAAK8d,WAAU,IAC1C9d,KAAKof,cAAgBpf,KAAKqf,oBAG5B0oB,EAAA7nC,UAAA4M,OAAA,WACM9M,KAAKmhB,YACPnhB,KAAK07B,wBAED17B,KAAKuM,YACPvM,KAAKqhB,gBAEPrhB,KAAKmhB,aAAc,IAIvB4mB,EAAA7nC,UAAAmhB,cAAA,WACe9R,EAAAA,OAAOvP,KAAKwD,SAAS+L,OAAO,SAGtCqS,KAAK,UAAW,GAChBA,KAAK,IAAK5hB,KAAKwS,GACfoP,KAAK,IAAK5hB,KAAKsS,GAElBtS,KAAK07B,wBAGPqM,EAAA7nC,UAAAgoC,aAAA,WACE,OAAOrB,GAAY7mC,KAAKoW,OAG1B2xB,EAAA7nC,UAAAw7B,qBAAA,WACE,IAAM/Z,EAAOpS,EAAAA,OAAOvP,KAAKwD,SAAS+L,OAAO,SAErCvP,KAAKuM,WACPoV,EACG3T,aACApH,SAAS,KACTgb,KAAK,UAAW,GAChBA,KAAK,IAAK5hB,KAAKwS,GACfoP,KAAK,IAAK5hB,KAAKsS,GACfsP,KAAK,QAAS5hB,KAAK0H,OACnBka,KAAK,SAAU5hB,KAAKuH,QAEvBoa,EACGC,KAAK,UAAW,GAChBA,KAAK,IAAK5hB,KAAKwS,GACfoP,KAAK,IAAK5hB,KAAKsS,GACfsP,KAAK,QAAS5hB,KAAK0H,OACnBka,KAAK,SAAU5hB,KAAKuH,SAI3BwgC,EAAA7nC,UAAAsf,QAAA,WACExf,KAAKuP,OAAOZ,KAAK3O,KAAKiR,OAGxB82B,EAAA7nC,UAAAmf,iBAAA,WACE,MAAO,CACL,CACE9M,OAAQ,EACRoM,MAAO3e,KAAKoW,KACZlI,QAAS,IAEX,CACEqE,OAAQ,IACRoM,MAAO3e,KAAKoW,KACZlI,QAAS,8CAtFM/D,EAAAA,cA1BZrJ,EAAA,CAARuJ,EAAAA,oCACQvJ,EAAA,CAARuJ,EAAAA,oCACQvJ,EAAA,CAARuJ,EAAAA,iCACQvJ,EAAA,CAARuJ,EAAAA,iCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,0CAESvJ,EAAA,CAAT4M,EAAAA,uCAfUq6B,EAAoBjnC,EAAA,CA9ChC2J,EAAAA,UAAU,CACTC,SAAU,8BACVC,SAAU,y1CA0CViD,gBAAiBC,EAAAA,wBAAwBC,UAE9Bi6B,oBCXb,SAAAI,IAMWnoC,KAAAkhB,UAAoB,EACpBlhB,KAAA4Z,iBAA2B,EAE3B5Z,KAAAuM,YAAsB,EAErBvM,KAAAuP,OAAS,IAAI9C,EAAAA,aA4CzB,OAxCE07B,EAAAjoC,UAAA0M,YAAA,SAAYC,GACV7M,KAAK47B,MAAQ57B,KAAK67B,YAGpBsM,EAAAjoC,UAAA27B,SAAA,WAAA,IAAAryB,EAAAxJ,KACE,OAAOA,KAAKiR,KAAKm3B,SACd5gB,QAAO,SAAAloB,GACN,OAAmB,IAAZA,EAAE+oC,SAEVjwB,KAAI,SAAC9Y,EAAG4pB,GACP,IAAM3Y,EAAQjR,EAAE+d,GAEhB,MAAO,CACLpM,KAAM3R,EAAE2R,KACRuB,EAAGlT,EAAEgpC,GACLh2B,EAAGhT,EAAEo0B,GACLhsB,MAAOpI,EAAE4Y,GAAK5Y,EAAEgpC,GAChB/gC,OAAQjI,EAAEyY,GAAKzY,EAAEo0B,GACjBtd,KAAM5M,EAAKwV,OAAOC,SAAS1O,GAC3BA,MAAKA,EACLxO,MAAOzC,EAAEyC,MACTwmC,UAAWjpC,EAAEipC,eAKrBJ,EAAAjoC,UAAAof,eAAA,SAAevV,OAAEwG,EAAAxG,EAAAwG,MAAOxO,EAAAgI,EAAAhI,MACtB,MAAO,uCACyB4a,GAAYpM,GAAM,4CACpBxO,EAAMyS,iBAAgB,iBAItD2zB,EAAAjoC,UAAAsf,QAAA,SAAQvO,GACNjR,KAAKuP,OAAOZ,KAAKsC,IAGnBk3B,EAAAjoC,UAAA+oB,QAAA,SAAQC,EAAO9X,GACb,OAAOA,EAAKb,OApDLzP,EAAA,CAARuJ,EAAAA,oCACQvJ,EAAA,CAARuJ,EAAAA,oCACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,0CAESvJ,EAAA,CAAT4M,EAAAA,uCAXUy6B,EAA0BrnC,EAAA,CA/BtC2J,EAAAA,UAAU,CACTC,SAAU,qCACVC,SAAU,yxBA2BViD,gBAAiBC,EAAAA,wBAAwBC,UAE9Bq6B,qBCFb,SAAAK,IAAA,IAAAh/B,EAAA,OAAA4C,GAAAA,EAAAvL,MAAAb,KAAAU,YAAAV,YAEWwJ,EAAAoQ,iBAA2B,EAG3BpQ,EAAA0X,UAAoB,EAEnB1X,EAAA+F,OAAS,IAAI9C,EAAAA,aAUvBjD,EAAAyI,OAAS,CAAC,GAAI,GAAI,GAAI,MAqDxB,OAtEsCnS,EAAA0oC,EAAAp8B,GAmBpCo8B,EAAAtoC,UAAA4M,OAAA,WACEV,EAAAlM,UAAM4M,OAAMlM,KAAAZ,MAEZA,KAAKgQ,KAAOib,GAAwB,CAClCvjB,MAAO1H,KAAK0H,MACZH,OAAQvH,KAAKuH,OACb2jB,QAASlrB,KAAKiS,SAGhBjS,KAAK2V,OAAS3V,KAAKs5B,YAEnBt5B,KAAKyoC,QAAUA,EAAAA,UAAexT,KAAK,CAACj1B,KAAKgQ,KAAKtI,MAAO1H,KAAKgQ,KAAKzI,SAE/D,IAMM8b,EAAOqlB,EAAAA,WACVrrB,IAAG,SAAA/d,GACF,IAAIiR,EAAQjR,EAAEkR,KAOd,OAJED,EAD6B,SAA3BA,EAAMtQ,YAAYuQ,KACZD,EAAME,qBAENF,EAAMiE,oBAIjBm0B,UAAS,SAAArpC,GAAK,OAACA,EAAEspC,OAAS,KAAO,SAXvBF,CAW+BpmC,EAAA,CAjB3B,CACfkO,KAAM,OACNzO,MAAO,EACP6mC,QAAQ,IAciD5oC,KAAK8P,UAC7D0a,KAAI,SAAAlrB,GAAK,OAAAA,EAAEyC,SAEd/B,KAAKiR,KAAOjR,KAAKyoC,QAAQplB,GAEzBrjB,KAAK+vB,YAEL/vB,KAAKoS,UAAY,aAAapS,KAAKgQ,KAAKgc,QAAO,MAAMhsB,KAAKiS,OAAO,GAAE,KAGrEu2B,EAAAtoC,UAAAo5B,UAAA,WACE,OAAOt5B,KAAK8P,QAAQsI,KAAI,SAAA9Y,GAAK,OAAAA,EAAEkR,SAGjCg4B,EAAAtoC,UAAAsf,QAAA,SAAQvO,GACNjR,KAAKuP,OAAOZ,KAAKsC,IAGnBu3B,EAAAtoC,UAAA6vB,UAAA,WACE/vB,KAAKgf,OAAS,IAAIoN,GAAYpsB,KAAKqP,OAAQ,UAAWrP,KAAK2V,OAAQ3V,KAAKqsB,eAnEjEvrB,EAAA,CAARuJ,EAAAA,uCACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,wCAESvJ,EAAA,CAAT4M,EAAAA,uCAEgC5M,EAAA,CAAhCqxB,EAAAA,aAAa,0DATHqW,EAAgB1nC,EAAA,CAzB5B2J,EAAAA,UAAU,CACTC,SAAU,sBACVC,SAAU,ipBAoBVC,cAAeC,EAAAA,kBAAkBC,KACjC8C,gBAAiBC,EAAAA,wBAAwBC,0MAE9B06B,IAAyBt5B,iBC9BtC,SAAA25B,KAA4B,OAAfA,EAAa/nC,EAAA,CALzBkY,EAAAA,SAAS,CACRC,QAAS,CAAC+R,IACV7R,aAAc,CAAC4uB,GAAsBI,GAA4BK,IACjEpvB,QAAS,CAAC2uB,GAAsBI,GAA4BK,OAEjDK,qBCsFb,SAAAC,IAAA,IAAAt/B,EAAA,OAAA4C,GAAAA,EAAAvL,MAAAb,KAAAU,YAAAV,YACWwJ,EAAA2L,IAAc,EACd3L,EAAAkJ,IAAc,IACdlJ,EAAAzH,MAAgB,EAczByH,EAAAyI,OAAgB,CAAC,GAAI,GAAI,GAAI,IAG7BzI,EAAAu/B,iBAA2B,EAC3Bv/B,EAAAw/B,iBAA2B,EAC3Bx/B,EAAAy/B,mBAA6B,GAC7Bz/B,EAAA0/B,eAAyB,GACzB1/B,EAAA2/B,mBAA6B,GAC7B3/B,EAAA4/B,eAAyB,KA8G3B,OAvI0CtpC,EAAAgpC,EAAA18B,GA6BxC08B,EAAA5oC,UAAAmJ,gBAAA,WAAA,IAAAG,EAAAxJ,KACEoM,EAAAlM,UAAMmJ,gBAAezI,KAAAZ,MACrB0G,YAAW,WACT8C,EAAK08B,UAAU,SACf18B,EAAK08B,UAAU,aAInB4C,EAAA5oC,UAAA4M,OAAA,WAAA,IAAAtD,EAAAxJ,KACEoM,EAAAlM,UAAM4M,OAAMlM,KAAAZ,MAEZA,KAAKqpC,sBAA0CrlC,IAAvBhE,KAAKspC,cAC7BtpC,KAAK0S,IAAMrF,KAAKqF,IAAI1S,KAAK0S,IAAK1S,KAAK+B,OACnC/B,KAAKmV,IAAM9H,KAAK8H,IAAInV,KAAKmV,IAAKnV,KAAK+B,OAC/B/B,KAAKqpC,mBACPrpC,KAAK0S,IAAMrF,KAAKqF,IAAI1S,KAAK0S,IAAK1S,KAAKspC,eACnCtpC,KAAKmV,IAAM9H,KAAK8H,IAAInV,KAAKmV,IAAKnV,KAAKspC,gBAGrCtpC,KAAKgQ,KAAOib,GAAwB,CAClCvjB,MAAO1H,KAAK0H,MACZH,OAAQvH,KAAKuH,OACb2jB,QAASlrB,KAAKiS,SAGhBjS,KAAKu2B,YAAcv2B,KAAK01B,iBACxB11B,KAAK6sB,WAAa7sB,KAAK+1B,gBACvB/1B,KAAKupC,aAAevpC,KAAKwpC,kBAEzBxpC,KAAK+vB,YAEL,IAAM/D,EAAUhsB,KAAKiS,OAAO,GAAKjS,KAAKgQ,KAAKtI,MAAQ,EAC7Ci3B,EAAU3+B,KAAKiS,OAAO,GAAKjS,KAAKgQ,KAAKzI,OAAS,EAEpDvH,KAAKoS,UAAY,aAAa4Z,EAAO,KAAK2S,EAAO,IACjD3+B,KAAKypC,cAAgB,cAAazpC,KAAKiS,OAAO,GAAKjS,KAAK6sB,WAAW7sB,KAAKspC,gBAAc,KAAK3K,EAAO,IAClG3+B,KAAKkpC,eAAiB,oBACtBlpC,KAAKopC,eAAiB,mBACtB1iC,YAAW,WAAM,OAAA8C,EAAK08B,UAAU,WAAU,IAC1Cx/B,YAAW,WAAM,OAAA8C,EAAK08B,UAAU,WAAU,KAG5C4C,EAAA5oC,UAAAw1B,eAAA,WACE,MAAO,CAAC11B,KAAKmV,IAAKnV,KAAK0S,MAGzBo2B,EAAA5oC,UAAA61B,cAAA,WACE,OAAOjO,EAAAA,cACJ/I,MAAM,CAAC,EAAG/e,KAAKgQ,KAAKtI,QACpBiO,OAAO3V,KAAKu2B,cAGjBuS,EAAA5oC,UAAAspC,gBAAA,WACE,OAAIxpC,KAAKkkB,gBACAlkB,KAAKkkB,gBAAgBlkB,KAAK+B,OAE5B/B,KAAK+B,MAAMyS,kBAGpBs0B,EAAA5oC,UAAAgmC,UAAA,SAAU1iC,EAAS6iC,GAAnB,IACMqD,EACA9C,EAFNp9B,EAAAxJ,UAAmB,IAAAqmC,IAAAA,GAAA,GAGD,UAAZ7iC,GACFkmC,EAAK1pC,KAAK2pC,YACV/C,EAAc5mC,KAAK+oC,mBAEnBW,EAAK1pC,KAAK4pC,YACVhD,EAAc5mC,KAAKgpC,kBAGf,IAAAj/B,EAAA2/B,EAAAjmC,cAAAkG,wBAAEjC,EAAAqC,EAAArC,MAAOH,EAAAwC,EAAAxC,OACf,GAAc,IAAVG,GAA0B,IAAXH,EAAnB,CACA,IAAMsiC,EAAWjD,EACXF,EAAiB1mC,KAAKgQ,KAAKtI,MAC3Bi/B,EAAkBt5B,KAAKqF,IAAI1S,KAAKgQ,KAAKzI,OAAS,EAAI,GAAI,GACtDuiC,EAAmBz8B,KAAKC,MAAOo5B,GAAkBh/B,EAAQk/B,GAAgB,KAAO,IAChFmD,EAAoB18B,KAAKC,MAAOq5B,GAAmBp/B,EAASq/B,GAAgB,KAAO,KACzFA,EAAcv5B,KAAK8H,IAAI40B,EAAmBD,MAEtBD,IACF,UAAZrmC,GACFxD,KAAK+oC,iBAAmBnC,EACxB5mC,KAAKipC,mBAAqB,SAASrC,EAAW,KAAKA,EAAW,MAE9D5mC,KAAKgpC,iBAAmBpC,EACxB5mC,KAAKmpC,mBAAqB,SAASvC,EAAW,KAAKA,EAAW,KAEhE5mC,KAAKoP,GAAGc,eACJm2B,GACF3/B,YAAW,WACT8C,EAAK08B,UAAU1iC,GAAS,KACvB,OAKTslC,EAAA5oC,UAAAsf,QAAA,WACExf,KAAKuP,OAAOZ,KAAK,CACf6B,KAAM,QACNzO,MAAO/B,KAAK+B,SAIhB+mC,EAAA5oC,UAAA6vB,UAAA,WACE/vB,KAAKgf,OAAS,IAAIoN,GAAYpsB,KAAKqP,OAAQ,UAAW,CAACrP,KAAK+B,OAAQ/B,KAAKqsB,eApIlEvrB,EAAA,CAARuJ,EAAAA,mCACQvJ,EAAA,CAARuJ,EAAAA,mCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,+CAEyBvJ,EAAA,CAAzBwJ,EAAAA,UAAU,kDACexJ,EAAA,CAAzBwJ,EAAAA,UAAU,kDATAw+B,EAAoBhoC,EAAA,CAlFhC2J,EAAAA,UAAU,CACTC,SAAU,0BACVC,SAAU,krEA6EVC,cAAeC,EAAAA,kBAAkBC,KACjC8C,gBAAiBC,EAAAA,wBAAwBC,kuDAE9Bg7B,IAA6B55B,kBCf1C,SAAA86B,IAAA,IAAAxgC,EAAA,OAAA4C,GAAAA,EAAAvL,MAAAb,KAAAU,YAAAV,YACWwJ,EAAA8lB,QAAS,EACT9lB,EAAA8kB,YAAsB,SACtB9kB,EAAAqiB,eAAyB,QACzBriB,EAAA2L,IAAc,EACd3L,EAAAkJ,IAAc,IAGdlJ,EAAAygC,YAAsB,GACtBzgC,EAAA0gC,cAAwB,EAExB1gC,EAAA2gC,UAAoB,EACpB3gC,EAAA41B,YAAsB,IACtB51B,EAAA4gC,UAAoB,IACpB5gC,EAAAmW,cAAuB,GAEvBnW,EAAAoQ,iBAA2B,EAE3BpQ,EAAA6gC,UAAoB,EAKnB7gC,EAAAkU,SAA8B,IAAIjR,EAAAA,aAClCjD,EAAAmU,WAAgC,IAAIlR,EAAAA,aAgB9CjD,EAAAo9B,YAAsB,EACtBp9B,EAAA8gC,SAAmB,GACnB9gC,EAAAqL,cAAwB,cACxBrL,EAAA83B,aAAuB,KAiOzB,OA5QoCxhC,EAAAkqC,EAAA59B,GAgDlC49B,EAAA9pC,UAAAmJ,gBAAA,WAAA,IAAAG,EAAAxJ,KACEoM,EAAAlM,UAAMmJ,gBAAezI,KAAAZ,MACrB0G,YAAW,WAAM,OAAA8C,EAAK08B,gBAGxB8D,EAAA9pC,UAAA4M,OAAA,WAAA,IAAAtD,EAAAxJ,KACEoM,EAAAlM,UAAM4M,OAAMlM,KAAAZ,MAEPA,KAAKmqC,SAKHnqC,KAAKiS,SACRjS,KAAKiS,OAAS,CAAC,GAAI,IAAK,GAAI,MALzBjS,KAAKiS,SACRjS,KAAKiS,OAAS,CAAC,GAAI,GAAI,GAAI,KAS3BjS,KAAKo/B,WAAa,IACpBp/B,KAAKo/B,WAAcp/B,KAAKo/B,WAAa,IAAO,KAG9Cp/B,KAAKoqC,UAAY/8B,KAAK8H,IAAInV,KAAKoqC,UAAW,KAE1CpqC,KAAKgQ,KAAOib,GAAwB,CAClCvjB,MAAO1H,KAAK0H,MACZH,OAAQvH,KAAKuH,OACb2jB,QAASlrB,KAAKiS,OACd3F,WAAYtM,KAAKsvB,OACjBzD,eAAgB7rB,KAAK6rB,iBAGvB7rB,KAAK2V,OAAS3V,KAAKs5B,YACnBt5B,KAAKu2B,YAAcv2B,KAAK01B,iBACxB11B,KAAK6sB,WAAa7sB,KAAK+1B,gBACvB/1B,KAAKupC,aAAevpC,KAAKwpC,kBAEzBxpC,KAAK0+B,YAAcrxB,KAAK8H,IAAInV,KAAKgQ,KAAKtI,MAAO1H,KAAKgQ,KAAKzI,QAAU,EAEjEvH,KAAKqkC,KAAOrkC,KAAKskC,UAEjBtkC,KAAK+vB,YACL/vB,KAAKkN,cAAgBlN,KAAKgwB,mBAE1B,IAAMhE,EAAUhsB,KAAKiS,OAAO,GAAKjS,KAAKgQ,KAAKtI,MAAQ,EAC7Ci3B,EAAU3+B,KAAKiS,OAAO,GAAKjS,KAAKgQ,KAAKzI,OAAS,EAEpDvH,KAAKoS,UAAY,aAAa4Z,EAAO,KAAK2S,EAAO,IACjD3+B,KAAKsqC,SAAW,UAAUtqC,KAAKo/B,WAAU,IACzC14B,YAAW,WAAM,OAAA8C,EAAK08B,cAAa,KAGrC8D,EAAA9pC,UAAAokC,QAAA,mBACQD,EAAO,GAEPkG,EAAqC,GAAnBvqC,KAAK0+B,YAEvB8L,EAAen9B,KAAK8H,IAAIo1B,EAAkBvqC,KAAK8P,QAAQnP,OAAQ,IAC/DiiC,EAA0B,GAAf4H,EACjBxqC,KAAKyqC,WAAazqC,KAAK0+B,YAAc1+B,KAAK8P,QAAQnP,OAAS6pC,EAC3DxqC,KAAKshC,aAAej0B,KAAKC,MAAMs1B,EAAW,GAE1C,IAAIpiC,EAAI,MACR,IAAgB,IAAAqW,EAAApV,EAAAzB,KAAK8P,SAAOwB,EAAAuF,EAAA/U,QAAAwP,EAAAtP,KAAAsP,EAAAuF,EAAA/U,OAAE,CAAzB,IAAMxC,EAACgS,EAAAvP,MACJ28B,EAAc1+B,KAAK0+B,YAAcl+B,EAAIgqC,EACrChL,EAAcd,EAAckE,EAsB5B7B,EAAM,CACV2J,cArBoB,CACpBjL,SAAWz/B,KAAKoqC,UAAY/8B,KAAKkI,GAAM,IACvCiqB,YAAWA,EACXd,YAAWA,EACXztB,KAAM,CACJlP,MAAO/B,KAAK0S,IACZlC,KAAMlR,EAAEkR,OAgBVm6B,SAZe,CACflL,SAAWpyB,KAAK8H,IAAInV,KAAK6sB,WAAWvtB,EAAEyC,OAAQ/B,KAAKoqC,WAAa/8B,KAAKkI,GAAM,IAC3EiqB,YAAWA,EACXd,YAAWA,EACXztB,KAAM,CACJlP,MAAOzC,EAAEyC,MACTyO,KAAMlR,EAAEkR,QASZ6zB,EAAKjiC,KAAK2+B,GACVvgC,sGAGF,OAAO6jC,GAGT2F,EAAA9pC,UAAAo5B,UAAA,WACE,OAAOt5B,KAAK8P,QAAQsI,KAAI,SAAA9Y,GAAK,OAAAA,EAAEkR,SAGjCw5B,EAAA9pC,UAAAw1B,eAAA,WACE,IAAMjO,EAASznB,KAAK8P,QAAQsI,KAAI,SAAA9Y,GAAK,OAAAA,EAAEyC,SACjC6oC,EAAUv9B,KAAK8H,IAAGtU,MAARwM,KAAI/K,EAAQmlB,IACtBojB,EAAUx9B,KAAKqF,IAAG7R,MAARwM,KAAI/K,EAAQmlB,IAc5B,YAZiBzjB,IAAbhE,KAAKmV,IACPnV,KAAKmV,IAAM9H,KAAK8H,IAAInV,KAAKmV,IAAKy1B,GAE9B5qC,KAAKmV,IAAMy1B,OAGI5mC,IAAbhE,KAAK0S,IACP1S,KAAK0S,IAAMrF,KAAKqF,IAAI1S,KAAK0S,IAAKm4B,GAE9B7qC,KAAK0S,IAAMm4B,EAGN,CAAC7qC,KAAKmV,IAAKnV,KAAK0S,MAGzBs3B,EAAA9pC,UAAA61B,cAAA,WACE,OAAOjO,EAAAA,cACJ/I,MAAM,CAAC,EAAG/e,KAAKoqC,YACflZ,OACAvb,OAAO3V,KAAKu2B,cAGjByT,EAAA9pC,UAAAspC,gBAAA,WACE,IAAMznC,EAAQ/B,KAAK8P,QAAQsI,KAAI,SAAA9Y,GAAK,OAAAA,EAAEyC,SAAOwoB,QAAO,SAACoG,EAAGpxB,GAAM,OAAAoxB,EAAIpxB,IAAG,GAErE,OAAIS,KAAK8qC,WAAa,IAAM9qC,KAAK8qC,UAAUnqC,OAClCX,KAAK8qC,UAAUt2B,iBAGpBxU,KAAKkkB,gBACAlkB,KAAKkkB,gBAAgBniB,GAGvBA,EAAMyS,kBAGfw1B,EAAA9pC,UAAAgmC,UAAA,SAAUG,GAAV,IAAA78B,EAAAxJ,KACE,QADQ,IAAAqmC,IAAAA,GAAA,GACHrmC,KAAKqqC,SAAV,CAGQ,IAAA3iC,EAAA1H,KAAAymC,OAAAhjC,cAAAkG,wBAAAjC,MACFmiC,EAAW7pC,KAAK4mC,YAEtB,GAAc,IAAVl/B,EACF1H,KAAK4mC,YAAc,MACd,CACL,IAAMmE,EAAiB/qC,KAAKyqC,WAC5BzqC,KAAK4mC,YAAcv5B,KAAKC,MAAOy9B,GAAkBrjC,EAAQ1H,KAAK4mC,aAAgB,KAAO,IAGnF5mC,KAAK4mC,cAAgBiD,IACvB7pC,KAAK6U,cAAgB,SAAS7U,KAAK4mC,YAAW,KAAK5mC,KAAK4mC,YAAW,IACnE5mC,KAAKoP,GAAGc,eACJm2B,GACF3/B,YAAW,WAAM,OAAA8C,EAAK08B,WAAU,KAAQ,OAK9C8D,EAAA9pC,UAAAsf,QAAA,SAAQvO,GACNjR,KAAKuP,OAAOZ,KAAKsC,IAGnB+4B,EAAA9pC,UAAA8vB,iBAAA,WACE,MAAO,CACLviB,UAAW,UACXuR,OAAQhf,KAAKgf,OACbrJ,OAAQ3V,KAAK2V,OACbyG,MAAOpc,KAAKsuB,YACZhlB,SAAUtJ,KAAK6rB,iBAInBme,EAAA9pC,UAAA6vB,UAAA,WACE/vB,KAAKgf,OAAS,IAAIoN,GAAYpsB,KAAKqP,OAAQ,UAAWrP,KAAK2V,OAAQ3V,KAAKqsB,eAG1E2d,EAAA9pC,UAAA8xB,WAAA,SAAW5gB,GACGpR,KAAK2f,cAAcxB,WAAU,SAAA7e,GACvC,OAAOA,EAAEkR,OAASY,EAAKZ,MAAQlR,EAAEyC,QAAUqP,EAAKrP,UAEvC,IAIX/B,KAAK2f,cAAard,EAAA,CAAI8O,GAASpR,KAAK2f,eACpC3f,KAAK0d,SAAS/O,KAAK,CAAE5M,MAAOqP,EAAM6gB,QAASjyB,KAAK2f,kBAGlDqqB,EAAA9pC,UAAAgyB,aAAA,SAAa9gB,GACX,IAAMzF,EAAM3L,KAAK2f,cAAcxB,WAAU,SAAA7e,GACvC,OAAOA,EAAEkR,OAASY,EAAKZ,MAAQlR,EAAEyC,QAAUqP,EAAKrP,SAGlD/B,KAAK2f,cAAc9T,OAAOF,EAAK,GAC/B3L,KAAK2f,cAAard,EAAOtC,KAAK2f,eAE9B3f,KAAK2d,WAAWhP,KAAK,CAAE5M,MAAOqP,EAAM6gB,QAASjyB,KAAK2f,iBAGpDqqB,EAAA9pC,UAAAuf,SAAA,SAASC,GACP,QAAK1f,KAAK2f,oBAIM3b,IAHHhE,KAAK2f,cAAcC,MAAK,SAAAtgB,GACnC,OAAOogB,EAAMlP,OAASlR,EAAEkR,MAAQkP,EAAMhP,SAAWpR,EAAEoR,WAKvDs5B,EAAA9pC,UAAA+oB,QAAA,SAAQC,EAAO9X,GACb,OAAOA,EAAKu5B,SAAS15B,KAAKT,MAzQnB1P,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,2CACQvJ,EAAA,CAARuJ,EAAAA,8CACQvJ,EAAA,CAARuJ,EAAAA,mCACQvJ,EAAA,CAARuJ,EAAAA,mCACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,qCACQvJ,EAAA,CAARuJ,EAAAA,2CACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,uCACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,kDACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,wCAGQvJ,EAAA,CAARuJ,EAAAA,sCAESvJ,EAAA,CAAT4M,EAAAA,yCACS5M,EAAA,CAAT4M,EAAAA,2CAEgC5M,EAAA,CAAhCqxB,EAAAA,aAAa,0DAEOrxB,EAAA,CAApBwJ,EAAAA,UAAU,wCA5BA0/B,EAAclpC,EAAA,CA/D1B2J,EAAAA,UAAU,CACTC,SAAU,mBACVC,SAAU,+4DA0DVC,cAAeC,EAAAA,kBAAkBC,KACjC8C,gBAAiBC,EAAAA,wBAAwBC,k2DAE9Bk8B,IAAuB96B,iBCtCpC,SAAA87B,IAKWhrC,KAAAyf,UAAoB,EACpBzf,KAAA4Z,iBAA2B,EAG3B5Z,KAAAuM,YAAsB,EAErBvM,KAAAuP,OAAS,IAAI9C,EAAAA,aACbzM,KAAA0d,SAAW,IAAIjR,EAAAA,aACfzM,KAAA2d,WAAa,IAAIlR,EAAAA,aAiB7B,OAfEu+B,EAAA9qC,UAAA+3B,YAAA,SAAY8I,GACV,IACI7d,EADE3S,EAAQmM,EAAYqkB,EAAI9vB,KAAKT,MASnC,OALE0S,EADEljB,KAAKkkB,gBACDlkB,KAAKkkB,gBAAgB6c,EAAI9vB,KAAKlP,OAE9B2a,EAAYqkB,EAAI9vB,KAAKlP,OAGtB,uCACyB4a,GAAYpM,GAAM,4CACpB2S,EAAG,iBA1B1BpiB,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,4CACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,wCACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,+CACQvJ,EAAA,CAARuJ,EAAAA,0CAESvJ,EAAA,CAAT4M,EAAAA,uCACS5M,EAAA,CAAT4M,EAAAA,yCACS5M,EAAA,CAAT4M,EAAAA,2CAbUs9B,EAAiBlqC,EAAA,CAxC7B2J,EAAAA,UAAU,CACTC,SAAU,0BACVC,SAAU,8pCAoCViD,gBAAiBC,EAAAA,wBAAwBC,UAE9Bk9B,oBClBb,SAAAC,IAaEjrC,KAAAkrC,OAAiB,GAkGnB,OAhGED,EAAA/qC,UAAA0M,YAAA,SAAYC,GACV7M,KAAK8M,UAGPm+B,EAAA/qC,UAAA4M,OAAA,WACE9M,KAAKmrC,eAAiB,GAAKnrC,KAAKo/B,WAChCp/B,KAAKkrC,OAAS,UAAUlrC,KAAKmrC,cAAa,IAC1CnrC,KAAK8S,MAAQ9S,KAAKqU,YAGpB42B,EAAA/qC,UAAAmU,SAAA,WAYE,IAXA,IAAM+2B,EAAiBprC,KAAKoqC,UAAYpqC,KAAKiqC,YACvCoB,EAAmBD,EAAiBprC,KAAKkqC,cAEzCp3B,EAAQ,CACZw4B,IAAK,GACLC,MAAO,IAGHC,EAAgBxrC,KAAKmf,OAAS,GAC9BssB,EAAWD,EAPE,GAO2B,GAErChrC,EAAI,EAAGA,GAAKR,KAAKiqC,YAAazpC,IAAK,CAC1C,IAAMkrC,EAAWlrC,EAAI4qC,EACf32B,EAASi3B,EAAWr+B,KAAKkI,GAAM,IAE/BpD,EAAanS,KAAK2rC,cAAcD,GAElCE,GAAO,EAKX,GAJU,IAANprC,GAA8B,MAAnBR,KAAKoqC,YAClBwB,GAAO,IAGJA,EAAM,CACT,IAAIC,EAAOntB,OAAOoF,WAAW9jB,KAAK6sB,WAAWvE,OAAOojB,GAAU32B,YAAYP,iBACtExU,KAAKsU,iBACPu3B,EAAO7rC,KAAKsU,eAAeu3B,IAE7B/4B,EAAMw4B,IAAIlpC,KAAK,CACbu7B,KAAM39B,KAAK8rC,YAAYN,EA1BV,GA0BqC/2B,GAClDtC,WAAUA,EACV05B,KAAIA,EACJh3B,cAAe,2BACD42B,EAAWp+B,KAAKiI,IAAIb,GAAM,KAAKg3B,EAAWp+B,KAAKkyB,IAAI9qB,GAAM,aAAazU,KAAKmrC,cAAa,kBAK1G,GAAI3qC,IAAMR,KAAKiqC,YAIf,IAAK,IAAIt5B,EAAI,EAAGA,GAAK3Q,KAAKkqC,cAAev5B,IAAK,CAC5C,IACMo7B,GADgBL,EAAW/6B,EAAI06B,GACDh+B,KAAKkI,GAAM,IAE/CzC,EAAMy4B,MAAMnpC,KAAK,CACfu7B,KAAM39B,KAAK8rC,YAAYN,EAAex2B,GAAgB+2B,MAK5D,OAAOj5B,GAGTm4B,EAAA/qC,UAAAyrC,cAAA,SAAcl3B,GAOZ,IAAItC,EAAa,SAMjB,OAPAsC,GAASzU,KAAKo/B,WAAa3qB,GAAS,KAExB,IAAMA,GAAS,IACzBtC,EAAa,QACJsC,EAAQ,KAAOA,GAAS,MACjCtC,EAAa,OAERA,GAGT84B,EAAA/qC,UAAA4rC,YAAA,SAAYN,EAAex2B,EAAYP,GACrC,IAAMsD,EAAKyzB,EAAgBn+B,KAAKkyB,IAAI9qB,GAC9BqD,GAAM0zB,EAAgBx2B,GAAc3H,KAAKkyB,IAAI9qB,GAI7CmY,EAAS,CACb,CAAEpa,EAJOg5B,EAAgBn+B,KAAKiI,IAAIb,GAIzBnC,EAAGyF,GACZ,CAAEvF,GAJQg5B,EAAgBx2B,GAAc3H,KAAKiI,IAAIb,GAIxCnC,EAAGwF,IAKd,OAHsB6lB,EAAAA,OACnBnrB,GAAE,SAAAlT,GAAK,OAAAA,EAAEkT,KACTF,GAAE,SAAAhT,GAAK,OAAAA,EAAEgT,IACL05B,CAAcpf,IA5Gd9rB,EAAA,CAARuJ,EAAAA,2CACQvJ,EAAA,CAARuJ,EAAAA,6CACQvJ,EAAA,CAARuJ,EAAAA,mCACQvJ,EAAA,CAARuJ,EAAAA,mCACQvJ,EAAA,CAARuJ,EAAAA,yCACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,sCACQvJ,EAAA,CAARuJ,EAAAA,0CACQvJ,EAAA,CAARuJ,EAAAA,8CATU4gC,EAAkBnqC,EAAA,CAvB9B2J,EAAAA,UAAU,CACTC,SAAU,2BACVC,SAAU,ipBAmBViD,gBAAiBC,EAAAA,wBAAwBC,UAE9Bm9B,oBCZb,SAAAgB,KAA0B,OAAbA,EAAWnrC,EAAA,CALvBkY,EAAAA,SAAS,CACRC,QAAS,CAAC+R,GAAmBma,GAAgB9L,IAC7ClgB,aAAc,CAAC2vB,GAAsBkB,GAAgBgB,GAAmBC,IACxE7xB,QAAS,CAAC0vB,GAAsBkB,GAAgBgB,GAAmBC,OAExDgB,wBCgBX,SAAAC,IC1B0B,oBAAfC,iBAAuE,IAAlCA,WAAWjsC,UAAUob,WACnE6wB,WAAWjsC,UAAUob,SAAW8wB,eAAelsC,UAAUob,UD4B7D,OAJa4wB,EAAeprC,EAAA,CAf3BkY,EAAAA,SAAS,CACRI,QAAS,CACP4R,GACA8I,GACAuF,GACAkC,GACAoB,GACAkB,GACAuH,GACA0C,GACA3C,GACA0D,GACAoD,OAGSC,yrEbtBb,SAAyBnqC,GAEvB,OAAO+kC,EAAAA,IAAa/kC,sKePKsqC,EAAWC,GACpC,OAAO,SAAS/7B,GACd,MAAc,aAAVA,GAAkC,UAAVA,EACnBA,EAES,SAAd87B,GAAwC,YAAhBC,EACRC,EAAAA,WAAW,aACtBC,CAAej8B,GAGjBA,EAAMwE","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {\n  ApplicationRef,\n  ComponentFactoryResolver,\n  ComponentRef,\n  Injectable,\n  Injector,\n  ViewContainerRef,\n  EmbeddedViewRef,\n  Type\n} from '@angular/core';\nimport { DomPortalHost, ComponentPortal } from '@angular/cdk/portal';\n\nfunction isViewContainerRef(x: any): x is ViewContainerRef {\n  return x.element;\n}\n\n/**\n * Injection service is a helper to append components\n * dynamically to a known location in the DOM, most\n * noteably for dialogs/tooltips appending to body.\n *\n * @export\n */\n@Injectable()\nexport class InjectionService {\n  static globalRootViewContainer: ViewContainerRef = null;\n\n  /**\n   * Sets a default global root view container. This is useful for\n   * things like ngUpgrade that doesn't have a ApplicationRef root.\n   *\n   * @param container\n   */\n  static setGlobalRootViewContainer(container: ViewContainerRef): void {\n    InjectionService.globalRootViewContainer = container;\n  }\n\n  private _container: ViewContainerRef;\n\n  constructor(\n    private applicationRef: ApplicationRef,\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private injector: Injector\n  ) {}\n\n  /**\n   * Gets the root view container to inject the component to.\n   *\n   * @memberOf InjectionService\n   */\n  getRootViewContainer(): ViewContainerRef | ComponentRef<any> {\n    if (this._container) return this._container;\n    if (InjectionService.globalRootViewContainer) return InjectionService.globalRootViewContainer;\n\n    if (this.applicationRef.components.length) return this.applicationRef.components[0];\n\n    throw new Error(\n      'View Container not found! ngUpgrade needs to manually set this via setRootViewContainer or setGlobalRootViewContainer.'\n    );\n  }\n\n  /**\n   * Overrides the default root view container. This is useful for\n   * things like ngUpgrade that doesn't have a ApplicationRef root.\n   *\n   * @param container\n   *\n   * @memberOf InjectionService\n   */\n  setRootViewContainer(container: ViewContainerRef): void {\n    this._container = container;\n  }\n\n  /**\n   * Gets the html element for a component ref.\n   *\n   * @param componentRef\n   *\n   * @memberOf InjectionService\n   */\n  getComponentRootNode(component: ViewContainerRef | ComponentRef<any>): HTMLElement {\n    if (isViewContainerRef(component)) {\n      return component.element.nativeElement;\n    }\n    if (component.hostView && (component.hostView as EmbeddedViewRef<any>).rootNodes.length > 0) {\n      return (component.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n    }\n\n    // the top most component root node has no `hostView`\n    return component.location.nativeElement;\n  }\n\n  /**\n   * Gets the root component container html element.\n   *\n   * @memberOf InjectionService\n   */\n  getRootViewContainerNode(component: ViewContainerRef | ComponentRef<any>): HTMLElement {\n    return this.getComponentRootNode(component);\n  }\n\n  /**\n   * Projects the bindings onto the component\n   *\n   * @param component\n   * @param options\n   *\n   * @memberOf InjectionService\n   */\n  projectComponentBindings(component: ComponentRef<any>, bindings: any): ComponentRef<any> {\n    if (bindings) {\n      if (bindings.inputs !== undefined) {\n        const bindingKeys = Object.getOwnPropertyNames(bindings.inputs);\n        for (const bindingName of bindingKeys) {\n          component.instance[bindingName] = bindings.inputs[bindingName];\n        }\n      }\n\n      if (bindings.outputs !== undefined) {\n        const eventKeys = Object.getOwnPropertyNames(bindings.outputs);\n        for (const eventName of eventKeys) {\n          component.instance[eventName] = bindings.outputs[eventName];\n        }\n      }\n    }\n\n    return component;\n  }\n\n  /**\n   * Appends a component to a adjacent location\n   *\n   * @param componentClass\n   * @param [options={}]\n   * @param [location]\n   *\n   * @memberOf InjectionService\n   */\n  appendComponent<T>(componentClass: Type<T>, bindings: any = {}, location?: any): ComponentRef<any> {\n    if (!location) location = this.getRootViewContainer();\n    const appendLocation = this.getComponentRootNode(location);\n\n    const portalHost = new DomPortalHost(\n      appendLocation,\n      this.componentFactoryResolver,\n      this.applicationRef,\n      this.injector\n    );\n\n    const portal = new ComponentPortal(componentClass);\n\n    const componentRef = portalHost.attach(portal);\n    this.projectComponentBindings(componentRef, bindings);\n    return componentRef;\n  }\n}\n","export enum PlacementTypes {\n  top = 'top' as any,\n  bottom = 'bottom' as any,\n  left = 'left' as any,\n  right = 'right' as any\n}\n","/**\n * Throttle a function\n *\n */\nexport function throttle(func: any, wait: number, options?: any) {\n  options = options || {};\n  let context;\n  let args;\n  let result;\n  let timeout = null;\n  let previous = 0;\n\n  function later() {\n    previous = options.leading === false ? 0 : +new Date();\n    timeout = null;\n    result = func.apply(context, args);\n  }\n\n  return function() {\n    const now = +new Date();\n\n    if (!previous && options.leading === false) {\n      previous = now;\n    }\n\n    const remaining = wait - (now - previous);\n    context = this;\n    args = arguments;\n\n    if (remaining <= 0) {\n      clearTimeout(timeout);\n      timeout = null;\n      previous = now;\n      result = func.apply(context, args);\n    } else if (!timeout && options.trailing !== false) {\n      timeout = setTimeout(later, remaining);\n    }\n\n    return result;\n  };\n}\n\n/**\n * Throttle decorator\n *\n *  class MyClass {\n *    throttleable(10)\n *    myFn() { ... }\n *  }\n */\nexport function throttleable(duration: number, options?: any) {\n  return function innerDecorator(target, key, descriptor) {\n    return {\n      configurable: true,\n      enumerable: descriptor.enumerable,\n      get: function getter() {\n        Object.defineProperty(this, key, {\n          configurable: true,\n          enumerable: descriptor.enumerable,\n          value: throttle(descriptor.value, duration, options)\n        });\n\n        return this[key];\n      }\n    };\n  };\n}\n","import { PlacementTypes } from './placement.type';\n\nconst caretOffset = 7;\n\nfunction verticalPosition(elDimensions, popoverDimensions, alignment) {\n  if (alignment === 'top') {\n    return elDimensions.top - caretOffset;\n  }\n\n  if (alignment === 'bottom') {\n    return elDimensions.top + elDimensions.height - popoverDimensions.height + caretOffset;\n  }\n\n  if (alignment === 'center') {\n    return elDimensions.top + elDimensions.height / 2 - popoverDimensions.height / 2;\n  }\n\n  return undefined;\n}\n\nfunction horizontalPosition(elDimensions, popoverDimensions, alignment) {\n  if (alignment === 'left') {\n    return elDimensions.left - caretOffset;\n  }\n\n  if (alignment === 'right') {\n    return elDimensions.left + elDimensions.width - popoverDimensions.width + caretOffset;\n  }\n\n  if (alignment === 'center') {\n    return elDimensions.left + elDimensions.width / 2 - popoverDimensions.width / 2;\n  }\n\n  return undefined;\n}\n\n/**\n * Position helper for the popover directive.\n *\n * @export\n */\nexport class PositionHelper {\n  /**\n   * Calculate vertical alignment position\n   *\n   * @memberOf PositionHelper\n   */\n  static calculateVerticalAlignment(elDimensions, popoverDimensions, alignment): number {\n    let result = verticalPosition(elDimensions, popoverDimensions, alignment);\n\n    if (result + popoverDimensions.height > window.innerHeight) {\n      result = window.innerHeight - popoverDimensions.height;\n    }\n\n    return result;\n  }\n\n  /**\n   * Calculate vertical caret position\n   *\n   * @memberOf PositionHelper\n   */\n  static calculateVerticalCaret(elDimensions, popoverDimensions, caretDimensions, alignment): number {\n    let result;\n\n    if (alignment === 'top') {\n      result = elDimensions.height / 2 - caretDimensions.height / 2 + caretOffset;\n    }\n\n    if (alignment === 'bottom') {\n      result = popoverDimensions.height - elDimensions.height / 2 - caretDimensions.height / 2 - caretOffset;\n    }\n\n    if (alignment === 'center') {\n      result = popoverDimensions.height / 2 - caretDimensions.height / 2;\n    }\n\n    const popoverPosition = verticalPosition(elDimensions, popoverDimensions, alignment);\n    if (popoverPosition + popoverDimensions.height > window.innerHeight) {\n      result += popoverPosition + popoverDimensions.height - window.innerHeight;\n    }\n\n    return result;\n  }\n\n  /**\n   * Calculate horz alignment position\n   *\n   * @memberOf PositionHelper\n   */\n  static calculateHorizontalAlignment(elDimensions, popoverDimensions, alignment): number {\n    let result = horizontalPosition(elDimensions, popoverDimensions, alignment);\n\n    if (result + popoverDimensions.width > window.innerWidth) {\n      result = window.innerWidth - popoverDimensions.width;\n    }\n\n    return result;\n  }\n\n  /**\n   * Calculate horz caret position\n   *\n   * @memberOf PositionHelper\n   */\n  static calculateHorizontalCaret(elDimensions, popoverDimensions, caretDimensions, alignment): number {\n    let result;\n\n    if (alignment === 'left') {\n      result = elDimensions.width / 2 - caretDimensions.width / 2 + caretOffset;\n    }\n\n    if (alignment === 'right') {\n      result = popoverDimensions.width - elDimensions.width / 2 - caretDimensions.width / 2 - caretOffset;\n    }\n\n    if (alignment === 'center') {\n      result = popoverDimensions.width / 2 - caretDimensions.width / 2;\n    }\n\n    const popoverPosition = horizontalPosition(elDimensions, popoverDimensions, alignment);\n    if (popoverPosition + popoverDimensions.width > window.innerWidth) {\n      result += popoverPosition + popoverDimensions.width - window.innerWidth;\n    }\n\n    return result;\n  }\n\n  /**\n   * Checks if the element's position should be flipped\n   *\n   * @memberOf PositionHelper\n   */\n  static shouldFlip(elDimensions, popoverDimensions, placement, spacing): boolean {\n    let flip = false;\n\n    if (placement === 'right') {\n      if (elDimensions.left + elDimensions.width + popoverDimensions.width + spacing > window.innerWidth) {\n        flip = true;\n      }\n    }\n\n    if (placement === 'left') {\n      if (elDimensions.left - popoverDimensions.width - spacing < 0) {\n        flip = true;\n      }\n    }\n\n    if (placement === 'top') {\n      if (elDimensions.top - popoverDimensions.height - spacing < 0) {\n        flip = true;\n      }\n    }\n\n    if (placement === 'bottom') {\n      if (elDimensions.top + elDimensions.height + popoverDimensions.height + spacing > window.innerHeight) {\n        flip = true;\n      }\n    }\n\n    return flip;\n  }\n\n  /**\n   * Position caret\n   *\n   * @memberOf PositionHelper\n   */\n  static positionCaret(placement, elmDim, hostDim, caretDimensions, alignment): any {\n    let top = 0;\n    let left = 0;\n\n    if (placement === PlacementTypes.right) {\n      left = -7;\n      top = PositionHelper.calculateVerticalCaret(hostDim, elmDim, caretDimensions, alignment);\n    } else if (placement === PlacementTypes.left) {\n      left = elmDim.width;\n      top = PositionHelper.calculateVerticalCaret(hostDim, elmDim, caretDimensions, alignment);\n    } else if (placement === PlacementTypes.top) {\n      top = elmDim.height;\n      left = PositionHelper.calculateHorizontalCaret(hostDim, elmDim, caretDimensions, alignment);\n    } else if (placement === PlacementTypes.bottom) {\n      top = -7;\n      left = PositionHelper.calculateHorizontalCaret(hostDim, elmDim, caretDimensions, alignment);\n    }\n\n    return { top, left };\n  }\n\n  /**\n   * Position content\n   *\n   * @memberOf PositionHelper\n   */\n  static positionContent(placement, elmDim, hostDim, spacing, alignment): any {\n    let top = 0;\n    let left = 0;\n\n    if (placement === PlacementTypes.right) {\n      left = hostDim.left + hostDim.width + spacing;\n      top = PositionHelper.calculateVerticalAlignment(hostDim, elmDim, alignment);\n    } else if (placement === PlacementTypes.left) {\n      left = hostDim.left - elmDim.width - spacing;\n      top = PositionHelper.calculateVerticalAlignment(hostDim, elmDim, alignment);\n    } else if (placement === PlacementTypes.top) {\n      top = hostDim.top - elmDim.height - spacing;\n      left = PositionHelper.calculateHorizontalAlignment(hostDim, elmDim, alignment);\n    } else if (placement === PlacementTypes.bottom) {\n      top = hostDim.top + hostDim.height + spacing;\n      left = PositionHelper.calculateHorizontalAlignment(hostDim, elmDim, alignment);\n    }\n\n    return { top, left };\n  }\n\n  /**\n   * Determine placement based on flip\n   *\n   * @memberOf PositionHelper\n   */\n  static determinePlacement(placement, elmDim, hostDim, spacing): any {\n    const shouldFlip = PositionHelper.shouldFlip(hostDim, elmDim, placement, spacing);\n\n    if (shouldFlip) {\n      if (placement === PlacementTypes.right) {\n        return PlacementTypes.left;\n      } else if (placement === PlacementTypes.left) {\n        return PlacementTypes.right;\n      } else if (placement === PlacementTypes.top) {\n        return PlacementTypes.bottom;\n      } else if (placement === PlacementTypes.bottom) {\n        return PlacementTypes.top;\n      }\n    }\n\n    return placement;\n  }\n}\n","import {\n  Input,\n  Component,\n  ElementRef,\n  AfterViewInit,\n  ViewEncapsulation,\n  HostListener,\n  ViewChild,\n  HostBinding,\n  Renderer2\n} from '@angular/core';\n\nimport { throttleable } from '../../utils/throttle';\nimport { PositionHelper, PlacementTypes } from './position';\n\nimport { StyleTypes } from './style.type';\nimport { AlignmentTypes } from './alignment.type';\n\n@Component({\n  selector: 'ngx-tooltip-content',\n  template: `\n    <div>\n      <span #caretElm [hidden]=\"!showCaret\" class=\"tooltip-caret position-{{ this.placement }}\"> </span>\n      <div class=\"tooltip-content\">\n        <span *ngIf=\"!title\">\n          <ng-template [ngTemplateOutlet]=\"template\" [ngTemplateOutletContext]=\"{ model: context }\"> </ng-template>\n        </span>\n        <span *ngIf=\"title\" [innerHTML]=\"title\"> </span>\n      </div>\n    </div>\n  `,\n  encapsulation: ViewEncapsulation.None,\n  styleUrls: ['./tooltip.component.scss']\n})\nexport class TooltipContentComponent implements AfterViewInit {\n  @Input() host: any;\n  @Input() showCaret: boolean;\n  @Input() type: StyleTypes;\n  @Input() placement: PlacementTypes;\n  @Input() alignment: AlignmentTypes;\n  @Input() spacing: number;\n  @Input() cssClass: string;\n  @Input() title: string;\n  @Input() template: any;\n  @Input() context: any;\n\n  @ViewChild('caretElm') caretElm;\n\n  @HostBinding('class')\n  get cssClasses(): string {\n    let clz = 'ngx-charts-tooltip-content';\n    clz += ` position-${this.placement}`;\n    clz += ` type-${this.type}`;\n    clz += ` ${this.cssClass}`;\n    return clz;\n  }\n\n  constructor(public element: ElementRef, private renderer: Renderer2) {}\n\n  ngAfterViewInit(): void {\n    setTimeout(this.position.bind(this));\n  }\n\n  position(): void {\n    const nativeElm = this.element.nativeElement;\n    const hostDim = this.host.nativeElement.getBoundingClientRect();\n\n    // if no dims were found, never show\n    if (!hostDim.height && !hostDim.width) return;\n\n    const elmDim = nativeElm.getBoundingClientRect();\n    this.checkFlip(hostDim, elmDim);\n    this.positionContent(nativeElm, hostDim, elmDim);\n\n    if (this.showCaret) {\n      this.positionCaret(hostDim, elmDim);\n    }\n\n    // animate its entry\n    setTimeout(() => this.renderer.addClass(nativeElm, 'animate'), 1);\n  }\n\n  positionContent(nativeElm, hostDim, elmDim): void {\n    const { top, left } = PositionHelper.positionContent(this.placement, elmDim, hostDim, this.spacing, this.alignment);\n\n    this.renderer.setStyle(nativeElm, 'top', `${top}px`);\n    this.renderer.setStyle(nativeElm, 'left', `${left}px`);\n  }\n\n  positionCaret(hostDim, elmDim): void {\n    const caretElm = this.caretElm.nativeElement;\n    const caretDimensions = caretElm.getBoundingClientRect();\n    const { top, left } = PositionHelper.positionCaret(\n      this.placement,\n      elmDim,\n      hostDim,\n      caretDimensions,\n      this.alignment\n    );\n\n    this.renderer.setStyle(caretElm, 'top', `${top}px`);\n    this.renderer.setStyle(caretElm, 'left', `${left}px`);\n  }\n\n  checkFlip(hostDim, elmDim): void {\n    this.placement = PositionHelper.determinePlacement(this.placement, elmDim, hostDim, this.spacing);\n  }\n\n  @HostListener('window:resize')\n  @throttleable(100)\n  onWindowResize(): void {\n    this.position();\n  }\n}\n","import { ComponentRef, Type } from '@angular/core';\nimport { InjectionService } from './injection.service';\n\nexport interface PartialBindings {\n  inputs?: object;\n  outputs?: object;\n}\n\nexport abstract class InjectionRegisteryService<T = any> {\n  protected abstract type: Type<T>;\n\n  protected defaults: PartialBindings = {};\n  protected components: Map<any, Array<ComponentRef<T>>> = new Map();\n\n  constructor(public injectionService: InjectionService) {}\n\n  getByType(type: Type<T> = this.type) {\n    return this.components.get(type);\n  }\n\n  create(bindings: object): ComponentRef<T> {\n    return this.createByType(this.type, bindings);\n  }\n\n  createByType(type: Type<T>, bindings: PartialBindings): ComponentRef<T> {\n    bindings = this.assignDefaults(bindings);\n\n    const component = this.injectComponent(type, bindings);\n    this.register(type, component);\n\n    return component;\n  }\n\n  destroy(instance: ComponentRef<T>): void {\n    const compsByType = this.components.get(instance.componentType);\n\n    if (compsByType && compsByType.length) {\n      const idx = compsByType.indexOf(instance);\n\n      if (idx > -1) {\n        const component = compsByType[idx];\n        component.destroy();\n        compsByType.splice(idx, 1);\n      }\n    }\n  }\n\n  destroyAll(): void {\n    this.destroyByType(this.type);\n  }\n\n  destroyByType(type: Type<T>): void {\n    const comps = this.components.get(type);\n\n    if (comps && comps.length) {\n      let i = comps.length - 1;\n      while (i >= 0) {\n        this.destroy(comps[i--]);\n      }\n    }\n  }\n\n  protected injectComponent(type: Type<T>, bindings: PartialBindings): ComponentRef<T> {\n    return this.injectionService.appendComponent(type, bindings);\n  }\n\n  protected assignDefaults(bindings: PartialBindings): PartialBindings {\n    const inputs = { ...this.defaults.inputs };\n    const outputs = { ...this.defaults.outputs };\n\n    if (!bindings.inputs && !bindings.outputs) {\n      bindings = { inputs: bindings };\n    }\n\n    if (inputs) {\n      bindings.inputs = { ...inputs, ...bindings.inputs };\n    }\n\n    if (outputs) {\n      bindings.outputs = { ...outputs, ...bindings.outputs };\n    }\n\n    return bindings;\n  }\n\n  protected register(type: Type<T>, component: ComponentRef<T>): void {\n    if (!this.components.has(type)) {\n      this.components.set(type, []);\n    }\n\n    const types = this.components.get(type);\n    types.push(component);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { InjectionService } from './injection.service';\nimport { TooltipContentComponent } from './tooltip.component';\nimport { InjectionRegisteryService } from './injection-registery.service';\n@Injectable()\nexport class TooltipService extends InjectionRegisteryService<TooltipContentComponent> {\n  type: any = TooltipContentComponent;\n\n  constructor(injectionService: InjectionService) {\n    super(injectionService);\n  }\n}\n","import {\n  Component,\n  Input,\n  OnChanges,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n  SimpleChanges\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { TooltipService } from '../tooltip/tooltip.service';\n\n@Component({\n  providers: [TooltipService],\n  selector: 'ngx-charts-chart',\n  template: `\n    <div class=\"ngx-charts-outer\" [style.width.px]=\"view[0]\" [@animationState]=\"'active'\" [@.disabled]=\"!animations\">\n      <svg class=\"ngx-charts\" [attr.width]=\"chartWidth\" [attr.height]=\"view[1]\">\n        <ng-content></ng-content>\n      </svg>\n      <ngx-charts-scale-legend\n        *ngIf=\"showLegend && legendType === 'scaleLegend'\"\n        class=\"chart-legend\"\n        [horizontal]=\"legendOptions && legendOptions.position === 'below'\"\n        [valueRange]=\"legendOptions.domain\"\n        [colors]=\"legendOptions.colors\"\n        [height]=\"view[1]\"\n        [width]=\"legendWidth\"\n      >\n      </ngx-charts-scale-legend>\n      <ngx-charts-legend\n        *ngIf=\"showLegend && legendType === 'legend'\"\n        class=\"chart-legend\"\n        [horizontal]=\"legendOptions && legendOptions.position === 'below'\"\n        [data]=\"legendOptions.domain\"\n        [title]=\"legendOptions.title\"\n        [colors]=\"legendOptions.colors\"\n        [height]=\"view[1]\"\n        [width]=\"legendWidth\"\n        [activeEntries]=\"activeEntries\"\n        (labelClick)=\"legendLabelClick.emit($event)\"\n        (labelActivate)=\"legendLabelActivate.emit($event)\"\n        (labelDeactivate)=\"legendLabelDeactivate.emit($event)\"\n      >\n      </ngx-charts-legend>\n    </div>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':enter', [style({ opacity: 0 }), animate('500ms 100ms', style({ opacity: 1 }))])\n    ])\n  ]\n})\nexport class ChartComponent implements OnChanges {\n  @Input() view;\n  @Input() showLegend = false;\n  @Input() legendOptions: any;\n\n  // remove\n  @Input() data;\n  @Input() legendData;\n  @Input() legendType: any;\n  @Input() colors: any;\n  @Input() activeEntries: any[];\n  @Input() animations: boolean = true;\n\n  @Output() legendLabelClick: EventEmitter<any> = new EventEmitter();\n  @Output() legendLabelActivate: EventEmitter<any> = new EventEmitter();\n  @Output() legendLabelDeactivate: EventEmitter<any> = new EventEmitter();\n\n  chartWidth: any;\n  title: any;\n  legendWidth: any;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    let legendColumns = 0;\n    if (this.showLegend) {\n      this.legendType = this.getLegendType();\n\n      if (!this.legendOptions || this.legendOptions.position === 'right') {\n        if (this.legendType === 'scaleLegend') {\n          legendColumns = 1;\n        } else {\n          legendColumns = 2;\n        }\n      }\n    }\n\n    const chartColumns = 12 - legendColumns;\n\n    this.chartWidth = Math.floor((this.view[0] * chartColumns) / 12.0);\n    this.legendWidth =\n      !this.legendOptions || this.legendOptions.position === 'right'\n        ? Math.floor((this.view[0] * legendColumns) / 12.0)\n        : this.chartWidth;\n  }\n\n  getLegendType(): string {\n    if (this.legendOptions.scaleType === 'linear') {\n      return 'scaleLegend';\n    } else {\n      return 'legend';\n    }\n  }\n}\n","import { Output, EventEmitter, NgZone, Directive, ElementRef } from '@angular/core';\n\n/**\n * Visibility Observer\n */\n@Directive({\n  selector: 'visibility-observer'\n})\nexport class VisibilityObserver {\n  @Output() visible: EventEmitter<any> = new EventEmitter();\n\n  timeout: any;\n  isVisible: boolean = false;\n\n  constructor(private element: ElementRef, private zone: NgZone) {\n    this.runCheck();\n  }\n\n  destroy(): void {\n    clearTimeout(this.timeout);\n  }\n\n  onVisibilityChange(): void {\n    // trigger zone recalc for columns\n    this.zone.run(() => {\n      this.isVisible = true;\n      this.visible.emit(true);\n    });\n  }\n\n  runCheck(): void {\n    const check = () => {\n      if (!this.element) {\n        return;\n      }\n\n      // https://davidwalsh.name/offsetheight-visibility\n      const { offsetHeight, offsetWidth } = this.element.nativeElement;\n\n      if (offsetHeight && offsetWidth) {\n        clearTimeout(this.timeout);\n        this.onVisibilityChange();\n      } else {\n        clearTimeout(this.timeout);\n        this.zone.runOutsideAngular(() => {\n          this.timeout = setTimeout(() => check(), 100);\n        });\n      }\n    };\n\n    this.zone.runOutsideAngular(() => {\n      this.timeout = setTimeout(() => check());\n    });\n  }\n}\n","import {\n  ElementRef,\n  NgZone,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  AfterViewInit,\n  OnDestroy,\n  OnChanges,\n  SimpleChanges\n} from '@angular/core';\n\nimport { fromEvent as observableFromEvent } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { VisibilityObserver } from '../utils/visibility-observer';\n\n@Component({\n  selector: 'base-chart',\n  template: `\n    <div></div>\n  `\n})\nexport class BaseChartComponent implements OnChanges, AfterViewInit, OnDestroy {\n  @Input() results: any;\n  @Input() view: [number, number];\n  @Input() scheme: any = 'cool';\n  @Input() schemeType: string = 'ordinal';\n  @Input() customColors: any;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n\n  width: number;\n  height: number;\n  resizeSubscription: any;\n  visibilityObserver: VisibilityObserver;\n\n  constructor(protected chartElement: ElementRef, protected zone: NgZone, protected cd: ChangeDetectorRef) {}\n\n  ngAfterViewInit(): void {\n    this.bindWindowResizeEvent();\n\n    // listen for visibility of the element for hidden by default scenario\n    this.visibilityObserver = new VisibilityObserver(this.chartElement, this.zone);\n    this.visibilityObserver.visible.subscribe(this.update.bind(this));\n  }\n\n  ngOnDestroy(): void {\n    this.unbindEvents();\n    if (this.visibilityObserver) {\n      this.visibilityObserver.visible.unsubscribe();\n      this.visibilityObserver.destroy();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    if (this.results) {\n      this.results = this.cloneData(this.results);\n    } else {\n      this.results = [];\n    }\n\n    if (this.view) {\n      this.width = this.view[0];\n      this.height = this.view[1];\n    } else {\n      const dims = this.getContainerDims();\n      if (dims) {\n        this.width = dims.width;\n        this.height = dims.height;\n      }\n    }\n\n    // default values if width or height are 0 or undefined\n    if (!this.width) {\n      this.width = 600;\n    }\n\n    if (!this.height) {\n      this.height = 400;\n    }\n\n    this.width = Math.floor(this.width);\n    this.height = Math.floor(this.height);\n\n    if (this.cd) {\n      this.cd.markForCheck();\n    }\n  }\n\n  getContainerDims(): any {\n    let width;\n    let height;\n    const hostElem = this.chartElement.nativeElement;\n\n    if (hostElem.parentNode !== null) {\n      // Get the container dimensions\n      const dims = hostElem.parentNode.getBoundingClientRect();\n      width = dims.width;\n      height = dims.height;\n    }\n\n    if (width && height) {\n      return { width, height };\n    }\n\n    return null;\n  }\n\n  /**\n   * Converts all date objects that appear as name\n   * into formatted date strings\n   */\n  formatDates(): void {\n    for (let i = 0; i < this.results.length; i++) {\n      const g = this.results[i];\n      g.label = g.name;\n      if (g.label instanceof Date) {\n        g.label = g.label.toLocaleDateString();\n      }\n\n      if (g.series) {\n        for (let j = 0; j < g.series.length; j++) {\n          const d = g.series[j];\n          d.label = d.name;\n          if (d.label instanceof Date) {\n            d.label = d.label.toLocaleDateString();\n          }\n        }\n      }\n    }\n  }\n\n  protected unbindEvents(): void {\n    if (this.resizeSubscription) {\n      this.resizeSubscription.unsubscribe();\n    }\n  }\n\n  private bindWindowResizeEvent(): void {\n    const source = observableFromEvent(window, 'resize');\n    const subscription = source.pipe(debounceTime(200)).subscribe(e => {\n      this.update();\n      if (this.cd) {\n        this.cd.markForCheck();\n      }\n    });\n    this.resizeSubscription = subscription;\n  }\n\n  /**\n   * Clones the data into a new object\n   *\n   * @memberOf BaseChart\n   */\n  private cloneData(data): any {\n    const results = [];\n\n    for (const item of data) {\n      const copy = {\n        name: item['name']\n      };\n\n      if (item['value'] !== undefined) {\n        copy['value'] = item['value'];\n      }\n\n      if (item['series'] !== undefined) {\n        copy['series'] = [];\n        for (const seriesItem of item['series']) {\n          const seriesItemCopy = Object.assign({}, seriesItem);\n          copy['series'].push(seriesItemCopy);\n        }\n      }\n\n      if (item['extra'] !== undefined) {\n        copy['extra'] = JSON.parse(JSON.stringify(item['extra']));\n      }\n\n      results.push(copy);\n    }\n\n    return results;\n  }\n}\n","import { Component, Input, ElementRef, OnChanges, SimpleChanges, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'g[ngx-charts-axis-label]',\n  template: `\n    <svg:text\n      [attr.stroke-width]=\"strokeWidth\"\n      [attr.x]=\"x\"\n      [attr.y]=\"y\"\n      [attr.text-anchor]=\"textAnchor\"\n      [attr.transform]=\"transform\"\n    >\n      {{ label }}\n    </svg:text>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AxisLabelComponent implements OnChanges {\n  @Input() orient;\n  @Input() label;\n  @Input() offset;\n  @Input() width;\n  @Input() height;\n\n  x: any;\n  y: any;\n  transform: any;\n  strokeWidth: any;\n  textAnchor: any;\n  element: ElementRef;\n  textHeight = 25;\n  margin = 5;\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.strokeWidth = '0.01';\n    this.textAnchor = 'middle';\n    this.transform = '';\n\n    switch (this.orient) {\n      case 'top':\n        this.y = this.offset;\n        this.x = this.width / 2;\n        break;\n      case 'bottom':\n        this.y = this.offset;\n        this.x = this.width / 2;\n        break;\n      case 'left':\n        this.y = -(this.offset + this.textHeight + this.margin);\n        this.x = -this.height / 2;\n        this.transform = 'rotate(270)';\n        break;\n      case 'right':\n        this.y = this.offset + this.margin;\n        this.x = -this.height / 2;\n        this.transform = 'rotate(270)';\n        break;\n      default:\n    }\n  }\n}\n","export function trimLabel(s, max = 16): string {\n  if (typeof s !== 'string') {\n    if (typeof s === 'number') {\n      return s + '';\n    } else {\n      return '';\n    }\n  }\n\n  s = s.trim();\n  if (s.length <= max) {\n    return s;\n  } else {\n    return `${s.slice(0, max)}...`;\n  }\n}\n","export function reduceTicks(ticks, maxTicks) {\n  if (ticks.length > maxTicks) {\n    const reduced = [];\n    const modulus = Math.floor(ticks.length / maxTicks);\n    for (let i = 0; i < ticks.length; i++) {\n      if (i % modulus === 0) {\n        reduced.push(ticks[i]);\n      }\n    }\n    ticks = reduced;\n  }\n\n  return ticks;\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  ElementRef,\n  ViewChild,\n  SimpleChanges,\n  AfterViewInit,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { trimLabel } from '../trim-label.helper';\nimport { reduceTicks } from './ticks.helper';\n\n@Component({\n  selector: 'g[ngx-charts-x-axis-ticks]',\n  template: `\n    <svg:g #ticksel>\n      <svg:g *ngFor=\"let tick of ticks\" class=\"tick\" [attr.transform]=\"tickTransform(tick)\">\n        <title>{{ tickFormat(tick) }}</title>\n        <svg:text\n          stroke-width=\"0.01\"\n          [attr.text-anchor]=\"textAnchor\"\n          [attr.transform]=\"textTransform\"\n          [style.font-size]=\"'12px'\"\n        >\n          {{ tickTrim(tickFormat(tick)) }}\n        </svg:text>\n      </svg:g>\n    </svg:g>\n\n    <svg:g *ngFor=\"let tick of ticks\" [attr.transform]=\"tickTransform(tick)\">\n      <svg:g *ngIf=\"showGridLines\" [attr.transform]=\"gridLineTransform()\">\n        <svg:line class=\"gridline-path gridline-path-vertical\" [attr.y1]=\"-gridLineHeight\" y2=\"0\" />\n      </svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class XAxisTicksComponent implements OnChanges, AfterViewInit {\n  @Input() scale;\n  @Input() orient;\n  @Input() tickArguments = [5];\n  @Input() tickValues: any[];\n  @Input() tickStroke = '#ccc';\n  @Input() trimTicks: boolean = true;\n  @Input() maxTickLength: number = 16;\n  @Input() tickFormatting;\n  @Input() showGridLines = false;\n  @Input() gridLineHeight;\n  @Input() width;\n  @Input() rotateTicks: boolean = true;\n\n  @Output() dimensionsChanged = new EventEmitter();\n\n  verticalSpacing: number = 20;\n  rotateLabels: boolean = false;\n  innerTickSize: number = 6;\n  outerTickSize: number = 6;\n  tickPadding: number = 3;\n  textAnchor: string = 'middle';\n  maxTicksLength: number = 0;\n  maxAllowedLength: number = 16;\n  adjustedScale: any;\n  textTransform: any;\n  ticks: any;\n  tickFormat: (o: any) => any;\n  height: number = 0;\n\n  @ViewChild('ticksel') ticksElement: ElementRef;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  ngAfterViewInit(): void {\n    setTimeout(() => this.updateDims());\n  }\n\n  updateDims(): void {\n    const height = parseInt(this.ticksElement.nativeElement.getBoundingClientRect().height, 10);\n    if (height !== this.height) {\n      this.height = height;\n      this.dimensionsChanged.emit({ height });\n      setTimeout(() => this.updateDims());\n    }\n  }\n\n  update(): void {\n    const scale = this.scale;\n    this.ticks = this.getTicks();\n\n    if (this.tickFormatting) {\n      this.tickFormat = this.tickFormatting;\n    } else if (scale.tickFormat) {\n      this.tickFormat = scale.tickFormat.apply(scale, this.tickArguments);\n    } else {\n      this.tickFormat = function(d) {\n        if (d.constructor.name === 'Date') {\n          return d.toLocaleDateString();\n        }\n        return d.toLocaleString();\n      };\n    }\n\n    const angle = this.rotateTicks ? this.getRotationAngle(this.ticks) : null;\n\n    this.adjustedScale = this.scale.bandwidth\n      ? function(d) {\n          return this.scale(d) + this.scale.bandwidth() * 0.5;\n        }\n      : this.scale;\n\n    this.textTransform = '';\n    if (angle && angle !== 0) {\n      this.textTransform = `rotate(${angle})`;\n      this.textAnchor = 'end';\n      this.verticalSpacing = 10;\n    } else {\n      this.textAnchor = 'middle';\n    }\n\n    setTimeout(() => this.updateDims());\n  }\n\n  getRotationAngle(ticks): number {\n    let angle = 0;\n    this.maxTicksLength = 0;\n    for (let i = 0; i < ticks.length; i++) {\n      const tick = this.tickFormat(ticks[i]).toString();\n      let tickLength = tick.length;\n      if (this.trimTicks) {\n        tickLength = this.tickTrim(tick).length;\n      }\n\n      if (tickLength > this.maxTicksLength) {\n        this.maxTicksLength = tickLength;\n      }\n    }\n\n    const len = Math.min(this.maxTicksLength, this.maxAllowedLength);\n    const charWidth = 8; // need to measure this\n    const wordWidth = len * charWidth;\n\n    let baseWidth = wordWidth;\n    const maxBaseWidth = Math.floor(this.width / ticks.length);\n\n    // calculate optimal angle\n    while (baseWidth > maxBaseWidth && angle > -90) {\n      angle -= 30;\n      baseWidth = Math.cos(angle * (Math.PI / 180)) * wordWidth;\n    }\n\n    return angle;\n  }\n\n  getTicks() {\n    let ticks;\n    const maxTicks = this.getMaxTicks(20);\n    const maxScaleTicks = this.getMaxTicks(100);\n\n    if (this.tickValues) {\n      ticks = this.tickValues;\n    } else if (this.scale.ticks) {\n      ticks = this.scale.ticks.apply(this.scale, [maxScaleTicks]);\n    } else {\n      ticks = this.scale.domain();\n      ticks = reduceTicks(ticks, maxTicks);\n    }\n\n    return ticks;\n  }\n\n  getMaxTicks(tickWidth: number): number {\n    return Math.floor(this.width / tickWidth);\n  }\n\n  tickTransform(tick): string {\n    return 'translate(' + this.adjustedScale(tick) + ',' + this.verticalSpacing + ')';\n  }\n\n  gridLineTransform(): string {\n    return `translate(0,${-this.verticalSpacing - 5})`;\n  }\n\n  tickTrim(label: string): string {\n    return this.trimTicks ? trimLabel(label, this.maxTickLength) : label;\n  }\n}\n","import {\n  Component,\n  Input,\n  SimpleChanges,\n  Output,\n  EventEmitter,\n  OnChanges,\n  ViewChild,\n  ChangeDetectionStrategy\n} from '@angular/core';\n\nimport { XAxisTicksComponent } from './x-axis-ticks.component';\n\n@Component({\n  selector: 'g[ngx-charts-x-axis]',\n  template: `\n    <svg:g [attr.class]=\"xAxisClassName\" [attr.transform]=\"transform\">\n      <svg:g\n        ngx-charts-x-axis-ticks\n        *ngIf=\"xScale\"\n        [trimTicks]=\"trimTicks\"\n        [rotateTicks]=\"rotateTicks\"\n        [maxTickLength]=\"maxTickLength\"\n        [tickFormatting]=\"tickFormatting\"\n        [tickArguments]=\"tickArguments\"\n        [tickStroke]=\"tickStroke\"\n        [scale]=\"xScale\"\n        [orient]=\"xOrient\"\n        [showGridLines]=\"showGridLines\"\n        [gridLineHeight]=\"dims.height\"\n        [width]=\"dims.width\"\n        [tickValues]=\"ticks\"\n        (dimensionsChanged)=\"emitTicksHeight($event)\"\n      />\n      <svg:g\n        ngx-charts-axis-label\n        *ngIf=\"showLabel\"\n        [label]=\"labelText\"\n        [offset]=\"labelOffset\"\n        [orient]=\"'bottom'\"\n        [height]=\"dims.height\"\n        [width]=\"dims.width\"\n      ></svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class XAxisComponent implements OnChanges {\n  @Input() xScale;\n  @Input() dims;\n  @Input() trimTicks: boolean;\n  @Input() rotateTicks: boolean = true;\n  @Input() maxTickLength: number;\n  @Input() tickFormatting;\n  @Input() showGridLines = false;\n  @Input() showLabel;\n  @Input() labelText;\n  @Input() ticks: any[];\n  @Input() xAxisTickInterval;\n  @Input() xAxisTickCount: any;\n  @Input() xOrient: string = 'bottom';\n  @Input() xAxisOffset: number = 0;\n\n  @Output() dimensionsChanged = new EventEmitter();\n\n  xAxisClassName: string = 'x axis';\n\n  tickArguments: any;\n  transform: any;\n  labelOffset: number = 0;\n  fill: string = 'none';\n  stroke: string = 'stroke';\n  tickStroke: string = '#ccc';\n  strokeWidth: string = 'none';\n  padding: number = 5;\n\n  @ViewChild(XAxisTicksComponent) ticksComponent: XAxisTicksComponent;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.transform = `translate(0,${this.xAxisOffset + this.padding + this.dims.height})`;\n\n    if (typeof this.xAxisTickCount !== 'undefined') {\n      this.tickArguments = [this.xAxisTickCount];\n    }\n  }\n\n  emitTicksHeight({ height }): void {\n    const newLabelOffset = height + 25 + 5;\n    if (newLabelOffset !== this.labelOffset) {\n      this.labelOffset = newLabelOffset;\n      setTimeout(() => {\n        this.dimensionsChanged.emit({ height });\n      }, 0);\n    }\n  }\n}\n","/**\n * Generates a rounded rectanglar path\n *\n * @export\n * @param x, y, w, h, r, tl, tr, bl, br\n */\nexport function roundedRect(x, y, w, h, r, [tl, tr, bl, br]: boolean[]) {\n  let retval = '';\n\n  w = Math.floor(w);\n  h = Math.floor(h);\n\n  w = w === 0 ? 1 : w;\n  h = h === 0 ? 1 : h;\n\n  retval = `M${[x + r, y]}`;\n  retval += `h${w - 2 * r}`;\n\n  if (tr) {\n    retval += `a${[r, r]} 0 0 1 ${[r, r]}`;\n  } else {\n    retval += `h${r}v${r}`;\n  }\n\n  retval += `v${h - 2 * r}`;\n\n  if (br) {\n    retval += `a${[r, r]} 0 0 1 ${[-r, r]}`;\n  } else {\n    retval += `v${r}h${-r}`;\n  }\n\n  retval += `h${2 * r - w}`;\n\n  if (bl) {\n    retval += `a${[r, r]} 0 0 1 ${[-r, -r]}`;\n  } else {\n    retval += `h${-r}v${-r}`;\n  }\n\n  retval += `v${2 * r - h}`;\n\n  if (tl) {\n    retval += `a${[r, r]} 0 0 1 ${[r, -r]}`;\n  } else {\n    retval += `v${-r}h${r}`;\n  }\n\n  retval += `z`;\n\n  return retval;\n}\n","export enum StyleTypes {\n  popover = 'popover' as any,\n  tooltip = 'tooltip' as any\n}\n","export enum AlignmentTypes {\n  left = 'left' as any,\n  center = 'center' as any,\n  right = 'right' as any\n}\n","export enum ShowTypes {\n  all = 'all' as any,\n  focus = 'focus' as any,\n  mouseover = 'mouseover' as any\n}\n","import {\n  Component,\n  Input,\n  Output,\n  OnChanges,\n  ElementRef,\n  ViewChild,\n  EventEmitter,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  SimpleChanges\n} from '@angular/core';\nimport { trimLabel } from '../trim-label.helper';\nimport { reduceTicks } from './ticks.helper';\nimport { roundedRect } from '../../common/shape.helper';\n\n@Component({\n  selector: 'g[ngx-charts-y-axis-ticks]',\n  template: `\n    <svg:g #ticksel>\n      <svg:g *ngFor=\"let tick of ticks\" class=\"tick\" [attr.transform]=\"transform(tick)\">\n        <title>{{ tickFormat(tick) }}</title>\n        <svg:text\n          stroke-width=\"0.01\"\n          [attr.dy]=\"dy\"\n          [attr.x]=\"x1\"\n          [attr.y]=\"y1\"\n          [attr.text-anchor]=\"textAnchor\"\n          [style.font-size]=\"'12px'\"\n        >\n          {{ tickTrim(tickFormat(tick)) }}\n        </svg:text>\n      </svg:g>\n    </svg:g>\n\n    <svg:path\n      *ngIf=\"referenceLineLength > 1 && refMax && refMin && showRefLines\"\n      class=\"reference-area\"\n      [attr.d]=\"referenceAreaPath\"\n      [attr.transform]=\"gridLineTransform()\"\n    />\n    <svg:g *ngFor=\"let tick of ticks\" [attr.transform]=\"transform(tick)\">\n      <svg:g *ngIf=\"showGridLines\" [attr.transform]=\"gridLineTransform()\">\n        <svg:line\n          *ngIf=\"orient === 'left'\"\n          class=\"gridline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"gridLineWidth\"\n        />\n        <svg:line\n          *ngIf=\"orient === 'right'\"\n          class=\"gridline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"-gridLineWidth\"\n        />\n      </svg:g>\n    </svg:g>\n\n    <svg:g *ngFor=\"let refLine of referenceLines\">\n      <svg:g *ngIf=\"showRefLines\" [attr.transform]=\"transform(refLine.value)\">\n        <svg:line\n          class=\"refline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"gridLineWidth\"\n          [attr.transform]=\"gridLineTransform()\"\n        />\n        <svg:g *ngIf=\"showRefLabels\">\n          <title>{{ tickTrim(tickFormat(refLine.value)) }}</title>\n          <svg:text\n            class=\"refline-label\"\n            [attr.dy]=\"dy\"\n            [attr.y]=\"-6\"\n            [attr.x]=\"gridLineWidth\"\n            [attr.text-anchor]=\"textAnchor\"\n          >\n            {{ refLine.name }}\n          </svg:text>\n        </svg:g>\n      </svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class YAxisTicksComponent implements OnChanges, AfterViewInit {\n  @Input() scale;\n  @Input() orient;\n  @Input() tickArguments = [5];\n  @Input() tickValues: any[];\n  @Input() tickStroke = '#ccc';\n  @Input() trimTicks: boolean = true;\n  @Input() maxTickLength: number = 16;\n  @Input() tickFormatting;\n  @Input() showGridLines = false;\n  @Input() gridLineWidth;\n  @Input() height;\n  @Input() referenceLines;\n  @Input() showRefLabels: boolean = false;\n  @Input() showRefLines: boolean = false;\n\n  @Output() dimensionsChanged = new EventEmitter();\n\n  innerTickSize: any = 6;\n  tickPadding: any = 3;\n  tickSpacing: any;\n  verticalSpacing: number = 20;\n  textAnchor: any = 'middle';\n  dy: any;\n  x1: any;\n  x2: any;\n  y1: any;\n  y2: any;\n  adjustedScale: any;\n  transform: (o: any) => string;\n  tickFormat: (o: any) => string;\n  ticks: any;\n  width: number = 0;\n  outerTickSize: number = 6;\n  rotateLabels: boolean = false;\n  refMax: number;\n  refMin: number;\n  referenceLineLength: number = 0;\n  referenceAreaPath: string;\n\n  @ViewChild('ticksel') ticksElement: ElementRef;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  ngAfterViewInit(): void {\n    setTimeout(() => this.updateDims());\n  }\n\n  updateDims(): void {\n    const width = parseInt(this.ticksElement.nativeElement.getBoundingClientRect().width, 10);\n    if (width !== this.width) {\n      this.width = width;\n      this.dimensionsChanged.emit({ width });\n      setTimeout(() => this.updateDims());\n    }\n  }\n\n  update(): void {\n    let scale;\n    const sign = this.orient === 'top' || this.orient === 'right' ? -1 : 1;\n    this.tickSpacing = Math.max(this.innerTickSize, 0) + this.tickPadding;\n\n    scale = this.scale;\n    this.ticks = this.getTicks();\n\n    if (this.tickFormatting) {\n      this.tickFormat = this.tickFormatting;\n    } else if (scale.tickFormat) {\n      this.tickFormat = scale.tickFormat.apply(scale, this.tickArguments);\n    } else {\n      this.tickFormat = function(d) {\n        if (d.constructor.name === 'Date') {\n          return d.toLocaleDateString();\n        }\n        return d.toLocaleString();\n      };\n    }\n\n    this.adjustedScale = scale.bandwidth\n      ? function(d) {\n          return scale(d) + scale.bandwidth() * 0.5;\n        }\n      : scale;\n\n    if (this.showRefLines && this.referenceLines) {\n      this.setReferencelines();\n    }\n\n    switch (this.orient) {\n      case 'top':\n        this.transform = function(tick) {\n          return 'translate(' + this.adjustedScale(tick) + ',0)';\n        };\n        this.textAnchor = 'middle';\n        this.y2 = this.innerTickSize * sign;\n        this.y1 = this.tickSpacing * sign;\n        this.dy = sign < 0 ? '0em' : '.71em';\n        break;\n      case 'bottom':\n        this.transform = function(tick) {\n          return 'translate(' + this.adjustedScale(tick) + ',0)';\n        };\n        this.textAnchor = 'middle';\n        this.y2 = this.innerTickSize * sign;\n        this.y1 = this.tickSpacing * sign;\n        this.dy = sign < 0 ? '0em' : '.71em';\n        break;\n      case 'left':\n        this.transform = function(tick) {\n          return 'translate(0,' + this.adjustedScale(tick) + ')';\n        };\n        this.textAnchor = 'end';\n        this.x2 = this.innerTickSize * -sign;\n        this.x1 = this.tickSpacing * -sign;\n        this.dy = '.32em';\n        break;\n      case 'right':\n        this.transform = function(tick) {\n          return 'translate(0,' + this.adjustedScale(tick) + ')';\n        };\n        this.textAnchor = 'start';\n        this.x2 = this.innerTickSize * -sign;\n        this.x1 = this.tickSpacing * -sign;\n        this.dy = '.32em';\n        break;\n      default:\n    }\n    setTimeout(() => this.updateDims());\n  }\n\n  setReferencelines(): void {\n    this.refMin = this.adjustedScale(\n      Math.min.apply(\n        null,\n        this.referenceLines.map(item => item.value)\n      )\n    );\n    this.refMax = this.adjustedScale(\n      Math.max.apply(\n        null,\n        this.referenceLines.map(item => item.value)\n      )\n    );\n    this.referenceLineLength = this.referenceLines.length;\n\n    this.referenceAreaPath = roundedRect(0, this.refMax, this.gridLineWidth, this.refMin - this.refMax, 0, [\n      false,\n      false,\n      false,\n      false\n    ]);\n  }\n\n  getTicks(): any {\n    let ticks;\n    const maxTicks = this.getMaxTicks(20);\n    const maxScaleTicks = this.getMaxTicks(50);\n\n    if (this.tickValues) {\n      ticks = this.tickValues;\n    } else if (this.scale.ticks) {\n      ticks = this.scale.ticks.apply(this.scale, [maxScaleTicks]);\n    } else {\n      ticks = this.scale.domain();\n      ticks = reduceTicks(ticks, maxTicks);\n    }\n\n    return ticks;\n  }\n\n  getMaxTicks(tickHeight: number): number {\n    return Math.floor(this.height / tickHeight);\n  }\n\n  tickTransform(tick): string {\n    return `translate(${this.adjustedScale(tick)},${this.verticalSpacing})`;\n  }\n\n  gridLineTransform(): string {\n    return `translate(5,0)`;\n  }\n\n  tickTrim(label: string): string {\n    return this.trimTicks ? trimLabel(label, this.maxTickLength) : label;\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  ViewChild,\n  SimpleChanges,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { YAxisTicksComponent } from './y-axis-ticks.component';\n\n@Component({\n  selector: 'g[ngx-charts-y-axis]',\n  template: `\n    <svg:g [attr.class]=\"yAxisClassName\" [attr.transform]=\"transform\">\n      <svg:g\n        ngx-charts-y-axis-ticks\n        *ngIf=\"yScale\"\n        [trimTicks]=\"trimTicks\"\n        [maxTickLength]=\"maxTickLength\"\n        [tickFormatting]=\"tickFormatting\"\n        [tickArguments]=\"tickArguments\"\n        [tickValues]=\"ticks\"\n        [tickStroke]=\"tickStroke\"\n        [scale]=\"yScale\"\n        [orient]=\"yOrient\"\n        [showGridLines]=\"showGridLines\"\n        [gridLineWidth]=\"dims.width\"\n        [referenceLines]=\"referenceLines\"\n        [showRefLines]=\"showRefLines\"\n        [showRefLabels]=\"showRefLabels\"\n        [height]=\"dims.height\"\n        (dimensionsChanged)=\"emitTicksWidth($event)\"\n      />\n\n      <svg:g\n        ngx-charts-axis-label\n        *ngIf=\"showLabel\"\n        [label]=\"labelText\"\n        [offset]=\"labelOffset\"\n        [orient]=\"yOrient\"\n        [height]=\"dims.height\"\n        [width]=\"dims.width\"\n      ></svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class YAxisComponent implements OnChanges {\n  @Input() yScale;\n  @Input() dims;\n  @Input() trimTicks: boolean;\n  @Input() maxTickLength: number;\n  @Input() tickFormatting;\n  @Input() ticks: any[];\n  @Input() showGridLines = false;\n  @Input() showLabel;\n  @Input() labelText;\n  @Input() yAxisTickInterval;\n  @Input() yAxisTickCount: any;\n  @Input() yOrient: string = 'left';\n  @Input() referenceLines;\n  @Input() showRefLines;\n  @Input() showRefLabels;\n  @Input() yAxisOffset: number = 0;\n  @Output() dimensionsChanged = new EventEmitter();\n\n  yAxisClassName: string = 'y axis';\n  tickArguments: any;\n  offset: any;\n  transform: any;\n  labelOffset: number = 15;\n  fill: string = 'none';\n  stroke: string = '#CCC';\n  tickStroke: string = '#CCC';\n  strokeWidth: number = 1;\n  padding: number = 5;\n\n  @ViewChild(YAxisTicksComponent) ticksComponent: YAxisTicksComponent;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.offset = -(this.yAxisOffset + this.padding);\n    if (this.yOrient === 'right') {\n      this.labelOffset = 65;\n      this.transform = `translate(${this.offset + this.dims.width} , 0)`;\n    } else {\n      this.offset = this.offset;\n      this.transform = `translate(${this.offset} , 0)`;\n    }\n\n    if (this.yAxisTickCount !== undefined) {\n      this.tickArguments = [this.yAxisTickCount];\n    }\n  }\n\n  emitTicksWidth({ width }): void {\n    if (width !== this.labelOffset && this.yOrient === 'right') {\n      this.labelOffset = width + this.labelOffset;\n      setTimeout(() => {\n        this.dimensionsChanged.emit({ width });\n      }, 0);\n    } else if (width !== this.labelOffset) {\n      this.labelOffset = width;\n      setTimeout(() => {\n        this.dimensionsChanged.emit({ width });\n      }, 0);\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { AxisLabelComponent } from './axis-label.component';\nimport { XAxisComponent } from './x-axis.component';\nimport { XAxisTicksComponent } from './x-axis-ticks.component';\nimport { YAxisComponent } from './y-axis.component';\nimport { YAxisTicksComponent } from './y-axis-ticks.component';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent],\n  exports: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent]\n})\nexport class AxesModule {}\n","import {\n  Directive,\n  Input,\n  Output,\n  EventEmitter,\n  HostListener,\n  ViewContainerRef,\n  Renderer2,\n  OnDestroy\n} from '@angular/core';\n\nimport { PlacementTypes } from './position';\nimport { StyleTypes } from './style.type';\nimport { AlignmentTypes } from './alignment.type';\nimport { ShowTypes } from './show.type';\n\nimport { TooltipService } from './tooltip.service';\n\n@Directive({ selector: '[ngx-tooltip]' })\nexport class TooltipDirective implements OnDestroy {\n  @Input() tooltipCssClass: string = '';\n  @Input() tooltipTitle: string = '';\n  @Input() tooltipAppendToBody: boolean = true;\n  @Input() tooltipSpacing: number = 10;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipShowCaret: boolean = true;\n  @Input() tooltipPlacement: PlacementTypes = PlacementTypes.top;\n  @Input() tooltipAlignment: AlignmentTypes = AlignmentTypes.center;\n  @Input() tooltipType: StyleTypes = StyleTypes.popover;\n  @Input() tooltipCloseOnClickOutside: boolean = true;\n  @Input() tooltipCloseOnMouseLeave: boolean = true;\n  @Input() tooltipHideTimeout: number = 300;\n  @Input() tooltipShowTimeout: number = 100;\n  @Input() tooltipTemplate: any;\n  @Input() tooltipShowEvent: ShowTypes = ShowTypes.all;\n  @Input() tooltipContext: any;\n  @Input() tooltipImmediateExit: boolean = false;\n\n  @Output() show = new EventEmitter();\n  @Output() hide = new EventEmitter();\n\n  private get listensForFocus(): boolean {\n    return this.tooltipShowEvent === ShowTypes.all || this.tooltipShowEvent === ShowTypes.focus;\n  }\n\n  private get listensForHover(): boolean {\n    return this.tooltipShowEvent === ShowTypes.all || this.tooltipShowEvent === ShowTypes.mouseover;\n  }\n\n  private component: any;\n  private timeout: any;\n  private mouseLeaveContentEvent: any;\n  private mouseEnterContentEvent: any;\n  private documentClickEvent: any;\n\n  constructor(\n    private tooltipService: TooltipService,\n    private viewContainerRef: ViewContainerRef,\n    private renderer: Renderer2\n  ) {}\n\n  ngOnDestroy(): void {\n    this.hideTooltip(true);\n  }\n\n  @HostListener('focusin')\n  onFocus(): void {\n    if (this.listensForFocus) {\n      this.showTooltip();\n    }\n  }\n\n  @HostListener('blur')\n  onBlur(): void {\n    if (this.listensForFocus) {\n      this.hideTooltip(true);\n    }\n  }\n\n  @HostListener('mouseenter')\n  onMouseEnter(): void {\n    if (this.listensForHover) {\n      this.showTooltip();\n    }\n  }\n\n  @HostListener('mouseleave', ['$event.target'])\n  onMouseLeave(target): void {\n    if (this.listensForHover && this.tooltipCloseOnMouseLeave) {\n      clearTimeout(this.timeout);\n\n      if (this.component) {\n        const contentDom = this.component.instance.element.nativeElement;\n        const contains = contentDom.contains(target);\n        if (contains) return;\n      }\n\n      this.hideTooltip(this.tooltipImmediateExit);\n    }\n  }\n\n  @HostListener('click')\n  onMouseClick() {\n    if (this.listensForHover) {\n      this.hideTooltip(true);\n    }\n  }\n\n  showTooltip(immediate?: boolean): void {\n    if (this.component || this.tooltipDisabled) return;\n\n    const time = immediate ? 0 : this.tooltipShowTimeout;\n\n    clearTimeout(this.timeout);\n    this.timeout = setTimeout(() => {\n      this.tooltipService.destroyAll();\n\n      const options = this.createBoundOptions();\n      this.component = this.tooltipService.create(options);\n\n      // add a tiny timeout to avoid event re-triggers\n      setTimeout(() => {\n        if (this.component) {\n          this.addHideListeners(this.component.instance.element.nativeElement);\n        }\n      }, 10);\n\n      this.show.emit(true);\n    }, time);\n  }\n\n  addHideListeners(tooltip): void {\n    // on mouse enter, cancel the hide triggered by the leave\n    this.mouseEnterContentEvent = this.renderer.listen(tooltip, 'mouseenter', () => {\n      clearTimeout(this.timeout);\n    });\n\n    // content mouse leave listener\n    if (this.tooltipCloseOnMouseLeave) {\n      this.mouseLeaveContentEvent = this.renderer.listen(tooltip, 'mouseleave', () => {\n        this.hideTooltip(this.tooltipImmediateExit);\n      });\n    }\n\n    // content close on click outside\n    if (this.tooltipCloseOnClickOutside) {\n      this.documentClickEvent = this.renderer.listen(document, 'click', event => {\n        const contains = tooltip.contains(event.target);\n        if (!contains) this.hideTooltip();\n      });\n    }\n  }\n\n  hideTooltip(immediate: boolean = false): void {\n    if (!this.component) return;\n\n    const destroyFn = () => {\n      // remove events\n      if (this.mouseLeaveContentEvent) this.mouseLeaveContentEvent();\n      if (this.mouseEnterContentEvent) this.mouseEnterContentEvent();\n      if (this.documentClickEvent) this.documentClickEvent();\n\n      // emit events\n      this.hide.emit(true);\n\n      // destroy component\n      this.tooltipService.destroy(this.component);\n      this.component = undefined;\n    };\n\n    clearTimeout(this.timeout);\n    if (!immediate) {\n      this.timeout = setTimeout(destroyFn, this.tooltipHideTimeout);\n    } else {\n      destroyFn();\n    }\n  }\n\n  private createBoundOptions(): any {\n    return {\n      title: this.tooltipTitle,\n      template: this.tooltipTemplate,\n      host: this.viewContainerRef.element,\n      placement: this.tooltipPlacement,\n      alignment: this.tooltipAlignment,\n      type: this.tooltipType,\n      showCaret: this.tooltipShowCaret,\n      cssClass: this.tooltipCssClass,\n      spacing: this.tooltipSpacing,\n      context: this.tooltipContext\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { TooltipDirective } from './tooltip.directive';\nimport { TooltipContentComponent } from './tooltip.component';\nimport { TooltipService } from './tooltip.service';\n\nimport { InjectionService } from './injection.service';\n\n@NgModule({\n  declarations: [TooltipContentComponent, TooltipDirective],\n  providers: [InjectionService, TooltipService],\n  exports: [TooltipContentComponent, TooltipDirective],\n  imports: [CommonModule],\n  entryComponents: [TooltipContentComponent]\n})\nexport class TooltipModule {}\n","/**\n * Formats a label given a date, number or string.\n *\n * @export\n */\nexport function formatLabel(label: any): string {\n  if (label instanceof Date) {\n    label = label.toLocaleDateString();\n  } else {\n    label = label.toLocaleString();\n  }\n\n  return label;\n}\n\n/**\n * Escapes a label.\n *\n * @export\n */\nexport function escapeLabel(label: any): string {\n  return label.toLocaleString().replace(/[&'`\"<>]/g, match => {\n    return {\n      '&': '&amp;',\n      // tslint:disable-next-line: quotemark\n      \"'\": '&#x27;',\n      '`': '&#x60;',\n      '\"': '&quot;',\n      '<': '&lt;',\n      '>': '&gt;'\n    }[match];\n  });\n}\n","const cache = {};\n\n/**\n * Generates a short id.\n *\n * Description:\n *   A 4-character alphanumeric sequence (364 = 1.6 million)\n *   This should only be used for JavaScript specific models.\n *   http://stackoverflow.com/questions/6248666/how-to-generate-short-uid-like-ax4j9z-in-js\n *\n *   Example: `ebgf`\n */\nexport function id(): string {\n  let newId = ('0000' + ((Math.random() * Math.pow(36, 4)) << 0).toString(36)).slice(-4);\n\n  // append a 'a' because neo gets mad\n  newId = `a${newId}`;\n\n  // ensure not already used\n  if (!cache[newId]) {\n    cache[newId] = true;\n    return newId;\n  }\n\n  return id();\n}\n","import {\n  Component,\n  Input,\n  Output,\n  SimpleChanges,\n  EventEmitter,\n  OnChanges,\n  OnInit,\n  ChangeDetectionStrategy,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { formatLabel, escapeLabel } from '../common/label.helper';\nimport { id } from '../utils/id';\nimport { ColorHelper } from '../common/color.helper';\n\n@Component({\n  selector: 'g[ngx-charts-circle-series]',\n  template: `\n    <svg:g *ngIf=\"circle\">\n      <defs>\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          orientation=\"vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"circle.gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        *ngIf=\"barVisible && type === 'standard'\"\n        [@animationState]=\"'active'\"\n        [attr.x]=\"circle.cx - circle.radius\"\n        [attr.y]=\"circle.cy\"\n        [attr.width]=\"circle.radius * 2\"\n        [attr.height]=\"circle.height\"\n        [attr.fill]=\"gradientFill\"\n        class=\"tooltip-bar\"\n      />\n      <svg:g\n        ngx-charts-circle\n        class=\"circle\"\n        [cx]=\"circle.cx\"\n        [cy]=\"circle.cy\"\n        [r]=\"circle.radius\"\n        [fill]=\"circle.color\"\n        [class.active]=\"isActive({ name: circle.seriesName })\"\n        [pointerEvents]=\"circle.value === 0 ? 'none' : 'all'\"\n        [data]=\"circle.value\"\n        [classNames]=\"circle.classNames\"\n        (select)=\"onClick(circle.data)\"\n        (activate)=\"activateCircle()\"\n        (deactivate)=\"deactivateCircle()\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"'top'\"\n        [tooltipType]=\"'tooltip'\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"circle.data\"\n      />\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':enter', [\n        style({\n          opacity: 0\n        }),\n        animate(250, style({ opacity: 1 }))\n      ])\n    ])\n  ]\n})\nexport class CircleSeriesComponent implements OnChanges, OnInit {\n  @Input() data;\n  @Input() type = 'standard';\n  @Input() xScale;\n  @Input() yScale;\n  @Input() colors: ColorHelper;\n  @Input() scaleType;\n  @Input() visibleValue;\n  @Input() activeEntries: any[];\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipTemplate: TemplateRef<any>;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n\n  areaPath: any;\n  circle: any; // active circle\n  barVisible: boolean = false;\n  gradientId: string;\n  gradientFill: string;\n\n  ngOnInit() {\n    this.gradientId = 'grad' + id().toString();\n    this.gradientFill = `url(#${this.gradientId})`;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.circle = this.getActiveCircle();\n  }\n\n  getActiveCircle(): {} {\n    const indexActiveDataPoint = this.data.series.findIndex(d => {\n      const label = d.name;\n      return label && this.visibleValue && label.toString() === this.visibleValue.toString() && d.value !== undefined;\n    });\n\n    if (indexActiveDataPoint === -1) {\n      // No valid point is 'active/hovered over' at this moment.\n      return undefined;\n    }\n\n    return this.mapDataPointToCircle(this.data.series[indexActiveDataPoint], indexActiveDataPoint);\n  }\n\n  mapDataPointToCircle(d: any, i: number): any {\n    const seriesName = this.data.name;\n\n    const value = d.value;\n    const label = d.name;\n    const tooltipLabel = formatLabel(label);\n\n    let cx;\n    if (this.scaleType === 'time') {\n      cx = this.xScale(label);\n    } else if (this.scaleType === 'linear') {\n      cx = this.xScale(Number(label));\n    } else {\n      cx = this.xScale(label);\n    }\n\n    const cy = this.yScale(this.type === 'standard' ? value : d.d1);\n    const radius = 5;\n    const height = this.yScale.range()[0] - cy;\n    const opacity = 1;\n\n    let color;\n    if (this.colors.scaleType === 'linear') {\n      if (this.type === 'standard') {\n        color = this.colors.getColor(value);\n      } else {\n        color = this.colors.getColor(d.d1);\n      }\n    } else {\n      color = this.colors.getColor(seriesName);\n    }\n\n    const data = Object.assign({}, d, {\n      series: seriesName,\n      value,\n      name: label\n    });\n\n    return {\n      classNames: [`circle-data-${i}`],\n      value,\n      label,\n      data,\n      cx,\n      cy,\n      radius,\n      height,\n      tooltipLabel,\n      color,\n      opacity,\n      seriesName,\n      gradientStops: this.getGradientStops(color),\n      min: d.min,\n      max: d.max\n    };\n  }\n\n  getTooltipText({ tooltipLabel, value, seriesName, min, max }): string {\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(seriesName)} â¢ ${escapeLabel(tooltipLabel)}</span>\n      <span class=\"tooltip-val\">${value.toLocaleString()}${this.getTooltipMinMaxText(min, max)}</span>\n    `;\n  }\n\n  getTooltipMinMaxText(min: any, max: any) {\n    if (min !== undefined || max !== undefined) {\n      let result = ' (';\n      if (min !== undefined) {\n        if (max === undefined) {\n          result += 'â¥';\n        }\n        result += min.toLocaleString();\n        if (max !== undefined) {\n          result += ' - ';\n        }\n      } else if (max !== undefined) {\n        result += 'â¤';\n      }\n      if (max !== undefined) {\n        result += max.toLocaleString();\n      }\n      result += ')';\n      return result;\n    } else {\n      return '';\n    }\n  }\n\n  getGradientStops(color) {\n    return [\n      {\n        offset: 0,\n        color,\n        opacity: 0.2\n      },\n      {\n        offset: 100,\n        color,\n        opacity: 1\n      }\n    ];\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item !== undefined;\n  }\n\n  activateCircle(): void {\n    this.barVisible = true;\n    this.activate.emit({ name: this.data.name });\n  }\n\n  deactivateCircle(): void {\n    this.barVisible = false;\n    this.circle.opacity = 0;\n    this.deactivate.emit({ name: this.data.name });\n  }\n}\n","import {\n  Component,\n  Input,\n  SimpleChanges,\n  Output,\n  EventEmitter,\n  OnChanges,\n  ChangeDetectionStrategy,\n  HostListener\n} from '@angular/core';\n\n@Component({\n  selector: 'g[ngx-charts-circle]',\n  template: `\n    <svg:circle\n      [attr.cx]=\"cx\"\n      [attr.cy]=\"cy\"\n      [attr.r]=\"r\"\n      [attr.fill]=\"fill\"\n      [attr.stroke]=\"stroke\"\n      [attr.opacity]=\"circleOpacity\"\n      [attr.class]=\"classNames\"\n      [attr.pointer-events]=\"pointerEvents\"\n    />\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CircleComponent implements OnChanges {\n  @Input() cx;\n  @Input() cy;\n  @Input() r;\n  @Input() fill;\n  @Input() stroke;\n  @Input() data;\n  @Input() classNames;\n  @Input() circleOpacity;\n  @Input() pointerEvents;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n\n  @HostListener('click')\n  onClick() {\n    this.select.emit(this.data);\n  }\n\n  @HostListener('mouseenter')\n  onMouseEnter(): void {\n    this.activate.emit(this.data);\n  }\n\n  @HostListener('mouseleave')\n  onMouseLeave(): void {\n    this.deactivate.emit(this.data);\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.classNames = Array.isArray(this.classNames) ? this.classNames.join(' ') : '';\n    this.classNames += 'circle';\n  }\n}\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'g[ngx-charts-grid-panel]',\n  template: `\n    <svg:rect [attr.height]=\"height\" [attr.width]=\"width\" [attr.x]=\"x\" [attr.y]=\"y\" stroke=\"none\" class=\"gridpanel\" />\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GridPanelComponent {\n  @Input() path;\n  @Input() width;\n  @Input() height;\n  @Input() x;\n  @Input() y;\n}\n","import { Component, SimpleChanges, Input, OnChanges, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'g[ngx-charts-grid-panel-series]',\n  template: `\n    <svg:g\n      ngx-charts-grid-panel\n      *ngFor=\"let gridPanel of gridPanels\"\n      [height]=\"gridPanel.height\"\n      [width]=\"gridPanel.width\"\n      [x]=\"gridPanel.x\"\n      [y]=\"gridPanel.y\"\n      [class.grid-panel]=\"true\"\n      [class.odd]=\"gridPanel.class === 'odd'\"\n      [class.even]=\"gridPanel.class === 'even'\"\n    ></svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GridPanelSeriesComponent implements OnChanges {\n  gridPanels: any[];\n\n  @Input()\n  data;\n\n  @Input()\n  dims;\n\n  @Input()\n  xScale;\n\n  @Input()\n  yScale;\n\n  @Input()\n  orient;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.gridPanels = this.getGridPanels();\n  }\n\n  getGridPanels(): any[] {\n    return this.data.map(d => {\n      let offset;\n      let width;\n      let height;\n      let x;\n      let y;\n      let className = 'odd';\n\n      if (this.orient === 'vertical') {\n        const position: number = this.xScale(d.name);\n        const positionIndex = Number.parseInt((position / this.xScale.step()).toString(), 10);\n\n        if (positionIndex % 2 === 1) {\n          className = 'even';\n        }\n        offset = this.xScale.bandwidth() * this.xScale.paddingInner();\n        width = this.xScale.bandwidth() + offset;\n        height = this.dims.height;\n        x = this.xScale(d.name) - offset / 2;\n        y = 0;\n      } else if (this.orient === 'horizontal') {\n        const position = this.yScale(d.name);\n        const positionIndex = Number.parseInt((position / this.yScale.step()).toString(), 10);\n\n        if (positionIndex % 2 === 1) {\n          className = 'even';\n        }\n        offset = this.yScale.bandwidth() * this.yScale.paddingInner();\n\n        width = this.dims.width;\n        height = this.yScale.bandwidth() + offset;\n        x = 0;\n        y = this.yScale(d.name) - offset / 2;\n      }\n\n      return {\n        name: d.name,\n        class: className,\n        height,\n        width,\n        x,\n        y\n      };\n    });\n  }\n}\n","import { Component, Input, OnChanges, SimpleChanges, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'g[ngx-charts-svg-linear-gradient]',\n  template: `\n    <svg:linearGradient [id]=\"name\" [attr.x1]=\"x1\" [attr.y1]=\"y1\" [attr.x2]=\"x2\" [attr.y2]=\"y2\">\n      <svg:stop\n        *ngFor=\"let stop of stops\"\n        [attr.offset]=\"stop.offset + '%'\"\n        [style.stop-color]=\"stop.color\"\n        [style.stop-opacity]=\"stop.opacity\"\n      />\n    </svg:linearGradient>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SvgLinearGradientComponent implements OnChanges {\n  @Input() orientation = 'vertical';\n  @Input() name;\n  @Input() stops: any[];\n\n  x1: any;\n  x2: any;\n  y1: any;\n  y2: any;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.x1 = '0%';\n    this.x2 = '0%';\n    this.y1 = '0%';\n    this.y2 = '0%';\n\n    if (this.orientation === 'horizontal') {\n      this.x2 = '100%';\n    } else if (this.orientation === 'vertical') {\n      this.y1 = '100%';\n    }\n  }\n}\n","import { Component, Input, OnChanges, ChangeDetectionStrategy, SimpleChanges } from '@angular/core';\n\n@Component({\n  selector: 'g[ngx-charts-svg-radial-gradient]',\n  template: `\n    <svg:radialGradient [id]=\"name\" [attr.cx]=\"cx\" [attr.cy]=\"cy\" [attr.r]=\"r\" gradientUnits=\"userSpaceOnUse\">\n      <svg:stop\n        *ngFor=\"let stop of stops\"\n        [attr.offset]=\"stop.offset + '%'\"\n        [style.stop-color]=\"stop.color\"\n        [style.stop-opacity]=\"stop.opacity\"\n      />\n    </svg:radialGradient>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SvgRadialGradientComponent implements OnChanges {\n  @Input() color: string;\n  @Input() name: string;\n  @Input() startOpacity: number;\n  @Input() endOpacity = 1;\n  @Input() cx: number = 0;\n  @Input() cy: number = 0;\n\n  @Input()\n  get stops(): any[] {\n    return this.stopsInput || this.stopsDefault;\n  }\n\n  set stops(value: any[]) {\n    this.stopsInput = value;\n  }\n\n  r: string;\n\n  private stopsInput: any[];\n  private stopsDefault: any[];\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.r = '30%';\n    if ('color' in changes || 'startOpacity' in changes || 'endOpacity' in changes) {\n      this.stopsDefault = [\n        {\n          offset: 0,\n          color: this.color,\n          opacity: this.startOpacity\n        },\n        {\n          offset: 100,\n          color: this.color,\n          opacity: this.endOpacity\n        }\n      ];\n    }\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  SimpleChanges,\n  EventEmitter,\n  ElementRef,\n  OnChanges,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { select } from 'd3-selection';\nimport { id } from '../utils/id';\n\n@Component({\n  selector: 'g[ngx-charts-area]',\n  template: `\n    <svg:defs *ngIf=\"gradient\">\n      <svg:g ngx-charts-svg-linear-gradient orientation=\"vertical\" [name]=\"gradientId\" [stops]=\"gradientStops\" />\n    </svg:defs>\n    <svg:path class=\"area\" [attr.d]=\"areaPath\" [attr.fill]=\"gradient ? gradientFill : fill\" [style.opacity]=\"opacity\" />\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AreaComponent implements OnChanges {\n  @Input() data;\n  @Input() path;\n  @Input() startingPath;\n  @Input() fill;\n  @Input() opacity = 1;\n  @Input() startOpacity = 0.5;\n  @Input() endOpacity = 1;\n  @Input() activeLabel;\n  @Input() gradient: boolean = false;\n  @Input() stops: any[];\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n\n  element: HTMLElement;\n  gradientId: string;\n  gradientFill: string;\n  areaPath: string;\n  initialized: boolean = false;\n  gradientStops: any[];\n  hasGradient: boolean = false;\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (!this.initialized) {\n      this.loadAnimation();\n      this.initialized = true;\n    } else {\n      this.update();\n    }\n  }\n\n  update(): void {\n    this.gradientId = 'grad' + id().toString();\n    this.gradientFill = `url(#${this.gradientId})`;\n\n    if (this.gradient || this.stops) {\n      this.gradientStops = this.getGradient();\n      this.hasGradient = true;\n    } else {\n      this.hasGradient = false;\n    }\n\n    this.updatePathEl();\n  }\n\n  loadAnimation(): void {\n    this.areaPath = this.startingPath;\n    setTimeout(this.update.bind(this), 100);\n  }\n\n  updatePathEl(): void {\n    const node = select(this.element).select('.area');\n\n    if (this.animations) {\n      node\n        .transition()\n        .duration(750)\n        .attr('d', this.path);\n    } else {\n      node.attr('d', this.path);\n    }\n  }\n\n  getGradient() {\n    if (this.stops) {\n      return this.stops;\n    }\n\n    return [\n      {\n        offset: 0,\n        color: this.fill,\n        opacity: this.startOpacity\n      },\n      {\n        offset: 100,\n        color: this.fill,\n        opacity: this.endOpacity\n      }\n    ];\n  }\n}\n","// Robert Penner's easeOutExpo\nfunction easeOutExpo(t, b, c, d) {\n  return (c * (-Math.pow(2, (-10 * t) / d) + 1) * 1024) / 1023 + b;\n}\n\n/**\n * Counts from a number to the end incrementally.\n */\nexport function count(countFrom, countTo, countDecimals, countDuration, callback) {\n  const startVal = Number(countFrom);\n  const endVal = Number(countTo);\n  const countDown = startVal > endVal;\n  const decimals = Math.max(0, countDecimals);\n  const dec = Math.pow(10, decimals);\n  const duration = Number(countDuration) * 1000;\n  let startTime;\n\n  function runCount(timestamp) {\n    let frameVal;\n    const progress = timestamp - startTime;\n\n    if (countDown) {\n      frameVal = startVal - easeOutExpo(progress, 0, startVal - endVal, duration);\n    } else {\n      frameVal = easeOutExpo(progress, startVal, endVal - startVal, duration);\n    }\n\n    if (countDown) {\n      frameVal = frameVal < endVal ? endVal : frameVal;\n    } else {\n      frameVal = frameVal > endVal ? endVal : frameVal;\n    }\n\n    frameVal = Math.round(frameVal * dec) / dec;\n\n    const tick = progress < duration;\n    callback({\n      value: frameVal,\n      progress,\n      timestamp,\n      finished: !tick\n    });\n\n    if (tick) {\n      return requestAnimationFrame(val => runCount(val));\n    }\n  }\n\n  return requestAnimationFrame(timestamp => {\n    startTime = timestamp;\n    return runCount(timestamp);\n  });\n}\n\n/**\n * Determine decimals places\n *\n * @export\n */\nexport function decimalChecker(countTo) {\n  const endVal = Number(countTo);\n\n  if (endVal % 1 !== 0 && Math.abs(endVal) <= 10) {\n    return 2;\n  }\n\n  return 0;\n}\n","import { Component, Input, Output, EventEmitter, ChangeDetectorRef, OnDestroy, ElementRef } from '@angular/core';\nimport { count, decimalChecker } from './count.helper';\n\n/**\n * Count up component\n *\n * Loosely inspired by:\n *  - https://github.com/izupet/angular2-counto\n *  - https://inorganik.github.io/countUp.js/\n *\n * @export\n */\n@Component({\n  selector: '[ngx-charts-count-up]',\n  template: `\n    {{ value }}\n  `\n})\nexport class CountUpDirective implements OnDestroy {\n  @Input() countDuration: number = 1;\n  @Input() countPrefix: string = '';\n  @Input() countSuffix: string = '';\n  @Input() valueFormatting: any;\n\n  @Input()\n  set countDecimals(val: number) {\n    this._countDecimals = val;\n  }\n\n  get countDecimals(): number {\n    if (this._countDecimals) return this._countDecimals;\n    return decimalChecker(this.countTo);\n  }\n\n  @Input()\n  set countTo(val) {\n    this._countTo = parseFloat(val);\n    this.start();\n  }\n\n  get countTo(): any {\n    return this._countTo;\n  }\n\n  @Input()\n  set countFrom(val) {\n    this._countFrom = parseFloat(val);\n    this.start();\n  }\n\n  get countFrom(): any {\n    return this._countFrom;\n  }\n\n  @Output() countChange = new EventEmitter();\n  @Output() countFinish = new EventEmitter();\n\n  nativeElement: any;\n\n  value: any = '';\n  formattedValue: string;\n\n  private animationReq: any;\n\n  private _countDecimals: number = 0;\n  private _countTo: number = 0;\n  private _countFrom: number = 0;\n\n  constructor(private cd: ChangeDetectorRef, element: ElementRef) {\n    this.nativeElement = element.nativeElement;\n  }\n\n  ngOnDestroy(): void {\n    cancelAnimationFrame(this.animationReq);\n  }\n\n  start(): void {\n    cancelAnimationFrame(this.animationReq);\n\n    const valueFormatting =\n      this.valueFormatting || (value => `${this.countPrefix}${value.toLocaleString()}${this.countSuffix}`);\n\n    const callback = ({ value, progress, finished }) => {\n      this.value = valueFormatting(value);\n      this.cd.markForCheck();\n      if (!finished) this.countChange.emit({ value: this.value, progress });\n      if (finished) this.countFinish.emit({ value: this.value, progress });\n    };\n\n    this.animationReq = count(this.countFrom, this.countTo, this.countDecimals, this.countDuration, callback);\n  }\n}\n","declare let global: any;\n\n// If we don't check whether 'window' and 'global' variables are defined,\n// code will fail in browser/node with 'variable is undefined' error.\nlet root: any;\nif (typeof window !== 'undefined') {\n  root = window;\n} else if (typeof global !== 'undefined') {\n  root = global;\n}\n\n// tslint:disable-next-line:variable-name\nexport const MouseEvent = root.MouseEvent as MouseEvent & {\n  prototype?: MouseEvent;\n  new (typeArg: string, eventInitDict?: MouseEventInit): MouseEvent;\n};\n\nexport function createMouseEvent(name: string, bubbles: boolean = false, cancelable: boolean = true): MouseEvent {\n  // Calling new of an event does not work correctly on IE. The following is a tested workaround\n  // See https://stackoverflow.com/questions/27176983/dispatchevent-not-working-in-ie11\n  if (typeof MouseEvent === 'function') {\n    // Sane browsers\n    return new MouseEvent(name, { bubbles, cancelable });\n  } else {\n    // IE\n    const event = document.createEvent('MouseEvent');\n    event.initEvent(name, bubbles, cancelable);\n    return event;\n  }\n}\n","import { Component, Input, Output, EventEmitter, ViewChild, ChangeDetectionStrategy, TemplateRef } from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { createMouseEvent } from '../events';\n\n@Component({\n  selector: 'g[ngx-charts-tooltip-area]',\n  template: `\n    <svg:g>\n      <svg:rect\n        class=\"tooltip-area\"\n        [attr.x]=\"0\"\n        y=\"0\"\n        [attr.width]=\"dims.width\"\n        [attr.height]=\"dims.height\"\n        style=\"opacity: 0; cursor: 'auto';\"\n        (mousemove)=\"mouseMove($event)\"\n        (mouseleave)=\"hideTooltip()\"\n      />\n      <ng-template #defaultTooltipTemplate let-model=\"model\">\n        <xhtml:div class=\"area-tooltip-container\">\n          <xhtml:div *ngFor=\"let tooltipItem of model\" class=\"tooltip-item\">\n            <xhtml:span class=\"tooltip-item-color\" [style.background-color]=\"tooltipItem.color\"></xhtml:span>\n            {{ getToolTipText(tooltipItem) }}\n          </xhtml:div>\n        </xhtml:div>\n      </ng-template>\n      <svg:rect\n        #tooltipAnchor\n        [@animationState]=\"anchorOpacity !== 0 ? 'active' : 'inactive'\"\n        class=\"tooltip-anchor\"\n        [attr.x]=\"anchorPos\"\n        y=\"0\"\n        [attr.width]=\"1\"\n        [attr.height]=\"dims.height\"\n        [style.opacity]=\"anchorOpacity\"\n        [style.pointer-events]=\"'none'\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"'right'\"\n        [tooltipType]=\"'tooltip'\"\n        [tooltipSpacing]=\"15\"\n        [tooltipTemplate]=\"tooltipTemplate ? tooltipTemplate : defaultTooltipTemplate\"\n        [tooltipContext]=\"anchorValues\"\n        [tooltipImmediateExit]=\"true\"\n      />\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition('inactive => active', [\n        style({\n          opacity: 0\n        }),\n        animate(250, style({ opacity: 0.7 }))\n      ]),\n      transition('active => inactive', [\n        style({\n          opacity: 0.7\n        }),\n        animate(250, style({ opacity: 0 }))\n      ])\n    ])\n  ]\n})\nexport class TooltipArea {\n  anchorOpacity: number = 0;\n  anchorPos: number = -1;\n  anchorValues: any[] = [];\n  lastAnchorPos: number;\n\n  @Input() dims;\n  @Input() xSet;\n  @Input() xScale;\n  @Input() yScale;\n  @Input() results;\n  @Input() colors;\n  @Input() showPercentage: boolean = false;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipTemplate: TemplateRef<any>;\n\n  @Output() hover = new EventEmitter();\n\n  @ViewChild('tooltipAnchor', { static: false }) tooltipAnchor;\n\n  getValues(xVal): any[] {\n    const results = [];\n\n    for (const group of this.results) {\n      const item = group.series.find(d => d.name.toString() === xVal.toString());\n      let groupName = group.name;\n      if (groupName instanceof Date) {\n        groupName = groupName.toLocaleDateString();\n      }\n\n      if (item) {\n        const label = item.name;\n        let val = item.value;\n        if (this.showPercentage) {\n          val = (item.d1 - item.d0).toFixed(2) + '%';\n        }\n        let color;\n        if (this.colors.scaleType === 'linear') {\n          let v = val;\n          if (item.d1) {\n            v = item.d1;\n          }\n          color = this.colors.getColor(v);\n        } else {\n          color = this.colors.getColor(group.name);\n        }\n\n        const data = Object.assign({}, item, {\n          value: val,\n          name: label,\n          series: groupName,\n          min: item.min,\n          max: item.max,\n          color\n        });\n\n        results.push(data);\n      }\n    }\n\n    return results;\n  }\n\n  mouseMove(event) {\n    const xPos = event.pageX - event.target.getBoundingClientRect().left;\n\n    const closestIndex = this.findClosestPointIndex(xPos);\n    const closestPoint = this.xSet[closestIndex];\n    this.anchorPos = this.xScale(closestPoint);\n    this.anchorPos = Math.max(0, this.anchorPos);\n    this.anchorPos = Math.min(this.dims.width, this.anchorPos);\n\n    this.anchorValues = this.getValues(closestPoint);\n    if (this.anchorPos !== this.lastAnchorPos) {\n      const ev = createMouseEvent('mouseleave');\n      this.tooltipAnchor.nativeElement.dispatchEvent(ev);\n      this.anchorOpacity = 0.7;\n      this.hover.emit({\n        value: closestPoint\n      });\n      this.showTooltip();\n\n      this.lastAnchorPos = this.anchorPos;\n    }\n  }\n\n  findClosestPointIndex(xPos) {\n    let minIndex = 0;\n    let maxIndex = this.xSet.length - 1;\n    let minDiff = Number.MAX_VALUE;\n    let closestIndex = 0;\n\n    while (minIndex <= maxIndex) {\n      const currentIndex = ((minIndex + maxIndex) / 2) | 0;\n      const currentElement = this.xScale(this.xSet[currentIndex]);\n\n      const curDiff = Math.abs(currentElement - xPos);\n\n      if (curDiff < minDiff) {\n        minDiff = curDiff;\n        closestIndex = currentIndex;\n      }\n\n      if (currentElement < xPos) {\n        minIndex = currentIndex + 1;\n      } else if (currentElement > xPos) {\n        maxIndex = currentIndex - 1;\n      } else {\n        minDiff = 0;\n        closestIndex = currentIndex;\n        break;\n      }\n    }\n\n    return closestIndex;\n  }\n\n  showTooltip(): void {\n    const event = createMouseEvent('mouseenter');\n    this.tooltipAnchor.nativeElement.dispatchEvent(event);\n  }\n\n  hideTooltip(): void {\n    const event = createMouseEvent('mouseleave');\n    this.tooltipAnchor.nativeElement.dispatchEvent(event);\n    this.anchorOpacity = 0;\n    this.lastAnchorPos = -1;\n  }\n\n  getToolTipText(tooltipItem: any): string {\n    let result: string = '';\n    if (tooltipItem.series !== undefined) {\n      result += tooltipItem.series;\n    } else {\n      result += '???';\n    }\n    result += ': ';\n    if (tooltipItem.value !== undefined) {\n      result += tooltipItem.value.toLocaleString();\n    }\n    if (tooltipItem.min !== undefined || tooltipItem.max !== undefined) {\n      result += ' (';\n      if (tooltipItem.min !== undefined) {\n        if (tooltipItem.max === undefined) {\n          result += 'â¥';\n        }\n        result += tooltipItem.min.toLocaleString();\n        if (tooltipItem.max !== undefined) {\n          result += ' - ';\n        }\n      } else if (tooltipItem.max !== undefined) {\n        result += 'â¤';\n      }\n      if (tooltipItem.max !== undefined) {\n        result += tooltipItem.max.toLocaleString();\n      }\n      result += ')';\n    }\n    return result;\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ElementRef,\n  OnChanges,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  SimpleChanges,\n  ViewEncapsulation\n} from '@angular/core';\nimport { brushX } from 'd3-brush';\nimport { scaleLinear, scaleTime, scalePoint } from 'd3-scale';\nimport { select, event as d3event } from 'd3-selection';\nimport { id } from '../..//utils/id';\n\n@Component({\n  selector: 'g[ngx-charts-timeline]',\n  template: `\n    <svg:g class=\"timeline\" [attr.transform]=\"transform\">\n      <svg:filter [attr.id]=\"filterId\">\n        <svg:feColorMatrix\n          in=\"SourceGraphic\"\n          type=\"matrix\"\n          values=\"0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\"\n        />\n      </svg:filter>\n      <svg:g class=\"embedded-chart\">\n        <ng-content></ng-content>\n      </svg:g>\n      <svg:rect x=\"0\" [attr.width]=\"view[0]\" y=\"0\" [attr.height]=\"height\" class=\"brush-background\" />\n      <svg:g class=\"brush\"></svg:g>\n    </svg:g>\n  `,\n  styleUrls: ['./timeline.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class Timeline implements OnChanges {\n  @Input() view;\n  @Input() state;\n  @Input() results;\n  @Input() scheme;\n  @Input() customColors;\n  @Input() legend;\n  @Input() miniChart;\n  @Input() autoScale;\n  @Input() scaleType;\n  @Input() height: number = 50;\n\n  @Output() select = new EventEmitter();\n  @Output() onDomainChange = new EventEmitter();\n\n  element: HTMLElement;\n  dims: any;\n  xDomain: any[];\n  xScale: any;\n  brush: any;\n  transform: string;\n  initialized: boolean = false;\n  filterId: any;\n  filter: any;\n\n  constructor(element: ElementRef, private cd: ChangeDetectorRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n\n    if (!this.initialized) {\n      this.addBrush();\n      this.initialized = true;\n    }\n  }\n\n  update(): void {\n    this.dims = this.getDims();\n    this.height = this.dims.height;\n    const offsetY = this.view[1] - this.height;\n\n    this.xDomain = this.getXDomain();\n    this.xScale = this.getXScale();\n\n    if (this.brush) {\n      this.updateBrush();\n    }\n\n    this.transform = `translate(0 , ${offsetY})`;\n\n    this.filterId = 'filter' + id().toString();\n    this.filter = `url(#${this.filterId})`;\n\n    this.cd.markForCheck();\n  }\n\n  getXDomain(): any[] {\n    let values = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (!values.includes(d.name)) {\n          values.push(d.name);\n        }\n      }\n    }\n\n    let domain = [];\n    if (this.scaleType === 'time') {\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      domain = [min, max];\n    } else if (this.scaleType === 'linear') {\n      values = values.map(v => Number(v));\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      domain = [min, max];\n    } else {\n      domain = values;\n    }\n\n    return domain;\n  }\n\n  getXScale() {\n    let scale;\n\n    if (this.scaleType === 'time') {\n      scale = scaleTime()\n        .range([0, this.dims.width])\n        .domain(this.xDomain);\n    } else if (this.scaleType === 'linear') {\n      scale = scaleLinear()\n        .range([0, this.dims.width])\n        .domain(this.xDomain);\n    } else if (this.scaleType === 'ordinal') {\n      scale = scalePoint()\n        .range([0, this.dims.width])\n        .padding(0.1)\n        .domain(this.xDomain);\n    }\n\n    return scale;\n  }\n\n  addBrush(): void {\n    if (this.brush) return;\n\n    const height = this.height;\n    const width = this.view[0];\n\n    this.brush = brushX()\n      .extent([\n        [0, 0],\n        [width, height]\n      ])\n      .on('brush end', () => {\n        const selection = d3event.selection || this.xScale.range();\n        const newDomain = selection.map(this.xScale.invert);\n\n        this.onDomainChange.emit(newDomain);\n        this.cd.markForCheck();\n      });\n\n    select(this.element)\n      .select('.brush')\n      .call(this.brush);\n  }\n\n  updateBrush(): void {\n    if (!this.brush) return;\n\n    const height = this.height;\n    const width = this.view[0];\n\n    this.brush.extent([\n      [0, 0],\n      [width, height]\n    ]);\n    select(this.element)\n      .select('.brush')\n      .call(this.brush);\n\n    // clear hardcoded properties so they can be defined by CSS\n    select(this.element)\n      .select('.selection')\n      .attr('fill', undefined)\n      .attr('stroke', undefined)\n      .attr('fill-opacity', undefined);\n\n    this.cd.markForCheck();\n  }\n\n  getDims(): any {\n    const width = this.view[0];\n\n    const dims = {\n      width,\n      height: this.height\n    };\n\n    return dims;\n  }\n}\n","import {\n  Component,\n  Input,\n  ChangeDetectionStrategy,\n  Output,\n  EventEmitter,\n  SimpleChanges,\n  OnChanges,\n  ChangeDetectorRef,\n  ViewEncapsulation\n} from '@angular/core';\nimport { formatLabel } from '../label.helper';\n\n@Component({\n  selector: 'ngx-charts-legend',\n  template: `\n    <div [style.width.px]=\"width\">\n      <header class=\"legend-title\" *ngIf=\"title?.length > 0\">\n        <span class=\"legend-title-text\">{{ title }}</span>\n      </header>\n      <div class=\"legend-wrap\">\n        <ul class=\"legend-labels\" [class.horizontal-legend]=\"horizontal\" [style.max-height.px]=\"height - 45\">\n          <li *ngFor=\"let entry of legendEntries; trackBy: trackBy\" class=\"legend-label\">\n            <ngx-charts-legend-entry\n              [label]=\"entry.label\"\n              [formattedLabel]=\"entry.formattedLabel\"\n              [color]=\"entry.color\"\n              [isActive]=\"isActive(entry)\"\n              (select)=\"labelClick.emit($event)\"\n              (activate)=\"activate($event)\"\n              (deactivate)=\"deactivate($event)\"\n            >\n            </ngx-charts-legend-entry>\n          </li>\n        </ul>\n      </div>\n    </div>\n  `,\n  styleUrls: ['./legend.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LegendComponent implements OnChanges {\n  @Input() data;\n  @Input() title;\n  @Input() colors;\n  @Input() height;\n  @Input() width;\n  @Input() activeEntries;\n  @Input() horizontal = false;\n\n  @Output() labelClick: EventEmitter<any> = new EventEmitter();\n  @Output() labelActivate: EventEmitter<any> = new EventEmitter();\n  @Output() labelDeactivate: EventEmitter<any> = new EventEmitter();\n\n  legendEntries: any[] = [];\n\n  constructor(private cd: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.cd.markForCheck();\n    this.legendEntries = this.getLegendEntries();\n  }\n\n  getLegendEntries(): any[] {\n    const items = [];\n\n    for (const label of this.data) {\n      const formattedLabel = formatLabel(label);\n\n      const idx = items.findIndex(i => {\n        return i.label === formattedLabel;\n      });\n\n      if (idx === -1) {\n        items.push({\n          label,\n          formattedLabel,\n          color: this.colors.getColor(label)\n        });\n      }\n    }\n\n    return items;\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.label === d.name;\n    });\n    return item !== undefined;\n  }\n\n  activate(item) {\n    this.labelActivate.emit(item);\n  }\n\n  deactivate(item) {\n    this.labelDeactivate.emit(item);\n  }\n\n  trackBy(index, item): string {\n    return item.label;\n  }\n}\n","import { Component, Input, Output, ChangeDetectionStrategy, HostListener, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'ngx-charts-legend-entry',\n  template: `\n    <span [title]=\"formattedLabel\" tabindex=\"-1\" [class.active]=\"isActive\" (click)=\"select.emit(formattedLabel)\">\n      <span class=\"legend-label-color\" [style.background-color]=\"color\" (click)=\"toggle.emit(formattedLabel)\"> </span>\n      <span class=\"legend-label-text\">\n        {{ trimmedLabel }}\n      </span>\n    </span>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LegendEntryComponent {\n  @Input() color: string;\n  @Input() label: any;\n  @Input() formattedLabel: string;\n  @Input() isActive: boolean = false;\n\n  @Output() select: EventEmitter<any> = new EventEmitter();\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n  @Output() toggle: EventEmitter<any> = new EventEmitter();\n\n  get trimmedLabel(): string {\n    return this.formattedLabel || '(empty)';\n  }\n\n  @HostListener('mouseenter')\n  onMouseEnter(): void {\n    this.activate.emit({ name: this.label });\n  }\n\n  @HostListener('mouseleave')\n  onMouseLeave(): void {\n    this.deactivate.emit({ name: this.label });\n  }\n}\n","import { Component, Input, OnChanges, ChangeDetectionStrategy, SimpleChanges, ViewEncapsulation } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n@Component({\n  selector: 'ngx-charts-scale-legend',\n  template: `\n    <div\n      class=\"scale-legend\"\n      [class.horizontal-legend]=\"horizontal\"\n      [style.height.px]=\"horizontal ? undefined : height\"\n      [style.width.px]=\"width\"\n    >\n      <div class=\"scale-legend-label\">\n        <span>{{ valueRange[1].toLocaleString() }}</span>\n      </div>\n      <div class=\"scale-legend-wrap\" [style.background]=\"gradient\"></div>\n      <div class=\"scale-legend-label\">\n        <span>{{ valueRange[0].toLocaleString() }}</span>\n      </div>\n    </div>\n  `,\n  styleUrls: ['./scale-legend.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ScaleLegendComponent implements OnChanges {\n  @Input() valueRange;\n  @Input() colors;\n  @Input() height;\n  @Input() width;\n  @Input() horizontal = false;\n\n  gradient: any;\n\n  constructor(private sanitizer: DomSanitizer) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    const gradientValues = this.gradientString(this.colors.range(), this.colors.domain());\n    const direction = this.horizontal ? 'right' : 'bottom';\n    this.gradient = this.sanitizer.bypassSecurityTrustStyle(`linear-gradient(to ${direction}, ${gradientValues})`);\n  }\n\n  /**\n   * Generates the string used in the gradient stylesheet properties\n   * @param colors array of colors\n   * @param splits array of splits on a scale of (0, 1)\n   */\n  gradientString(colors, splits): string {\n    // add the 100%\n    splits.push(1);\n    const pairs = [];\n    colors.reverse().forEach((c, i) => {\n      pairs.push(`${c} ${Math.round(splits[i] * 100)}%`);\n    });\n\n    return pairs.join(', ');\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewEncapsulation\n} from '@angular/core';\nimport { trimLabel } from '../trim-label.helper';\nimport { formatLabel } from '../label.helper';\n\n@Component({\n  selector: 'ngx-charts-advanced-legend',\n  template: `\n    <div class=\"advanced-pie-legend\" [style.width.px]=\"width\">\n      <div\n        *ngIf=\"animations\"\n        class=\"total-value\"\n        ngx-charts-count-up\n        [countTo]=\"roundedTotal\"\n        [valueFormatting]=\"valueFormatting\"\n      ></div>\n      <div class=\"total-value\" *ngIf=\"!animations\">\n        {{ valueFormatting ? valueFormatting(roundedTotal) : defaultValueFormatting(roundedTotal) }}\n      </div>\n      <div class=\"total-label\">\n        {{ label }}\n      </div>\n      <div class=\"legend-items-container\">\n        <div class=\"legend-items\">\n          <div\n            *ngFor=\"let legendItem of legendItems; trackBy: trackBy\"\n            tabindex=\"-1\"\n            class=\"legend-item\"\n            (mouseenter)=\"activate.emit(legendItem.data)\"\n            (mouseleave)=\"deactivate.emit(legendItem.data)\"\n            (click)=\"select.emit(legendItem.data)\"\n          >\n            <div class=\"item-color\" [style.border-left-color]=\"legendItem.color\"></div>\n            <div\n              *ngIf=\"animations\"\n              class=\"item-value\"\n              ngx-charts-count-up\n              [countTo]=\"legendItem._value\"\n              [valueFormatting]=\"valueFormatting\"\n            ></div>\n            <div *ngIf=\"!animations\" class=\"item-value\">\n              {{ valueFormatting ? valueFormatting(legendItem.value) : defaultValueFormatting(legendItem.value) }}\n            </div>\n            <div class=\"item-label\">{{ legendItem.displayLabel }}</div>\n            <div\n              *ngIf=\"animations\"\n              class=\"item-percent\"\n              ngx-charts-count-up\n              [countTo]=\"legendItem.percentage\"\n              [countSuffix]=\"'%'\"\n            ></div>\n            <div *ngIf=\"!animations\" class=\"item-percent\">{{ legendItem.percentage.toLocaleString() }}%</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  `,\n  styleUrls: ['./advanced-legend.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AdvancedLegendComponent implements OnChanges {\n  @Input() width: number;\n  @Input() data;\n  @Input() colors;\n  @Input() label: string = 'Total';\n  @Input() animations: boolean = true;\n\n  @Output() select: EventEmitter<any> = new EventEmitter();\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  legendItems: any[] = [];\n  total: number;\n  roundedTotal: number;\n\n  @Input() valueFormatting: (value: number) => any;\n  @Input() labelFormatting: (value: string) => any = label => label;\n  @Input() percentageFormatting: (value: number) => any = percentage => percentage;\n\n  defaultValueFormatting: (value: number) => any = value => value.toLocaleString();\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  getTotal(): number {\n    return this.data.map(d => d.value).reduce((sum, d) => sum + d, 0);\n  }\n\n  update(): void {\n    this.total = this.getTotal();\n    this.roundedTotal = this.total;\n\n    this.legendItems = this.getLegendItems();\n  }\n\n  getLegendItems(): any {\n    return this.data.map(d => {\n      const label = formatLabel(d.name);\n      const value = d.value;\n      const color = this.colors.getColor(label);\n      const percentage = this.total > 0 ? (value / this.total) * 100 : 0;\n      const formattedLabel = typeof this.labelFormatting === 'function' ? this.labelFormatting(label) : label;\n\n      return {\n        _value: value,\n        data: d,\n        value,\n        color,\n        label: formattedLabel,\n        displayLabel: trimLabel(formattedLabel, 20),\n        origialLabel: d.name,\n        percentage: this.percentageFormatting ? this.percentageFormatting(percentage) : percentage.toLocaleString()\n      };\n    });\n  }\n\n  trackBy(item) {\n    return item.formattedLabel;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ChartComponent } from './charts/chart.component';\nimport { BaseChartComponent } from './base-chart.component';\nimport { AxesModule } from './axes/axes.module';\nimport { TooltipModule } from './tooltip/tooltip.module';\nimport { CircleSeriesComponent } from './circle-series.component';\nimport { CircleComponent } from './circle.component';\nimport { GridPanelComponent } from './grid-panel.component';\nimport { GridPanelSeriesComponent } from './grid-panel-series.component';\nimport { SvgLinearGradientComponent } from './svg-linear-gradient.component';\nimport { SvgRadialGradientComponent } from './svg-radial-gradient.component';\nimport { AreaComponent } from './area.component';\nimport { CountUpDirective } from './count/count.directive';\nimport { TooltipArea } from './tooltip-area.component';\nimport { Timeline } from './timeline/timeline.component';\nimport { VisibilityObserver } from '../utils/visibility-observer';\nimport { LegendComponent } from './legend/legend.component';\nimport { LegendEntryComponent } from './legend/legend-entry.component';\nimport { ScaleLegendComponent } from './legend/scale-legend.component';\nimport { AdvancedLegendComponent } from './legend/advanced-legend.component';\n\nconst COMPONENTS = [\n  AreaComponent,\n  BaseChartComponent,\n  CountUpDirective,\n  TooltipArea,\n  ChartComponent,\n  LegendComponent,\n  LegendEntryComponent,\n  ScaleLegendComponent,\n  CircleComponent,\n  CircleSeriesComponent,\n  GridPanelComponent,\n  GridPanelSeriesComponent,\n  SvgLinearGradientComponent,\n  SvgRadialGradientComponent,\n  Timeline,\n  AdvancedLegendComponent\n];\n\n@NgModule({\n  imports: [CommonModule, AxesModule, TooltipModule],\n  declarations: [...COMPONENTS, VisibilityObserver],\n  exports: [CommonModule, AxesModule, TooltipModule, ...COMPONENTS, VisibilityObserver]\n})\nexport class ChartCommonModule {}\n","export interface ViewDimensions {\n  width: number;\n  height: number;\n  xOffset: number;\n}\n\nexport function calculateViewDimensions({\n  width,\n  height,\n  margins,\n  showXAxis = false,\n  showYAxis = false,\n  xAxisHeight = 0,\n  yAxisWidth = 0,\n  showXLabel = false,\n  showYLabel = false,\n  showLegend = false,\n  legendType = 'ordinal',\n  legendPosition = 'right',\n  columns = 12\n}): ViewDimensions {\n  let xOffset = margins[3];\n  let chartWidth = width;\n  let chartHeight = height - margins[0] - margins[2];\n\n  if (showLegend && legendPosition === 'right') {\n    if (legendType === 'ordinal') {\n      columns -= 2;\n    } else {\n      columns -= 1;\n    }\n  }\n\n  chartWidth = (chartWidth * columns) / 12;\n\n  chartWidth = chartWidth - margins[1] - margins[3];\n\n  if (showXAxis) {\n    chartHeight -= 5;\n    chartHeight -= xAxisHeight;\n\n    if (showXLabel) {\n      // text height + spacing between axis label and tick labels\n      const offset = 25 + 5;\n      chartHeight -= offset;\n    }\n  }\n\n  if (showYAxis) {\n    chartWidth -= 5;\n    chartWidth -= yAxisWidth;\n    xOffset += yAxisWidth;\n    xOffset += 10;\n\n    if (showYLabel) {\n      // text height + spacing between axis label and tick labels\n      const offset = 25 + 5;\n      chartWidth -= offset;\n      xOffset += offset;\n    }\n  }\n\n  chartWidth = Math.max(0, chartWidth);\n  chartHeight = Math.max(0, chartHeight);\n\n  return {\n    width: Math.floor(chartWidth),\n    height: Math.floor(chartHeight),\n    xOffset: Math.floor(xOffset)\n  };\n}\n","export let colorSets = [\n  {\n    name: 'vivid',\n    selectable: true,\n    group: 'Ordinal',\n    domain: [\n      '#647c8a',\n      '#3f51b5',\n      '#2196f3',\n      '#00b862',\n      '#afdf0a',\n      '#a7b61a',\n      '#f3e562',\n      '#ff9800',\n      '#ff5722',\n      '#ff4514'\n    ]\n  },\n  {\n    name: 'natural',\n    selectable: true,\n    group: 'Ordinal',\n    domain: [\n      '#bf9d76',\n      '#e99450',\n      '#d89f59',\n      '#f2dfa7',\n      '#a5d7c6',\n      '#7794b1',\n      '#afafaf',\n      '#707160',\n      '#ba9383',\n      '#d9d5c3'\n    ]\n  },\n  {\n    name: 'cool',\n    selectable: true,\n    group: 'Ordinal',\n    domain: [\n      '#a8385d',\n      '#7aa3e5',\n      '#a27ea8',\n      '#aae3f5',\n      '#adcded',\n      '#a95963',\n      '#8796c0',\n      '#7ed3ed',\n      '#50abcc',\n      '#ad6886'\n    ]\n  },\n  {\n    name: 'fire',\n    selectable: true,\n    group: 'Ordinal',\n    domain: ['#ff3d00', '#bf360c', '#ff8f00', '#ff6f00', '#ff5722', '#e65100', '#ffca28', '#ffab00']\n  },\n  {\n    name: 'solar',\n    selectable: true,\n    group: 'Continuous',\n    domain: [\n      '#fff8e1',\n      '#ffecb3',\n      '#ffe082',\n      '#ffd54f',\n      '#ffca28',\n      '#ffc107',\n      '#ffb300',\n      '#ffa000',\n      '#ff8f00',\n      '#ff6f00'\n    ]\n  },\n  {\n    name: 'air',\n    selectable: true,\n    group: 'Continuous',\n    domain: [\n      '#e1f5fe',\n      '#b3e5fc',\n      '#81d4fa',\n      '#4fc3f7',\n      '#29b6f6',\n      '#03a9f4',\n      '#039be5',\n      '#0288d1',\n      '#0277bd',\n      '#01579b'\n    ]\n  },\n  {\n    name: 'aqua',\n    selectable: true,\n    group: 'Continuous',\n    domain: [\n      '#e0f7fa',\n      '#b2ebf2',\n      '#80deea',\n      '#4dd0e1',\n      '#26c6da',\n      '#00bcd4',\n      '#00acc1',\n      '#0097a7',\n      '#00838f',\n      '#006064'\n    ]\n  },\n  {\n    name: 'flame',\n    selectable: false,\n    group: 'Ordinal',\n    domain: [\n      '#A10A28',\n      '#D3342D',\n      '#EF6D49',\n      '#FAAD67',\n      '#FDDE90',\n      '#DBED91',\n      '#A9D770',\n      '#6CBA67',\n      '#2C9653',\n      '#146738'\n    ]\n  },\n  {\n    name: 'ocean',\n    selectable: false,\n    group: 'Ordinal',\n    domain: [\n      '#1D68FB',\n      '#33C0FC',\n      '#4AFFFE',\n      '#AFFFFF',\n      '#FFFC63',\n      '#FDBD2D',\n      '#FC8A25',\n      '#FA4F1E',\n      '#FA141B',\n      '#BA38D1'\n    ]\n  },\n  {\n    name: 'forest',\n    selectable: false,\n    group: 'Ordinal',\n    domain: [\n      '#55C22D',\n      '#C1F33D',\n      '#3CC099',\n      '#AFFFFF',\n      '#8CFC9D',\n      '#76CFFA',\n      '#BA60FB',\n      '#EE6490',\n      '#C42A1C',\n      '#FC9F32'\n    ]\n  },\n  {\n    name: 'horizon',\n    selectable: false,\n    group: 'Ordinal',\n    domain: [\n      '#2597FB',\n      '#65EBFD',\n      '#99FDD0',\n      '#FCEE4B',\n      '#FEFCFA',\n      '#FDD6E3',\n      '#FCB1A8',\n      '#EF6F7B',\n      '#CB96E8',\n      '#EFDEE0'\n    ]\n  },\n  {\n    name: 'neons',\n    selectable: false,\n    group: 'Ordinal',\n    domain: [\n      '#FF3333',\n      '#FF33FF',\n      '#CC33FF',\n      '#0000FF',\n      '#33CCFF',\n      '#33FFFF',\n      '#33FF66',\n      '#CCFF33',\n      '#FFCC00',\n      '#FF6600'\n    ]\n  },\n  {\n    name: 'picnic',\n    selectable: false,\n    group: 'Ordinal',\n    domain: [\n      '#FAC51D',\n      '#66BD6D',\n      '#FAA026',\n      '#29BB9C',\n      '#E96B56',\n      '#55ACD2',\n      '#B7332F',\n      '#2C83C9',\n      '#9166B8',\n      '#92E7E8'\n    ]\n  },\n  {\n    name: 'night',\n    selectable: false,\n    group: 'Ordinal',\n    domain: [\n      '#2B1B5A',\n      '#501356',\n      '#183356',\n      '#28203F',\n      '#391B3C',\n      '#1E2B3C',\n      '#120634',\n      '#2D0432',\n      '#051932',\n      '#453080',\n      '#75267D',\n      '#2C507D',\n      '#4B3880',\n      '#752F7D',\n      '#35547D'\n    ]\n  },\n  {\n    name: 'nightLights',\n    selectable: false,\n    group: 'Ordinal',\n    domain: [\n      '#4e31a5',\n      '#9c25a7',\n      '#3065ab',\n      '#57468b',\n      '#904497',\n      '#46648b',\n      '#32118d',\n      '#a00fb3',\n      '#1052a2',\n      '#6e51bd',\n      '#b63cc3',\n      '#6c97cb',\n      '#8671c1',\n      '#b455be',\n      '#7496c3'\n    ]\n  }\n];\n","import { range } from 'd3-array';\nimport { scaleBand, scaleLinear, scaleOrdinal, scaleQuantile } from 'd3-scale';\n\nimport { colorSets } from '../utils/color-sets';\n\nexport class ColorHelper {\n  scale: any;\n  scaleType: any;\n  colorDomain: any[];\n  domain: any;\n  customColors: any;\n\n  constructor(scheme, type, domain, customColors?) {\n    if (typeof scheme === 'string') {\n      scheme = colorSets.find(cs => {\n        return cs.name === scheme;\n      });\n    }\n    this.colorDomain = scheme.domain;\n    this.scaleType = type;\n    this.domain = domain;\n    this.customColors = customColors;\n\n    this.scale = this.generateColorScheme(scheme, type, this.domain);\n  }\n\n  generateColorScheme(scheme, type, domain) {\n    if (typeof scheme === 'string') {\n      scheme = colorSets.find(cs => {\n        return cs.name === scheme;\n      });\n    }\n    let colorScale;\n    if (type === 'quantile') {\n      colorScale = scaleQuantile()\n        .range(scheme.domain)\n        .domain(domain);\n    } else if (type === 'ordinal') {\n      colorScale = scaleOrdinal()\n        .range(scheme.domain)\n        .domain(domain);\n    } else if (type === 'linear') {\n      // linear schemes must have at least 2 colors\n      const colorDomain = [...scheme.domain];\n      if (colorDomain.length === 1) {\n        colorDomain.push(colorDomain[0]);\n        this.colorDomain = colorDomain;\n      }\n\n      const points = range(0, 1, 1.0 / colorDomain.length);\n      colorScale = scaleLinear()\n        .domain(points)\n        .range(colorDomain);\n    }\n\n    return colorScale;\n  }\n\n  getColor(value) {\n    if (value === undefined || value === null) {\n      throw new Error('Value can not be null');\n    }\n    if (this.scaleType === 'linear') {\n      const valueScale = scaleLinear()\n        .domain(this.domain)\n        .range([0, 1]);\n\n      return this.scale(valueScale(value));\n    } else {\n      if (typeof this.customColors === 'function') {\n        return this.customColors(value);\n      }\n\n      const formattedValue = value.toString();\n      let found: any; // todo type customColors\n      if (this.customColors && this.customColors.length > 0) {\n        found = this.customColors.find(mapping => {\n          return mapping.name.toLowerCase() === formattedValue.toLowerCase();\n        });\n      }\n\n      if (found) {\n        return found.value;\n      } else {\n        return this.scale(value);\n      }\n    }\n  }\n\n  getLinearGradientStops(value, start) {\n    if (start === undefined) {\n      start = this.domain[0];\n    }\n\n    const valueScale = scaleLinear()\n      .domain(this.domain)\n      .range([0, 1]);\n\n    const colorValueScale = scaleBand()\n      .domain(this.colorDomain)\n      .range([0, 1]);\n\n    const endColor = this.getColor(value);\n\n    // generate the stops\n    const startVal = valueScale(start);\n    const startColor = this.getColor(start);\n\n    const endVal = valueScale(value);\n    let i = 1;\n    let currentVal = startVal;\n    const stops = [];\n\n    stops.push({\n      color: startColor,\n      offset: startVal,\n      originalOffset: startVal,\n      opacity: 1\n    });\n\n    while (currentVal < endVal && i < this.colorDomain.length) {\n      const color = this.colorDomain[i];\n      const offset = colorValueScale(color);\n      if (offset <= startVal) {\n        i++;\n        continue;\n      }\n\n      if (offset.toFixed(4) >= (endVal - colorValueScale.bandwidth()).toFixed(4)) {\n        break;\n      }\n\n      stops.push({\n        color,\n        offset,\n        opacity: 1\n      });\n      currentVal = offset;\n      i++;\n    }\n\n    if (stops[stops.length - 1].offset < 100) {\n      stops.push({\n        color: endColor,\n        offset: endVal,\n        opacity: 1\n      });\n    }\n\n    if (endVal === startVal) {\n      stops[0].offset = 0;\n      stops[1].offset = 100;\n    } else {\n      // normalize the offsets into percentages\n      if (stops[stops.length - 1].offset !== 100) {\n        for (const s of stops) {\n          s.offset = ((s.offset - startVal) / (endVal - startVal)) * 100;\n        }\n      }\n    }\n\n    return stops;\n  }\n}\n","/**\n * Based on the data, return an array with unique values.\n *\n * @export\n * @returns array\n */\nexport function getUniqueXDomainValues(results: any[]): any[] {\n  const valueSet = new Set();\n  for (const result of results) {\n    for (const d of result.series) {\n      valueSet.add(d.name);\n    }\n  }\n  return Array.from(valueSet);\n}\n\n/**\n * Get the scaleType of enumerable of values.\n * @returns  'time', 'linear' or 'ordinal'\n */\nexport function getScaleType(values: any[], checkDateType = true): string {\n  if (checkDateType) {\n    const allDates = values.every(value => value instanceof Date);\n    if (allDates) {\n      return 'time';\n    }\n  }\n\n  const allNumbers = values.every(value => typeof value === 'number');\n  if (allNumbers) {\n    return 'linear';\n  }\n\n  return 'ordinal';\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  HostListener,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { scaleLinear, scalePoint, scaleTime } from 'd3-scale';\nimport { curveLinear } from 'd3-shape';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { id } from '../utils/id';\nimport { getUniqueXDomainValues, getScaleType } from '../common/domain.helper';\n\n@Component({\n  selector: 'ngx-charts-area-chart',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [baseValue]=\"baseValue\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [gradient]=\"gradient\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [baseValue]=\"baseValue\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class AreaChartComponent extends BaseChartComponent {\n  @Input() legend;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() state;\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() baseValue: any = 'auto';\n  @Input() autoScale;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() timeline;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() curve: any = curveLinear;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() roundDomains: boolean = false;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() xScaleMin: any;\n  @Input() xScaleMax: any;\n  @Input() yScaleMin: number;\n  @Input() yScaleMax: number;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n  @ContentChild('seriesTooltipTemplate') seriesTooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  xSet: any;\n  xDomain: any;\n  yDomain: any;\n  seriesDomain: any;\n  xScale: any;\n  yScale: any;\n  transform: string;\n  colors: ColorHelper;\n  clipPathId: string;\n  clipPath: string;\n  scaleType: string;\n  series: any;\n  margin = [10, 20, 10, 20];\n  hoveredVertical: any; // the value of the x axis that is hovered over\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  filteredDomain: any;\n  legendOptions: any;\n\n  timelineWidth: any;\n  timelineHeight: number = 50;\n  timelineXScale: any;\n  timelineYScale: any;\n  timelineXDomain: any;\n  timelineTransform: any;\n  timelinePadding: number = 10;\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.timeline) {\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n    }\n\n    this.xDomain = this.getXDomain();\n    if (this.filteredDomain) {\n      this.xDomain = this.filteredDomain;\n    }\n\n    this.yDomain = this.getYDomain();\n    this.seriesDomain = this.getSeriesDomain();\n\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\n\n    this.updateTimeline();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset}, ${this.margin[0]})`;\n\n    this.clipPathId = 'clip' + id().toString();\n    this.clipPath = `url(#${this.clipPathId})`;\n  }\n\n  updateTimeline(): void {\n    if (this.timeline) {\n      this.timelineWidth = this.dims.width;\n      this.timelineXDomain = this.getXDomain();\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n    }\n  }\n\n  getXDomain(): any[] {\n    let values = getUniqueXDomainValues(this.results);\n\n    this.scaleType = getScaleType(values);\n    let domain = [];\n\n    if (this.scaleType === 'linear') {\n      values = values.map(v => Number(v));\n    }\n\n    let min;\n    let max;\n    if (this.scaleType === 'time' || this.scaleType === 'linear') {\n      min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\n\n      max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\n    }\n\n    if (this.scaleType === 'time') {\n      domain = [new Date(min), new Date(max)];\n      this.xSet = [...values].sort((a, b) => {\n        const aDate = a.getTime();\n        const bDate = b.getTime();\n        if (aDate > bDate) return 1;\n        if (bDate > aDate) return -1;\n        return 0;\n      });\n    } else if (this.scaleType === 'linear') {\n      domain = [min, max];\n      // Use compare function to sort numbers numerically\n      this.xSet = [...values].sort((a, b) => a - b);\n    } else {\n      domain = values;\n      this.xSet = values;\n    }\n\n    return domain;\n  }\n\n  getYDomain(): any[] {\n    const domain = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (!domain.includes(d.value)) {\n          domain.push(d.value);\n        }\n      }\n    }\n\n    const values = [...domain];\n    if (!this.autoScale) {\n      values.push(0);\n    }\n    if (this.baseValue !== 'auto') {\n      values.push(this.baseValue);\n    }\n\n    const min = this.yScaleMin ? this.yScaleMin : Math.min(...values);\n\n    const max = this.yScaleMax ? this.yScaleMax : Math.max(...values);\n\n    return [min, max];\n  }\n\n  getSeriesDomain(): any[] {\n    return this.results.map(d => d.name);\n  }\n\n  getXScale(domain, width): any {\n    let scale;\n\n    if (this.scaleType === 'time') {\n      scale = scaleTime();\n    } else if (this.scaleType === 'linear') {\n      scale = scaleLinear();\n    } else if (this.scaleType === 'ordinal') {\n      scale = scalePoint().padding(0.1);\n    }\n\n    scale.range([0, width]).domain(domain);\n\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getYScale(domain, height): any {\n    const scale = scaleLinear()\n      .range([height, 0])\n      .domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getScaleType(values): string {\n    let date = true;\n    let num = true;\n    for (const value of values) {\n      if (!this.isDate(value)) {\n        date = false;\n      }\n      if (typeof value !== 'number') {\n        num = false;\n      }\n    }\n\n    if (date) {\n      return 'time';\n    }\n\n    if (num) {\n      return 'linear';\n    }\n\n    return 'ordinal';\n  }\n\n  isDate(value): boolean {\n    if (value instanceof Date) {\n      return true;\n    }\n\n    return false;\n  }\n\n  updateDomain(domain): void {\n    this.filteredDomain = domain;\n    this.xDomain = this.filteredDomain;\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n  }\n\n  updateHoveredVertical(item): void {\n    this.hoveredVertical = item.value;\n    this.deactivateAll();\n  }\n\n  @HostListener('mouseleave')\n  hideCircles(): void {\n    this.hoveredVertical = null;\n    this.deactivateAll();\n  }\n\n  onClick(data, series?): void {\n    if (series) {\n      data.series = series.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index, item): string {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.seriesDomain;\n    } else {\n      domain = this.yDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.seriesDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors.scale;\n    }\n    return opts;\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({ value: entry, entries: [] });\n    }\n    this.activeEntries = [];\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  HostListener,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { scaleLinear, scalePoint, scaleTime } from 'd3-scale';\nimport { curveLinear } from 'd3-shape';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { id } from '../utils/id';\nimport { getUniqueXDomainValues, getScaleType } from '../common/domain.helper';\n\n@Component({\n  selector: 'ngx-charts-area-chart-normalized',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [scaleType]=\"scaleType\"\n              [activeEntries]=\"activeEntries\"\n              [gradient]=\"gradient\"\n              normalized=\"true\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [showPercentage]=\"true\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                type=\"stacked\"\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            normalized=\"true\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class AreaChartNormalizedComponent extends BaseChartComponent {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() timeline;\n  @Input() gradient;\n  @Input() showGridLines: boolean = true;\n  @Input() curve: any = curveLinear;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() roundDomains: boolean = false;\n  @Input() tooltipDisabled: boolean = false;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n  @ContentChild('seriesTooltipTemplate') seriesTooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  scaleType: string;\n  xDomain: any[];\n  xSet: any[]; // the set of all values on the X Axis\n  yDomain: any[];\n  seriesDomain: any;\n  xScale: any;\n  yScale: any;\n  transform: string;\n  clipPathId: string;\n  clipPath: string;\n  colors: ColorHelper;\n  margin = [10, 20, 10, 20];\n  tooltipAreas: any[];\n  hoveredVertical: any; // the value of the x axis that is hovered over\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  filteredDomain: any;\n  legendOptions: any;\n\n  timelineWidth: any;\n  timelineHeight: number = 50;\n  timelineXScale: any;\n  timelineYScale: any;\n  timelineXDomain: any;\n  timelineTransform: any;\n  timelinePadding: number = 10;\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.timeline) {\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n    }\n\n    this.xDomain = this.getXDomain();\n    if (this.filteredDomain) {\n      this.xDomain = this.filteredDomain;\n    }\n\n    this.yDomain = this.getYDomain();\n    this.seriesDomain = this.getSeriesDomain();\n\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\n\n    for (let i = 0; i < this.xSet.length; i++) {\n      const val = this.xSet[i];\n      let d0 = 0;\n\n      let total = 0;\n      for (const group of this.results) {\n        const d = group.series.find(item => {\n          let a = item.name;\n          let b = val;\n          if (this.scaleType === 'time') {\n            a = a.valueOf();\n            b = b.valueOf();\n          }\n          return a === b;\n        });\n        if (d) {\n          total += d.value;\n        }\n      }\n\n      for (const group of this.results) {\n        let d = group.series.find(item => {\n          let a = item.name;\n          let b = val;\n          if (this.scaleType === 'time') {\n            a = a.valueOf();\n            b = b.valueOf();\n          }\n          return a === b;\n        });\n\n        if (d) {\n          d.d0 = d0;\n          d.d1 = d0 + d.value;\n          d0 += d.value;\n        } else {\n          d = {\n            name: val,\n            value: 0,\n            d0,\n            d1: d0\n          };\n          group.series.push(d);\n        }\n\n        if (total > 0) {\n          d.d0 = (d.d0 * 100) / total;\n          d.d1 = (d.d1 * 100) / total;\n        } else {\n          d.d0 = 0;\n          d.d1 = 0;\n        }\n      }\n    }\n\n    this.updateTimeline();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n\n    this.clipPathId = 'clip' + id().toString();\n    this.clipPath = `url(#${this.clipPathId})`;\n  }\n\n  updateTimeline(): void {\n    if (this.timeline) {\n      this.timelineWidth = this.dims.width;\n      this.timelineXDomain = this.getXDomain();\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n    }\n  }\n\n  getXDomain(): any[] {\n    let values = getUniqueXDomainValues(this.results);\n\n    this.scaleType = getScaleType(values);\n    let domain = [];\n\n    if (this.scaleType === 'time') {\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      domain = [new Date(min), new Date(max)];\n      this.xSet = [...values].sort((a, b) => {\n        const aDate = a.getTime();\n        const bDate = b.getTime();\n        if (aDate > bDate) return 1;\n        if (bDate > aDate) return -1;\n        return 0;\n      });\n    } else if (this.scaleType === 'linear') {\n      values = values.map(v => Number(v));\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      domain = [min, max];\n      // Use compare function to sort numbers numerically\n      this.xSet = [...values].sort((a, b) => a - b);\n    } else {\n      domain = values;\n      this.xSet = values;\n    }\n\n    return domain;\n  }\n\n  getYDomain(): any[] {\n    return [0, 100];\n  }\n\n  getSeriesDomain(): any[] {\n    return this.results.map(d => d.name);\n  }\n\n  getXScale(domain, width): any {\n    let scale;\n\n    if (this.scaleType === 'time') {\n      scale = scaleTime();\n    } else if (this.scaleType === 'linear') {\n      scale = scaleLinear();\n    } else if (this.scaleType === 'ordinal') {\n      scale = scalePoint().padding(0.1);\n    }\n\n    scale.range([0, width]).domain(domain);\n\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getYScale(domain, height): any {\n    const scale = scaleLinear()\n      .range([height, 0])\n      .domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  updateDomain(domain): void {\n    this.filteredDomain = domain;\n    this.xDomain = this.filteredDomain;\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n  }\n\n  updateHoveredVertical(item): void {\n    this.hoveredVertical = item.value;\n    this.deactivateAll();\n  }\n\n  @HostListener('mouseleave')\n  hideCircles(): void {\n    this.hoveredVertical = null;\n    this.deactivateAll();\n  }\n\n  onClick(data, series?): void {\n    if (series) {\n      data.series = series.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index, item): string {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.seriesDomain;\n    } else {\n      domain = this.yDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.seriesDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors.scale;\n    }\n    return opts;\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({ value: entry, entries: [] });\n    }\n    this.activeEntries = [];\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  HostListener,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { scaleLinear, scalePoint, scaleTime } from 'd3-scale';\nimport { curveLinear } from 'd3-shape';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { id } from '../utils/id';\nimport { getUniqueXDomainValues, getScaleType } from '../common/domain.helper';\n\n@Component({\n  selector: 'ngx-charts-area-chart-stacked',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [scaleType]=\"scaleType\"\n              [gradient]=\"gradient\"\n              [activeEntries]=\"activeEntries\"\n              stacked=\"true\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n              <svg:g\n                ngx-charts-circle-series\n                type=\"stacked\"\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            stacked=\"true\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class AreaChartStackedComponent extends BaseChartComponent {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() timeline;\n  @Input() gradient;\n  @Input() showGridLines: boolean = true;\n  @Input() curve: any = curveLinear;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() roundDomains: boolean = false;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() xScaleMin: any;\n  @Input() xScaleMax: any;\n  @Input() yScaleMin: number;\n  @Input() yScaleMax: number;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n  @ContentChild('seriesTooltipTemplate') seriesTooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  scaleType: string;\n  xDomain: any[];\n  xSet: any[]; // the set of all values on the X Axis\n  yDomain: any[];\n  seriesDomain: any;\n  xScale: any;\n  yScale: any;\n  transform: string;\n  clipPathId: string;\n  clipPath: string;\n  colors: ColorHelper;\n  margin = [10, 20, 10, 20];\n  hoveredVertical: any; // the value of the x axis that is hovered over\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  filteredDomain: any;\n  legendOptions: any;\n\n  timelineWidth: any;\n  timelineHeight: number = 50;\n  timelineXScale: any;\n  timelineYScale: any;\n  timelineXDomain: any;\n  timelineTransform: any;\n  timelinePadding: number = 10;\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.timeline) {\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n    }\n\n    this.xDomain = this.getXDomain();\n    if (this.filteredDomain) {\n      this.xDomain = this.filteredDomain;\n    }\n\n    this.yDomain = this.getYDomain();\n    this.seriesDomain = this.getSeriesDomain();\n\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\n\n    for (let i = 0; i < this.xSet.length; i++) {\n      const val = this.xSet[i];\n      let d0 = 0;\n      for (const group of this.results) {\n        let d = group.series.find(item => {\n          let a = item.name;\n          let b = val;\n          if (this.scaleType === 'time') {\n            a = a.valueOf();\n            b = b.valueOf();\n          }\n          return a === b;\n        });\n\n        if (d) {\n          d.d0 = d0;\n          d.d1 = d0 + d.value;\n          d0 += d.value;\n        } else {\n          d = {\n            name: val,\n            value: 0,\n            d0,\n            d1: d0\n          };\n          group.series.push(d);\n        }\n      }\n    }\n\n    this.updateTimeline();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n\n    this.clipPathId = 'clip' + id().toString();\n    this.clipPath = `url(#${this.clipPathId})`;\n  }\n\n  updateTimeline(): void {\n    if (this.timeline) {\n      this.timelineWidth = this.dims.width;\n      this.timelineXDomain = this.getXDomain();\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n    }\n  }\n\n  getXDomain(): any[] {\n    let values = getUniqueXDomainValues(this.results);\n\n    this.scaleType = getScaleType(values);\n    let domain = [];\n\n    if (this.scaleType === 'linear') {\n      values = values.map(v => Number(v));\n    }\n\n    let min;\n    let max;\n    if (this.scaleType === 'time' || this.scaleType === 'linear') {\n      min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\n\n      max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\n    }\n\n    if (this.scaleType === 'time') {\n      domain = [new Date(min), new Date(max)];\n      this.xSet = [...values].sort((a, b) => {\n        const aDate = a.getTime();\n        const bDate = b.getTime();\n        if (aDate > bDate) return 1;\n        if (bDate > aDate) return -1;\n        return 0;\n      });\n    } else if (this.scaleType === 'linear') {\n      domain = [min, max];\n      // Use compare function to sort numbers numerically\n      this.xSet = [...values].sort((a, b) => a - b);\n    } else {\n      domain = values;\n      this.xSet = values;\n    }\n\n    return domain;\n  }\n\n  getYDomain(): any[] {\n    const domain = [];\n\n    for (let i = 0; i < this.xSet.length; i++) {\n      const val = this.xSet[i];\n      let sum = 0;\n      for (const group of this.results) {\n        const d = group.series.find(item => {\n          let a = item.name;\n          let b = val;\n          if (this.scaleType === 'time') {\n            a = a.valueOf();\n            b = b.valueOf();\n          }\n          return a === b;\n        });\n\n        if (d) {\n          sum += d.value;\n        }\n      }\n\n      domain.push(sum);\n    }\n\n    const min = this.yScaleMin ? this.yScaleMin : Math.min(0, ...domain);\n\n    const max = this.yScaleMax ? this.yScaleMax : Math.max(...domain);\n    return [min, max];\n  }\n\n  getSeriesDomain(): any[] {\n    return this.results.map(d => d.name);\n  }\n\n  getXScale(domain, width): any {\n    let scale;\n\n    if (this.scaleType === 'time') {\n      scale = scaleTime();\n    } else if (this.scaleType === 'linear') {\n      scale = scaleLinear();\n    } else if (this.scaleType === 'ordinal') {\n      scale = scalePoint().padding(0.1);\n    }\n\n    scale.range([0, width]).domain(domain);\n\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getYScale(domain, height): any {\n    const scale = scaleLinear()\n      .range([height, 0])\n      .domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  updateDomain(domain): void {\n    this.filteredDomain = domain;\n    this.xDomain = this.filteredDomain;\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n  }\n\n  updateHoveredVertical(item) {\n    this.hoveredVertical = item.value;\n    this.deactivateAll();\n  }\n\n  @HostListener('mouseleave')\n  hideCircles(): void {\n    this.hoveredVertical = null;\n    this.deactivateAll();\n  }\n\n  onClick(data, series?): void {\n    if (series) {\n      data.series = series.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index, item): string {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.seriesDomain;\n    } else {\n      domain = this.yDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.seriesDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors.scale;\n    }\n    return opts;\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({ value: entry, entries: [] });\n    }\n    this.activeEntries = [];\n  }\n}\n","export function sortLinear(data, property, direction = 'asc') {\n  return data.sort((a, b) => {\n    if (direction === 'asc') {\n      return a[property] - b[property];\n    } else {\n      return b[property] - a[property];\n    }\n  });\n}\n\nexport function sortByDomain(data, property, direction = 'asc', domain) {\n  return data.sort((a, b) => {\n    const aVal = a[property];\n    const bVal = b[property];\n\n    const aIdx = domain.indexOf(aVal);\n    const bIdx = domain.indexOf(bVal);\n\n    if (direction === 'asc') {\n      return aIdx - bIdx;\n    } else {\n      return bIdx - aIdx;\n    }\n  });\n}\n\nexport function sortByTime(data, property, direction = 'asc') {\n  return data.sort((a, b) => {\n    const aDate = a[property].getTime();\n    const bDate = b[property].getTime();\n\n    if (direction === 'asc') {\n      if (aDate > bDate) return 1;\n      if (bDate > aDate) return -1;\n      return 0;\n    } else {\n      if (aDate > bDate) return -1;\n      if (bDate > aDate) return 1;\n      return 0;\n    }\n  });\n}\n","import { Component, Input, Output, EventEmitter, OnChanges, ChangeDetectionStrategy, TemplateRef } from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { formatLabel, escapeLabel } from '../common/label.helper';\nimport { DataItem } from '../models/chart-data.model';\n\nexport enum D0Types {\n  positive = 'positive',\n  negative = 'negative'\n}\n\n@Component({\n  selector: 'g[ngx-charts-series-vertical]',\n  template: `\n    <svg:g\n      ngx-charts-bar\n      *ngFor=\"let bar of bars; trackBy: trackBy\"\n      [@animationState]=\"'active'\"\n      [@.disabled]=\"!animations\"\n      [width]=\"bar.width\"\n      [height]=\"bar.height\"\n      [x]=\"bar.x\"\n      [y]=\"bar.y\"\n      [fill]=\"bar.color\"\n      [stops]=\"bar.gradientStops\"\n      [data]=\"bar.data\"\n      [orientation]=\"'vertical'\"\n      [roundEdges]=\"bar.roundEdges\"\n      [gradient]=\"gradient\"\n      [ariaLabel]=\"bar.ariaLabel\"\n      [isActive]=\"isActive(bar.data)\"\n      (select)=\"onClick($event)\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"tooltipPlacement\"\n      [tooltipType]=\"tooltipType\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"bar.data\"\n      [noBarWhenZero]=\"noBarWhenZero\"\n      [animations]=\"animations\"\n    ></svg:g>\n    <svg:g *ngIf=\"showDataLabel\">\n      <svg:g\n        ngx-charts-bar-label\n        *ngFor=\"let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy\"\n        [barX]=\"b.x\"\n        [barY]=\"b.y\"\n        [barWidth]=\"b.width\"\n        [barHeight]=\"b.height\"\n        [value]=\"b.total\"\n        [valueFormatting]=\"dataLabelFormatting\"\n        [orientation]=\"'vertical'\"\n        (dimensionsChanged)=\"dataLabelHeightChanged.emit({ size: $event, index: i })\"\n      />\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1\n        }),\n        animate(500, style({ opacity: 0 }))\n      ])\n    ])\n  ]\n})\nexport class SeriesVerticalComponent implements OnChanges {\n  @Input() dims;\n  @Input() type = 'standard';\n  @Input() series;\n  @Input() xScale;\n  @Input() yScale;\n  @Input() colors;\n  @Input() gradient: boolean;\n  @Input() activeEntries: any[];\n  @Input() seriesName: string;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipTemplate: TemplateRef<any>;\n  @Input() roundEdges: boolean;\n  @Input() animations: boolean = true;\n  @Input() showDataLabel: boolean = false;\n  @Input() dataLabelFormatting: any;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n  @Output() dataLabelHeightChanged = new EventEmitter();\n\n  tooltipPlacement: string;\n  tooltipType: string;\n\n  bars: any;\n  x: any;\n  y: any;\n  barsForDataLabels: Array<{ x: number; y: number; width: number; height: number; total: number; series: string }> = [];\n\n  ngOnChanges(changes): void {\n    this.update();\n  }\n\n  update(): void {\n    this.updateTooltipSettings();\n    let width;\n    if (this.series.length) {\n      width = this.xScale.bandwidth();\n    }\n    width = Math.round(width);\n    const yScaleMin = Math.max(this.yScale.domain()[0], 0);\n\n    const d0 = {\n      [D0Types.positive]: 0,\n      [D0Types.negative]: 0\n    };\n    let d0Type = D0Types.positive;\n\n    let total;\n    if (this.type === 'normalized') {\n      total = this.series.map(d => d.value).reduce((sum, d) => sum + d, 0);\n    }\n\n    this.bars = this.series.map((d, index) => {\n      let value = d.value;\n      const label = this.getLabel(d);\n      const formattedLabel = formatLabel(label);\n      const roundEdges = this.roundEdges;\n      d0Type = value > 0 ? D0Types.positive : D0Types.negative;\n\n      const bar: any = {\n        value,\n        label,\n        roundEdges,\n        data: d,\n        width,\n        formattedLabel,\n        height: 0,\n        x: 0,\n        y: 0\n      };\n\n      if (this.type === 'standard') {\n        bar.height = Math.abs(this.yScale(value) - this.yScale(yScaleMin));\n        bar.x = this.xScale(label);\n\n        if (value < 0) {\n          bar.y = this.yScale(0);\n        } else {\n          bar.y = this.yScale(value);\n        }\n      } else if (this.type === 'stacked') {\n        const offset0 = d0[d0Type];\n        const offset1 = offset0 + value;\n        d0[d0Type] += value;\n\n        bar.height = this.yScale(offset0) - this.yScale(offset1);\n        bar.x = 0;\n        bar.y = this.yScale(offset1);\n        bar.offset0 = offset0;\n        bar.offset1 = offset1;\n      } else if (this.type === 'normalized') {\n        let offset0 = d0[d0Type];\n        let offset1 = offset0 + value;\n        d0[d0Type] += value;\n\n        if (total > 0) {\n          offset0 = (offset0 * 100) / total;\n          offset1 = (offset1 * 100) / total;\n        } else {\n          offset0 = 0;\n          offset1 = 0;\n        }\n\n        bar.height = this.yScale(offset0) - this.yScale(offset1);\n        bar.x = 0;\n        bar.y = this.yScale(offset1);\n        bar.offset0 = offset0;\n        bar.offset1 = offset1;\n        value = (offset1 - offset0).toFixed(2) + '%';\n      }\n\n      if (this.colors.scaleType === 'ordinal') {\n        bar.color = this.colors.getColor(label);\n      } else {\n        if (this.type === 'standard') {\n          bar.color = this.colors.getColor(value);\n          bar.gradientStops = this.colors.getLinearGradientStops(value);\n        } else {\n          bar.color = this.colors.getColor(bar.offset1);\n          bar.gradientStops = this.colors.getLinearGradientStops(bar.offset1, bar.offset0);\n        }\n      }\n\n      let tooltipLabel = formattedLabel;\n      bar.ariaLabel = formattedLabel + ' ' + value.toLocaleString();\n      if (this.seriesName) {\n        tooltipLabel = `${this.seriesName} â¢ ${formattedLabel}`;\n        bar.data.series = this.seriesName;\n        bar.ariaLabel = this.seriesName + ' ' + bar.ariaLabel;\n      }\n\n      bar.tooltipText = this.tooltipDisabled\n        ? undefined\n        : `\n        <span class=\"tooltip-label\">${escapeLabel(tooltipLabel)}</span>\n        <span class=\"tooltip-val\">${value.toLocaleString()}</span>\n      `;\n\n      return bar;\n    });\n\n    this.updateDataLabels();\n  }\n\n  updateDataLabels() {\n    if (this.type === 'stacked') {\n      this.barsForDataLabels = [];\n      const section: any = {};\n      section.series = this.seriesName;\n      const totalPositive = this.series.map(d => d.value).reduce((sum, d) => (d > 0 ? sum + d : sum), 0);\n      const totalNegative = this.series.map(d => d.value).reduce((sum, d) => (d < 0 ? sum + d : sum), 0);\n      section.total = totalPositive + totalNegative;\n      section.x = 0;\n      section.y = 0;\n      if (section.total > 0) {\n        section.height = this.yScale(totalPositive);\n      } else {\n        section.height = this.yScale(totalNegative);\n      }\n      section.width = this.xScale.bandwidth();\n      this.barsForDataLabels.push(section);\n    } else {\n      this.barsForDataLabels = this.series.map(d => {\n        const section: any = {};\n        section.series = this.seriesName ? this.seriesName : d.label;\n        section.total = d.value;\n        section.x = this.xScale(d.label);\n        section.y = this.yScale(0);\n        section.height = this.yScale(section.total) - this.yScale(0);\n        section.width = this.xScale.bandwidth();\n        return section;\n      });\n    }\n  }\n\n  updateTooltipSettings() {\n    this.tooltipPlacement = this.tooltipDisabled ? undefined : 'top';\n    this.tooltipType = this.tooltipDisabled ? undefined : 'tooltip';\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name && entry.series === d.series;\n    });\n    return item !== undefined;\n  }\n\n  onClick(data: DataItem): void {\n    this.select.emit(data);\n  }\n\n  getLabel(dataItem): string {\n    if (dataItem.label) {\n      return dataItem.label;\n    }\n    return dataItem.name;\n  }\n\n  trackBy(index, bar): string {\n    return bar.label;\n  }\n\n  trackDataLabelBy(index, barLabel) {\n    return index + '#' + barLabel.series + '#' + barLabel.total;\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { area } from 'd3-shape';\n\nimport { sortLinear, sortByTime, sortByDomain } from '../utils/sort';\n\n@Component({\n  selector: 'g[ngx-charts-area-series]',\n  template: `\n    <svg:g\n      ngx-charts-area\n      class=\"area-series\"\n      [data]=\"data\"\n      [path]=\"path\"\n      [fill]=\"colors.getColor(data.name)\"\n      [stops]=\"gradientStops\"\n      [startingPath]=\"startingPath\"\n      [opacity]=\"opacity\"\n      [gradient]=\"gradient || hasGradient\"\n      [animations]=\"animations\"\n      [class.active]=\"isActive(data)\"\n      [class.inactive]=\"isInactive(data)\"\n    />\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AreaSeriesComponent implements OnChanges {\n  @Input() data;\n  @Input() xScale;\n  @Input() yScale;\n  @Input() baseValue: any = 'auto';\n  @Input() colors;\n  @Input() scaleType;\n  @Input() stacked: boolean = false;\n  @Input() normalized: boolean = false;\n  @Input() gradient;\n  @Input() curve;\n  @Input() activeEntries: any[];\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n\n  opacity: number;\n  path: string;\n  startingPath: string;\n\n  hasGradient: boolean;\n  gradientStops: any[];\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.updateGradient();\n\n    let currentArea;\n    let startingArea;\n\n    const xProperty = d => {\n      const label = d.name;\n      return this.xScale(label);\n    };\n\n    if (this.stacked || this.normalized) {\n      currentArea = area<any>()\n        .x(xProperty)\n        .y0((d, i) => this.yScale(d.d0))\n        .y1((d, i) => this.yScale(d.d1));\n\n      startingArea = area<any>()\n        .x(xProperty)\n        .y0(d => this.yScale.range()[0])\n        .y1(d => this.yScale.range()[0]);\n    } else {\n      currentArea = area<any>()\n        .x(xProperty)\n        .y0(() => (this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)))\n        .y1(d => this.yScale(d.value));\n\n      startingArea = area<any>()\n        .x(xProperty)\n        .y0(d => (this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)))\n        .y1(d => (this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)));\n    }\n\n    currentArea.curve(this.curve);\n    startingArea.curve(this.curve);\n\n    this.opacity = 0.8;\n\n    let data = this.data.series;\n    if (this.scaleType === 'linear') {\n      data = sortLinear(data, 'name');\n    } else if (this.scaleType === 'time') {\n      data = sortByTime(data, 'name');\n    } else {\n      data = sortByDomain(data, 'name', 'asc', this.xScale.domain());\n    }\n\n    this.path = currentArea(data);\n    this.startingPath = startingArea(data);\n  }\n\n  updateGradient() {\n    if (this.colors.scaleType === 'linear') {\n      this.hasGradient = true;\n      if (this.stacked || this.normalized) {\n        const d0values = this.data.series.map(d => d.d0);\n        const d1values = this.data.series.map(d => d.d1);\n        const max = Math.max(...d1values);\n        const min = Math.min(...d0values);\n        this.gradientStops = this.colors.getLinearGradientStops(max, min);\n      } else {\n        const values = this.data.series.map(d => d.value);\n        const max = Math.max(...values);\n        this.gradientStops = this.colors.getLinearGradientStops(max);\n      }\n    } else {\n      this.hasGradient = false;\n      this.gradientStops = undefined;\n    }\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item !== undefined;\n  }\n\n  isInactive(entry): boolean {\n    if (!this.activeEntries || this.activeEntries.length === 0) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item === undefined;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { AreaChartComponent } from './area-chart.component';\nimport { AreaChartNormalizedComponent } from './area-chart-normalized.component';\nimport { AreaChartStackedComponent } from './area-chart-stacked.component';\nimport { AreaSeriesComponent } from './area-series.component';\nimport { ChartCommonModule } from '../common/chart-common.module';\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent],\n  exports: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent]\n})\nexport class AreaChartModule {}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  HostListener,\n  ElementRef,\n  SimpleChanges,\n  OnChanges,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { select } from 'd3-selection';\nimport { roundedRect } from '../common/shape.helper';\nimport { id } from '../utils/id';\n\n/* tslint:disable-next-line */\nimport { transition } from 'd3-transition';\n\n@Component({\n  selector: 'g[ngx-charts-bar]',\n  template: `\n    <svg:defs *ngIf=\"hasGradient\">\n      <svg:g ngx-charts-svg-linear-gradient [orientation]=\"orientation\" [name]=\"gradientId\" [stops]=\"gradientStops\" />\n    </svg:defs>\n    <svg:path\n      class=\"bar\"\n      stroke=\"none\"\n      role=\"img\"\n      tabIndex=\"-1\"\n      [class.active]=\"isActive\"\n      [class.hidden]=\"hideBar\"\n      [attr.d]=\"path\"\n      [attr.aria-label]=\"ariaLabel\"\n      [attr.fill]=\"hasGradient ? gradientFill : fill\"\n      (click)=\"select.emit(data)\"\n    />\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BarComponent implements OnChanges {\n  @Input() fill;\n  @Input() data: any;\n  @Input() width: number;\n  @Input() height: number;\n  @Input() x: number;\n  @Input() y: number;\n  @Input() orientation;\n  @Input() roundEdges: boolean = true;\n  @Input() gradient: boolean = false;\n  @Input() offset = 0;\n  @Input() isActive: boolean = false;\n  @Input() stops: any[];\n  @Input() animations: boolean = true;\n  @Input() ariaLabel: string;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n\n  element: any;\n  path: any;\n  gradientId: any;\n  gradientFill: any;\n  startOpacity: any;\n  gradientStops: any[];\n  hasGradient: boolean = false;\n  hideBar: boolean = false;\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.roundEdges) {\n      this.loadAnimation();\n    }\n    this.update();\n  }\n\n  update(): void {\n    this.gradientId = 'grad' + id().toString();\n    this.gradientFill = `url(#${this.gradientId})`;\n\n    if (this.gradient || this.stops) {\n      this.gradientStops = this.getGradient();\n      this.hasGradient = true;\n    } else {\n      this.hasGradient = false;\n    }\n\n    this.updatePathEl();\n    this.checkToHideBar();\n  }\n\n  loadAnimation(): void {\n    this.path = this.getStartingPath();\n    setTimeout(this.update.bind(this), 100);\n  }\n\n  updatePathEl(): void {\n    const node = select(this.element).select('.bar');\n    const path = this.getPath();\n    if (this.animations) {\n      node\n        .transition()\n        .duration(500)\n        .attr('d', path);\n    } else {\n      node.attr('d', path);\n    }\n  }\n\n  getGradient() {\n    if (this.stops) {\n      return this.stops;\n    }\n\n    return [\n      {\n        offset: 0,\n        color: this.fill,\n        opacity: this.getStartOpacity()\n      },\n      {\n        offset: 100,\n        color: this.fill,\n        opacity: 1\n      }\n    ];\n  }\n\n  getStartingPath() {\n    if (!this.animations) {\n      return this.getPath();\n    }\n\n    let radius = this.getRadius();\n    let path;\n\n    if (this.roundEdges) {\n      if (this.orientation === 'vertical') {\n        radius = Math.min(this.height, radius);\n        path = roundedRect(this.x, this.y + this.height, this.width, 1, 0, this.edges);\n      } else if (this.orientation === 'horizontal') {\n        radius = Math.min(this.width, radius);\n        path = roundedRect(this.x, this.y, 1, this.height, 0, this.edges);\n      }\n    } else {\n      if (this.orientation === 'vertical') {\n        path = roundedRect(this.x, this.y + this.height, this.width, 1, 0, this.edges);\n      } else if (this.orientation === 'horizontal') {\n        path = roundedRect(this.x, this.y, 1, this.height, 0, this.edges);\n      }\n    }\n\n    return path;\n  }\n\n  getPath() {\n    let radius = this.getRadius();\n    let path;\n\n    if (this.roundEdges) {\n      if (this.orientation === 'vertical') {\n        radius = Math.min(this.height, radius);\n        path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n      } else if (this.orientation === 'horizontal') {\n        radius = Math.min(this.width, radius);\n        path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n      }\n    } else {\n      path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n    }\n\n    return path;\n  }\n\n  getRadius(): number {\n    let radius = 0;\n\n    if (this.roundEdges && this.height > 5 && this.width > 5) {\n      radius = Math.floor(Math.min(5, this.height / 2, this.width / 2));\n    }\n\n    return radius;\n  }\n\n  getStartOpacity(): number {\n    if (this.roundEdges) {\n      return 0.2;\n    } else {\n      return 0.5;\n    }\n  }\n\n  get edges() {\n    let edges = [false, false, false, false];\n    if (this.roundEdges) {\n      if (this.orientation === 'vertical') {\n        if (this.data.value > 0) {\n          edges = [true, true, false, false];\n        } else {\n          edges = [false, false, true, true];\n        }\n      } else if (this.orientation === 'horizontal') {\n        if (this.data.value > 0) {\n          edges = [false, true, false, true];\n        } else {\n          edges = [true, false, true, false];\n        }\n      }\n    }\n    return edges;\n  }\n\n  @HostListener('mouseenter')\n  onMouseEnter(): void {\n    this.activate.emit(this.data);\n  }\n\n  @HostListener('mouseleave')\n  onMouseLeave(): void {\n    this.deactivate.emit(this.data);\n  }\n\n  private checkToHideBar() {\n    this.hideBar =\n      this.noBarWhenZero &&\n      ((this.orientation === 'vertical' && this.height === 0) ||\n        (this.orientation === 'horizontal' && this.width === 0));\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { scaleBand, scaleLinear } from 'd3-scale';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\n\n@Component({\n  selector: 'ngx-charts-bar-horizontal',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-series-horizontal\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [series]=\"results\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [activeEntries]=\"activeEntries\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n          (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event)\"\n        ></svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class BarHorizontalComponent extends BaseChartComponent {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() barPadding = 8;\n  @Input() roundDomains: boolean = false;\n  @Input() roundEdges: boolean = true;\n  @Input() xScaleMax: number;\n  @Input() xScaleMin: number;\n  @Input() showDataLabel: boolean = false;\n  @Input() dataLabelFormatting: any;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  yScale: any;\n  xScale: any;\n  xDomain: any;\n  yDomain: any;\n  transform: string;\n  colors: ColorHelper;\n  margin = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: any;\n  dataLabelMaxWidth: any = { negative: 0, positive: 0 };\n\n  update(): void {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n    }\n\n    this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    this.formatDates();\n\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getXScale(): any {\n    this.xDomain = this.getXDomain();\n\n    const scale = scaleLinear()\n      .range([0, this.dims.width])\n      .domain(this.xDomain);\n\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getYScale(): any {\n    this.yDomain = this.getYDomain();\n    const spacing = this.yDomain.length / (this.dims.height / this.barPadding + 1);\n\n    return scaleBand()\n      .rangeRound([0, this.dims.height])\n      .paddingInner(spacing)\n      .domain(this.yDomain);\n  }\n\n  getXDomain(): any[] {\n    const values = this.results.map(d => d.value);\n    const min = this.xScaleMin ? Math.min(this.xScaleMin, ...values) : Math.min(0, ...values);\n\n    const max = this.xScaleMax ? Math.max(this.xScaleMax, ...values) : Math.max(0, ...values);\n    return [min, max];\n  }\n\n  getYDomain(): any[] {\n    return this.results.map(d => d.label);\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.yDomain;\n    } else {\n      domain = this.xDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.xDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onDataLabelMaxWidthChanged(event) {\n    if (event.size.negative) {\n      this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\n    } else {\n      this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\n    }\n    if (event.index === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  onActivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import {\n  Component,\n  Input,\n  ViewEncapsulation,\n  Output,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\n\nimport { scaleBand, scaleLinear } from 'd3-scale';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\n\n@Component({\n  selector: 'ngx-charts-bar-horizontal-2d',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-grid-panel-series\n          [xScale]=\"valueScale\"\n          [yScale]=\"groupScale\"\n          [data]=\"results\"\n          [dims]=\"dims\"\n          orient=\"horizontal\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"valueScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"groupScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [@animationState]=\"'active'\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-horizontal\n            [xScale]=\"valueScale\"\n            [activeEntries]=\"activeEntries\"\n            [yScale]=\"innerScale\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [seriesName]=\"group.name\"\n            [roundEdges]=\"roundEdges\"\n            [animations]=\"animations\"\n            [showDataLabel]=\"showDataLabel\"\n            [dataLabelFormatting]=\"dataLabelFormatting\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1,\n          transform: '*'\n        }),\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n      ])\n    ])\n  ]\n})\nexport class BarHorizontal2DComponent extends BaseChartComponent {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() groupPadding = 16;\n  @Input() barPadding = 8;\n  @Input() roundDomains: boolean = false;\n  @Input() roundEdges: boolean = true;\n  @Input() xScaleMax: number;\n  @Input() showDataLabel: boolean = false;\n  @Input() dataLabelFormatting: any;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  groupDomain: any[];\n  innerDomain: any[];\n  valuesDomain: any[];\n  groupScale: any;\n  innerScale: any;\n  valueScale: any;\n  transform: string;\n  colors: ColorHelper;\n  margin = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: any;\n  dataLabelMaxWidth: any = { negative: 0, positive: 0 };\n\n  update(): void {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n    }\n\n    this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    this.formatDates();\n\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.valuesDomain = this.getValueDomain();\n\n    this.groupScale = this.getGroupScale();\n    this.innerScale = this.getInnerScale();\n    this.valueScale = this.getValueScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getGroupScale(): any {\n    const spacing = this.groupDomain.length / (this.dims.height / this.groupPadding + 1);\n\n    return scaleBand()\n      .rangeRound([0, this.dims.height])\n      .paddingInner(spacing)\n      .paddingOuter(spacing / 2)\n      .domain(this.groupDomain);\n  }\n\n  getInnerScale(): any {\n    const height = this.groupScale.bandwidth();\n    const spacing = this.innerDomain.length / (height / this.barPadding + 1);\n\n    return scaleBand()\n      .rangeRound([0, height])\n      .paddingInner(spacing)\n      .domain(this.innerDomain);\n  }\n\n  getValueScale(): any {\n    const scale = scaleLinear()\n      .range([0, this.dims.width])\n      .domain(this.valuesDomain);\n\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getGroupDomain(): any[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n\n    return domain;\n  }\n\n  getInnerDomain(): any[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getValueDomain(): any[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.value)) {\n          domain.push(d.value);\n        }\n      }\n    }\n\n    const min = Math.min(0, ...domain);\n    const max = this.xScaleMax ? Math.max(this.xScaleMax, ...domain) : Math.max(0, ...domain);\n    return [min, max];\n  }\n\n  groupTransform(group) {\n    return `translate(0, ${this.groupScale(group.label)})`;\n  }\n\n  onClick(data, group?): void {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index, item): string {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valuesDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valuesDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onDataLabelMaxWidthChanged(event, groupIndex) {\n    if (event.size.negative) {\n      this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\n    } else {\n      this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\n    }\n    if (groupIndex === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results\n      .map(g => g.series)\n      .flat()\n      .filter(i => {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n\n    this.activeEntries = [...items];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  ViewEncapsulation,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\n\nimport { scaleBand, scaleLinear } from 'd3-scale';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\n\n@Component({\n  selector: 'ngx-charts-bar-horizontal-normalized',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          *ngFor=\"let group of results; trackBy: trackBy\"\n          [@animationState]=\"'active'\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-horizontal\n            type=\"normalized\"\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [activeEntries]=\"activeEntries\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [seriesName]=\"group.name\"\n            [animations]=\"animations\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1,\n          transform: '*'\n        }),\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n      ])\n    ])\n  ]\n})\nexport class BarHorizontalNormalizedComponent extends BaseChartComponent {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() barPadding = 8;\n  @Input() roundDomains: boolean = false;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  groupDomain: any[];\n  innerDomain: any[];\n  valueDomain: any[];\n  xScale: any;\n  yScale: any;\n  transform: string;\n  colors: ColorHelper;\n  margin = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: any;\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    this.formatDates();\n\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.valueDomain = this.getValueDomain();\n\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getGroupDomain(): any[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n\n    return domain;\n  }\n\n  getInnerDomain(): any[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getValueDomain(): any[] {\n    return [0, 100];\n  }\n\n  getYScale(): any {\n    const spacing = this.groupDomain.length / (this.dims.height / this.barPadding + 1);\n\n    return scaleBand()\n      .rangeRound([0, this.dims.height])\n      .paddingInner(spacing)\n      .domain(this.groupDomain);\n  }\n\n  getXScale(): any {\n    const scale = scaleLinear()\n      .range([0, this.dims.width])\n      .domain(this.valueDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  groupTransform(group): string {\n    return `translate(0, ${this.yScale(group.name)})`;\n  }\n\n  onClick(data, group?): void {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index, item): string {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valueDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valueDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results\n      .map(g => g.series)\n      .flat()\n      .filter(i => {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n\n    this.activeEntries = [...items];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\n\nimport { scaleBand, scaleLinear } from 'd3-scale';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\n\n@Component({\n  selector: 'ngx-charts-bar-horizontal-stacked',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [@animationState]=\"'active'\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-horizontal\n            type=\"stacked\"\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [activeEntries]=\"activeEntries\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [seriesName]=\"group.name\"\n            [animations]=\"animations\"\n            [showDataLabel]=\"showDataLabel\"\n            [dataLabelFormatting]=\"dataLabelFormatting\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1,\n          transform: '*'\n        }),\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n      ])\n    ])\n  ]\n})\nexport class BarHorizontalStackedComponent extends BaseChartComponent {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() barPadding = 8;\n  @Input() roundDomains: boolean = false;\n  @Input() xScaleMax: number;\n  @Input() showDataLabel: boolean = false;\n  @Input() dataLabelFormatting: any;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  groupDomain: any[];\n  innerDomain: any[];\n  valueDomain: any[];\n  xScale: any;\n  yScale: any;\n  transform: string;\n  colors: ColorHelper;\n  margin = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: any;\n  dataLabelMaxWidth: any = { negative: 0, positive: 0 };\n\n  update(): void {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n    }\n\n    this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    this.formatDates();\n\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.valueDomain = this.getValueDomain();\n\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getGroupDomain(): any[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n\n    return domain;\n  }\n\n  getInnerDomain(): any[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getValueDomain(): any[] {\n    const domain = [];\n    let smallest = 0;\n    let biggest = 0;\n    for (const group of this.results) {\n      let smallestSum = 0;\n      let biggestSum = 0;\n      for (const d of group.series) {\n        if (d.value < 0) {\n          smallestSum += d.value;\n        } else {\n          biggestSum += d.value;\n        }\n        smallest = d.value < smallest ? d.value : smallest;\n        biggest = d.value > biggest ? d.value : biggest;\n      }\n      domain.push(smallestSum);\n      domain.push(biggestSum);\n    }\n    domain.push(smallest);\n    domain.push(biggest);\n\n    const min = Math.min(0, ...domain);\n    const max = this.xScaleMax ? Math.max(this.xScaleMax, ...domain) : Math.max(...domain);\n    return [min, max];\n  }\n\n  getYScale(): any {\n    const spacing = this.groupDomain.length / (this.dims.height / this.barPadding + 1);\n\n    return scaleBand()\n      .rangeRound([0, this.dims.height])\n      .paddingInner(spacing)\n      .domain(this.groupDomain);\n  }\n\n  getXScale(): any {\n    const scale = scaleLinear()\n      .range([0, this.dims.width])\n      .domain(this.valueDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  groupTransform(group): string {\n    return `translate(0, ${this.yScale(group.name)})`;\n  }\n\n  onClick(data, group?): void {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index, item): string {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valueDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valueDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onDataLabelMaxWidthChanged(event, groupIndex) {\n    if (event.size.negative) {\n      this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\n    } else {\n      this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\n    }\n    if (groupIndex === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results\n      .map(g => g.series)\n      .flat()\n      .filter(i => {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n\n    this.activeEntries = [...items];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import {\n  Component,\n  Input,\n  ViewEncapsulation,\n  Output,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { scaleBand, scaleLinear } from 'd3-scale';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { DataItem } from '../models/chart-data.model';\n\n@Component({\n  selector: 'ngx-charts-bar-vertical',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-series-vertical\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [series]=\"results\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [activeEntries]=\"activeEntries\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n          (select)=\"onClick($event)\"\n          (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event)\"\n        ></svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class BarVerticalComponent extends BaseChartComponent {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() barPadding = 8;\n  @Input() roundDomains: boolean = false;\n  @Input() roundEdges: boolean = true;\n  @Input() yScaleMax: number;\n  @Input() yScaleMin: number;\n  @Input() showDataLabel: boolean = false;\n  @Input() dataLabelFormatting: any;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  xScale: any;\n  yScale: any;\n  xDomain: any;\n  yDomain: any;\n  transform: string;\n  colors: ColorHelper;\n  margin: any[] = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: any;\n  dataLabelMaxHeight: any = { negative: 0, positive: 0 };\n\n  update(): void {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n    }\n    this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    this.formatDates();\n\n    if (this.showDataLabel) {\n      this.dims.height -= this.dataLabelMaxHeight.negative;\n    }\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\n  }\n\n  getXScale(): any {\n    this.xDomain = this.getXDomain();\n    const spacing = this.xDomain.length / (this.dims.width / this.barPadding + 1);\n    return scaleBand()\n      .range([0, this.dims.width])\n      .paddingInner(spacing)\n      .domain(this.xDomain);\n  }\n\n  getYScale(): any {\n    this.yDomain = this.getYDomain();\n    const scale = scaleLinear()\n      .range([this.dims.height, 0])\n      .domain(this.yDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getXDomain(): any[] {\n    return this.results.map(d => d.label);\n  }\n\n  getYDomain(): [number, number] {\n    const values = this.results.map(d => d.value);\n\n    let min = this.yScaleMin ? Math.min(this.yScaleMin, ...values) : Math.min(0, ...values);\n    if (this.yAxisTicks && !this.yAxisTicks.some(isNaN)) {\n      min = Math.min(min, ...this.yAxisTicks);\n    }\n\n    let max = this.yScaleMax ? Math.max(this.yScaleMax, ...values) : Math.max(0, ...values);\n    if (this.yAxisTicks && !this.yAxisTicks.some(isNaN)) {\n      max = Math.max(max, ...this.yAxisTicks);\n    }\n    return [min, max];\n  }\n\n  onClick(data: DataItem) {\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.xDomain;\n    } else {\n      domain = this.yDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.xDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors.scale;\n    }\n    return opts;\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onDataLabelMaxHeightChanged(event) {\n    if (event.size.negative) {\n      this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\n    } else {\n      this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\n    }\n    if (event.index === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  onActivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  ViewEncapsulation,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { scaleBand, scaleLinear } from 'd3-scale';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\n\n@Component({\n  selector: 'ngx-charts-bar-vertical-2d',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-grid-panel-series\n          [xScale]=\"groupScale\"\n          [yScale]=\"valueScale\"\n          [data]=\"results\"\n          [dims]=\"dims\"\n          orient=\"vertical\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"groupScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"valueScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-series-vertical\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [@animationState]=\"'active'\"\n          [attr.transform]=\"groupTransform(group)\"\n          [activeEntries]=\"activeEntries\"\n          [xScale]=\"innerScale\"\n          [yScale]=\"valueScale\"\n          [colors]=\"colors\"\n          [series]=\"group.series\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [seriesName]=\"group.name\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (select)=\"onClick($event, group)\"\n          (activate)=\"onActivate($event, group)\"\n          (deactivate)=\"onDeactivate($event, group)\"\n          (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1,\n          transform: '*'\n        }),\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n      ])\n    ])\n  ]\n})\nexport class BarVertical2DComponent extends BaseChartComponent {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() scaleType = 'ordinal';\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() groupPadding = 16;\n  @Input() barPadding = 8;\n  @Input() roundDomains: boolean = false;\n  @Input() roundEdges: boolean = true;\n  @Input() yScaleMax: number;\n  @Input() showDataLabel: boolean = false;\n  @Input() dataLabelFormatting: any;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  groupDomain: any[];\n  innerDomain: any[];\n  valuesDomain: any[];\n  groupScale: any;\n  innerScale: any;\n  valueScale: any;\n  transform: string;\n  colors: ColorHelper;\n  margin = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: any;\n  dataLabelMaxHeight: any = { negative: 0, positive: 0 };\n\n  update(): void {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n    }\n    this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.showDataLabel) {\n      this.dims.height -= this.dataLabelMaxHeight.negative;\n    }\n\n    this.formatDates();\n\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.valuesDomain = this.getValueDomain();\n\n    this.groupScale = this.getGroupScale();\n    this.innerScale = this.getInnerScale();\n    this.valueScale = this.getValueScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\n  }\n\n  onDataLabelMaxHeightChanged(event, groupIndex) {\n    if (event.size.negative) {\n      this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\n    } else {\n      this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\n    }\n    if (groupIndex === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  getGroupScale(): any {\n    const spacing = this.groupDomain.length / (this.dims.height / this.groupPadding + 1);\n\n    return scaleBand()\n      .rangeRound([0, this.dims.width])\n      .paddingInner(spacing)\n      .paddingOuter(spacing / 2)\n      .domain(this.groupDomain);\n  }\n\n  getInnerScale(): any {\n    const width = this.groupScale.bandwidth();\n    const spacing = this.innerDomain.length / (width / this.barPadding + 1);\n    return scaleBand()\n      .rangeRound([0, width])\n      .paddingInner(spacing)\n      .domain(this.innerDomain);\n  }\n\n  getValueScale(): any {\n    const scale = scaleLinear()\n      .range([this.dims.height, 0])\n      .domain(this.valuesDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getGroupDomain() {\n    const domain = [];\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n\n    return domain;\n  }\n\n  getInnerDomain() {\n    const domain = [];\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getValueDomain() {\n    const domain = [];\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.value)) {\n          domain.push(d.value);\n        }\n      }\n    }\n\n    const min = Math.min(0, ...domain);\n    const max = this.yScaleMax ? Math.max(this.yScaleMax, ...domain) : Math.max(0, ...domain);\n\n    return [min, max];\n  }\n\n  groupTransform(group) {\n    return `translate(${this.groupScale(group.label)}, 0)`;\n  }\n\n  onClick(data, group?) {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index, item) {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valuesDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valuesDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({ width }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results\n      .map(g => g.series)\n      .flat()\n      .filter(i => {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n\n    this.activeEntries = [...items];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { scaleBand, scaleLinear } from 'd3-scale';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\n\n@Component({\n  selector: 'ngx-charts-bar-vertical-normalized',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          *ngFor=\"let group of results; trackBy: trackBy\"\n          [@animationState]=\"'active'\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-vertical\n            type=\"normalized\"\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [activeEntries]=\"activeEntries\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [seriesName]=\"group.name\"\n            [animations]=\"animations\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1,\n          transform: '*'\n        }),\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n      ])\n    ])\n  ]\n})\nexport class BarVerticalNormalizedComponent extends BaseChartComponent {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() barPadding = 8;\n  @Input() roundDomains: boolean = false;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  groupDomain: any[];\n  innerDomain: any[];\n  valueDomain: any[];\n  xScale: any;\n  yScale: any;\n  transform: string;\n  colors: ColorHelper;\n  margin = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: any;\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    this.formatDates();\n\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.valueDomain = this.getValueDomain();\n\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getGroupDomain() {\n    const domain = [];\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n\n    return domain;\n  }\n\n  getInnerDomain() {\n    const domain = [];\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getValueDomain() {\n    return [0, 100];\n  }\n\n  getXScale(): any {\n    const spacing = this.groupDomain.length / (this.dims.width / this.barPadding + 1);\n\n    return scaleBand()\n      .rangeRound([0, this.dims.width])\n      .paddingInner(spacing)\n      .domain(this.groupDomain);\n  }\n\n  getYScale(): any {\n    const scale = scaleLinear()\n      .range([this.dims.height, 0])\n      .domain(this.valueDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  groupTransform(group) {\n    return `translate(${this.xScale(group.name)}, 0)`;\n  }\n\n  onClick(data, group?) {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index, item) {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valueDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valueDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({ width }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results\n      .map(g => g.series)\n      .flat()\n      .filter(i => {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n\n    this.activeEntries = [...items];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { scaleBand, scaleLinear } from 'd3-scale';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\n\n@Component({\n  selector: 'ngx-charts-bar-vertical-stacked',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [@animationState]=\"'active'\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-vertical\n            type=\"stacked\"\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [activeEntries]=\"activeEntries\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [showDataLabel]=\"showDataLabel\"\n            [dataLabelFormatting]=\"dataLabelFormatting\"\n            [seriesName]=\"group.name\"\n            [animations]=\"animations\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1,\n          transform: '*'\n        }),\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n      ])\n    ])\n  ]\n})\nexport class BarVerticalStackedComponent extends BaseChartComponent {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() barPadding = 8;\n  @Input() roundDomains: boolean = false;\n  @Input() yScaleMax: number;\n  @Input() showDataLabel: boolean = false;\n  @Input() dataLabelFormatting: any;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  groupDomain: any[];\n  innerDomain: any[];\n  valueDomain: any[];\n  xScale: any;\n  yScale: any;\n  transform: string;\n  tickFormatting: (label: string) => string;\n  colors: ColorHelper;\n  margin = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: any;\n  dataLabelMaxHeight: any = { negative: 0, positive: 0 };\n\n  update(): void {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n    }\n    this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.showDataLabel) {\n      this.dims.height -= this.dataLabelMaxHeight.negative;\n    }\n\n    this.formatDates();\n\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.valueDomain = this.getValueDomain();\n\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\n  }\n\n  getGroupDomain() {\n    const domain = [];\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n    return domain;\n  }\n\n  getInnerDomain() {\n    const domain = [];\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n    return domain;\n  }\n\n  getValueDomain() {\n    const domain = [];\n    let smallest = 0;\n    let biggest = 0;\n    for (const group of this.results) {\n      let smallestSum = 0;\n      let biggestSum = 0;\n      for (const d of group.series) {\n        if (d.value < 0) {\n          smallestSum += d.value;\n        } else {\n          biggestSum += d.value;\n        }\n        smallest = d.value < smallest ? d.value : smallest;\n        biggest = d.value > biggest ? d.value : biggest;\n      }\n      domain.push(smallestSum);\n      domain.push(biggestSum);\n    }\n    domain.push(smallest);\n    domain.push(biggest);\n\n    const min = Math.min(0, ...domain);\n    const max = this.yScaleMax ? Math.max(this.yScaleMax, ...domain) : Math.max(...domain);\n    return [min, max];\n  }\n\n  getXScale(): any {\n    const spacing = this.groupDomain.length / (this.dims.width / this.barPadding + 1);\n    return scaleBand()\n      .rangeRound([0, this.dims.width])\n      .paddingInner(spacing)\n      .domain(this.groupDomain);\n  }\n\n  getYScale(): any {\n    const scale = scaleLinear()\n      .range([this.dims.height, 0])\n      .domain(this.valueDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  onDataLabelMaxHeightChanged(event, groupIndex) {\n    if (event.size.negative) {\n      this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\n    } else {\n      this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\n    }\n    if (groupIndex === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  groupTransform(group) {\n    return `translate(${this.xScale(group.name) || 0}, 0)`;\n  }\n\n  onClick(data, group?) {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index, item) {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valueDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valueDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({ width }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results\n      .map(g => g.series)\n      .flat()\n      .filter(i => {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n\n    this.activeEntries = [...items];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectionStrategy,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { formatLabel, escapeLabel } from '../common/label.helper';\nimport { D0Types } from './series-vertical.component';\nimport { DataItem } from '../models/chart-data.model';\n\n@Component({\n  selector: 'g[ngx-charts-series-horizontal]',\n  template: `\n    <svg:g\n      ngx-charts-bar\n      *ngFor=\"let bar of bars; trackBy: trackBy\"\n      [@animationState]=\"'active'\"\n      [width]=\"bar.width\"\n      [height]=\"bar.height\"\n      [x]=\"bar.x\"\n      [y]=\"bar.y\"\n      [fill]=\"bar.color\"\n      [stops]=\"bar.gradientStops\"\n      [data]=\"bar.data\"\n      [orientation]=\"'horizontal'\"\n      [roundEdges]=\"bar.roundEdges\"\n      (select)=\"click($event)\"\n      [gradient]=\"gradient\"\n      [isActive]=\"isActive(bar.data)\"\n      [ariaLabel]=\"bar.ariaLabel\"\n      [animations]=\"animations\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"tooltipPlacement\"\n      [tooltipType]=\"tooltipType\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"bar.data\"\n      [noBarWhenZero]=\"noBarWhenZero\"\n    ></svg:g>\n    <svg:g *ngIf=\"showDataLabel\">\n      <svg:g\n        ngx-charts-bar-label\n        *ngFor=\"let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy\"\n        [barX]=\"b.x\"\n        [barY]=\"b.y\"\n        [barWidth]=\"b.width\"\n        [barHeight]=\"b.height\"\n        [value]=\"b.total\"\n        [valueFormatting]=\"dataLabelFormatting\"\n        [orientation]=\"'horizontal'\"\n        (dimensionsChanged)=\"dataLabelWidthChanged.emit({ size: $event, index: i })\"\n      />\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1\n        }),\n        animate(500, style({ opacity: 0 }))\n      ])\n    ])\n  ]\n})\nexport class SeriesHorizontal implements OnChanges {\n  bars: any;\n  x: any;\n  y: any;\n  barsForDataLabels: Array<{ x: number; y: number; width: number; height: number; total: number; series: string }> = [];\n\n  @Input() dims;\n  @Input() type = 'standard';\n  @Input() series;\n  @Input() xScale;\n  @Input() yScale;\n  @Input() colors;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() gradient: boolean;\n  @Input() activeEntries: any[];\n  @Input() seriesName: string;\n  @Input() tooltipTemplate: TemplateRef<any>;\n  @Input() roundEdges: boolean;\n  @Input() animations: boolean = true;\n  @Input() showDataLabel: boolean = false;\n  @Input() dataLabelFormatting: any;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n  @Output() dataLabelWidthChanged = new EventEmitter();\n\n  tooltipPlacement: string;\n  tooltipType: string;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.updateTooltipSettings();\n    const d0 = {\n      [D0Types.positive]: 0,\n      [D0Types.negative]: 0\n    };\n    let d0Type: D0Types;\n    d0Type = D0Types.positive;\n    let total;\n    if (this.type === 'normalized') {\n      total = this.series.map(d => d.value).reduce((sum, d) => sum + d, 0);\n    }\n    const xScaleMin = Math.max(this.xScale.domain()[0], 0);\n\n    this.bars = this.series.map((d, index) => {\n      let value = d.value;\n      const label = this.getLabel(d);\n      const formattedLabel = formatLabel(label);\n      const roundEdges = this.roundEdges;\n      d0Type = value > 0 ? D0Types.positive : D0Types.negative;\n\n      const bar: any = {\n        value,\n        label,\n        roundEdges,\n        data: d,\n        formattedLabel\n      };\n\n      bar.height = this.yScale.bandwidth();\n\n      if (this.type === 'standard') {\n        bar.width = Math.abs(this.xScale(value) - this.xScale(xScaleMin));\n        if (value < 0) {\n          bar.x = this.xScale(value);\n        } else {\n          bar.x = this.xScale(xScaleMin);\n        }\n        bar.y = this.yScale(label);\n      } else if (this.type === 'stacked') {\n        const offset0 = d0[d0Type];\n        const offset1 = offset0 + value;\n        d0[d0Type] += value;\n\n        bar.width = this.xScale(offset1) - this.xScale(offset0);\n        bar.x = this.xScale(offset0);\n        bar.y = 0;\n        bar.offset0 = offset0;\n        bar.offset1 = offset1;\n      } else if (this.type === 'normalized') {\n        let offset0 = d0[d0Type];\n        let offset1 = offset0 + value;\n        d0[d0Type] += value;\n\n        if (total > 0) {\n          offset0 = (offset0 * 100) / total;\n          offset1 = (offset1 * 100) / total;\n        } else {\n          offset0 = 0;\n          offset1 = 0;\n        }\n\n        bar.width = this.xScale(offset1) - this.xScale(offset0);\n        bar.x = this.xScale(offset0);\n        bar.y = 0;\n        bar.offset0 = offset0;\n        bar.offset1 = offset1;\n        value = (offset1 - offset0).toFixed(2) + '%';\n      }\n\n      if (this.colors.scaleType === 'ordinal') {\n        bar.color = this.colors.getColor(label);\n      } else {\n        if (this.type === 'standard') {\n          bar.color = this.colors.getColor(value);\n          bar.gradientStops = this.colors.getLinearGradientStops(value);\n        } else {\n          bar.color = this.colors.getColor(bar.offset1);\n          bar.gradientStops = this.colors.getLinearGradientStops(bar.offset1, bar.offset0);\n        }\n      }\n\n      let tooltipLabel = formattedLabel;\n      bar.ariaLabel = formattedLabel + ' ' + value.toLocaleString();\n      if (this.seriesName) {\n        tooltipLabel = `${this.seriesName} â¢ ${formattedLabel}`;\n        bar.data.series = this.seriesName;\n        bar.ariaLabel = this.seriesName + ' ' + bar.ariaLabel;\n      }\n\n      bar.tooltipText = this.tooltipDisabled\n        ? undefined\n        : `\n        <span class=\"tooltip-label\">${escapeLabel(tooltipLabel)}</span>\n        <span class=\"tooltip-val\">${value.toLocaleString()}</span>\n      `;\n\n      return bar;\n    });\n\n    this.updateDataLabels();\n  }\n\n  updateDataLabels() {\n    if (this.type === 'stacked') {\n      this.barsForDataLabels = [];\n      const section: any = {};\n      section.series = this.seriesName;\n      const totalPositive = this.series.map(d => d.value).reduce((sum, d) => (d > 0 ? sum + d : sum), 0);\n      const totalNegative = this.series.map(d => d.value).reduce((sum, d) => (d < 0 ? sum + d : sum), 0);\n      section.total = totalPositive + totalNegative;\n      section.x = 0;\n      section.y = 0;\n      // if total is positive then we show it on the right, otherwise on the left\n      if (section.total > 0) {\n        section.width = this.xScale(totalPositive);\n      } else {\n        section.width = this.xScale(totalNegative);\n      }\n      section.height = this.yScale.bandwidth();\n      this.barsForDataLabels.push(section);\n    } else {\n      this.barsForDataLabels = this.series.map(d => {\n        const section: any = {};\n        section.series = this.seriesName ? this.seriesName : d.label;\n        section.total = d.value;\n        section.x = this.xScale(0);\n        section.y = this.yScale(d.label);\n        section.width = this.xScale(section.total) - this.xScale(0);\n        section.height = this.yScale.bandwidth();\n        return section;\n      });\n    }\n  }\n\n  updateTooltipSettings() {\n    this.tooltipPlacement = this.tooltipDisabled ? undefined : 'top';\n    this.tooltipType = this.tooltipDisabled ? undefined : 'tooltip';\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name && entry.series === d.series;\n    });\n    return item !== undefined;\n  }\n\n  getLabel(dataItem): string {\n    if (dataItem.label) {\n      return dataItem.label;\n    }\n    return dataItem.name;\n  }\n\n  trackBy(index, bar) {\n    return bar.label;\n  }\n\n  trackDataLabelBy(index, barLabel) {\n    return index + '#' + barLabel.series + '#' + barLabel.total;\n  }\n\n  click(data: DataItem): void {\n    this.select.emit(data);\n  }\n}\n","import {\n  Component,\n  Input,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Output,\n  EventEmitter\n} from '@angular/core';\nimport { formatLabel } from '../common/label.helper';\n\n@Component({\n  selector: 'g[ngx-charts-bar-label]',\n  template: `\n    <svg:text\n      class=\"textDataLabel\"\n      alignment-baseline=\"middle\"\n      [attr.text-anchor]=\"textAnchor\"\n      [attr.transform]=\"transform\"\n      [attr.x]=\"x\"\n      [attr.y]=\"y\"\n    >\n      {{ formatedValue }}\n    </svg:text>\n  `,\n  styleUrls: ['./bar-label.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BarLabelComponent implements OnChanges {\n  @Input() value;\n  @Input() valueFormatting: any;\n  @Input() barX;\n  @Input() barY;\n  @Input() barWidth;\n  @Input() barHeight;\n  @Input() orientation;\n\n  @Output() dimensionsChanged: EventEmitter<any> = new EventEmitter();\n\n  element: any;\n  x: number;\n  y: number;\n  horizontalPadding: number = 2;\n  verticalPadding: number = 5;\n  formatedValue: string;\n  transform: string;\n  textAnchor: string;\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  getSize(): any {\n    const h = this.element.getBoundingClientRect().height;\n    const w = this.element.getBoundingClientRect().width;\n    return { height: h, width: w, negative: this.value < 0 };\n  }\n\n  ngAfterViewInit() {\n    this.dimensionsChanged.emit(this.getSize());\n  }\n\n  update(): void {\n    if (this.valueFormatting) {\n      this.formatedValue = this.valueFormatting(this.value);\n    } else {\n      this.formatedValue = formatLabel(this.value);\n    }\n\n    if (this.orientation === 'horizontal') {\n      this.x = this.barX + this.barWidth;\n      // if the value is negative then it's on the left of the x0.\n      // we need to put the data label in front of the bar\n      if (this.value < 0) {\n        this.x = this.x - this.horizontalPadding;\n        this.textAnchor = 'end';\n      } else {\n        this.x = this.x + this.horizontalPadding;\n        this.textAnchor = 'start';\n      }\n      this.y = this.barY + this.barHeight / 2;\n    } else {\n      // orientation must be \"vertical\"\n      this.x = this.barX + this.barWidth / 2;\n      this.y = this.barY + this.barHeight;\n\n      if (this.value < 0) {\n        this.y = this.y + this.verticalPadding;\n        this.textAnchor = 'end';\n      } else {\n        this.y = this.y - this.verticalPadding;\n        this.textAnchor = 'start';\n      }\n      this.transform = `rotate(-45, ${this.x} , ${this.y})`;\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { BarComponent } from './bar.component';\nimport { BarHorizontalComponent } from './bar-horizontal.component';\nimport { BarHorizontal2DComponent } from './bar-horizontal-2d.component';\nimport { BarHorizontalNormalizedComponent } from './bar-horizontal-normalized.component';\nimport { BarHorizontalStackedComponent } from './bar-horizontal-stacked.component';\nimport { BarVerticalComponent } from './bar-vertical.component';\nimport { BarVertical2DComponent } from './bar-vertical-2d.component';\nimport { BarVerticalNormalizedComponent } from './bar-vertical-normalized.component';\nimport { BarVerticalStackedComponent } from './bar-vertical-stacked.component';\nimport { SeriesHorizontal } from './series-horizontal.component';\nimport { SeriesVerticalComponent } from './series-vertical.component';\nimport { BarLabelComponent } from './bar-label.component';\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [\n    BarComponent,\n    BarHorizontalComponent,\n    BarHorizontal2DComponent,\n    BarHorizontalNormalizedComponent,\n    BarHorizontalStackedComponent,\n    BarVerticalComponent,\n    BarVertical2DComponent,\n    BarVerticalNormalizedComponent,\n    BarVerticalStackedComponent,\n    BarLabelComponent,\n    SeriesHorizontal,\n    SeriesVerticalComponent\n  ],\n  exports: [\n    BarComponent,\n    BarHorizontalComponent,\n    BarHorizontal2DComponent,\n    BarHorizontalNormalizedComponent,\n    BarHorizontalStackedComponent,\n    BarVerticalComponent,\n    BarVertical2DComponent,\n    BarVerticalNormalizedComponent,\n    BarVerticalStackedComponent,\n    BarLabelComponent,\n    SeriesHorizontal,\n    SeriesVerticalComponent\n  ]\n})\nexport class BarChartModule {}\n","import { scaleLinear, scalePoint, scaleTime } from 'd3-scale';\n\nexport function getDomain(values, scaleType, autoScale, minVal?, maxVal?): number[] {\n  let domain: number[] = [];\n  if (scaleType === 'linear') {\n    values = values.map(v => Number(v));\n    if (!autoScale) {\n      values.push(0);\n    }\n  }\n\n  if (scaleType === 'time' || scaleType === 'linear') {\n    const min = minVal ? minVal : Math.min(...values);\n    const max = maxVal ? maxVal : Math.max(...values);\n\n    domain = [min, max];\n  } else {\n    domain = values;\n  }\n\n  return domain;\n}\n\nexport function getScale(domain, range: number[], scaleType, roundDomains): any {\n  let scale: any;\n\n  if (scaleType === 'time') {\n    scale = scaleTime()\n      .range(range)\n      .domain(domain);\n  } else if (scaleType === 'linear') {\n    scale = scaleLinear()\n      .range(range)\n      .domain(domain);\n\n    if (roundDomains) {\n      scale = scale.nice();\n    }\n  } else if (scaleType === 'ordinal') {\n    scale = scalePoint()\n      .range([range[0], range[1]])\n      .domain(domain);\n  }\n\n  return scale;\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  HostListener,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { scaleLinear } from 'd3-scale';\n\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { getScaleType } from '../common/domain.helper';\nimport { getDomain, getScale } from './bubble-chart.utils';\nimport { id } from '../utils/id';\n\n@Component({\n  selector: 'ngx-charts-bubble-chart',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [activeEntries]=\"activeEntries\"\n      [legendOptions]=\"legendOptions\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"bubble-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [showGridLines]=\"showGridLines\"\n          [dims]=\"dims\"\n          [xScale]=\"xScale\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        />\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [showGridLines]=\"showGridLines\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        />\n        <svg:rect\n          class=\"bubble-chart-area\"\n          x=\"0\"\n          y=\"0\"\n          [attr.width]=\"dims.width\"\n          [attr.height]=\"dims.height\"\n          style=\"fill: rgb(255, 0, 0); opacity: 0; cursor: 'auto';\"\n          (mouseenter)=\"deactivateAll()\"\n        />\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of data; trackBy: trackBy\" [@animationState]=\"'active'\">\n            <svg:g\n              ngx-charts-bubble-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [rScale]=\"rScale\"\n              [xScaleType]=\"xScaleType\"\n              [yScaleType]=\"yScaleType\"\n              [xAxisLabel]=\"xAxisLabel\"\n              [yAxisLabel]=\"yAxisLabel\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event, series)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1\n        }),\n        animate(\n          500,\n          style({\n            opacity: 0\n          })\n        )\n      ])\n    ])\n  ]\n})\nexport class BubbleChartComponent extends BaseChartComponent {\n  @Input() showGridLines: boolean = true;\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis: boolean = true;\n  @Input() yAxis: boolean = true;\n  @Input() showXAxisLabel: boolean;\n  @Input() showYAxisLabel: boolean;\n  @Input() xAxisLabel: string;\n  @Input() yAxisLabel: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() roundDomains: boolean = false;\n  @Input() maxRadius = 10;\n  @Input() minRadius = 3;\n  @Input() autoScale: boolean;\n  @Input() schemeType = 'ordinal';\n  @Input() tooltipDisabled: boolean = false;\n  @Input() xScaleMin: any;\n  @Input() xScaleMax: any;\n  @Input() yScaleMin: any;\n  @Input() yScaleMax: any;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  colors: ColorHelper;\n  scaleType = 'linear';\n  margin = [10, 20, 10, 20];\n  bubblePadding = [0, 0, 0, 0];\n  data: any;\n\n  legendOptions: any;\n  transform: string;\n\n  clipPath: string;\n  clipPathId: string;\n\n  seriesDomain: any[];\n  xDomain: any[];\n  yDomain: any[];\n  rDomain: number[];\n\n  xScaleType: string;\n  yScaleType: string;\n\n  yScale: any;\n  xScale: any;\n  rScale: any;\n\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n\n  activeEntries: any[] = [];\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    this.seriesDomain = this.results.map(d => d.name);\n    this.rDomain = this.getRDomain();\n    this.xDomain = this.getXDomain();\n    this.yDomain = this.getYDomain();\n\n    this.transform = `translate(${this.dims.xOffset},${this.margin[0]})`;\n\n    const colorDomain = this.schemeType === 'ordinal' ? this.seriesDomain : this.rDomain;\n    this.colors = new ColorHelper(this.scheme, this.schemeType, colorDomain, this.customColors);\n\n    this.data = this.results;\n\n    this.minRadius = Math.max(this.minRadius, 1);\n    this.maxRadius = Math.max(this.maxRadius, 1);\n\n    this.rScale = this.getRScale(this.rDomain, [this.minRadius, this.maxRadius]);\n\n    this.bubblePadding = [0, 0, 0, 0];\n    this.setScales();\n\n    this.bubblePadding = this.getBubblePadding();\n    this.setScales();\n\n    this.legendOptions = this.getLegendOptions();\n\n    this.clipPathId = 'clip' + id().toString();\n    this.clipPath = `url(#${this.clipPathId})`;\n  }\n\n  @HostListener('mouseleave')\n  hideCircles(): void {\n    this.deactivateAll();\n  }\n\n  onClick(data, series?): void {\n    if (series) {\n      data.series = series.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  getBubblePadding() {\n    let yMin = 0;\n    let xMin = 0;\n    let yMax = this.dims.height;\n    let xMax = this.dims.width;\n\n    for (const s of this.data) {\n      for (const d of s.series) {\n        const r = this.rScale(d.r);\n        const cx = this.xScaleType === 'linear' ? this.xScale(Number(d.x)) : this.xScale(d.x);\n        const cy = this.yScaleType === 'linear' ? this.yScale(Number(d.y)) : this.yScale(d.y);\n        xMin = Math.max(r - cx, xMin);\n        yMin = Math.max(r - cy, yMin);\n        yMax = Math.max(cy + r, yMax);\n        xMax = Math.max(cx + r, xMax);\n      }\n    }\n\n    xMax = Math.max(xMax - this.dims.width, 0);\n    yMax = Math.max(yMax - this.dims.height, 0);\n\n    return [yMin, xMax, yMax, xMin];\n  }\n\n  setScales() {\n    let width = this.dims.width;\n    if (this.xScaleMin === undefined && this.xScaleMax === undefined) {\n      width = width - this.bubblePadding[1];\n    }\n    let height = this.dims.height;\n    if (this.yScaleMin === undefined && this.yScaleMax === undefined) {\n      height = height - this.bubblePadding[2];\n    }\n    this.xScale = this.getXScale(this.xDomain, width);\n    this.yScale = this.getYScale(this.yDomain, height);\n  }\n\n  getYScale(domain, height): any {\n    return getScale(domain, [height, this.bubblePadding[0]], this.yScaleType, this.roundDomains);\n  }\n\n  getXScale(domain, width): any {\n    return getScale(domain, [this.bubblePadding[3], width], this.xScaleType, this.roundDomains);\n  }\n\n  getRScale(domain, range): any {\n    const scale = scaleLinear()\n      .range(range)\n      .domain(domain);\n\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getLegendOptions(): any {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      position: this.legendPosition,\n      title: undefined\n    };\n\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.seriesDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.rDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  getXDomain(): any[] {\n    const values = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (!values.includes(d.x)) {\n          values.push(d.x);\n        }\n      }\n    }\n\n    this.xScaleType = getScaleType(values);\n    return getDomain(values, this.xScaleType, this.autoScale, this.xScaleMin, this.xScaleMax);\n  }\n\n  getYDomain(): any[] {\n    const values = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (!values.includes(d.y)) {\n          values.push(d.y);\n        }\n      }\n    }\n\n    this.yScaleType = getScaleType(values);\n    return getDomain(values, this.yScaleType, this.autoScale, this.yScaleMin, this.yScaleMax);\n  }\n\n  getRDomain(): number[] {\n    let min = Infinity;\n    let max = -Infinity;\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        const value = Number(d.r) || 1;\n        min = Math.min(min, value);\n        max = Math.max(max, value);\n      }\n    }\n\n    return [min, max];\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item): void {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item): void {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({ value: entry, entries: [] });\n    }\n    this.activeEntries = [];\n  }\n\n  trackBy(index, item): string {\n    return item.name;\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  SimpleChanges,\n  EventEmitter,\n  OnChanges,\n  ChangeDetectionStrategy,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { formatLabel, escapeLabel } from '../common/label.helper';\n\n@Component({\n  selector: 'g[ngx-charts-bubble-series]',\n  template: `\n    <svg:g *ngFor=\"let circle of circles; trackBy: trackBy\">\n      <svg:g [attr.transform]=\"circle.transform\">\n        <svg:g\n          ngx-charts-circle\n          [@animationState]=\"'active'\"\n          class=\"circle\"\n          [cx]=\"0\"\n          [cy]=\"0\"\n          [r]=\"circle.radius\"\n          [fill]=\"circle.color\"\n          [style.opacity]=\"circle.opacity\"\n          [class.active]=\"circle.isActive\"\n          [pointerEvents]=\"'all'\"\n          [data]=\"circle.value\"\n          [classNames]=\"circle.classNames\"\n          (select)=\"onClick(circle.data)\"\n          (activate)=\"activateCircle(circle)\"\n          (deactivate)=\"deactivateCircle(circle)\"\n          ngx-tooltip\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipPlacement]=\"'top'\"\n          [tooltipType]=\"'tooltip'\"\n          [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipContext]=\"circle.data\"\n        />\n      </svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':enter', [\n        style({\n          opacity: 0,\n          transform: 'scale(0)'\n        }),\n        animate(250, style({ opacity: 1, transform: 'scale(1)' }))\n      ])\n    ])\n  ]\n})\nexport class BubbleSeriesComponent implements OnChanges {\n  @Input() data;\n  @Input() xScale;\n  @Input() yScale;\n  @Input() rScale;\n  @Input() xScaleType;\n  @Input() yScaleType;\n  @Input() colors;\n  @Input() visibleValue;\n  @Input() activeEntries: any[];\n  @Input() xAxisLabel: string;\n  @Input() yAxisLabel: string;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipTemplate: TemplateRef<any>;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n\n  areaPath: any;\n  circles: any[];\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.circles = this.getCircles();\n  }\n\n  getCircles(): any[] {\n    const seriesName = this.data.name;\n\n    return this.data.series\n      .map((d, i) => {\n        if (typeof d.y !== 'undefined' && typeof d.x !== 'undefined') {\n          const y = d.y;\n          const x = d.x;\n          const r = d.r;\n\n          const radius = this.rScale(r || 1);\n          const tooltipLabel = formatLabel(d.name);\n\n          const cx = this.xScaleType === 'linear' ? this.xScale(Number(x)) : this.xScale(x);\n          const cy = this.yScaleType === 'linear' ? this.yScale(Number(y)) : this.yScale(y);\n\n          const color = this.colors.scaleType === 'linear' ? this.colors.getColor(r) : this.colors.getColor(seriesName);\n\n          const isActive = !this.activeEntries.length ? true : this.isActive({ name: seriesName });\n          const opacity = isActive ? 1 : 0.3;\n\n          const data = Object.assign({}, d, {\n            series: seriesName,\n            name: d.name,\n            value: d.y,\n            x: d.x,\n            radius: d.r\n          });\n\n          return {\n            data,\n            x,\n            y,\n            r,\n            classNames: [`circle-data-${i}`],\n            value: y,\n            label: x,\n            cx,\n            cy,\n            radius,\n            tooltipLabel,\n            color,\n            opacity,\n            seriesName,\n            isActive,\n            transform: `translate(${cx},${cy})`\n          };\n        }\n      })\n      .filter(circle => circle !== undefined);\n  }\n\n  getTooltipText(circle): string {\n    const hasRadius = typeof circle.r !== 'undefined';\n    const hasTooltipLabel = circle.tooltipLabel && circle.tooltipLabel.length;\n    const hasSeriesName = circle.seriesName && circle.seriesName.length;\n\n    const radiusValue = hasRadius ? formatLabel(circle.r) : '';\n    const xAxisLabel = this.xAxisLabel && this.xAxisLabel !== '' ? `${this.xAxisLabel}:` : '';\n    const yAxisLabel = this.yAxisLabel && this.yAxisLabel !== '' ? `${this.yAxisLabel}:` : '';\n    const x = formatLabel(circle.x);\n    const y = formatLabel(circle.y);\n    const name =\n      hasSeriesName && hasTooltipLabel\n        ? `${circle.seriesName} â¢ ${circle.tooltipLabel}`\n        : circle.seriesName + circle.tooltipLabel;\n    const tooltipTitle =\n      hasSeriesName || hasTooltipLabel ? `<span class=\"tooltip-label\">${escapeLabel(name)}</span>` : '';\n\n    return `\n      ${tooltipTitle}\n      <span class=\"tooltip-label\">\n        <label>${escapeLabel(xAxisLabel)}</label> ${escapeLabel(x)}<br />\n        <label>${escapeLabel(yAxisLabel)}</label> ${escapeLabel(y)}\n      </span>\n      <span class=\"tooltip-val\">\n        ${escapeLabel(radiusValue)}\n      </span>\n    `;\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item !== undefined;\n  }\n\n  isVisible(circle): boolean {\n    if (this.activeEntries.length > 0) {\n      return this.isActive({ name: circle.seriesName });\n    }\n\n    return circle.opacity !== 0;\n  }\n\n  activateCircle(circle): void {\n    circle.barVisible = true;\n    this.activate.emit({ name: this.data.name });\n  }\n\n  deactivateCircle(circle): void {\n    circle.barVisible = false;\n    this.deactivate.emit({ name: this.data.name });\n  }\n\n  trackBy(index, circle): string {\n    return `${circle.data.series} ${circle.data.name}`;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { BubbleChartComponent } from './bubble-chart.component';\nimport { BubbleSeriesComponent } from './bubble-series.component';\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [BubbleChartComponent, BubbleSeriesComponent],\n  exports: [BubbleChartComponent, BubbleSeriesComponent]\n})\nexport class BubbleChartModule {}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  SimpleChanges,\n  ElementRef,\n  OnChanges,\n  ChangeDetectionStrategy,\n  HostListener\n} from '@angular/core';\nimport { select } from 'd3-selection';\n\nimport { id } from '../utils/id';\n\n@Component({\n  selector: 'g[ngx-charts-heat-map-cell]',\n  template: `\n    <svg:g [attr.transform]=\"transform\" class=\"cell\">\n      <defs *ngIf=\"gradient\">\n        <svg:g ngx-charts-svg-linear-gradient orientation=\"vertical\" [name]=\"gradientId\" [stops]=\"gradientStops\" />\n      </defs>\n      <svg:rect\n        [attr.fill]=\"gradient ? gradientUrl : fill\"\n        rx=\"3\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        class=\"cell\"\n        style=\"cursor: pointer\"\n        (click)=\"onClick()\"\n      />\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class HeatMapCellComponent implements OnChanges {\n  @Input() fill;\n  @Input() x;\n  @Input() y;\n  @Input() width;\n  @Input() height;\n  @Input() data;\n  @Input() label;\n  @Input() gradient: boolean = false;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n\n  element: HTMLElement;\n  transform: string;\n  activeRange: any[];\n  startOpacity: number;\n  gradientId: string;\n  gradientUrl: string;\n  gradientStops: any[];\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.transform = `translate(${this.x} , ${this.y})`;\n\n    this.startOpacity = 0.3;\n    this.gradientId = 'grad' + id().toString();\n    this.gradientUrl = `url(#${this.gradientId})`;\n    this.gradientStops = this.getGradientStops();\n\n    if (this.animations) {\n      this.loadAnimation();\n    }\n  }\n\n  getGradientStops() {\n    return [\n      {\n        offset: 0,\n        color: this.fill,\n        opacity: this.startOpacity\n      },\n      {\n        offset: 100,\n        color: this.fill,\n        opacity: 1\n      }\n    ];\n  }\n\n  loadAnimation(): void {\n    const node = select(this.element).select('.cell');\n    node.attr('opacity', 0);\n    this.animateToCurrentForm();\n  }\n\n  animateToCurrentForm(): void {\n    const node = select(this.element).select('.cell');\n\n    node\n      .transition()\n      .duration(750)\n      .attr('opacity', 1);\n  }\n\n  onClick() {\n    this.select.emit(this.data);\n  }\n\n  @HostListener('mouseenter')\n  onMouseEnter(): void {\n    this.activate.emit(this.data);\n  }\n\n  @HostListener('mouseleave')\n  onMouseLeave(): void {\n    this.deactivate.emit(this.data);\n  }\n}\n","import {\n  Component,\n  Input,\n  SimpleChanges,\n  Output,\n  EventEmitter,\n  OnChanges,\n  OnInit,\n  ChangeDetectionStrategy,\n  TemplateRef\n} from '@angular/core';\nimport { formatLabel, escapeLabel } from '../common/label.helper';\n\n@Component({\n  selector: 'g[ngx-charts-heat-map-cell-series]',\n  template: `\n    <svg:g\n      ngx-charts-heat-map-cell\n      *ngFor=\"let c of cells; trackBy: trackBy\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [fill]=\"c.fill\"\n      [data]=\"c.data\"\n      (select)=\"onClick(c.cell)\"\n      (activate)=\"activate.emit(c.cell)\"\n      (deactivate)=\"deactivate.emit(c.cell)\"\n      [gradient]=\"gradient\"\n      [animations]=\"animations\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"'top'\"\n      [tooltipType]=\"'tooltip'\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(c)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"{ series: c.series, name: c.label, value: c.data }\"\n    ></svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class HeatCellSeriesComponent implements OnChanges, OnInit {\n  @Input() data;\n  @Input() colors;\n  @Input() xScale;\n  @Input() yScale;\n  @Input() gradient: boolean;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipText: any;\n  @Input() tooltipTemplate: TemplateRef<any>;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  cells: any[];\n\n  ngOnInit() {\n    if (!this.tooltipText) {\n      this.tooltipText = this.getTooltipText;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.cells = this.getCells();\n  }\n\n  getCells() {\n    const cells = [];\n\n    this.data.map(row => {\n      row.series.map(cell => {\n        const value = cell.value;\n        cell.series = row.name;\n\n        cells.push({\n          row,\n          cell,\n          x: this.xScale(row.name),\n          y: this.yScale(cell.name),\n          width: this.xScale.bandwidth(),\n          height: this.yScale.bandwidth(),\n          fill: this.colors.getColor(value),\n          data: value,\n          label: formatLabel(cell.name),\n          series: row.name\n        });\n      });\n    });\n\n    return cells;\n  }\n\n  getTooltipText({ label, data, series }): string {\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(series)} â¢ ${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${data.toLocaleString()}</span>\n    `;\n  }\n\n  trackBy(index, item): string {\n    return item.tooltipText;\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n}\n","import {\n  Component,\n  Input,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef,\n  Output,\n  EventEmitter\n} from '@angular/core';\nimport { scaleBand } from 'd3-scale';\n\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { getScaleType } from '../common/domain.helper';\n\n@Component({\n  selector: 'ngx-charts-heat-map',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [animations]=\"animations\"\n      [legendOptions]=\"legendOptions\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"heat-map chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:rect\n          *ngFor=\"let rect of rects\"\n          [attr.x]=\"rect.x\"\n          [attr.y]=\"rect.y\"\n          [attr.rx]=\"rect.rx\"\n          [attr.width]=\"rect.width\"\n          [attr.height]=\"rect.height\"\n          [attr.fill]=\"rect.fill\"\n        />\n        <svg:g\n          ngx-charts-heat-map-cell-series\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [data]=\"results\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipText]=\"tooltipText\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event, undefined)\"\n          (deactivate)=\"onDeactivate($event, undefined)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class HeatMapComponent extends BaseChartComponent {\n  @Input() legend;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() gradient: boolean;\n  @Input() innerPadding: number | number[] = 8;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipText: any;\n  @Input() min: any;\n  @Input() max: any;\n  @Input() activeEntries: any[] = [];\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  xDomain: any[];\n  yDomain: any[];\n  valueDomain: any[];\n  xScale: any;\n  yScale: any;\n  color: any;\n  colors: ColorHelper;\n  colorScale: any;\n  transform: string;\n  rects: any[];\n  margin = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: any;\n  scaleType: string = 'linear';\n\n  update(): void {\n    super.update();\n\n    this.formatDates();\n\n    this.xDomain = this.getXDomain();\n    this.yDomain = this.getYDomain();\n    this.valueDomain = this.getValueDomain();\n\n    this.scaleType = getScaleType(this.valueDomain, false);\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.scaleType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.scaleType === 'linear') {\n      let min = this.min;\n      let max = this.max;\n      if (!this.min) {\n        min = Math.min(0, ...this.valueDomain);\n      }\n      if (!this.max) {\n        max = Math.max(...this.valueDomain);\n      }\n      this.valueDomain = [min, max];\n    }\n\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    this.rects = this.getRects();\n  }\n\n  getXDomain(): any {\n    const domain = [];\n    for (const group of this.results) {\n      if (!domain.includes(group.name)) {\n        domain.push(group.name);\n      }\n    }\n\n    return domain;\n  }\n\n  getYDomain(): any[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.name)) {\n          domain.push(d.name);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getValueDomain(): any[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.value)) {\n          domain.push(d.value);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  /**\n   * Converts the input to gap paddingInner in fraction\n   * Supports the following inputs:\n   *    Numbers: 8\n   *    Strings: \"8\", \"8px\", \"8%\"\n   *    Arrays: [8,2], \"8,2\", \"[8,2]\"\n   *    Mixed: [8,\"2%\"], [\"8px\",\"2%\"], \"8,2%\", \"[8,2%]\"\n   *\n   * @memberOf HeatMapComponent\n   */\n  getDimension(value: string | number | Array<string | number>, index = 0, N: number, L: number): number {\n    if (typeof value === 'string') {\n      value = value\n        .replace('[', '')\n        .replace(']', '')\n        .replace('px', '')\n        // tslint:disable-next-line: quotemark\n        .replace(\"'\", '');\n\n      if (value.includes(',')) {\n        value = value.split(',');\n      }\n    }\n    if (Array.isArray(value) && typeof index === 'number') {\n      return this.getDimension(value[index], null, N, L);\n    }\n    if (typeof value === 'string' && value.includes('%')) {\n      return +value.replace('%', '') / 100;\n    }\n    return N / (L / +value + 1);\n  }\n\n  getXScale(): any {\n    const f = this.getDimension(this.innerPadding, 0, this.xDomain.length, this.dims.width);\n    return scaleBand()\n      .rangeRound([0, this.dims.width])\n      .domain(this.xDomain)\n      .paddingInner(f);\n  }\n\n  getYScale(): any {\n    const f = this.getDimension(this.innerPadding, 1, this.yDomain.length, this.dims.height);\n    return scaleBand()\n      .rangeRound([this.dims.height, 0])\n      .domain(this.yDomain)\n      .paddingInner(f);\n  }\n\n  getRects(): any[] {\n    const rects = [];\n\n    this.xDomain.map(xVal => {\n      this.yDomain.map(yVal => {\n        rects.push({\n          x: this.xScale(xVal),\n          y: this.yScale(yVal),\n          rx: 3,\n          width: this.xScale.bandwidth(),\n          height: this.yScale.bandwidth(),\n          fill: 'rgba(200,200,200,0.03)'\n        });\n      });\n    });\n\n    return rects;\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    this.colors = new ColorHelper(this.scheme, this.scaleType, this.valueDomain);\n  }\n\n  getLegendOptions() {\n    return {\n      scaleType: this.scaleType,\n      domain: this.valueDomain,\n      colors: this.scaleType === 'ordinal' ? this.colors : this.colors.scale,\n      title: this.scaleType === 'ordinal' ? this.legendTitle : undefined,\n      position: this.legendPosition\n    };\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results\n      .map(g => g.series)\n      .flat()\n      .filter(i => {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n\n    this.activeEntries = [...items];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { HeatMapCellComponent } from './heat-map-cell.component';\nimport { HeatCellSeriesComponent } from './heat-map-cell-series.component';\nimport { HeatMapComponent } from './heat-map.component';\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent],\n  exports: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent]\n})\nexport class HeatMapModule {}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  ElementRef,\n  ChangeDetectionStrategy,\n  SimpleChanges\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { select } from 'd3-selection';\n\n@Component({\n  selector: 'g[ngx-charts-line]',\n  template: `\n    <svg:path\n      [@animationState]=\"'active'\"\n      class=\"line\"\n      [attr.d]=\"initialPath\"\n      [attr.fill]=\"fill\"\n      [attr.stroke]=\"stroke\"\n      stroke-width=\"1.5px\"\n    />\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':enter', [\n        style({\n          strokeDasharray: 2000,\n          strokeDashoffset: 2000\n        }),\n        animate(\n          1000,\n          style({\n            strokeDashoffset: 0\n          })\n        )\n      ])\n    ])\n  ]\n})\nexport class LineComponent implements OnChanges {\n  @Input() path;\n  @Input() stroke;\n  @Input() data;\n  @Input() fill: string = 'none';\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n\n  initialized: boolean = false;\n  initialPath: string;\n\n  constructor(private element: ElementRef) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (!this.initialized) {\n      this.initialized = true;\n      this.initialPath = this.path;\n    } else {\n      this.updatePathEl();\n    }\n  }\n\n  updatePathEl(): void {\n    const node = select(this.element.nativeElement).select('.line');\n\n    if (this.animations) {\n      node\n        .transition()\n        .duration(750)\n        .attr('d', this.path);\n    } else {\n      node.attr('d', this.path);\n    }\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  HostListener,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { scaleLinear, scaleTime, scalePoint } from 'd3-scale';\nimport { curveLinear } from 'd3-shape';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { id } from '../utils/id';\nimport { getUniqueXDomainValues, getScaleType } from '../common/domain.helper';\n\n@Component({\n  selector: 'ngx-charts-line-chart',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"line-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [referenceLines]=\"referenceLines\"\n          [showRefLines]=\"showRefLines\"\n          [showRefLabels]=\"showRefLabels\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\" [@animationState]=\"'active'\">\n            <svg:g\n              ngx-charts-line-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [curve]=\"curve\"\n              [rangeFillOpacity]=\"rangeFillOpacity\"\n              [hasRange]=\"hasRange\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [activeEntries]=\"activeEntries\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [scaleType]=\"scaleType\"\n        [legend]=\"legend\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-line-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [curve]=\"curve\"\n            [hasRange]=\"hasRange\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1\n        }),\n        animate(\n          500,\n          style({\n            opacity: 0\n          })\n        )\n      ])\n    ])\n  ]\n})\nexport class LineChartComponent extends BaseChartComponent {\n  @Input() legend;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() autoScale;\n  @Input() timeline;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() curve: any = curveLinear;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() rangeFillOpacity: number;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() roundDomains: boolean = false;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() showRefLines: boolean = false;\n  @Input() referenceLines: any;\n  @Input() showRefLabels: boolean = true;\n  @Input() xScaleMin: any;\n  @Input() xScaleMax: any;\n  @Input() yScaleMin: number;\n  @Input() yScaleMax: number;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n  @ContentChild('seriesTooltipTemplate') seriesTooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  xSet: any;\n  xDomain: any;\n  yDomain: any;\n  seriesDomain: any;\n  yScale: any;\n  xScale: any;\n  colors: ColorHelper;\n  scaleType: string;\n  transform: string;\n  clipPath: string;\n  clipPathId: string;\n  series: any;\n  areaPath: any;\n  margin = [10, 20, 10, 20];\n  hoveredVertical: any; // the value of the x axis that is hovered over\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  filteredDomain: any;\n  legendOptions: any;\n  hasRange: boolean; // whether the line has a min-max range around it\n  timelineWidth: any;\n  timelineHeight: number = 50;\n  timelineXScale: any;\n  timelineYScale: any;\n  timelineXDomain: any;\n  timelineTransform: any;\n  timelinePadding: number = 10;\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.timeline) {\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n    }\n\n    this.xDomain = this.getXDomain();\n    if (this.filteredDomain) {\n      this.xDomain = this.filteredDomain;\n    }\n\n    this.yDomain = this.getYDomain();\n    this.seriesDomain = this.getSeriesDomain();\n\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\n\n    this.updateTimeline();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n\n    this.clipPathId = 'clip' + id().toString();\n    this.clipPath = `url(#${this.clipPathId})`;\n  }\n\n  updateTimeline(): void {\n    if (this.timeline) {\n      this.timelineWidth = this.dims.width;\n      this.timelineXDomain = this.getXDomain();\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n    }\n  }\n\n  getXDomain(): any[] {\n    let values = getUniqueXDomainValues(this.results);\n\n    this.scaleType = getScaleType(values);\n    let domain = [];\n\n    if (this.scaleType === 'linear') {\n      values = values.map(v => Number(v));\n    }\n\n    let min;\n    let max;\n    if (this.scaleType === 'time' || this.scaleType === 'linear') {\n      min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\n\n      max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\n    }\n\n    if (this.scaleType === 'time') {\n      domain = [new Date(min), new Date(max)];\n      this.xSet = [...values].sort((a, b) => {\n        const aDate = a.getTime();\n        const bDate = b.getTime();\n        if (aDate > bDate) return 1;\n        if (bDate > aDate) return -1;\n        return 0;\n      });\n    } else if (this.scaleType === 'linear') {\n      domain = [min, max];\n      // Use compare function to sort numbers numerically\n      this.xSet = [...values].sort((a, b) => a - b);\n    } else {\n      domain = values;\n      this.xSet = values;\n    }\n\n    return domain;\n  }\n\n  getYDomain(): any[] {\n    const domain = [];\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (domain.indexOf(d.value) < 0) {\n          domain.push(d.value);\n        }\n        if (d.min !== undefined) {\n          this.hasRange = true;\n          if (domain.indexOf(d.min) < 0) {\n            domain.push(d.min);\n          }\n        }\n        if (d.max !== undefined) {\n          this.hasRange = true;\n          if (domain.indexOf(d.max) < 0) {\n            domain.push(d.max);\n          }\n        }\n      }\n    }\n\n    const values = [...domain];\n    if (!this.autoScale) {\n      values.push(0);\n    }\n\n    const min = this.yScaleMin ? this.yScaleMin : Math.min(...values);\n\n    const max = this.yScaleMax ? this.yScaleMax : Math.max(...values);\n\n    return [min, max];\n  }\n\n  getSeriesDomain(): any[] {\n    return this.results.map(d => d.name);\n  }\n\n  getXScale(domain, width): any {\n    let scale;\n\n    if (this.scaleType === 'time') {\n      scale = scaleTime()\n        .range([0, width])\n        .domain(domain);\n    } else if (this.scaleType === 'linear') {\n      scale = scaleLinear()\n        .range([0, width])\n        .domain(domain);\n\n      if (this.roundDomains) {\n        scale = scale.nice();\n      }\n    } else if (this.scaleType === 'ordinal') {\n      scale = scalePoint()\n        .range([0, width])\n        .padding(0.1)\n        .domain(domain);\n    }\n\n    return scale;\n  }\n\n  getYScale(domain, height): any {\n    const scale = scaleLinear()\n      .range([height, 0])\n      .domain(domain);\n\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  updateDomain(domain): void {\n    this.filteredDomain = domain;\n    this.xDomain = this.filteredDomain;\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n  }\n\n  updateHoveredVertical(item): void {\n    this.hoveredVertical = item.value;\n    this.deactivateAll();\n  }\n\n  @HostListener('mouseleave')\n  hideCircles(): void {\n    this.hoveredVertical = null;\n    this.deactivateAll();\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  trackBy(index, item): string {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.seriesDomain;\n    } else {\n      domain = this.yDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.seriesDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors.scale;\n    }\n    return opts;\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item) {\n    this.deactivateAll();\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({ value: entry, entries: [] });\n    }\n    this.activeEntries = [];\n  }\n}\n","import { Component, Input, OnChanges, SimpleChanges, ChangeDetectionStrategy } from '@angular/core';\nimport { area, line } from 'd3-shape';\n\nimport { id } from '../utils/id';\nimport { sortLinear, sortByTime, sortByDomain } from '../utils/sort';\n\n@Component({\n  selector: 'g[ngx-charts-line-series]',\n  template: `\n    <svg:g>\n      <defs>\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          *ngIf=\"hasGradient\"\n          orientation=\"vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:g\n        ngx-charts-area\n        class=\"line-highlight\"\n        [data]=\"data\"\n        [path]=\"areaPath\"\n        [fill]=\"hasGradient ? gradientUrl : colors.getColor(data.name)\"\n        [opacity]=\"0.25\"\n        [startOpacity]=\"0\"\n        [gradient]=\"true\"\n        [stops]=\"areaGradientStops\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n        [animations]=\"animations\"\n      />\n      <svg:g\n        ngx-charts-line\n        class=\"line-series\"\n        [data]=\"data\"\n        [path]=\"path\"\n        [stroke]=\"stroke\"\n        [animations]=\"animations\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n      />\n      <svg:g\n        ngx-charts-area\n        *ngIf=\"hasRange\"\n        class=\"line-series-range\"\n        [data]=\"data\"\n        [path]=\"outerPath\"\n        [fill]=\"hasGradient ? gradientUrl : colors.getColor(data.name)\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n        [opacity]=\"rangeFillOpacity\"\n        [animations]=\"animations\"\n      />\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LineSeriesComponent implements OnChanges {\n  @Input() data;\n  @Input() xScale;\n  @Input() yScale;\n  @Input() colors;\n  @Input() scaleType;\n  @Input() curve: any;\n  @Input() activeEntries: any[];\n  @Input() rangeFillOpacity: number;\n  @Input() hasRange: boolean;\n  @Input() animations: boolean = true;\n\n  path: string;\n  outerPath: string;\n  areaPath: string;\n  gradientId: string;\n  gradientUrl: string;\n  hasGradient: boolean;\n  gradientStops: any[];\n  areaGradientStops: any[];\n  stroke: any;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.updateGradients();\n\n    const data = this.sortData(this.data.series);\n\n    const lineGen = this.getLineGenerator();\n    this.path = lineGen(data) || '';\n\n    const areaGen = this.getAreaGenerator();\n    this.areaPath = areaGen(data) || '';\n\n    if (this.hasRange) {\n      const range = this.getRangeGenerator();\n      this.outerPath = range(data) || '';\n    }\n\n    if (this.hasGradient) {\n      this.stroke = this.gradientUrl;\n      const values = this.data.series.map(d => d.value);\n      const max = Math.max(...values);\n      const min = Math.min(...values);\n      if (max === min) {\n        this.stroke = this.colors.getColor(max);\n      }\n    } else {\n      this.stroke = this.colors.getColor(this.data.name);\n    }\n  }\n\n  getLineGenerator(): any {\n    return line<any>()\n      .x(d => {\n        const label = d.name;\n        let value;\n        if (this.scaleType === 'time') {\n          value = this.xScale(label);\n        } else if (this.scaleType === 'linear') {\n          value = this.xScale(Number(label));\n        } else {\n          value = this.xScale(label);\n        }\n        return value;\n      })\n      .y(d => this.yScale(d.value))\n      .curve(this.curve);\n  }\n\n  getRangeGenerator(): any {\n    return area<any>()\n      .x(d => {\n        const label = d.name;\n        let value;\n        if (this.scaleType === 'time') {\n          value = this.xScale(label);\n        } else if (this.scaleType === 'linear') {\n          value = this.xScale(Number(label));\n        } else {\n          value = this.xScale(label);\n        }\n        return value;\n      })\n      .y0(d => this.yScale(typeof d.min === 'number' ? d.min : d.value))\n      .y1(d => this.yScale(typeof d.max === 'number' ? d.max : d.value))\n      .curve(this.curve);\n  }\n\n  getAreaGenerator(): any {\n    const xProperty = d => {\n      const label = d.name;\n      return this.xScale(label);\n    };\n\n    return area<any>()\n      .x(xProperty)\n      .y0(() => this.yScale.range()[0])\n      .y1(d => this.yScale(d.value))\n      .curve(this.curve);\n  }\n\n  sortData(data) {\n    if (this.scaleType === 'linear') {\n      data = sortLinear(data, 'name');\n    } else if (this.scaleType === 'time') {\n      data = sortByTime(data, 'name');\n    } else {\n      data = sortByDomain(data, 'name', 'asc', this.xScale.domain());\n    }\n\n    return data;\n  }\n\n  updateGradients() {\n    if (this.colors.scaleType === 'linear') {\n      this.hasGradient = true;\n      this.gradientId = 'grad' + id().toString();\n      this.gradientUrl = `url(#${this.gradientId})`;\n      const values = this.data.series.map(d => d.value);\n      const max = Math.max(...values);\n      const min = Math.min(...values);\n      this.gradientStops = this.colors.getLinearGradientStops(max, min);\n      this.areaGradientStops = this.colors.getLinearGradientStops(max);\n    } else {\n      this.hasGradient = false;\n      this.gradientStops = undefined;\n      this.areaGradientStops = undefined;\n    }\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item !== undefined;\n  }\n\n  isInactive(entry): boolean {\n    if (!this.activeEntries || this.activeEntries.length === 0) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item === undefined;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { LineComponent } from './line.component';\nimport { LineChartComponent } from './line-chart.component';\nimport { LineSeriesComponent } from './line-series.component';\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [LineComponent, LineChartComponent, LineSeriesComponent],\n  exports: [LineComponent, LineChartComponent, LineSeriesComponent]\n})\nexport class LineChartModule {}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { scaleLinear, scaleTime, scalePoint } from 'd3-scale';\nimport { curveCardinalClosed } from 'd3-shape';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { getScaleType } from '../common/domain.helper';\nimport { isDate } from '../utils/types';\n\nconst twoPI = 2 * Math.PI;\n\n@Component({\n  selector: 'ngx-charts-polar-chart',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g class=\"polar-chart chart\" [attr.transform]=\"transform\">\n        <svg:g [attr.transform]=\"transformPlot\">\n          <svg:circle class=\"polar-chart-background\" cx=\"0\" cy=\"0\" [attr.r]=\"this.outerRadius\" />\n          <svg:g *ngIf=\"showGridLines\">\n            <svg:circle\n              *ngFor=\"let r of radiusTicks\"\n              class=\"gridline-path radial-gridline-path\"\n              cx=\"0\"\n              cy=\"0\"\n              [attr.r]=\"r\"\n            />\n          </svg:g>\n          <svg:g *ngIf=\"xAxis\">\n            <svg:g\n              ngx-charts-pie-label\n              *ngFor=\"let tick of thetaTicks\"\n              [data]=\"tick\"\n              [radius]=\"outerRadius\"\n              [label]=\"tick.label\"\n              [max]=\"outerRadius\"\n              [value]=\"showGridLines ? 1 : outerRadius\"\n              [explodeSlices]=\"true\"\n              [animations]=\"animations\"\n              [labelTrim]=\"labelTrim\"\n              [labelTrimSize]=\"labelTrimSize\"\n            ></svg:g>\n          </svg:g>\n        </svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          [attr.transform]=\"transformYAxis\"\n          *ngIf=\"yAxis\"\n          [yScale]=\"yAxisScale\"\n          [dims]=\"yAxisDims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-axis-label\n          *ngIf=\"xAxis && showXAxisLabel\"\n          [label]=\"xAxisLabel\"\n          [offset]=\"labelOffset\"\n          [orient]=\"'bottom'\"\n          [height]=\"dims.height\"\n          [width]=\"dims.width\"\n        ></svg:g>\n        <svg:g [attr.transform]=\"transformPlot\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\" [@animationState]=\"'active'\">\n            <svg:g\n              ngx-charts-polar-series\n              [gradient]=\"gradient\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [curve]=\"curve\"\n              [rangeFillOpacity]=\"rangeFillOpacity\"\n              [animations]=\"animations\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: [\n    '../common/base-chart.component.scss',\n    '../pie-chart/pie-chart.component.scss',\n    './polar-chart.component.scss'\n  ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1\n        }),\n        animate(\n          500,\n          style({\n            opacity: 0\n          })\n        )\n      ])\n    ])\n  ]\n})\nexport class PolarChartComponent extends BaseChartComponent {\n  @Input() legend: boolean;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis: boolean;\n  @Input() yAxis: boolean;\n  @Input() showXAxisLabel: boolean;\n  @Input() showYAxisLabel: boolean;\n  @Input() xAxisLabel: string;\n  @Input() yAxisLabel: string;\n  @Input() autoScale: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() curve: any = curveCardinalClosed;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() rangeFillOpacity: number = 0.15;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: (o: any) => any;\n  @Input() yAxisTickFormatting: (o: any) => any;\n  @Input() roundDomains: boolean = false;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() showSeriesOnHover: boolean = true;\n  @Input() gradient: boolean = false;\n  @Input() yAxisMinScale: number = 0;\n  @Input() labelTrim: boolean = true;\n  @Input() labelTrimSize: number = 10;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  yAxisDims: ViewDimensions;\n  labelOffset: number;\n  xDomain: any;\n  yDomain: any;\n  seriesDomain: any;\n  yScale: any; // -> rScale\n  xScale: any; // -> tScale\n  yAxisScale: any; // -> yScale\n  colors: ColorHelper;\n  scaleType: string;\n  transform: string;\n  transformPlot: string;\n  transformYAxis: string;\n  transformXAxis: string;\n  series: any; // ???\n  margin = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  filteredDomain: any;\n  legendOptions: any;\n  thetaTicks: any[];\n  radiusTicks: number[];\n  outerRadius: number;\n\n  update(): void {\n    super.update();\n\n    this.setDims();\n\n    this.setScales();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.setTicks();\n  }\n\n  setDims() {\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    const halfWidth = Math.floor(this.dims.width / 2);\n    const halfHeight = Math.floor(this.dims.height / 2);\n\n    const outerRadius = (this.outerRadius = Math.min(halfHeight / 1.5, halfWidth / 1.5));\n\n    const yOffset = Math.max(0, halfHeight - outerRadius);\n\n    this.yAxisDims = {\n      ...this.dims,\n      width: halfWidth\n    };\n\n    this.transform = `translate(${this.dims.xOffset}, ${this.margin[0]})`;\n    this.transformYAxis = `translate(0, ${yOffset})`;\n    this.labelOffset = this.dims.height + 40;\n    this.transformPlot = `translate(${halfWidth}, ${halfHeight})`;\n  }\n\n  setScales() {\n    const xValues = this.getXValues();\n    this.scaleType = getScaleType(xValues);\n    this.xDomain = this.filteredDomain || this.getXDomain(xValues);\n\n    this.yDomain = this.getYDomain();\n    this.seriesDomain = this.getSeriesDomain();\n\n    this.xScale = this.getXScale(this.xDomain, twoPI);\n    this.yScale = this.getYScale(this.yDomain, this.outerRadius);\n    this.yAxisScale = this.getYScale(this.yDomain.reverse(), this.outerRadius);\n  }\n\n  setTicks() {\n    let tickFormat;\n    if (this.xAxisTickFormatting) {\n      tickFormat = this.xAxisTickFormatting;\n    } else if (this.xScale.tickFormat) {\n      tickFormat = this.xScale.tickFormat.apply(this.xScale, [5]);\n    } else {\n      tickFormat = d => {\n        if (isDate(d)) {\n          return d.toLocaleDateString();\n        }\n        return d.toLocaleString();\n      };\n    }\n\n    const outerRadius = this.outerRadius;\n    const s = 1.1;\n\n    this.thetaTicks = this.xDomain.map(d => {\n      const startAngle = this.xScale(d);\n      const dd = s * outerRadius * (startAngle > Math.PI ? -1 : 1);\n      const label = tickFormat(d);\n\n      const startPos = [outerRadius * Math.sin(startAngle), -outerRadius * Math.cos(startAngle)];\n      const pos = [dd, s * startPos[1]];\n      return {\n        innerRadius: 0,\n        outerRadius,\n        startAngle,\n        endAngle: startAngle,\n        value: outerRadius,\n        label,\n        startPos,\n        pos\n      };\n    });\n\n    const minDistance = 10;\n\n    /* from pie chart, abstract out -*/\n    for (let i = 0; i < this.thetaTicks.length - 1; i++) {\n      const a = this.thetaTicks[i];\n\n      for (let j = i + 1; j < this.thetaTicks.length; j++) {\n        const b = this.thetaTicks[j];\n        // if they're on the same side\n        if (b.pos[0] * a.pos[0] > 0) {\n          // if they're overlapping\n          const o = minDistance - Math.abs(b.pos[1] - a.pos[1]);\n          if (o > 0) {\n            // push the second up or down\n            b.pos[1] += Math.sign(b.pos[0]) * o;\n          }\n        }\n      }\n    }\n\n    this.radiusTicks = this.yAxisScale.ticks(Math.floor(this.dims.height / 50)).map(d => this.yScale(d));\n  }\n\n  getXValues(): any[] {\n    const values = [];\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (!values.includes(d.name)) {\n          values.push(d.name);\n        }\n      }\n    }\n    return values;\n  }\n\n  getXDomain(values = this.getXValues()): any[] {\n    if (this.scaleType === 'time') {\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      return [min, max];\n    } else if (this.scaleType === 'linear') {\n      values = values.map(v => Number(v));\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      return [min, max];\n    }\n    return values;\n  }\n\n  getYValues(): any[] {\n    const domain = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (domain.indexOf(d.value) < 0) {\n          domain.push(d.value);\n        }\n        if (d.min !== undefined) {\n          if (domain.indexOf(d.min) < 0) {\n            domain.push(d.min);\n          }\n        }\n        if (d.max !== undefined) {\n          if (domain.indexOf(d.max) < 0) {\n            domain.push(d.max);\n          }\n        }\n      }\n    }\n    return domain;\n  }\n\n  getYDomain(domain = this.getYValues()): any[] {\n    let min = Math.min(...domain);\n    const max = Math.max(this.yAxisMinScale, ...domain);\n\n    min = Math.max(0, min);\n    if (!this.autoScale) {\n      min = Math.min(0, min);\n    }\n\n    return [min, max];\n  }\n\n  getSeriesDomain(): any[] {\n    return this.results.map(d => d.name);\n  }\n\n  getXScale(domain, width): any {\n    switch (this.scaleType) {\n      case 'time':\n        return scaleTime()\n          .range([0, width])\n          .domain(domain);\n      case 'linear':\n        const scale = scaleLinear()\n          .range([0, width])\n          .domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n      default:\n        return scalePoint()\n          .range([0, width - twoPI / domain.length])\n          .padding(0)\n          .domain(domain);\n    }\n  }\n\n  getYScale(domain, height): any {\n    const scale = scaleLinear()\n      .range([0, height])\n      .domain(domain);\n\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  onClick(data, series?): void {\n    if (series) {\n      data.series = series.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    const domain = this.schemeType === 'ordinal' ? this.seriesDomain : this.yDomain.reverse();\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    if (this.schemeType === 'ordinal') {\n      return {\n        scaleType: this.schemeType,\n        colors: this.colors,\n        domain: this.seriesDomain,\n        title: this.legendTitle,\n        position: this.legendPosition\n      };\n    }\n    return {\n      scaleType: this.schemeType,\n      colors: this.colors.scale,\n      domain: this.yDomain,\n      title: undefined,\n      position: this.legendPosition\n    };\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    if (idx > -1) {\n      return;\n    }\n    this.activeEntries = this.showSeriesOnHover ? [item, ...this.activeEntries] : this.activeEntries;\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({ value: entry, entries: [] });\n    }\n    this.activeEntries = [];\n  }\n\n  trackBy(index, item) {\n    return item.name;\n  }\n}\n","export function isDate(value) {\n  return toString.call(value) === '[object Date]';\n}\n\nexport function isNumber(value) {\n  return typeof value === 'number';\n}\n","import {\n  Component,\n  Input,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectionStrategy,\n  TemplateRef,\n  Output,\n  EventEmitter\n} from '@angular/core';\nimport { lineRadial } from 'd3-shape';\n\nimport { id } from '../utils/id';\nimport { sortLinear, sortByTime, sortByDomain } from '../utils/sort';\nimport { escapeLabel } from '../common/label.helper';\n\n@Component({\n  selector: 'g[ngx-charts-polar-series]',\n  template: `\n    <svg:g class=\"polar-charts-series\">\n      <defs>\n        <svg:g\n          ngx-charts-svg-radial-gradient\n          *ngIf=\"hasGradient\"\n          orientation=\"vertical\"\n          [color]=\"seriesColor\"\n          [name]=\"gradientId\"\n          [startOpacity]=\"0.25\"\n          [endOpacity]=\"1\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:g\n        ngx-charts-line\n        class=\"polar-series-path\"\n        [path]=\"path\"\n        [stroke]=\"hasGradient ? gradientUrl : seriesColor\"\n        [class.active]=\"active\"\n        [class.inactive]=\"inactive\"\n        [attr.fill-opacity]=\"rangeFillOpacity\"\n        [fill]=\"hasGradient ? gradientUrl : seriesColor\"\n        [animations]=\"animations\"\n      />\n      <svg:g\n        ngx-charts-circle\n        *ngFor=\"let circle of circles\"\n        class=\"circle\"\n        [cx]=\"circle.cx\"\n        [cy]=\"circle.cy\"\n        [r]=\"circleRadius\"\n        [fill]=\"circle.color\"\n        [style.opacity]=\"inactive ? 0.2 : 1\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"'top'\"\n        tooltipType=\"tooltip\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(circle)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"circle.data\"\n        (select)=\"select.emit(circle.data)\"\n        (activate)=\"activate.emit({ name: circle.data.series })\"\n        (deactivate)=\"deactivate.emit({ name: circle.data.series })\"\n      ></svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PolarSeriesComponent implements OnChanges {\n  @Input() name;\n  @Input() data;\n  @Input() xScale; // Theta\n  @Input() yScale; // R\n  @Input() colors;\n  @Input() scaleType;\n  @Input() curve: any;\n  @Input() activeEntries: any[];\n  @Input() rangeFillOpacity: number;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipText: (o: any) => string;\n  @Input() gradient: boolean = false;\n  @Input() tooltipTemplate: TemplateRef<any>;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n\n  path: string;\n  circles: any[];\n  circleRadius: number = 3;\n\n  outerPath: string;\n  areaPath: string;\n  gradientId: string;\n  gradientUrl: string;\n  hasGradient: boolean;\n  gradientStops: any[];\n  areaGradientStops: any[];\n  seriesColor: string;\n\n  active: boolean;\n  inactive: boolean;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.updateGradients();\n\n    const line = this.getLineGenerator();\n\n    const data = this.sortData(this.data.series);\n\n    const seriesName = this.data.name;\n    const linearScaleType = this.colors.scaleType === 'linear';\n    const min = this.yScale.domain()[0];\n    this.seriesColor = this.colors.getColor(linearScaleType ? min : seriesName);\n\n    this.path = line(data) || '';\n\n    this.circles = data.map(d => {\n      const a = this.getAngle(d);\n      const r = this.getRadius(d);\n      const value = d.value;\n\n      const color = this.colors.getColor(linearScaleType ? Math.abs(value) : seriesName);\n\n      const cData = Object.assign({}, d, {\n        series: seriesName,\n        value,\n        name: d.name\n      });\n\n      return {\n        data: cData,\n        cx: r * Math.sin(a),\n        cy: -r * Math.cos(a),\n        value,\n        color,\n        label: d.name\n      };\n    });\n\n    this.active = this.isActive(this.data);\n    this.inactive = this.isInactive(this.data);\n    this.tooltipText = this.tooltipText || (c => this.defaultTooltipText(c));\n  }\n\n  getAngle(d) {\n    const label = d.name;\n    if (this.scaleType === 'time') {\n      return this.xScale(label);\n    } else if (this.scaleType === 'linear') {\n      return this.xScale(Number(label));\n    }\n    return this.xScale(label);\n  }\n\n  getRadius(d) {\n    return this.yScale(d.value);\n  }\n\n  getLineGenerator(): any {\n    return lineRadial<any>()\n      .angle(d => this.getAngle(d))\n      .radius(d => this.getRadius(d))\n      .curve(this.curve);\n  }\n\n  sortData(data) {\n    if (this.scaleType === 'linear') {\n      return sortLinear(data, 'name');\n    } else if (this.scaleType === 'time') {\n      return sortByTime(data, 'name');\n    }\n    return sortByDomain(data, 'name', 'asc', this.xScale.domain());\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item !== undefined;\n  }\n\n  isInactive(entry): boolean {\n    if (!this.activeEntries || this.activeEntries.length === 0) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item === undefined;\n  }\n\n  defaultTooltipText({ label, value }): string {\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(this.data.name)} â¢ ${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${value.toLocaleString()}</span>\n    `;\n  }\n\n  updateGradients() {\n    this.hasGradient = this.gradient || this.colors.scaleType === 'linear';\n\n    if (!this.hasGradient) {\n      return;\n    }\n\n    this.gradientId = 'grad' + id().toString();\n    this.gradientUrl = `url(#${this.gradientId})`;\n\n    if (this.colors.scaleType === 'linear') {\n      const values = this.data.series.map(d => d.value);\n      const max = Math.max(...values);\n      const min = Math.min(...values);\n      this.gradientStops = this.colors.getLinearGradientStops(max, min);\n    } else {\n      this.gradientStops = undefined;\n    }\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  EventEmitter,\n  Input,\n  Output,\n  TemplateRef,\n  ViewEncapsulation\n} from '@angular/core';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { DataItem } from '../models/chart-data.model';\n\n@Component({\n  selector: 'ngx-charts-advanced-pie-chart',\n  template: `\n    <div [style.width.px]=\"width\" [style.height.px]=\"height\">\n      <div class=\"advanced-pie chart\" [style.width.px]=\"dims.width\" [style.height.px]=\"dims.height\">\n        <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n          <svg:g [attr.transform]=\"transform\" class=\"pie chart\">\n            <svg:g\n              ngx-charts-pie-series\n              [colors]=\"colors\"\n              [series]=\"results\"\n              [innerRadius]=\"innerRadius\"\n              [activeEntries]=\"activeEntries\"\n              [outerRadius]=\"outerRadius\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [tooltipText]=\"tooltipText\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n              [animations]=\"animations\"\n            ></svg:g>\n          </svg:g>\n        </ngx-charts-chart>\n      </div>\n      <div class=\"advanced-pie-legend-wrapper\" [style.width.px]=\"width - dims.width\" [style.height.px]=\"height\">\n        <ngx-charts-advanced-legend\n          [data]=\"results\"\n          [colors]=\"colors\"\n          [width]=\"width - dims.width - margin[1]\"\n          [label]=\"label\"\n          [animations]=\"animations\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"nameFormatting\"\n          [percentageFormatting]=\"percentageFormatting\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event, true)\"\n          (deactivate)=\"onDeactivate($event, true)\"\n        >\n        </ngx-charts-advanced-legend>\n      </div>\n    </div>\n  `,\n  styleUrls: ['../common/base-chart.component.scss', './advanced-pie-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AdvancedPieChartComponent extends BaseChartComponent {\n  @Input() gradient: boolean;\n  @Input() activeEntries: any[] = [];\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipText: any;\n  @Input() label: string = 'Total';\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  data: any;\n  dims: ViewDimensions;\n  domain: any[];\n  outerRadius: number;\n  innerRadius: number;\n  transform: string;\n  colors: ColorHelper;\n  legendWidth: number;\n  margin = [20, 20, 20, 20];\n\n  @Input() valueFormatting: (value: number) => any;\n  @Input() nameFormatting: (value: string) => any;\n  @Input() percentageFormatting: (value: number) => any;\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: (this.width * 4) / 12.0,\n      height: this.height,\n      margins: this.margin\n    });\n\n    this.formatDates();\n\n    this.domain = this.getDomain();\n    this.setColors();\n\n    const xOffset = this.dims.width / 2;\n    const yOffset = this.margin[0] + this.dims.height / 2;\n    this.legendWidth = this.width - this.dims.width - this.margin[1];\n\n    this.outerRadius = Math.min(this.dims.width, this.dims.height) / 2.5;\n    this.innerRadius = this.outerRadius * 0.75;\n\n    this.transform = `translate(${xOffset} , ${yOffset})`;\n  }\n\n  getDomain(): any[] {\n    return this.results.map(d => d.label);\n  }\n\n  onClick(data: DataItem) {\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    this.colors = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\n  }\n\n  onActivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import { Component, Input, OnChanges, SimpleChanges, ChangeDetectionStrategy } from '@angular/core';\nimport { arc } from 'd3-shape';\n\nimport { trimLabel } from '../common/trim-label.helper';\n\n@Component({\n  selector: 'g[ngx-charts-pie-label]',\n  template: `\n    <title>{{ label }}</title>\n    <svg:g [attr.transform]=\"attrTransform\" [style.transform]=\"styleTransform\" [style.transition]=\"textTransition\">\n      <svg:text\n        class=\"pie-label\"\n        [class.animation]=\"animations\"\n        dy=\".35em\"\n        [style.textAnchor]=\"textAnchor()\"\n        [style.shapeRendering]=\"'crispEdges'\"\n      >\n        {{ labelTrim ? trimLabel(label, labelTrimSize) : label }}\n      </svg:text>\n    </svg:g>\n    <svg:path\n      [attr.d]=\"line\"\n      [attr.stroke]=\"color\"\n      fill=\"none\"\n      class=\"pie-label-line line\"\n      [class.animation]=\"animations\"\n    ></svg:path>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PieLabelComponent implements OnChanges {\n  @Input() data;\n  @Input() radius;\n  @Input() label;\n  @Input() color;\n  @Input() max;\n  @Input() value;\n  @Input() explodeSlices;\n  @Input() animations: boolean = true;\n  @Input() labelTrim: boolean = true;\n  @Input() labelTrimSize: number = 10;\n\n  trimLabel: (label: string, max?: number) => string;\n  line: string;\n\n  private readonly isIE = /(edge|msie|trident)/i.test(navigator.userAgent);\n\n  constructor() {\n    this.trimLabel = trimLabel;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    let startRadius = this.radius;\n    if (this.explodeSlices) {\n      startRadius = (this.radius * this.value) / this.max;\n    }\n\n    const innerArc = arc()\n      .innerRadius(startRadius)\n      .outerRadius(startRadius);\n\n    // Calculate innerPos then scale outer position to match label position\n    const innerPos = innerArc.centroid(this.data);\n\n    let scale = this.data.pos[1] / innerPos[1];\n    if (this.data.pos[1] === 0 || innerPos[1] === 0) {\n      scale = 1;\n    }\n    const outerPos = [scale * innerPos[0], scale * innerPos[1]];\n\n    this.line = `M${innerPos}L${outerPos}L${this.data.pos}`;\n  }\n\n  get textX(): number {\n    return this.data.pos[0];\n  }\n\n  get textY(): number {\n    return this.data.pos[1];\n  }\n\n  get styleTransform(): string {\n    return this.isIE ? null : `translate3d(${this.textX}px,${this.textY}px, 0)`;\n  }\n\n  get attrTransform(): string {\n    return !this.isIE ? null : `translate(${this.textX},${this.textY})`;\n  }\n\n  get textTransition(): string {\n    return this.isIE || !this.animations ? null : 'transform 0.75s';\n  }\n\n  textAnchor(): any {\n    return this.midAngle(this.data) < Math.PI ? 'start' : 'end';\n  }\n\n  midAngle(d): number {\n    return d.startAngle + (d.endAngle - d.startAngle) / 2;\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ElementRef,\n  SimpleChanges,\n  OnChanges,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { interpolate } from 'd3-interpolate';\nimport { select } from 'd3-selection';\nimport { arc } from 'd3-shape';\n\nimport { id } from '../utils/id';\n/* tslint:disable */\nimport { MouseEvent } from '../events';\n\n@Component({\n  selector: 'g[ngx-charts-pie-arc]',\n  template: `\n    <svg:g class=\"arc-group\">\n      <svg:defs *ngIf=\"gradient\">\n        <svg:g\n          ngx-charts-svg-radial-gradient\n          [color]=\"fill\"\n          orientation=\"vertical\"\n          [name]=\"radialGradientId\"\n          [startOpacity]=\"startOpacity\"\n        />\n      </svg:defs>\n      <svg:path\n        [attr.d]=\"path\"\n        class=\"arc\"\n        [class.active]=\"isActive\"\n        [attr.fill]=\"getGradient()\"\n        (click)=\"onClick()\"\n        (dblclick)=\"onDblClick($event)\"\n        (mouseenter)=\"activate.emit(data)\"\n        (mouseleave)=\"deactivate.emit(data)\"\n        [style.pointer-events]=\"getPointerEvents()\"\n      />\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PieArcComponent implements OnChanges {\n  @Input() fill;\n  @Input() startAngle: number = 0;\n  @Input() endAngle: number = Math.PI * 2;\n  @Input() innerRadius;\n  @Input() outerRadius;\n  @Input() cornerRadius: number = 0;\n  @Input() value;\n  @Input() max;\n  @Input() data;\n  @Input() explodeSlices: boolean = false;\n  @Input() gradient: boolean = false;\n  @Input() animate: boolean = true;\n  @Input() pointerEvents: boolean = true;\n  @Input() isActive: boolean = false;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n  @Output() dblclick = new EventEmitter();\n\n  element: HTMLElement;\n  path: any;\n  startOpacity: number;\n  radialGradientId: string;\n  linearGradientId: string;\n  gradientFill: string;\n  initialized: boolean = false;\n  private _timeout;\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  getGradient() {\n    return this.gradient ? this.gradientFill : this.fill;\n  }\n\n  getPointerEvents() {\n    return this.pointerEvents ? 'auto' : 'none';\n  }\n\n  update(): void {\n    const calc = this.calculateArc();\n    this.startOpacity = 0.5;\n    this.radialGradientId = 'linearGrad' + id().toString();\n    this.gradientFill = `url(#${this.radialGradientId})`;\n\n    if (this.animate) {\n      if (this.initialized) {\n        this.updateAnimation();\n      } else {\n        this.loadAnimation();\n        this.initialized = true;\n      }\n    } else {\n      this.path = calc.startAngle(this.startAngle).endAngle(this.endAngle)();\n    }\n  }\n\n  calculateArc(): any {\n    let outerRadius = this.outerRadius;\n    if (this.explodeSlices && this.innerRadius === 0) {\n      outerRadius = (this.outerRadius * this.value) / this.max;\n    }\n\n    return arc()\n      .innerRadius(this.innerRadius)\n      .outerRadius(outerRadius)\n      .cornerRadius(this.cornerRadius);\n  }\n\n  loadAnimation(): void {\n    const node = select(this.element)\n      .selectAll('.arc')\n      .data([{ startAngle: this.startAngle, endAngle: this.endAngle }]);\n\n    const calc = this.calculateArc();\n\n    node\n      .transition()\n      .attrTween('d', function(d) {\n        (<any>this)._current = (<any>this)._current || d;\n        const copyOfD = Object.assign({}, d);\n        copyOfD.endAngle = copyOfD.startAngle;\n        const interpolater = interpolate(copyOfD, copyOfD);\n        (<any>this)._current = interpolater(0);\n        return function(t) {\n          return calc(interpolater(t));\n        };\n      })\n      .transition()\n      .duration(750)\n      .attrTween('d', function(d) {\n        (<any>this)._current = (<any>this)._current || d;\n        const interpolater = interpolate((<any>this)._current, d);\n        (<any>this)._current = interpolater(0);\n        return function(t) {\n          return calc(interpolater(t));\n        };\n      });\n  }\n\n  updateAnimation(): void {\n    const node = select(this.element)\n      .selectAll('.arc')\n      .data([{ startAngle: this.startAngle, endAngle: this.endAngle }]);\n\n    const calc = this.calculateArc();\n\n    node\n      .transition()\n      .duration(750)\n      .attrTween('d', function(d) {\n        (<any>this)._current = (<any>this)._current || d;\n        const interpolater = interpolate((<any>this)._current, d);\n        (<any>this)._current = interpolater(0);\n        return function(t) {\n          return calc(interpolater(t));\n        };\n      });\n  }\n\n  onClick(): void {\n    clearTimeout(this._timeout);\n    this._timeout = setTimeout(() => this.select.emit(this.data), 200);\n  }\n\n  onDblClick(event: MouseEvent) {\n    event.preventDefault();\n    event.stopPropagation();\n    clearTimeout(this._timeout);\n\n    this.dblclick.emit({\n      data: this.data,\n      nativeEvent: event\n    });\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  ViewEncapsulation,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { calculateViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { DataItem } from '../models/chart-data.model';\n\n@Component({\n  selector: 'ngx-charts-pie-chart',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"translation\" class=\"pie-chart chart\">\n        <svg:g\n          ngx-charts-pie-series\n          [colors]=\"colors\"\n          [series]=\"data\"\n          [showLabels]=\"labels\"\n          [labelFormatting]=\"labelFormatting\"\n          [trimLabels]=\"trimLabels\"\n          [maxLabelLength]=\"maxLabelLength\"\n          [activeEntries]=\"activeEntries\"\n          [innerRadius]=\"innerRadius\"\n          [outerRadius]=\"outerRadius\"\n          [explodeSlices]=\"explodeSlices\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipText]=\"tooltipText\"\n          (dblclick)=\"dblclick.emit($event)\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss', './pie-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PieChartComponent extends BaseChartComponent {\n  @Input() labels = false;\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() explodeSlices = false;\n  @Input() doughnut = false;\n  @Input() arcWidth = 0.25;\n  @Input() gradient: boolean;\n  @Input() activeEntries: any[] = [];\n  @Input() tooltipDisabled: boolean = false;\n  @Input() labelFormatting: any;\n  @Input() trimLabels: boolean = true;\n  @Input() maxLabelLength: number = 10;\n  @Input() tooltipText: any;\n  @Output() dblclick = new EventEmitter();\n  // optional margins\n  @Input() margins: number[];\n  @Output() select = new EventEmitter();\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  translation: string;\n  outerRadius: number;\n  innerRadius: number;\n  data: any;\n  colors: ColorHelper;\n  domain: any;\n  dims: any;\n  legendOptions: any;\n\n  update(): void {\n    super.update();\n\n    if (this.labels && this.hasNoOptionalMarginsSet()) {\n      this.margins = [30, 80, 30, 80];\n    } else if (!this.labels && this.hasNoOptionalMarginsSet()) {\n      // default value for margins\n      this.margins = [20, 20, 20, 20];\n    }\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margins,\n      showLegend: this.legend,\n      legendPosition: this.legendPosition\n    });\n\n    this.formatDates();\n\n    const xOffset = this.margins[3] + this.dims.width / 2;\n    const yOffset = this.margins[0] + this.dims.height / 2;\n    this.translation = `translate(${xOffset}, ${yOffset})`;\n    this.outerRadius = Math.min(this.dims.width, this.dims.height);\n    if (this.labels) {\n      // make room for labels\n      this.outerRadius /= 3;\n    } else {\n      this.outerRadius /= 2;\n    }\n    this.innerRadius = 0;\n    if (this.doughnut) {\n      this.innerRadius = this.outerRadius * (1 - this.arcWidth);\n    }\n\n    this.domain = this.getDomain();\n\n    // sort data according to domain\n    this.data = this.results.sort((a, b) => {\n      return this.domain.indexOf(a.name) - this.domain.indexOf(b.name);\n    });\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n  }\n\n  getDomain(): any[] {\n    return this.results.map(d => d.label);\n  }\n\n  onClick(data: DataItem): void {\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    this.colors = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    return {\n      scaleType: 'ordinal',\n      domain: this.domain,\n      colors: this.colors,\n      title: this.legendTitle,\n      position: this.legendPosition\n    };\n  }\n\n  onActivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  private hasNoOptionalMarginsSet(): boolean {\n    return !this.margins || this.margins.length <= 0;\n  }\n}\n","import { scaleBand } from 'd3-scale';\n\nexport function gridSize(dims, len, minWidth) {\n  let rows = 1;\n  let cols = len;\n  const width = dims.width;\n\n  if (width > minWidth) {\n    while (width / cols < minWidth) {\n      rows += 1;\n      cols = Math.ceil(len / rows);\n    }\n  }\n\n  return [cols, rows];\n}\n\nexport function gridLayout(dims, data, minWidth, designatedTotal) {\n  const xScale: any = scaleBand<number>();\n  const yScale: any = scaleBand<number>();\n  const width = dims.width;\n  const height = dims.height;\n\n  const [columns, rows] = gridSize(dims, data.length, minWidth);\n\n  const xDomain = [];\n  const yDomain = [];\n  for (let i = 0; i < rows; i++) {\n    yDomain.push(i);\n  }\n  for (let i = 0; i < columns; i++) {\n    xDomain.push(i);\n  }\n  xScale.domain(xDomain);\n  yScale.domain(yDomain);\n\n  xScale.rangeRound([0, width], 0.1);\n  yScale.rangeRound([0, height], 0.1);\n\n  const res = [];\n  const total = designatedTotal ? designatedTotal : getTotal(data);\n  const cardWidth = xScale.bandwidth();\n  const cardHeight = yScale.bandwidth();\n\n  for (let i = 0; i < data.length; i++) {\n    res[i] = {};\n    res[i].data = {\n      name: data[i] ? data[i].name : '',\n      value: data[i] ? data[i].value : undefined,\n      extra: data[i] ? data[i].extra : undefined,\n      label: data[i] ? data[i].label : ''\n    };\n    res[i].x = xScale(i % columns);\n    res[i].y = yScale(Math.floor(i / columns));\n    res[i].width = cardWidth;\n    res[i].height = cardHeight;\n    res[i].data.percent = total > 0 ? res[i].data.value / total : 0;\n    res[i].data.total = total;\n  }\n\n  return res;\n}\n\nfunction getTotal(results) {\n  return results.map(d => (d ? d.value : 0)).reduce((sum, val) => sum + val, 0);\n}\n","import {\n  Component,\n  Input,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef,\n  Output,\n  EventEmitter\n} from '@angular/core';\nimport { min } from 'd3-array';\nimport { format } from 'd3-format';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { trimLabel } from '../common/trim-label.helper';\nimport { gridLayout } from '../common/grid-layout.helper';\nimport { formatLabel } from '../common/label.helper';\nimport { DataItem } from '../models/chart-data.model';\n\n@Component({\n  selector: 'ngx-charts-pie-grid',\n  template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"pie-grid chart\">\n        <svg:g *ngFor=\"let series of series\" class=\"pie-grid-item\" [attr.transform]=\"series.transform\">\n          <svg:g\n            ngx-charts-pie-grid-series\n            [colors]=\"series.colors\"\n            [data]=\"series.data\"\n            [innerRadius]=\"series.innerRadius\"\n            [outerRadius]=\"series.outerRadius\"\n            [animations]=\"animations\"\n            (select)=\"onClick($event)\"\n            ngx-tooltip\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipPlacement]=\"'top'\"\n            [tooltipType]=\"'tooltip'\"\n            [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText({ data: series })\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [tooltipContext]=\"series.data[0].data\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n          />\n          <svg:text\n            *ngIf=\"animations\"\n            class=\"label percent-label\"\n            dy=\"-0.5em\"\n            x=\"0\"\n            y=\"5\"\n            ngx-charts-count-up\n            [countTo]=\"series.percent\"\n            [countSuffix]=\"'%'\"\n            text-anchor=\"middle\"\n          ></svg:text>\n          <svg:text *ngIf=\"!animations\" class=\"label percent-label\" dy=\"-0.5em\" x=\"0\" y=\"5\" text-anchor=\"middle\">\n            {{ series.percent.toLocaleString() }}\n          </svg:text>\n          <svg:text class=\"label\" dy=\"0.5em\" x=\"0\" y=\"5\" text-anchor=\"middle\">\n            {{ series.label }}\n          </svg:text>\n          <svg:text\n            *ngIf=\"animations\"\n            class=\"label\"\n            dy=\"1.23em\"\n            x=\"0\"\n            [attr.y]=\"series.outerRadius\"\n            text-anchor=\"middle\"\n            ngx-charts-count-up\n            [countTo]=\"series.total\"\n            [countPrefix]=\"label + ': '\"\n          ></svg:text>\n          <svg:text\n            *ngIf=\"!animations\"\n            class=\"label\"\n            dy=\"1.23em\"\n            x=\"0\"\n            [attr.y]=\"series.outerRadius\"\n            text-anchor=\"middle\"\n          >\n            {{ label }}: {{ series.total.toLocaleString() }}\n          </svg:text>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss', './pie-grid.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PieGridComponent extends BaseChartComponent {\n  @Input() designatedTotal: number;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipText: (o: any) => any;\n  @Input() label: string = 'Total';\n  @Input() minWidth: number = 150;\n  @Input() activeEntries: any[] = [];\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  dims: ViewDimensions;\n  data: any[];\n  transform: string;\n  series: any[];\n  domain: any[];\n  colorScale: ColorHelper;\n  margin = [20, 20, 20, 20];\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin\n    });\n\n    this.formatDates();\n\n    this.domain = this.getDomain();\n\n    this.data = gridLayout(this.dims, this.results, this.minWidth, this.designatedTotal);\n    this.transform = `translate(${this.margin[3]} , ${this.margin[0]})`;\n\n    this.series = this.getSeries();\n    this.setColors();\n\n    this.tooltipText = this.tooltipText || this.defaultTooltipText;\n  }\n\n  defaultTooltipText({ data }): string {\n    const label = trimLabel(formatLabel(data.name));\n    const val = data.value.toLocaleString();\n    return `\n      <span class=\"tooltip-label\">${label}</span>\n      <span class=\"tooltip-val\">${val}</span>\n    `;\n  }\n\n  getDomain(): any[] {\n    return this.results.map(d => d.label);\n  }\n\n  getSeries(): any[] {\n    const total = this.designatedTotal ? this.designatedTotal : this.getTotal();\n\n    return this.data.map(d => {\n      const baselineLabelHeight = 20;\n      const padding = 10;\n      const name = d.data.name;\n      const label = formatLabel(name);\n      const value = d.data.value;\n      const radius = min([d.width - padding, d.height - baselineLabelHeight]) / 2 - 5;\n      const innerRadius = radius * 0.9;\n\n      let count = 0;\n      const colors = () => {\n        count += 1;\n        if (count === 1) {\n          return 'rgba(100,100,100,0.3)';\n        } else {\n          return this.colorScale.getColor(label);\n        }\n      };\n\n      const xPos = d.x + (d.width - padding) / 2;\n      const yPos = d.y + (d.height - baselineLabelHeight) / 2;\n\n      return {\n        transform: `translate(${xPos}, ${yPos})`,\n        colors,\n        innerRadius,\n        outerRadius: radius,\n        name,\n        label: trimLabel(label),\n        total: value,\n        value,\n        percent: format('.1%')(d.data.percent),\n        data: [\n          d,\n          {\n            data: {\n              other: true,\n              value: total - value,\n              name: d.data.name\n            }\n          }\n        ]\n      };\n    });\n  }\n\n  getTotal(): any {\n    return this.results.map(d => d.value).reduce((sum, d) => sum + d, 0);\n  }\n\n  onClick(data: DataItem): void {\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    this.colorScale = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\n  }\n\n  onActivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ElementRef,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { pie } from 'd3-shape';\n\n@Component({\n  selector: 'g[ngx-charts-pie-grid-series]',\n  template: `\n    <svg:g class=\"pie-grid-arcs\">\n      <svg:g\n        ngx-charts-pie-arc\n        *ngFor=\"let arc of arcs; trackBy: trackBy\"\n        [attr.class]=\"arc.class\"\n        [startAngle]=\"arc.startAngle\"\n        [endAngle]=\"arc.endAngle\"\n        [innerRadius]=\"innerRadius\"\n        [outerRadius]=\"outerRadius\"\n        [fill]=\"color(arc)\"\n        [value]=\"arc.data.value\"\n        [data]=\"arc.data\"\n        [gradient]=\"false\"\n        [pointerEvents]=\"arc.pointerEvents\"\n        [animate]=\"arc.animate\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n      ></svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PieGridSeriesComponent implements OnChanges {\n  @Input() colors;\n  @Input() data;\n  @Input() innerRadius = 70;\n  @Input() outerRadius = 80;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n\n  element: HTMLElement;\n  layout: any;\n  arcs: any;\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.layout = pie<any, any>()\n      .value(d => d.data.value)\n      .sort(null);\n\n    this.arcs = this.getArcs();\n  }\n\n  getArcs(): any[] {\n    return this.layout(this.data).map((arc, index) => {\n      const label = arc.data.data.name;\n      const other = arc.data.data.other;\n\n      if (index === 0) {\n        arc.startAngle = 0;\n      }\n\n      const color = this.colors(label);\n      return {\n        data: arc.data.data,\n        class: 'arc ' + 'arc' + index,\n        fill: color,\n        startAngle: other ? 0 : arc.startAngle,\n        endAngle: arc.endAngle,\n        animate: this.animations && !other,\n        pointerEvents: !other\n      };\n    });\n  }\n\n  onClick(data): void {\n    this.select.emit(this.data[0].data);\n  }\n\n  trackBy(index, item): string {\n    return item.data.name;\n  }\n\n  label(arc): string {\n    return arc.data.name;\n  }\n\n  color(arc): any {\n    return this.colors(this.label(arc));\n  }\n}\n","import {\n  Component,\n  SimpleChanges,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  ChangeDetectionStrategy,\n  TemplateRef\n} from '@angular/core';\nimport { max } from 'd3-array';\nimport { arc, pie } from 'd3-shape';\n\nimport { formatLabel, escapeLabel } from '../common/label.helper';\n\n@Component({\n  selector: 'g[ngx-charts-pie-series]',\n  template: `\n    <svg:g *ngFor=\"let arc of data; trackBy: trackBy\">\n      <svg:g\n        ngx-charts-pie-label\n        *ngIf=\"labelVisible(arc)\"\n        [data]=\"arc\"\n        [radius]=\"outerRadius\"\n        [color]=\"color(arc)\"\n        [label]=\"labelText(arc)\"\n        [labelTrim]=\"trimLabels\"\n        [labelTrimSize]=\"maxLabelLength\"\n        [max]=\"max\"\n        [value]=\"arc.value\"\n        [explodeSlices]=\"explodeSlices\"\n        [animations]=\"animations\"\n      ></svg:g>\n      <svg:g\n        ngx-charts-pie-arc\n        [startAngle]=\"arc.startAngle\"\n        [endAngle]=\"arc.endAngle\"\n        [innerRadius]=\"innerRadius\"\n        [outerRadius]=\"outerRadius\"\n        [fill]=\"color(arc)\"\n        [value]=\"arc.data.value\"\n        [gradient]=\"gradient\"\n        [data]=\"arc.data\"\n        [max]=\"max\"\n        [explodeSlices]=\"explodeSlices\"\n        [isActive]=\"isActive(arc.data)\"\n        [animate]=\"animations\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n        (dblclick)=\"dblclick.emit($event)\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"'top'\"\n        [tooltipType]=\"'tooltip'\"\n        [tooltipTitle]=\"getTooltipTitle(arc)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"arc.data\"\n      ></svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PieSeriesComponent implements OnChanges {\n  @Input() colors;\n  @Input() series: any = [];\n  @Input() dims;\n  @Input() innerRadius = 60;\n  @Input() outerRadius = 80;\n  @Input() explodeSlices;\n  @Input() showLabels;\n  @Input() gradient: boolean;\n  @Input() activeEntries: any[];\n  @Input() labelFormatting: any;\n  @Input() trimLabels: boolean = true;\n  @Input() maxLabelLength: number = 10;\n  @Input() tooltipText: (o: any) => any;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipTemplate: TemplateRef<any>;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n  @Output() dblclick = new EventEmitter();\n\n  max: number;\n  data: any;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    const pieGenerator = pie<any, any>()\n      .value(d => d.value)\n      .sort(null);\n\n    const arcData = pieGenerator(this.series);\n\n    this.max = max(arcData, d => {\n      return d.value;\n    });\n\n    this.data = this.calculateLabelPositions(arcData);\n    this.tooltipText = this.tooltipText || this.defaultTooltipText;\n  }\n\n  midAngle(d): number {\n    return d.startAngle + (d.endAngle - d.startAngle) / 2;\n  }\n\n  outerArc(): any {\n    const factor = 1.5;\n\n    return arc()\n      .innerRadius(this.outerRadius * factor)\n      .outerRadius(this.outerRadius * factor);\n  }\n\n  calculateLabelPositions(pieData): any {\n    const factor = 1.5;\n    const minDistance = 10;\n    const labelPositions = pieData;\n\n    labelPositions.forEach(d => {\n      d.pos = this.outerArc().centroid(d);\n      d.pos[0] = factor * this.outerRadius * (this.midAngle(d) < Math.PI ? 1 : -1);\n    });\n\n    for (let i = 0; i < labelPositions.length - 1; i++) {\n      const a = labelPositions[i];\n      if (!this.labelVisible(a)) {\n        continue;\n      }\n\n      for (let j = i + 1; j < labelPositions.length; j++) {\n        const b = labelPositions[j];\n        if (!this.labelVisible(b)) {\n          continue;\n        }\n        // if they're on the same side\n        if (b.pos[0] * a.pos[0] > 0) {\n          // if they're overlapping\n          const o = minDistance - Math.abs(b.pos[1] - a.pos[1]);\n          if (o > 0) {\n            // push the second up or down\n            b.pos[1] += Math.sign(b.pos[0]) * o;\n          }\n        }\n      }\n    }\n\n    return labelPositions;\n  }\n\n  labelVisible(myArc): boolean {\n    return this.showLabels && myArc.endAngle - myArc.startAngle > Math.PI / 30;\n  }\n\n  getTooltipTitle(a) {\n    return this.tooltipTemplate ? undefined : this.tooltipText(a);\n  }\n\n  labelText(myArc): string {\n    if (this.labelFormatting) {\n      return this.labelFormatting(myArc.data.name);\n    }\n    return this.label(myArc);\n  }\n\n  label(myArc): string {\n    return formatLabel(myArc.data.name);\n  }\n\n  defaultTooltipText(myArc): string {\n    const label = this.label(myArc);\n    const val = formatLabel(myArc.data.value);\n\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${val}</span>\n    `;\n  }\n\n  color(myArc): any {\n    return this.colors.getColor(this.label(myArc));\n  }\n\n  trackBy(index, item): string {\n    return item.data.name;\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name && entry.series === d.series;\n    });\n    return item !== undefined;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { AdvancedPieChartComponent } from './advanced-pie-chart.component';\nimport { PieLabelComponent } from './pie-label.component';\nimport { PieArcComponent } from './pie-arc.component';\nimport { PieChartComponent } from './pie-chart.component';\nimport { PieGridComponent } from './pie-grid.component';\nimport { PieGridSeriesComponent } from './pie-grid-series.component';\nimport { PieSeriesComponent } from './pie-series.component';\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [\n    AdvancedPieChartComponent,\n    PieLabelComponent,\n    PieArcComponent,\n    PieChartComponent,\n    PieGridComponent,\n    PieGridSeriesComponent,\n    PieSeriesComponent\n  ],\n  exports: [\n    AdvancedPieChartComponent,\n    PieLabelComponent,\n    PieArcComponent,\n    PieChartComponent,\n    PieGridComponent,\n    PieGridSeriesComponent,\n    PieSeriesComponent\n  ]\n})\nexport class PieChartModule {}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { PolarChartComponent } from './polar-chart.component';\nimport { PolarSeriesComponent } from './polar-series.component';\nimport { PieChartModule } from '../pie-chart/pie-chart.module';\nimport { LineChartModule } from '../line-chart/line-chart.module';\n\n@NgModule({\n  imports: [ChartCommonModule, PieChartModule, LineChartModule],\n  declarations: [PolarChartComponent, PolarSeriesComponent],\n  exports: [PolarChartComponent, PolarSeriesComponent]\n})\nexport class PolarChartModule {}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ElementRef,\n  SimpleChanges,\n  OnChanges,\n  ViewChild,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  NgZone,\n  OnDestroy\n} from '@angular/core';\nimport { trimLabel } from '../common/trim-label.helper';\nimport { roundedRect } from '../common/shape.helper';\nimport { escapeLabel } from '../common/label.helper';\nimport { decimalChecker, count } from '../common/count/count.helper';\n\n@Component({\n  selector: 'g[ngx-charts-card]',\n  template: `\n    <svg:g [attr.transform]=\"transform\" class=\"cell\" (click)=\"onClick()\">\n      <svg:rect class=\"card\" [style.fill]=\"color\" [attr.width]=\"cardWidth\" [attr.height]=\"cardHeight\" rx=\"3\" ry=\"3\" />\n      <svg:path\n        *ngIf=\"bandColor && bandColor !== color\"\n        class=\"card-band\"\n        [attr.fill]=\"bandColor\"\n        [attr.transform]=\"transformBand\"\n        stroke=\"none\"\n        [attr.d]=\"bandPath\"\n      />\n      <title>{{ label }}</title>\n      <svg:foreignObject\n        class=\"trimmed-label\"\n        x=\"5\"\n        [attr.x]=\"textPadding[3]\"\n        [attr.y]=\"cardHeight - textPadding[2]\"\n        [attr.width]=\"textWidth\"\n        [attr.height]=\"labelFontSize + textPadding[2]\"\n        alignment-baseline=\"hanging\"\n      >\n        <xhtml:p\n          [style.color]=\"textColor\"\n          [style.fontSize.px]=\"labelFontSize\"\n          [style.lineHeight.px]=\"labelFontSize\"\n          [innerHTML]=\"formattedLabel\"\n        >\n        </xhtml:p>\n      </svg:foreignObject>\n      <svg:text\n        #textEl\n        class=\"value-text\"\n        [attr.x]=\"textPadding[3]\"\n        [attr.y]=\"textPadding[0]\"\n        [style.fill]=\"textColor\"\n        text-anchor=\"start\"\n        alignment-baseline=\"hanging\"\n        [style.font-size.pt]=\"textFontSize\"\n      >\n        {{ value }}\n      </svg:text>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CardComponent implements OnChanges, OnDestroy {\n  @Input() color;\n  @Input() bandColor;\n  @Input() textColor;\n\n  @Input() x;\n  @Input() y;\n  @Input() width;\n  @Input() height;\n  @Input() label;\n  @Input() data;\n  @Input() medianSize: number;\n  @Input() valueFormatting: any;\n  @Input() labelFormatting: any;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n\n  @ViewChild('textEl', { static: false }) textEl: ElementRef;\n\n  element: HTMLElement;\n  value: string = '';\n  transform: string;\n  formattedLabel: string;\n  cardWidth: number;\n  cardHeight: number;\n  textWidth: number;\n  textFontSize: number = 12;\n  textTransform: string = '';\n  initialized: boolean = false;\n  animationReq: any;\n\n  bandHeight: number = 10;\n  transformBand: string;\n  textPadding = [10, 20, 5, 20];\n  labelFontSize = 15;\n\n  bandPath: string;\n\n  constructor(element: ElementRef, private cd: ChangeDetectorRef, private zone: NgZone) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  ngOnDestroy(): void {\n    cancelAnimationFrame(this.animationReq);\n  }\n\n  update(): void {\n    this.zone.run(() => {\n      const hasValue = this.data && typeof this.data.value !== 'undefined';\n      const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\n      const labelFormatting = this.labelFormatting || (card => escapeLabel(trimLabel(card.label, 55)));\n\n      this.transform = `translate(${this.x} , ${this.y})`;\n\n      this.textWidth = Math.max(0, this.width) - this.textPadding[1] - this.textPadding[3];\n      this.cardWidth = Math.max(0, this.width);\n      this.cardHeight = Math.max(0, this.height);\n\n      this.label = this.label ? this.label : this.data.name;\n\n      const cardData = {\n        label: this.label,\n        data: this.data,\n        value: this.data.value\n      };\n\n      this.formattedLabel = labelFormatting(cardData);\n      this.transformBand = `translate(0 , ${this.cardHeight - this.bandHeight})`;\n\n      const value = hasValue ? valueFormatting(cardData) : '';\n\n      this.value = this.paddedValue(value);\n      this.setPadding();\n\n      this.bandPath = roundedRect(0, 0, this.cardWidth, this.bandHeight, 3, [false, false, true, true]);\n\n      setTimeout(() => {\n        this.scaleText();\n        this.value = value;\n        if (hasValue && !this.initialized) {\n          setTimeout(() => this.startCount(), 20);\n        }\n      }, 8);\n    });\n  }\n\n  paddedValue(value: string) {\n    if (this.medianSize && this.medianSize > value.length) {\n      value += '\\u2007'.repeat(this.medianSize - value.length);\n    }\n    return value;\n  }\n\n  startCount(): void {\n    if (!this.initialized && this.animations) {\n      cancelAnimationFrame(this.animationReq);\n\n      const val = this.data.value;\n      const decs = decimalChecker(val);\n      const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\n\n      const callback = ({ value, finished }) => {\n        this.zone.run(() => {\n          value = finished ? val : value;\n          this.value = valueFormatting({ label: this.label, data: this.data, value });\n          if (!finished) {\n            this.value = this.paddedValue(this.value);\n          }\n          this.cd.markForCheck();\n        });\n      };\n\n      this.animationReq = count(0, val, decs, 1, callback);\n      this.initialized = true;\n    }\n  }\n\n  scaleText(): void {\n    this.zone.run(() => {\n      const { width, height } = this.textEl.nativeElement.getBoundingClientRect();\n      if (width === 0 || height === 0) {\n        return;\n      }\n\n      const textPadding = (this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8);\n      const availableWidth = this.cardWidth - 2 * textPadding;\n      const availableHeight = this.cardHeight / 3;\n\n      const resizeScale = Math.min(availableWidth / width, availableHeight / height);\n      this.textFontSize = Math.floor(this.textFontSize * resizeScale);\n      this.labelFontSize = Math.min(this.textFontSize, 15);\n\n      this.setPadding();\n      this.cd.markForCheck();\n    });\n  }\n\n  setPadding() {\n    this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8;\n    const padding = this.cardHeight / 2;\n    this.textPadding[0] = padding - this.textFontSize - this.labelFontSize / 2;\n    this.textPadding[2] = padding - this.labelFontSize;\n  }\n\n  onClick(): void {\n    this.select.emit(this.data);\n  }\n}\n","import * as d3_color from 'd3-color';\n\n/**\n * Converts a hex to RGB\n *\n * @export\n */\nexport function hexToRgb(value: string): any {\n  // deprecated, use d3.color()\n  return d3_color.rgb(value);\n}\n\n/**\n * Accepts a color (string) and returns a inverted hex color (string)\n * http://stackoverflow.com/questions/9600295/automatically-change-text-color-to-assure-readability\n *\n * @export\n */\nexport function invertColor(value: string): string {\n  const color = d3_color.rgb(value);\n  const { r, g, b, opacity } = color;\n  if (opacity === 0) {\n    return color.toString();\n  }\n  const yiq = (r * 299 + g * 587 + b * 114) / 1000;\n  const depth = yiq >= 128 ? -0.8 : 0.8;\n\n  return shadeRGBColor(color, depth);\n}\n\n/**\n * Given a rgb, it will darken/lighten\n * http://stackoverflow.com/questions/5560248/programmatically-lighten-or-darken-a-hex-color-or-rgb-and-blend-colors\n *\n * @export\n * @param \\{ r, g, b }\n */\nexport function shadeRGBColor({ r, g, b }, percent) {\n  const t = percent < 0 ? 0 : 255;\n  const p = percent < 0 ? percent * -1 : percent;\n\n  r = Math.round((t - r) * p) + r;\n  g = Math.round((t - g) * p) + g;\n  b = Math.round((t - b) * p) + b;\n\n  return `rgb(${r}, ${g}, ${b})`;\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { invertColor } from '../utils/color-utils';\n\nexport interface CardModel {\n  x;\n  y;\n  width: number;\n  height: number;\n  color: string;\n  label: string;\n  data;\n  tooltipText: string;\n}\n\n@Component({\n  selector: 'g[ngx-charts-card-series]',\n  template: `\n    <svg:rect\n      *ngFor=\"let c of emptySlots; trackBy: trackBy\"\n      class=\"card-empty\"\n      [attr.x]=\"c.x\"\n      [attr.y]=\"c.y\"\n      [style.fill]=\"emptyColor\"\n      [attr.width]=\"c.width\"\n      [attr.height]=\"c.height\"\n      rx=\"3\"\n      ry=\"3\"\n    />\n    <svg:g\n      ngx-charts-card\n      *ngFor=\"let c of cards; trackBy: trackBy\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [color]=\"c.color\"\n      [bandColor]=\"c.bandColor\"\n      [textColor]=\"c.textColor\"\n      [data]=\"c.data\"\n      [label]=\"c.label\"\n      [medianSize]=\"medianSize\"\n      [valueFormatting]=\"valueFormatting\"\n      [labelFormatting]=\"labelFormatting\"\n      [animations]=\"animations\"\n      (select)=\"onClick($event)\"\n    />\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CardSeriesComponent implements OnChanges {\n  @Input() data: any[];\n  @Input() slots: any[];\n  @Input() dims;\n  @Input() colors;\n  @Input() innerPadding = 15;\n\n  @Input() cardColor;\n  @Input() bandColor;\n  @Input() emptyColor = 'rgba(0, 0, 0, 0)';\n  @Input() textColor;\n  @Input() valueFormatting: any;\n  @Input() labelFormatting: any;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n\n  cards: CardModel[];\n  emptySlots: any[];\n  medianSize: number;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    if (this.data.length > 2) {\n      const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\n\n      const sortedLengths = this.data\n        .map(d => {\n          const hasValue = d && d.data && typeof d.data.value !== 'undefined' && d.data.value !== null;\n          return hasValue\n            ? valueFormatting({\n                data: d.data,\n                label: d ? d.data.name : '',\n                value: d && d.data ? d.data.value : ''\n              }).length\n            : 0;\n        })\n        .sort((a, b) => b - a);\n      const idx = Math.ceil(this.data.length / 2);\n      this.medianSize = sortedLengths[idx];\n    }\n\n    const cards = this.getCards();\n    this.cards = cards.filter(d => d.data.value !== null);\n    this.emptySlots = cards.filter(d => d.data.value === null);\n  }\n\n  getCards(): any[] {\n    const yPadding =\n      typeof this.innerPadding === 'number' ? this.innerPadding : this.innerPadding[0] + this.innerPadding[2];\n    const xPadding =\n      typeof this.innerPadding === 'number' ? this.innerPadding : this.innerPadding[1] + this.innerPadding[3];\n\n    return this.data.map((d, index) => {\n      let label = d.data.name;\n      if (label && label.constructor.name === 'Date') {\n        label = label.toLocaleDateString();\n      } else {\n        label = label ? label.toLocaleString() : label;\n      }\n\n      const value = d.data.value;\n      const valueColor = label ? this.colors.getColor(label) : this.emptyColor;\n      const color = this.cardColor || valueColor || '#000';\n      return {\n        x: d.x,\n        y: d.y,\n        width: d.width - xPadding,\n        height: d.height - yPadding,\n        color,\n        bandColor: this.bandColor || valueColor,\n        textColor: this.textColor || invertColor(color),\n        label,\n        data: d.data,\n        tooltipText: `${label}: ${value}`\n      };\n    });\n  }\n\n  trackBy(index, card): string {\n    return card.label;\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n}\n","import { Component, ViewEncapsulation, ChangeDetectionStrategy, Input } from '@angular/core';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { gridLayout, gridSize } from '../common/grid-layout.helper';\n\n@Component({\n  selector: 'ngx-charts-number-card',\n  template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"number-card chart\" [class.clickable]=\"clickable\">\n        <svg:g\n          ngx-charts-card-series\n          [colors]=\"colors\"\n          [cardColor]=\"cardColor\"\n          [bandColor]=\"bandColor\"\n          [textColor]=\"textColor\"\n          [emptyColor]=\"emptyColor\"\n          [data]=\"data\"\n          [dims]=\"dims\"\n          [innerPadding]=\"innerPadding\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"labelFormatting\"\n          [animations]=\"animations\"\n          (select)=\"onClick($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss', './card.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NumberCardComponent extends BaseChartComponent {\n  @Input() cardColor: string;\n  @Input() bandColor: string;\n  @Input() emptyColor: string = 'rgba(0, 0, 0, 0)';\n  @Input() innerPadding = 15;\n  @Input() textColor: string;\n  @Input() valueFormatting: any;\n  @Input() labelFormatting: any;\n  @Input() designatedTotal: number;\n\n  dims: ViewDimensions;\n  data: any[];\n  slots: any[];\n  colors: ColorHelper;\n  transform: string;\n  domain: any[];\n  margin = [10, 10, 10, 10];\n\n  backgroundCards: any[];\n\n  get clickable() {\n    return !!this.select.observers.length;\n  }\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin\n    });\n\n    this.formatDates();\n\n    this.domain = this.getDomain();\n\n    this.setColors();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n\n    const size = gridSize(this.dims, this.results.length, 150);\n    const N = size[0] * size[1];\n\n    const data = this.results.slice();\n\n    while (data.length < N) {\n      data.push({ value: null });\n    }\n\n    this.data = gridLayout(this.dims, data, 150, this.designatedTotal);\n  }\n\n  getDomain(): any[] {\n    return this.results.map(d => d.label);\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    this.colors = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { CardComponent } from './card.component';\nimport { CardSeriesComponent } from './card-series.component';\nimport { NumberCardComponent } from './number-card.component';\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [CardComponent, CardSeriesComponent, NumberCardComponent],\n  exports: [CardComponent, CardSeriesComponent, NumberCardComponent]\n})\nexport class NumberCardModule {}\n","import { Component, Input, Output, EventEmitter, ElementRef, OnChanges, ChangeDetectionStrategy } from '@angular/core';\nimport { select } from 'd3-selection';\n\nimport { invertColor } from '../utils/color-utils';\nimport { trimLabel } from '../common/trim-label.helper';\nimport { escapeLabel } from '../common/label.helper';\nimport { id } from '../utils/id';\n\n@Component({\n  selector: 'g[ngx-charts-tree-map-cell]',\n  template: `\n    <svg:g>\n      <defs *ngIf=\"gradient\">\n        <svg:g ngx-charts-svg-linear-gradient orientation=\"vertical\" [name]=\"gradientId\" [stops]=\"gradientStops\" />\n      </defs>\n      <svg:rect\n        [attr.fill]=\"gradient ? gradientUrl : fill\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        [attr.x]=\"x\"\n        [attr.y]=\"y\"\n        [style.cursor]=\"'pointer'\"\n        class=\"cell\"\n        (click)=\"onClick()\"\n      />\n      <svg:foreignObject\n        *ngIf=\"width >= 70 && height >= 35\"\n        [attr.x]=\"x\"\n        [attr.y]=\"y\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        class=\"treemap-label\"\n        [style.pointer-events]=\"'none'\"\n      >\n        <xhtml:p [style.color]=\"getTextColor()\" [style.height]=\"height + 'px'\" [style.width]=\"width + 'px'\">\n          <xhtml:span class=\"treemap-label\" [innerHTML]=\"formattedLabel\"> </xhtml:span>\n          <xhtml:br />\n          <xhtml:span\n            *ngIf=\"animations\"\n            class=\"treemap-val\"\n            ngx-charts-count-up\n            [countTo]=\"value\"\n            [valueFormatting]=\"valueFormatting\"\n          >\n          </xhtml:span>\n          <xhtml:span *ngIf=\"!animations\" class=\"treemap-val\">\n            {{ formattedValue }}\n          </xhtml:span>\n        </xhtml:p>\n      </svg:foreignObject>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TreeMapCellComponent implements OnChanges {\n  @Input() data;\n  @Input() fill;\n  @Input() x;\n  @Input() y;\n  @Input() width;\n  @Input() height;\n  @Input() label;\n  @Input() value;\n  @Input() valueType;\n  @Input() valueFormatting: any;\n  @Input() labelFormatting: any;\n  @Input() gradient: boolean = false;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n\n  gradientStops: any[];\n  gradientId: string;\n  gradientUrl: string;\n\n  element: HTMLElement;\n  transform: string;\n  formattedLabel: string;\n  formattedValue: string;\n  initialized: boolean = false;\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(): void {\n    this.update();\n\n    this.valueFormatting = this.valueFormatting || (value => value.toLocaleString());\n    const labelFormatting = this.labelFormatting || (cell => escapeLabel(trimLabel(cell.label, 55)));\n\n    const cellData = {\n      data: this.data,\n      label: this.label,\n      value: this.value\n    };\n\n    this.formattedValue = this.valueFormatting(cellData.value);\n    this.formattedLabel = labelFormatting(cellData);\n\n    this.gradientId = 'grad' + id().toString();\n    this.gradientUrl = `url(#${this.gradientId})`;\n    this.gradientStops = this.getGradientStops();\n  }\n\n  update(): void {\n    if (this.initialized) {\n      this.animateToCurrentForm();\n    } else {\n      if (this.animations) {\n        this.loadAnimation();\n      }\n      this.initialized = true;\n    }\n  }\n\n  loadAnimation(): void {\n    const node = select(this.element).select('.cell');\n\n    node\n      .attr('opacity', 0)\n      .attr('x', this.x)\n      .attr('y', this.y);\n\n    this.animateToCurrentForm();\n  }\n\n  getTextColor(): string {\n    return invertColor(this.fill);\n  }\n\n  animateToCurrentForm(): void {\n    const node = select(this.element).select('.cell');\n\n    if (this.animations) {\n      node\n        .transition()\n        .duration(750)\n        .attr('opacity', 1)\n        .attr('x', this.x)\n        .attr('y', this.y)\n        .attr('width', this.width)\n        .attr('height', this.height);\n    } else {\n      node\n        .attr('opacity', 1)\n        .attr('x', this.x)\n        .attr('y', this.y)\n        .attr('width', this.width)\n        .attr('height', this.height);\n    }\n  }\n\n  onClick(): void {\n    this.select.emit(this.data);\n  }\n\n  getGradientStops() {\n    return [\n      {\n        offset: 0,\n        color: this.fill,\n        opacity: 0.3\n      },\n      {\n        offset: 100,\n        color: this.fill,\n        opacity: 1\n      }\n    ];\n  }\n}\n","import {\n  Component,\n  OnChanges,\n  Input,\n  Output,\n  SimpleChanges,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  TemplateRef\n} from '@angular/core';\nimport { escapeLabel } from '../common/label.helper';\n\n@Component({\n  selector: 'g[ngx-charts-tree-map-cell-series]',\n  template: `\n    <svg:g\n      ngx-charts-tree-map-cell\n      *ngFor=\"let c of cells; trackBy: trackBy\"\n      [data]=\"c.data\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [fill]=\"c.fill\"\n      [label]=\"c.label\"\n      [value]=\"c.value\"\n      [valueType]=\"c.valueType\"\n      [valueFormatting]=\"valueFormatting\"\n      [labelFormatting]=\"labelFormatting\"\n      [gradient]=\"gradient\"\n      [animations]=\"animations\"\n      (select)=\"onClick($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"'top'\"\n      [tooltipType]=\"'tooltip'\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(c)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"c.data\"\n    ></svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TreeMapCellSeriesComponent implements OnChanges {\n  @Input() data;\n  @Input() dims;\n  @Input() colors;\n  @Input() valueFormatting: any;\n  @Input() labelFormatting: any;\n  @Input() gradient: boolean = false;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipTemplate: TemplateRef<any>;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n\n  cells: any[];\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.cells = this.getCells();\n  }\n\n  getCells(): any[] {\n    return this.data.children\n      .filter(d => {\n        return d.depth === 1;\n      })\n      .map((d, index) => {\n        const label = d.id;\n\n        return {\n          data: d.data,\n          x: d.x0,\n          y: d.y0,\n          width: d.x1 - d.x0,\n          height: d.y1 - d.y0,\n          fill: this.colors.getColor(label),\n          label,\n          value: d.value,\n          valueType: d.valueType\n        };\n      });\n  }\n\n  getTooltipText({ label, value }): string {\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${value.toLocaleString()}</span>\n    `;\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  trackBy(index, item): string {\n    return item.label;\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { treemap, stratify } from 'd3-hierarchy';\n\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { calculateViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\n\n@Component({\n  selector: 'ngx-charts-tree-map',\n  template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"tree-map chart\">\n        <svg:g\n          ngx-charts-tree-map-cell-series\n          [colors]=\"colors\"\n          [data]=\"data\"\n          [dims]=\"dims\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"labelFormatting\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          (select)=\"onClick($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['./tree-map.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TreeMapComponent extends BaseChartComponent {\n  @Input() results;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() valueFormatting: any;\n  @Input() labelFormatting: any;\n  @Input() gradient: boolean = false;\n\n  @Output() select = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: any;\n  domain: any;\n  transform: any;\n  colors: ColorHelper;\n  treemap: any;\n  data: any;\n  margin = [10, 10, 10, 10];\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin\n    });\n\n    this.domain = this.getDomain();\n\n    this.treemap = treemap<any>().size([this.dims.width, this.dims.height]);\n\n    const rootNode = {\n      name: 'root',\n      value: 0,\n      isRoot: true\n    };\n\n    const root = stratify<any>()\n      .id(d => {\n        let label = d.name;\n\n        if (label.constructor.name === 'Date') {\n          label = label.toLocaleDateString();\n        } else {\n          label = label.toLocaleString();\n        }\n        return label;\n      })\n      .parentId(d => (d.isRoot ? null : 'root'))([rootNode, ...this.results])\n      .sum(d => d.value);\n\n    this.data = this.treemap(root);\n\n    this.setColors();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getDomain(): any[] {\n    return this.results.map(d => d.name);\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    this.colors = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { TreeMapCellComponent } from './tree-map-cell.component';\nimport { TreeMapCellSeriesComponent } from './tree-map-cell-series.component';\nimport { TreeMapComponent } from './tree-map.component';\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent],\n  exports: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent]\n})\nexport class TreeMapModule {}\n","import {\n  Component,\n  Input,\n  ElementRef,\n  ViewChild,\n  AfterViewInit,\n  ViewEncapsulation,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { scaleLinear } from 'd3-scale';\n\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\n\n@Component({\n  selector: 'ngx-charts-linear-gauge',\n  template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\" (click)=\"onClick()\">\n      <svg:g class=\"linear-gauge chart\">\n        <svg:g\n          ngx-charts-bar\n          class=\"background-bar\"\n          [width]=\"dims.width\"\n          [height]=\"3\"\n          [x]=\"margin[3]\"\n          [y]=\"dims.height / 2 + margin[0] - 2\"\n          [data]=\"{}\"\n          [orientation]=\"'horizontal'\"\n          [roundEdges]=\"true\"\n          [animations]=\"animations\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-bar\n          [width]=\"valueScale(value)\"\n          [height]=\"3\"\n          [x]=\"margin[3]\"\n          [y]=\"dims.height / 2 + margin[0] - 2\"\n          [fill]=\"colors.getColor(units)\"\n          [data]=\"{}\"\n          [orientation]=\"'horizontal'\"\n          [roundEdges]=\"true\"\n          [animations]=\"animations\"\n        ></svg:g>\n\n        <svg:line\n          *ngIf=\"hasPreviousValue\"\n          [attr.transform]=\"transformLine\"\n          x1=\"0\"\n          y1=\"5\"\n          x2=\"0\"\n          y2=\"15\"\n          [attr.stroke]=\"colors.getColor(units)\"\n        />\n\n        <svg:line\n          *ngIf=\"hasPreviousValue\"\n          [attr.transform]=\"transformLine\"\n          x1=\"0\"\n          y1=\"-5\"\n          x2=\"0\"\n          y2=\"-15\"\n          [attr.stroke]=\"colors.getColor(units)\"\n        />\n\n        <svg:g [attr.transform]=\"transform\">\n          <svg:g [attr.transform]=\"valueTranslate\">\n            <svg:text\n              #valueTextEl\n              class=\"value\"\n              [style.textAnchor]=\"'middle'\"\n              [attr.transform]=\"valueTextTransform\"\n              alignment-baseline=\"after-edge\"\n            >\n              {{ displayValue }}\n            </svg:text>\n          </svg:g>\n\n          <svg:g [attr.transform]=\"unitsTranslate\">\n            <svg:text\n              #unitsTextEl\n              class=\"units\"\n              [style.textAnchor]=\"'middle'\"\n              [attr.transform]=\"unitsTextTransform\"\n              alignment-baseline=\"before-edge\"\n            >\n              {{ units }}\n            </svg:text>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss', './linear-gauge.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LinearGaugeComponent extends BaseChartComponent implements AfterViewInit {\n  @Input() min: number = 0;\n  @Input() max: number = 100;\n  @Input() value: number = 0;\n  @Input() units: string;\n  @Input() previousValue;\n  @Input() valueFormatting: any;\n\n  @ViewChild('valueTextEl') valueTextEl: ElementRef;\n  @ViewChild('unitsTextEl') unitsTextEl: ElementRef;\n\n  dims: ViewDimensions;\n  valueDomain: any;\n  valueScale: any;\n\n  colors: ColorHelper;\n  transform: string;\n  margin: any[] = [10, 20, 10, 20];\n  transformLine: string;\n\n  valueResizeScale: number = 1;\n  unitsResizeScale: number = 1;\n  valueTextTransform: string = '';\n  valueTranslate: string = '';\n  unitsTextTransform: string = '';\n  unitsTranslate: string = '';\n  displayValue: string;\n  hasPreviousValue: boolean;\n\n  ngAfterViewInit(): void {\n    super.ngAfterViewInit();\n    setTimeout(() => {\n      this.scaleText('value');\n      this.scaleText('units');\n    });\n  }\n\n  update(): void {\n    super.update();\n\n    this.hasPreviousValue = this.previousValue !== undefined;\n    this.max = Math.max(this.max, this.value);\n    this.min = Math.min(this.min, this.value);\n    if (this.hasPreviousValue) {\n      this.max = Math.max(this.max, this.previousValue);\n      this.min = Math.min(this.min, this.previousValue);\n    }\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin\n    });\n\n    this.valueDomain = this.getValueDomain();\n    this.valueScale = this.getValueScale();\n    this.displayValue = this.getDisplayValue();\n\n    this.setColors();\n\n    const xOffset = this.margin[3] + this.dims.width / 2;\n    const yOffset = this.margin[0] + this.dims.height / 2;\n\n    this.transform = `translate(${xOffset}, ${yOffset})`;\n    this.transformLine = `translate(${this.margin[3] + this.valueScale(this.previousValue)}, ${yOffset})`;\n    this.valueTranslate = `translate(0, -15)`;\n    this.unitsTranslate = `translate(0, 15)`;\n    setTimeout(() => this.scaleText('value'), 50);\n    setTimeout(() => this.scaleText('units'), 50);\n  }\n\n  getValueDomain(): any[] {\n    return [this.min, this.max];\n  }\n\n  getValueScale(): any {\n    return scaleLinear()\n      .range([0, this.dims.width])\n      .domain(this.valueDomain);\n  }\n\n  getDisplayValue(): string {\n    if (this.valueFormatting) {\n      return this.valueFormatting(this.value);\n    }\n    return this.value.toLocaleString();\n  }\n\n  scaleText(element, repeat: boolean = true): void {\n    let el;\n    let resizeScale;\n    if (element === 'value') {\n      el = this.valueTextEl;\n      resizeScale = this.valueResizeScale;\n    } else {\n      el = this.unitsTextEl;\n      resizeScale = this.unitsResizeScale;\n    }\n\n    const { width, height } = el.nativeElement.getBoundingClientRect();\n    if (width === 0 || height === 0) return;\n    const oldScale = resizeScale;\n    const availableWidth = this.dims.width;\n    const availableHeight = Math.max(this.dims.height / 2 - 15, 0);\n    const resizeScaleWidth = Math.floor((availableWidth / (width / resizeScale)) * 100) / 100;\n    const resizeScaleHeight = Math.floor((availableHeight / (height / resizeScale)) * 100) / 100;\n    resizeScale = Math.min(resizeScaleHeight, resizeScaleWidth);\n\n    if (resizeScale !== oldScale) {\n      if (element === 'value') {\n        this.valueResizeScale = resizeScale;\n        this.valueTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n      } else {\n        this.unitsResizeScale = resizeScale;\n        this.unitsTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n      }\n      this.cd.markForCheck();\n      if (repeat) {\n        setTimeout(() => {\n          this.scaleText(element, false);\n        }, 50);\n      }\n    }\n  }\n\n  onClick(): void {\n    this.select.emit({\n      name: 'Value',\n      value: this.value\n    });\n  }\n\n  setColors(): void {\n    this.colors = new ColorHelper(this.scheme, 'ordinal', [this.value], this.customColors);\n  }\n}\n","import {\n  Component,\n  Input,\n  ElementRef,\n  ViewChild,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { scaleLinear } from 'd3-scale';\n\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\n\n@Component({\n  selector: 'ngx-charts-gauge',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"gauge chart\">\n        <svg:g *ngFor=\"let arc of arcs; trackBy: trackBy\" [attr.transform]=\"rotation\">\n          <svg:g\n            ngx-charts-gauge-arc\n            [backgroundArc]=\"arc.backgroundArc\"\n            [valueArc]=\"arc.valueArc\"\n            [cornerRadius]=\"cornerRadius\"\n            [colors]=\"colors\"\n            [isActive]=\"isActive(arc.valueArc.data)\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [valueFormatting]=\"valueFormatting\"\n            [animations]=\"animations\"\n            (select)=\"onClick($event)\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n          ></svg:g>\n        </svg:g>\n\n        <svg:g\n          ngx-charts-gauge-axis\n          *ngIf=\"showAxis\"\n          [bigSegments]=\"bigSegments\"\n          [smallSegments]=\"smallSegments\"\n          [min]=\"min\"\n          [max]=\"max\"\n          [radius]=\"outerRadius\"\n          [angleSpan]=\"angleSpan\"\n          [valueScale]=\"valueScale\"\n          [startAngle]=\"startAngle\"\n          [tickFormatting]=\"axisTickFormatting\"\n        ></svg:g>\n\n        <svg:text\n          #textEl\n          *ngIf=\"showText\"\n          [style.textAnchor]=\"'middle'\"\n          [attr.transform]=\"textTransform\"\n          alignment-baseline=\"central\"\n        >\n          <tspan x=\"0\" dy=\"0\">{{ displayValue }}</tspan>\n          <tspan x=\"0\" dy=\"1.2em\">{{ units }}</tspan>\n        </svg:text>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss', './gauge.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GaugeComponent extends BaseChartComponent implements AfterViewInit {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() min: number = 0;\n  @Input() max: number = 100;\n  @Input() textValue: string;\n  @Input() units: string;\n  @Input() bigSegments: number = 10;\n  @Input() smallSegments: number = 5;\n  @Input() results: any[];\n  @Input() showAxis: boolean = true;\n  @Input() startAngle: number = -120;\n  @Input() angleSpan: number = 240;\n  @Input() activeEntries: any[] = [];\n  @Input() axisTickFormatting: any;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() valueFormatting: (value: any) => string;\n  @Input() showText: boolean = true;\n\n  // Specify margins\n  @Input() margin: any[];\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  @ViewChild('textEl') textEl: ElementRef;\n\n  dims: ViewDimensions;\n  domain: any[];\n  valueDomain: any;\n  valueScale: any;\n\n  colors: ColorHelper;\n  transform: string;\n\n  outerRadius: number;\n  textRadius: number; // max available radius for the text\n  resizeScale: number = 1;\n  rotation: string = '';\n  textTransform: string = 'scale(1, 1)';\n  cornerRadius: number = 10;\n  arcs: any[];\n  displayValue: string;\n  legendOptions: any;\n\n  ngAfterViewInit(): void {\n    super.ngAfterViewInit();\n    setTimeout(() => this.scaleText());\n  }\n\n  update(): void {\n    super.update();\n\n    if (!this.showAxis) {\n      if (!this.margin) {\n        this.margin = [10, 20, 10, 20];\n      }\n    } else {\n      if (!this.margin) {\n        this.margin = [60, 100, 60, 100];\n      }\n    }\n\n    // make the starting angle positive\n    if (this.startAngle < 0) {\n      this.startAngle = (this.startAngle % 360) + 360;\n    }\n\n    this.angleSpan = Math.min(this.angleSpan, 360);\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showLegend: this.legend,\n      legendPosition: this.legendPosition\n    });\n\n    this.domain = this.getDomain();\n    this.valueDomain = this.getValueDomain();\n    this.valueScale = this.getValueScale();\n    this.displayValue = this.getDisplayValue();\n\n    this.outerRadius = Math.min(this.dims.width, this.dims.height) / 2;\n\n    this.arcs = this.getArcs();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    const xOffset = this.margin[3] + this.dims.width / 2;\n    const yOffset = this.margin[0] + this.dims.height / 2;\n\n    this.transform = `translate(${xOffset}, ${yOffset})`;\n    this.rotation = `rotate(${this.startAngle})`;\n    setTimeout(() => this.scaleText(), 50);\n  }\n\n  getArcs(): any[] {\n    const arcs = [];\n\n    const availableRadius = this.outerRadius * 0.7;\n\n    const radiusPerArc = Math.min(availableRadius / this.results.length, 10);\n    const arcWidth = radiusPerArc * 0.7;\n    this.textRadius = this.outerRadius - this.results.length * radiusPerArc;\n    this.cornerRadius = Math.floor(arcWidth / 2);\n\n    let i = 0;\n    for (const d of this.results) {\n      const outerRadius = this.outerRadius - i * radiusPerArc;\n      const innerRadius = outerRadius - arcWidth;\n\n      const backgroundArc = {\n        endAngle: (this.angleSpan * Math.PI) / 180,\n        innerRadius,\n        outerRadius,\n        data: {\n          value: this.max,\n          name: d.name\n        }\n      };\n\n      const valueArc = {\n        endAngle: (Math.min(this.valueScale(d.value), this.angleSpan) * Math.PI) / 180,\n        innerRadius,\n        outerRadius,\n        data: {\n          value: d.value,\n          name: d.name\n        }\n      };\n\n      const arc = {\n        backgroundArc,\n        valueArc\n      };\n\n      arcs.push(arc);\n      i++;\n    }\n\n    return arcs;\n  }\n\n  getDomain(): any[] {\n    return this.results.map(d => d.name);\n  }\n\n  getValueDomain(): any[] {\n    const values = this.results.map(d => d.value);\n    const dataMin = Math.min(...values);\n    const dataMax = Math.max(...values);\n\n    if (this.min !== undefined) {\n      this.min = Math.min(this.min, dataMin);\n    } else {\n      this.min = dataMin;\n    }\n\n    if (this.max !== undefined) {\n      this.max = Math.max(this.max, dataMax);\n    } else {\n      this.max = dataMax;\n    }\n\n    return [this.min, this.max];\n  }\n\n  getValueScale(): any {\n    return scaleLinear()\n      .range([0, this.angleSpan])\n      .nice()\n      .domain(this.valueDomain);\n  }\n\n  getDisplayValue(): string {\n    const value = this.results.map(d => d.value).reduce((a, b) => a + b, 0);\n\n    if (this.textValue && 0 !== this.textValue.length) {\n      return this.textValue.toLocaleString();\n    }\n\n    if (this.valueFormatting) {\n      return this.valueFormatting(value);\n    }\n\n    return value.toLocaleString();\n  }\n\n  scaleText(repeat: boolean = true): void {\n    if (!this.showText) {\n      return;\n    }\n    const { width } = this.textEl.nativeElement.getBoundingClientRect();\n    const oldScale = this.resizeScale;\n\n    if (width === 0) {\n      this.resizeScale = 1;\n    } else {\n      const availableSpace = this.textRadius;\n      this.resizeScale = Math.floor((availableSpace / (width / this.resizeScale)) * 100) / 100;\n    }\n\n    if (this.resizeScale !== oldScale) {\n      this.textTransform = `scale(${this.resizeScale}, ${this.resizeScale})`;\n      this.cd.markForCheck();\n      if (repeat) {\n        setTimeout(() => this.scaleText(false), 50);\n      }\n    }\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  getLegendOptions(): any {\n    return {\n      scaleType: 'ordinal',\n      colors: this.colors,\n      domain: this.domain,\n      title: this.legendTitle,\n      position: this.legendPosition\n    };\n  }\n\n  setColors(): void {\n    this.colors = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\n  }\n\n  onActivate(item): void {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item): void {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name && entry.series === d.series;\n    });\n    return item !== undefined;\n  }\n\n  trackBy(index, item): string {\n    return item.valueArc.data.name;\n  }\n}\n","import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy, TemplateRef } from '@angular/core';\nimport { formatLabel, escapeLabel } from '../common/label.helper';\nimport { ColorHelper } from '../common/color.helper';\n\n@Component({\n  selector: 'g[ngx-charts-gauge-arc]',\n  template: `\n    <svg:g\n      ngx-charts-pie-arc\n      class=\"background-arc\"\n      [startAngle]=\"0\"\n      [endAngle]=\"backgroundArc.endAngle\"\n      [innerRadius]=\"backgroundArc.innerRadius\"\n      [outerRadius]=\"backgroundArc.outerRadius\"\n      [cornerRadius]=\"cornerRadius\"\n      [data]=\"backgroundArc.data\"\n      [animate]=\"false\"\n      [pointerEvents]=\"false\"\n    ></svg:g>\n    <svg:g\n      ngx-charts-pie-arc\n      [startAngle]=\"0\"\n      [endAngle]=\"valueArc.endAngle\"\n      [innerRadius]=\"valueArc.innerRadius\"\n      [outerRadius]=\"valueArc.outerRadius\"\n      [cornerRadius]=\"cornerRadius\"\n      [fill]=\"colors.getColor(valueArc.data.name)\"\n      [data]=\"valueArc.data\"\n      [animate]=\"animations\"\n      [isActive]=\"isActive\"\n      (select)=\"select.emit($event)\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"'top'\"\n      [tooltipType]=\"'tooltip'\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(valueArc)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"valueArc.data\"\n    ></svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GaugeArcComponent {\n  @Input() backgroundArc: any;\n  @Input() valueArc: any;\n  @Input() cornerRadius: any;\n  @Input() colors: ColorHelper;\n  @Input() isActive: boolean = false;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() valueFormatting: (value: any) => string;\n  @Input() tooltipTemplate: TemplateRef<any>;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n\n  tooltipText(arc): string {\n    const label = formatLabel(arc.data.name);\n    let val;\n\n    if (this.valueFormatting) {\n      val = this.valueFormatting(arc.data.value);\n    } else {\n      val = formatLabel(arc.data.value);\n    }\n\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${val}</span>\n    `;\n  }\n}\n","import { Component, Input, OnChanges, SimpleChanges, ChangeDetectionStrategy } from '@angular/core';\nimport { line } from 'd3-shape';\n\n@Component({\n  selector: 'g[ngx-charts-gauge-axis]',\n  template: `\n    <svg:g [attr.transform]=\"rotate\">\n      <svg:g *ngFor=\"let tick of ticks.big\" class=\"gauge-tick gauge-tick-large\">\n        <svg:path [attr.d]=\"tick.line\" />\n      </svg:g>\n      <svg:g *ngFor=\"let tick of ticks.big\" class=\"gauge-tick gauge-tick-large\">\n        <svg:text\n          [style.textAnchor]=\"tick.textAnchor\"\n          [attr.transform]=\"tick.textTransform\"\n          alignment-baseline=\"central\"\n        >\n          {{ tick.text }}\n        </svg:text>\n      </svg:g>\n      <svg:g *ngFor=\"let tick of ticks.small\" class=\"gauge-tick gauge-tick-small\">\n        <svg:path [attr.d]=\"tick.line\" />\n      </svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GaugeAxisComponent implements OnChanges {\n  @Input() bigSegments: any;\n  @Input() smallSegments: any;\n  @Input() min: any;\n  @Input() max: any;\n  @Input() angleSpan: number;\n  @Input() startAngle: number;\n  @Input() radius: any;\n  @Input() valueScale: any;\n  @Input() tickFormatting: any;\n\n  ticks: any;\n  rotationAngle: number;\n  rotate: string = '';\n\n  ngOnChanges(changes: SimpleChanges) {\n    this.update();\n  }\n\n  update(): void {\n    this.rotationAngle = -90 + this.startAngle;\n    this.rotate = `rotate(${this.rotationAngle})`;\n    this.ticks = this.getTicks();\n  }\n\n  getTicks(): any {\n    const bigTickSegment = this.angleSpan / this.bigSegments;\n    const smallTickSegment = bigTickSegment / this.smallSegments;\n    const tickLength = 20;\n    const ticks = {\n      big: [],\n      small: []\n    };\n\n    const startDistance = this.radius + 10;\n    const textDist = startDistance + tickLength + 10;\n\n    for (let i = 0; i <= this.bigSegments; i++) {\n      const angleDeg = i * bigTickSegment;\n      const angle = (angleDeg * Math.PI) / 180;\n\n      const textAnchor = this.getTextAnchor(angleDeg);\n\n      let skip = false;\n      if (i === 0 && this.angleSpan === 360) {\n        skip = true;\n      }\n\n      if (!skip) {\n        let text = Number.parseFloat(this.valueScale.invert(angleDeg).toString()).toLocaleString();\n        if (this.tickFormatting) {\n          text = this.tickFormatting(text);\n        }\n        ticks.big.push({\n          line: this.getTickPath(startDistance, tickLength, angle),\n          textAnchor,\n          text,\n          textTransform: `\n            translate(${textDist * Math.cos(angle)}, ${textDist * Math.sin(angle)}) rotate(${-this.rotationAngle})\n          `\n        });\n      }\n\n      if (i === this.bigSegments) {\n        continue;\n      }\n\n      for (let j = 1; j <= this.smallSegments; j++) {\n        const smallAngleDeg = angleDeg + j * smallTickSegment;\n        const smallAngle = (smallAngleDeg * Math.PI) / 180;\n\n        ticks.small.push({\n          line: this.getTickPath(startDistance, tickLength / 2, smallAngle)\n        });\n      }\n    }\n\n    return ticks;\n  }\n\n  getTextAnchor(angle) {\n    // [0, 45] = 'middle';\n    // [46, 135] = 'start';\n    // [136, 225] = 'middle';\n    // [226, 315] = 'end';\n\n    angle = (this.startAngle + angle) % 360;\n    let textAnchor = 'middle';\n    if (angle > 45 && angle <= 135) {\n      textAnchor = 'start';\n    } else if (angle > 225 && angle <= 315) {\n      textAnchor = 'end';\n    }\n    return textAnchor;\n  }\n\n  getTickPath(startDistance, tickLength, angle): any {\n    const y1 = startDistance * Math.sin(angle);\n    const y2 = (startDistance + tickLength) * Math.sin(angle);\n    const x1 = startDistance * Math.cos(angle);\n    const x2 = (startDistance + tickLength) * Math.cos(angle);\n\n    const points = [\n      { x: x1, y: y1 },\n      { x: x2, y: y2 }\n    ];\n    const lineGenerator = line<any>()\n      .x(d => d.x)\n      .y(d => d.y);\n    return lineGenerator(points);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { LinearGaugeComponent } from './linear-gauge.component';\nimport { GaugeComponent } from './gauge.component';\nimport { GaugeArcComponent } from './gauge-arc.component';\nimport { GaugeAxisComponent } from './gauge-axis.component';\nimport { PieChartModule } from '../pie-chart/pie-chart.module';\nimport { BarChartModule } from '../bar-chart/bar-chart.module';\n\n@NgModule({\n  imports: [ChartCommonModule, PieChartModule, BarChartModule],\n  declarations: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent],\n  exports: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent]\n})\nexport class GaugeModule {}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from './common/chart-common.module';\nimport { AreaChartModule } from './area-chart/area-chart.module';\nimport { BarChartModule } from './bar-chart/bar-chart.module';\nimport { BubbleChartModule } from './bubble-chart/bubble-chart.module';\nimport { HeatMapModule } from './heat-map/heat-map.module';\nimport { LineChartModule } from './line-chart/line-chart.module';\nimport { PolarChartModule } from './polar-chart/polar-chart.module';\nimport { NumberCardModule } from './number-card/number-card.module';\nimport { PieChartModule } from './pie-chart/pie-chart.module';\nimport { TreeMapModule } from './tree-map/tree-map.module';\nimport { GaugeModule } from './gauge/gauge.module';\nimport { ngxChartsPolyfills } from './polyfills';\n\n@NgModule({\n  exports: [\n    ChartCommonModule,\n    AreaChartModule,\n    BarChartModule,\n    BubbleChartModule,\n    HeatMapModule,\n    LineChartModule,\n    PolarChartModule,\n    NumberCardModule,\n    PieChartModule,\n    TreeMapModule,\n    GaugeModule\n  ]\n})\nexport class NgxChartsModule {\n  constructor() {\n    ngxChartsPolyfills();\n  }\n}\n","// The export is needed here to generate a valid polyfills.metadata.json file\nexport function ngxChartsPolyfills() {\n  // IE11 fix\n  // Ref: https://github.com/swimlane/ngx-charts/issues/386\n  if (typeof SVGElement !== 'undefined' && typeof SVGElement.prototype.contains === 'undefined') {\n    SVGElement.prototype.contains = HTMLDivElement.prototype.contains;\n  }\n}\n","import { timeFormat } from 'd3-time-format';\n\nexport function tickFormat(fieldType, groupByType): (label: string) => string {\n  return function(label: string): string {\n    if (label === 'No Value' || label === 'Other') {\n      return label;\n    }\n    if (fieldType === 'date' && groupByType === 'groupBy') {\n      const formatter = timeFormat('MM/DD/YYYY');\n      return formatter(<any>label);\n    }\n\n    return label.toString();\n  };\n}\n"]}