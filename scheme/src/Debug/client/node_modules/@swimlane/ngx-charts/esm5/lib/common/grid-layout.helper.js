import { __read } from "tslib";
import { scaleBand } from 'd3-scale';
export function gridSize(dims, len, minWidth) {
    var rows = 1;
    var cols = len;
    var width = dims.width;
    if (width > minWidth) {
        while (width / cols < minWidth) {
            rows += 1;
            cols = Math.ceil(len / rows);
        }
    }
    return [cols, rows];
}
export function gridLayout(dims, data, minWidth, designatedTotal) {
    var xScale = scaleBand();
    var yScale = scaleBand();
    var width = dims.width;
    var height = dims.height;
    var _a = __read(gridSize(dims, data.length, minWidth), 2), columns = _a[0], rows = _a[1];
    var xDomain = [];
    var yDomain = [];
    for (var i = 0; i < rows; i++) {
        yDomain.push(i);
    }
    for (var i = 0; i < columns; i++) {
        xDomain.push(i);
    }
    xScale.domain(xDomain);
    yScale.domain(yDomain);
    xScale.rangeRound([0, width], 0.1);
    yScale.rangeRound([0, height], 0.1);
    var res = [];
    var total = designatedTotal ? designatedTotal : getTotal(data);
    var cardWidth = xScale.bandwidth();
    var cardHeight = yScale.bandwidth();
    for (var i = 0; i < data.length; i++) {
        res[i] = {};
        res[i].data = {
            name: data[i] ? data[i].name : '',
            value: data[i] ? data[i].value : undefined,
            extra: data[i] ? data[i].extra : undefined,
            label: data[i] ? data[i].label : ''
        };
        res[i].x = xScale(i % columns);
        res[i].y = yScale(Math.floor(i / columns));
        res[i].width = cardWidth;
        res[i].height = cardHeight;
        res[i].data.percent = total > 0 ? res[i].data.value / total : 0;
        res[i].data.total = total;
    }
    return res;
}
function getTotal(results) {
    return results.map(function (d) { return (d ? d.value : 0); }).reduce(function (sum, val) { return sum + val; }, 0);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC1sYXlvdXQuaGVscGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHN3aW1sYW5lL25neC1jaGFydHMvIiwic291cmNlcyI6WyJsaWIvY29tbW9uL2dyaWQtbGF5b3V0LmhlbHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUVyQyxNQUFNLFVBQVUsUUFBUSxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsUUFBUTtJQUMxQyxJQUFJLElBQUksR0FBRyxDQUFDLENBQUM7SUFDYixJQUFJLElBQUksR0FBRyxHQUFHLENBQUM7SUFDZixJQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBRXpCLElBQUksS0FBSyxHQUFHLFFBQVEsRUFBRTtRQUNwQixPQUFPLEtBQUssR0FBRyxJQUFJLEdBQUcsUUFBUSxFQUFFO1lBQzlCLElBQUksSUFBSSxDQUFDLENBQUM7WUFDVixJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLENBQUM7U0FDOUI7S0FDRjtJQUVELE9BQU8sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDdEIsQ0FBQztBQUVELE1BQU0sVUFBVSxVQUFVLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsZUFBZTtJQUM5RCxJQUFNLE1BQU0sR0FBUSxTQUFTLEVBQVUsQ0FBQztJQUN4QyxJQUFNLE1BQU0sR0FBUSxTQUFTLEVBQVUsQ0FBQztJQUN4QyxJQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3pCLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7SUFFckIsSUFBQSxxREFBdUQsRUFBdEQsZUFBTyxFQUFFLFlBQTZDLENBQUM7SUFFOUQsSUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDO0lBQ25CLElBQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQztJQUNuQixLQUFL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QUFPLENBQUMsR0FBRyxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFqQixDQUFpQixDQUFDLENBQUMsTUFBTSxDQUFDLFVBQUMsR0FBRyxFQUFFLEdBQUcsSUFBSyxPQUFBLEdBQUcsR0FBRyxHQUFHLEVBQVQsQ0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzY2FsZUJhbmQgfSBmcm9tICdkMy1zY2FsZSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBncmlkU2l6ZShkaW1zLCBsZW4sIG1pbldpZHRoKSB7XG4gIGxldCByb3dzID0gMTtcbiAgbGV0IGNvbHMgPSBsZW47XG4gIGNvbnN0IHdpZHRoID0gZGltcy53aWR0aDtcblxuICBpZiAod2lkdGggPiBtaW5XaWR0aCkge1xuICAgIHdoaWxlICh3aWR0aCAvIGNvbHMgPCBtaW5XaWR0aCkge1xuICAgICAgcm93cyArPSAxO1xuICAgICAgY29scyA9IE1hdGguY2VpbChsZW4gLyByb3dzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gW2NvbHMsIHJvd3NdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ3JpZExheW91dChkaW1zLCBkYXRhLCBtaW5XaWR0aCwgZGVzaWduYXRlZFRvdGFsKSB7XG4gIGNvbnN0IHhTY2FsZTogYW55ID0gc2NhbGVCYW5kPG51bWJlcj4oKTtcbiAgY29uc3QgeVNjYWxlOiBhbnkgPSBzY2FsZUJhbmQ8bnVtYmVyPigpO1xuICBjb25zdCB3aWR0aCA9IGRpbXMud2lkdGg7XG4gIGNvbnN0IGhlaWdodCA9IGRpbXMuaGVpZ2h0O1xuXG4gIGNvbnN0IFtjb2x1bW5zLCByb3dzXSA9IGdyaWRTaXplKGRpbXMsIGRhdGEubGVuZ3RoLCBtaW5XaWR0aCk7XG5cbiAgY29uc3QgeERvbWFpbiA9IFtdO1xuICBjb25zdCB5RG9tYWluID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcm93czsgaSsrKSB7XG4gICAgeURvbWFpbi5wdXNoKGkpO1xuICB9XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgY29sdW1uczsgaSsrKSB7XG4gICAgeERvbWFpbi5wdXNoKGkpO1xuICB9XG4gIHhTY2FsZS5kb21haW4oeERvbWFpbik7XG4gIHlTY2FsZS5kb21haW4oeURvbWFpbik7XG5cbiAgeFNjYWxlLnJhbmdlUm91bmQoWzAsIHdpZHRoXSwgMC4xKTtcbiAgeVNjYWxlLnJhbmdlUm91bmQoWzAsIGhlaWdodF0sIDAuMSk7XG5cbiAgY29uc3QgcmVzID0gW107XG4gIGNvbnN0IHRvdGFsID0gZGVzaWduYXRlZFRvdGFsID8gZGVzaWduYXRlZFRvdGFsIDogZ2V0VG90YWwoZGF0YSk7XG4gIGNvbnN0IGNhcmRXaWR0aCA9IHhTY2FsZS5iYW5kd2lkdGgoKTtcbiAgY29uc3QgY2FyZEhlaWdodCA9IHlTY2FsZS5iYW5kd2lkdGgoKTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICByZXNbaV0gPSB7fTtcbiAgICByZXNbaV0uZGF0YSA9IHtcbiAgICAgIG5hbWU6IGRhdGFbaV0gPyBkYXRhW2ldLm5hbWUgOiAnJyxcbiAgICAgIHZhbHVlOiBkYXRhW2ldID8gZGF0YVtpXS52YWx1ZSA6IHVuZGVmaW5lZCxcbiAgICAgIGV4dHJhOiBkYXRhW2ldID8gZGF0YVtpXS5leHRyYSA6IHVuZGVmaW5lZCxcbiAgICAgIGxhYmVsOiBkYXRhW2ldID8gZGF0YVtpXS5sYWJlbCA6ICcnXG4gICAgfTtcbiAgICByZXNbaV0ueCA9IHhTY2FsZShpICUgY29sdW1ucyk7XG4gICAgcmVzW2ldLnkgPSB5U2NhbGUoTWF0aC5mbG9vcihpIC8gY29sdW1ucykpO1xuICAgIHJlc1tpXS53aWR0aCA9IGNhcmRXaWR0aDtcbiAgICByZXNbaV0uaGVpZ2h0ID0gY2FyZEhlaWdodDtcbiAgICByZXNbaV0uZGF0YS5wZXJjZW50ID0gdG90YWwgPiAwID8gcmVzW2ldLmRhdGEudmFsdWUgLyB0b3RhbCA6IDA7XG4gICAgcmVzW2ldLmRhdGEudG90YWwgPSB0b3RhbDtcbiAgfVxuXG4gIHJldHVybiByZXM7XG59XG5cbmZ1bmN0aW9uIGdldFRvdGFsKHJlc3VsdHMpIHtcbiAgcmV0dXJuIHJlc3VsdHMubWFwKGQgPT4gKGQgPyBkLnZhbHVlIDogMCkpLnJlZHVjZSgoc3VtLCB2YWwpID0+IHN1bSArIHZhbCwgMCk7XG59XG4iXX0=