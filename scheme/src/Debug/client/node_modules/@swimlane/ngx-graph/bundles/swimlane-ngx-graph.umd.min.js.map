{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","ng://@swimlane/ngx-graph/lib/utils/id.ts","ng://@swimlane/ngx-graph/lib/graph/layouts/dagre.ts","ng://@swimlane/ngx-graph/lib/graph/layouts/dagreCluster.ts","ng://@swimlane/ngx-graph/lib/graph/layouts/dagreNodesOnly.ts","ng://@swimlane/ngx-graph/lib/graph/layouts/d3ForceDirected.ts","ng://@swimlane/ngx-graph/lib/graph/layouts/colaForceDirected.ts","ng://@swimlane/ngx-graph/lib/enums/panning.enum.ts","ng://@swimlane/ngx-graph/lib/graph/layouts/layout.service.ts","ng://@swimlane/ngx-graph/lib/graph/graph.component.ts","ng://@swimlane/ngx-graph/lib/graph/mouse-wheel.directive.ts","ng://@swimlane/ngx-graph/lib/graph/graph.module.ts","ng://@swimlane/ngx-graph/lib/ngx-graph.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__assign","assign","t","s","i","n","arguments","length","prototype","call","apply","this","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__metadata","metadataKey","metadataValue","metadata","__values","o","Symbol","iterator","m","next","value","done","TypeError","__read","e","ar","push","error","__spread","concat","Orientation","Alignment","cache","id","newId","Math","random","pow","toString","slice","DagreLayout","defaultSettings","orientation","LEFT_TO_RIGHT","marginX","marginY","edgePadding","rankPadding","nodePadding","multigraph","compound","settings","run","graph","createDagreGraph","dagre.layout","dagreGraph","edgeLabels","_edgeLabels","dagreNodeId","dagreNode","this_1","_nodes","node","nodes","find","position","x","y","dimension","width","height","updateEdge","edge","sourceNode","source","targetNode","dir","startingPoint","endingPoint","points","dagre.graphlib","Graph","setGraph","rankdir","marginx","marginy","edgesep","ranksep","nodesep","align","acyclicer","ranker","setDefaultEdgeLabel","dagreNodes","map","dagreEdges","edges","l","newLink","_c","_d","setNode","_e","_f","setEdge","DagreClusterLayout","_this","dagreToOutput","clusters","dagreClusters","cluster","childNodeIds","forEach","childNodeId","setParent","_g","_h","_j","DagreNodesOnlyLayout","curveDistance","_b","rankAxis","orderAxis","rankDimension","_a","edgeLabelId","matchingEdgeLabel","toD3Node","maybeNode","D3ForceDirectedLayout","force","forceSimulation","forceManyBody","strength","forceCollide","forceLink","distance","outputGraph$","Subject","inputGraph","d3Graph","outputGraph","links","alpha","restart","on","d3GraphToOutputGraph","asObservable","transform","onDragStart","draggingNode","$event","alphaTarget","d3Node","draggingStart","fx","fy","onDrag","onDragEnd","undefined","toNode","nodeRef","PanningAxis","ColaForceDirectedLayout","d3adaptor","d3Dispatch","d3Force","d3Timer","linkDistance","avoidOverlaps","viewDimensions","xOffset","internalGraph","groups","padding","nodeId","findIndex","filter","leaves","sourceNodeIndex","targetNodeIndex","groupLinks","onTickListener","internalGraphToOutputGraph","size","forceModifierFn","start","bounds","rayIntersection","cx","cy","groupLink","foundNode","foundGroup","group","index","inputGroup","nodeIndex","fixed","layouts","dagre","dagreCluster","dagreNodesOnly","d3ForceDirected","colaForceDirected","LayoutService","getLayout","name","Error","Injectable","GraphComponent","el","zone","cd","layoutService","_super","legend","activeEntries","draggingEnabled","panningEnabled","panningAxis","Both","enableZoom","zoomSpeed","minZoomLevel","maxZoomLevel","autoZoom","panOnZoom","animate","autoCenter","enableTrackpadSupport","activate","EventEmitter","deactivate","zoomChange","clickHandler","isMouseMoveCalled","graphSubscription","Subscription","subscriptions","margin","results","isPanning","isDragging","initialized","graphDims","_oldLinks","oldNodes","Set","oldClusters","transformationMatrix","identity","_touchLastX","_touchLastY","groupResultsBy","label","__","constructor","create","__extends","a","level","zoomTo","Number","panTo","f","ngOnInit","update$","subscribe","update","center$","center","zoomToFit$","zoomToFit","panToNode$","panToNodeId","ngOnChanges","changes","layout","layoutSettings","setLayout","setLayoutSettings","ngOnDestroy","unsubscribe","ngAfterViewInit","setTimeout","curve","shape.curveBundle","beta","dims","calculateViewDimensions","margins","showLegend","seriesDomain","getSeriesDomain","setColors","legendOptions","getLegendOptions","createGraph","updateTransform","initializeNode","meta","forceDimensions","nodeWidth","nodeHeight","data","requestAnimationFrame","draw","applyNodeDimensions","result","result$","Observable","of","add","tick","pipe","first","color","colors","getColor","newLinks","edgeLabel","normKey","replace","isMultigraph","oldLink","ol","linkFromGraph","nl","JSON","stringify","oldLine","line","generateLine","updateMidpointOnEdge","textPos","floor","textTransform","textAngle","calcDominantBaseline","newL","max","redrawLines","markForCheck","nodeElements","elem","nativeElement","getBBox","ex","nodeMaxHeight","nodeMinHeight","min","getElementsByTagName","maxTextDims","currentBBox","nodeMaxWidth","nodeMinWidth","_animate","linkElements","linkEl","lin","select","attr","transition","ease","ease.easeSinInOut","duration","chartElement","oldTextPath","textPath","link","firstPoint","lastPoint","dominantBaseline","reverse","shape\n            .line","lineFunction","onZoom","direction","ctrlKey","zoomFactor","newZoomLevel","zoomLevel","mouseX","clientX","mouseY","clientY","svg","chart","querySelector","svgGroup","point","createSVGPoint","svgPoint","matrixTransform","getScreenCTM","inverse","pan","zoom","deltaX","deltaY","ignoreZoomLevel","translate","isNaN","panX","panOffsetX","panY","panOffsetY","factor","scale","emit","onPan","event","movementX","movementY","this_2","redrawEdge","toSVG","smoothMatrix","onClick","onActivate","indexOf","entries","onDeactivate","idx","splice","reduce","sort","trackLinkBy","trackNodeBy","ColorHelper","scheme","customColors","scaleType","domain","onMouseMove","checkEnum","onMouseDown","graphClick","onTouchStart","changedTouches","onTouchMove","onTouchEnd","onMouseUp","onNodeMouseDown","heightZoom","widthZoom","Horizontal","Vertical","midPoint","_first","_second","ElementRef","NgZone","ChangeDetectorRef","Input","Output","ContentChild","TemplateRef","ViewChild","ChartComponent","read","static","ViewChildren","QueryList","HostListener","MouseEvent","Component","selector","template","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","BaseChartComponent","MouseWheelDirective","mouseWheelUp","mouseWheelDown","onMouseWheelChrome","mouseWheelFunc","onMouseWheelFirefox","onWheel","onMouseWheelIE","window","delta","wheelDelta","detail","isWheelMouseUp","isWheelMouseDown","returnValue","preventDefault","Directive","GraphModule","NgModule","imports","ChartCommonModule","declarations","exports","providers","NgxGraphModule","NgxChartsModule"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","const cache = {};\n\n/**\n * Generates a short id.\n *\n */\nexport function id(): string {\n  let newId = ('0000' + ((Math.random() * Math.pow(36, 4)) << 0).toString(36)).slice(-4);\n\n  newId = `a${newId}`;\n\n  // ensure not already used\n  if (!cache[newId]) {\n    cache[newId] = true;\n    return newId;\n  }\n\n  return id();\n}\n","import { Layout } from '../../models/layout.model';\nimport { Graph } from '../../models/graph.model';\nimport { id } from '../../utils/id';\nimport * as dagre from 'dagre';\nimport { Edge } from '../../models/edge.model';\n\nexport enum Orientation {\n  LEFT_TO_RIGHT = 'LR',\n  RIGHT_TO_LEFT = 'RL',\n  TOP_TO_BOTTOM = 'TB',\n  BOTTOM_TO_TOM = 'BT'\n}\nexport enum Alignment {\n  CENTER = 'C',\n  UP_LEFT = 'UL',\n  UP_RIGHT = 'UR',\n  DOWN_LEFT = 'DL',\n  DOWN_RIGHT = 'DR'\n}\n\nexport interface DagreSettings {\n  orientation?: Orientation;\n  marginX?: number;\n  marginY?: number;\n  edgePadding?: number;\n  rankPadding?: number;\n  nodePadding?: number;\n  align?: Alignment;\n  acyclicer?: 'greedy' | undefined;\n  ranker?: 'network-simplex' | 'tight-tree' | 'longest-path';\n  multigraph?: boolean;\n  compound?: boolean;\n}\n\nexport class DagreLayout implements Layout {\n  defaultSettings: DagreSettings = {\n    orientation: Orientation.LEFT_TO_RIGHT,\n    marginX: 20,\n    marginY: 20,\n    edgePadding: 100,\n    rankPadding: 100,\n    nodePadding: 50,\n    multigraph: true,\n    compound: true\n  };\n  settings: DagreSettings = {};\n\n  dagreGraph: any;\n  dagreNodes: any;\n  dagreEdges: any;\n\n  run(graph: Graph): Graph {\n    this.createDagreGraph(graph);\n    dagre.layout(this.dagreGraph);\n\n    graph.edgeLabels = this.dagreGraph._edgeLabels;\n\n    for (const dagreNodeId in this.dagreGraph._nodes) {\n      const dagreNode = this.dagreGraph._nodes[dagreNodeId];\n      const node = graph.nodes.find(n => n.id === dagreNode.id);\n      node.position = {\n        x: dagreNode.x,\n        y: dagreNode.y\n      };\n      node.dimension = {\n        width: dagreNode.width,\n        height: dagreNode.height\n      };\n    }\n\n    return graph;\n  }\n\n  updateEdge(graph: Graph, edge: Edge): Graph {\n    const sourceNode = graph.nodes.find(n => n.id === edge.source);\n    const targetNode = graph.nodes.find(n => n.id === edge.target);\n\n    // determine new arrow position\n    const dir = sourceNode.position.y <= targetNode.position.y ? -1 : 1;\n    const startingPoint = {\n      x: sourceNode.position.x,\n      y: sourceNode.position.y - dir * (sourceNode.dimension.height / 2)\n    };\n    const endingPoint = {\n      x: targetNode.position.x,\n      y: targetNode.position.y + dir * (targetNode.dimension.height / 2)\n    };\n\n    // generate new points\n    edge.points = [startingPoint, endingPoint];\n    return graph;\n  }\n\n  createDagreGraph(graph: Graph): any {\n    const settings = Object.assign({}, this.defaultSettings, this.settings);\n    this.dagreGraph = new dagre.graphlib.Graph({ compound: settings.compound, multigraph: settings.multigraph });\n\n    this.dagreGraph.setGraph({\n      rankdir: settings.orientation,\n      marginx: settings.marginX,\n      marginy: settings.marginY,\n      edgesep: settings.edgePadding,\n      ranksep: settings.rankPadding,\n      nodesep: settings.nodePadding,\n      align: settings.align,\n      acyclicer: settings.acyclicer,\n      ranker: settings.ranker,\n      multigraph: settings.multigraph,\n      compound: settings.compound\n    });\n\n    // Default to assigning a new object as a label for each new edge.\n    this.dagreGraph.setDefaultEdgeLabel(() => {\n      return {\n        /* empty */\n      };\n    });\n\n    this.dagreNodes = graph.nodes.map(n => {\n      const node: any = Object.assign({}, n);\n      node.width = n.dimension.width;\n      node.height = n.dimension.height;\n      node.x = n.position.x;\n      node.y = n.position.y;\n      return node;\n    });\n\n    this.dagreEdges = graph.edges.map(l => {\n      const newLink: any = Object.assign({}, l);\n      if (!newLink.id) {\n        newLink.id = id();\n      }\n      return newLink;\n    });\n\n    for (const node of this.dagreNodes) {\n      if (!node.width) {\n        node.width = 20;\n      }\n      if (!node.height) {\n        node.height = 30;\n      }\n\n      // update dagre\n      this.dagreGraph.setNode(node.id, node);\n    }\n\n    // update dagre\n    for (const edge of this.dagreEdges) {\n      if (settings.multigraph) {\n        this.dagreGraph.setEdge(edge.source, edge.target, edge, edge.id);\n      } else {\n        this.dagreGraph.setEdge(edge.source, edge.target);\n      }\n    }\n\n    return this.dagreGraph;\n  }\n}\n","import { Layout } from '../../models/layout.model';\nimport { Graph } from '../../models/graph.model';\nimport { id } from '../../utils/id';\nimport * as dagre from 'dagre';\nimport { Edge } from '../../models/edge.model';\nimport { Node, ClusterNode } from '../../models/node.model';\nimport { DagreSettings, Orientation } from './dagre';\n\nexport class DagreClusterLayout implements Layout {\n  defaultSettings: DagreSettings = {\n    orientation: Orientation.LEFT_TO_RIGHT,\n    marginX: 20,\n    marginY: 20,\n    edgePadding: 100,\n    rankPadding: 100,\n    nodePadding: 50,\n    multigraph: true,\n    compound: true\n  };\n  settings: DagreSettings = {};\n\n  dagreGraph: any;\n  dagreNodes: Node[];\n  dagreClusters: ClusterNode[];\n  dagreEdges: any;\n\n  run(graph: Graph): Graph {\n    this.createDagreGraph(graph);\n    dagre.layout(this.dagreGraph);\n\n    graph.edgeLabels = this.dagreGraph._edgeLabels;\n\n    const dagreToOutput = node => {\n      const dagreNode = this.dagreGraph._nodes[node.id];\n      return {\n        ...node,\n        position: {\n          x: dagreNode.x,\n          y: dagreNode.y\n        },\n        dimension: {\n          width: dagreNode.width,\n          height: dagreNode.height\n        }\n      };\n    };\n    graph.clusters = (graph.clusters || []).map(dagreToOutput);\n    graph.nodes = graph.nodes.map(dagreToOutput);\n\n    return graph;\n  }\n\n  updateEdge(graph: Graph, edge: Edge): Graph {\n    const sourceNode = graph.nodes.find(n => n.id === edge.source);\n    const targetNode = graph.nodes.find(n => n.id === edge.target);\n\n    // determine new arrow position\n    const dir = sourceNode.position.y <= targetNode.position.y ? -1 : 1;\n    const startingPoint = {\n      x: sourceNode.position.x,\n      y: sourceNode.position.y - dir * (sourceNode.dimension.height / 2)\n    };\n    const endingPoint = {\n      x: targetNode.position.x,\n      y: targetNode.position.y + dir * (targetNode.dimension.height / 2)\n    };\n\n    // generate new points\n    edge.points = [startingPoint, endingPoint];\n    return graph;\n  }\n\n  createDagreGraph(graph: Graph): any {\n    const settings = Object.assign({}, this.defaultSettings, this.settings);\n    this.dagreGraph = new dagre.graphlib.Graph({ compound: settings.compound, multigraph: settings.multigraph });\n    this.dagreGraph.setGraph({\n      rankdir: settings.orientation,\n      marginx: settings.marginX,\n      marginy: settings.marginY,\n      edgesep: settings.edgePadding,\n      ranksep: settings.rankPadding,\n      nodesep: settings.nodePadding,\n      align: settings.align,\n      acyclicer: settings.acyclicer,\n      ranker: settings.ranker,\n      multigraph: settings.multigraph,\n      compound: settings.compound\n    });\n\n    // Default to assigning a new object as a label for each new edge.\n    this.dagreGraph.setDefaultEdgeLabel(() => {\n      return {\n        /* empty */\n      };\n    });\n\n    this.dagreNodes = graph.nodes.map((n: Node) => {\n      const node: any = Object.assign({}, n);\n      node.width = n.dimension.width;\n      node.height = n.dimension.height;\n      node.x = n.position.x;\n      node.y = n.position.y;\n      return node;\n    });\n\n    this.dagreClusters = graph.clusters || [];\n\n    this.dagreEdges = graph.edges.map(l => {\n      const newLink: any = Object.assign({}, l);\n      if (!newLink.id) {\n        newLink.id = id();\n      }\n      return newLink;\n    });\n\n    for (const node of this.dagreNodes) {\n      this.dagreGraph.setNode(node.id, node);\n    }\n\n    for (const cluster of this.dagreClusters) {\n      this.dagreGraph.setNode(cluster.id, cluster);\n      cluster.childNodeIds.forEach(childNodeId => {\n        this.dagreGraph.setParent(childNodeId, cluster.id);\n      });\n    }\n\n    // update dagre\n    for (const edge of this.dagreEdges) {\n      if (settings.multigraph) {\n        this.dagreGraph.setEdge(edge.source, edge.target, edge, edge.id);\n      } else {\n        this.dagreGraph.setEdge(edge.source, edge.target);\n      }\n    }\n\n    return this.dagreGraph;\n  }\n}\n","import { Layout } from '../../models/layout.model';\nimport { Graph } from '../../models/graph.model';\nimport { id } from '../../utils/id';\nimport * as dagre from 'dagre';\nimport { Edge } from '../../models/edge.model';\nimport { DagreSettings, Orientation } from './dagre';\n\nexport interface DagreNodesOnlySettings extends DagreSettings {\n  curveDistance?: number;\n}\n\nconst DEFAULT_EDGE_NAME = '\\x00';\nconst GRAPH_NODE = '\\x00';\nconst EDGE_KEY_DELIM = '\\x01';\n\nexport class DagreNodesOnlyLayout implements Layout {\n  defaultSettings: DagreNodesOnlySettings = {\n    orientation: Orientation.LEFT_TO_RIGHT,\n    marginX: 20,\n    marginY: 20,\n    edgePadding: 100,\n    rankPadding: 100,\n    nodePadding: 50,\n    curveDistance: 20,\n    multigraph: true,\n    compound: true\n  };\n  settings: DagreNodesOnlySettings = {};\n\n  dagreGraph: any;\n  dagreNodes: any;\n  dagreEdges: any;\n\n  run(graph: Graph): Graph {\n    this.createDagreGraph(graph);\n    dagre.layout(this.dagreGraph);\n\n    graph.edgeLabels = this.dagreGraph._edgeLabels;\n\n    for (const dagreNodeId in this.dagreGraph._nodes) {\n      const dagreNode = this.dagreGraph._nodes[dagreNodeId];\n      const node = graph.nodes.find(n => n.id === dagreNode.id);\n      node.position = {\n        x: dagreNode.x,\n        y: dagreNode.y\n      };\n      node.dimension = {\n        width: dagreNode.width,\n        height: dagreNode.height\n      };\n    }\n    for (const edge of graph.edges) {\n      this.updateEdge(graph, edge);\n    }\n\n    return graph;\n  }\n\n  updateEdge(graph: Graph, edge: Edge): Graph {\n    const sourceNode = graph.nodes.find(n => n.id === edge.source);\n    const targetNode = graph.nodes.find(n => n.id === edge.target);\n    const rankAxis: 'x' | 'y' = this.settings.orientation === 'BT' || this.settings.orientation === 'TB' ? 'y' : 'x';\n    const orderAxis: 'x' | 'y' = rankAxis === 'y' ? 'x' : 'y';\n    const rankDimension = rankAxis === 'y' ? 'height' : 'width';\n    // determine new arrow position\n    const dir = sourceNode.position[rankAxis] <= targetNode.position[rankAxis] ? -1 : 1;\n    const startingPoint = {\n      [orderAxis]: sourceNode.position[orderAxis],\n      [rankAxis]: sourceNode.position[rankAxis] - dir * (sourceNode.dimension[rankDimension] / 2)\n    };\n    const endingPoint = {\n      [orderAxis]: targetNode.position[orderAxis],\n      [rankAxis]: targetNode.position[rankAxis] + dir * (targetNode.dimension[rankDimension] / 2)\n    };\n\n    const curveDistance = this.settings.curveDistance || this.defaultSettings.curveDistance;\n    // generate new points\n    edge.points = [\n      startingPoint,\n      {\n        [orderAxis]: startingPoint[orderAxis],\n        [rankAxis]: startingPoint[rankAxis] - dir * curveDistance\n      },\n      {\n        [orderAxis]: endingPoint[orderAxis],\n        [rankAxis]: endingPoint[rankAxis] + dir * curveDistance\n      },\n      endingPoint\n    ];\n    const edgeLabelId = `${edge.source}${EDGE_KEY_DELIM}${edge.target}${EDGE_KEY_DELIM}${DEFAULT_EDGE_NAME}`;\n    const matchingEdgeLabel = graph.edgeLabels[edgeLabelId];\n    if (matchingEdgeLabel) {\n      matchingEdgeLabel.points = edge.points;\n    }\n    return graph;\n  }\n\n  createDagreGraph(graph: Graph): any {\n    const settings = Object.assign({}, this.defaultSettings, this.settings);\n    this.dagreGraph = new dagre.graphlib.Graph({ compound: settings.compound, multigraph: settings.multigraph });\n    this.dagreGraph.setGraph({\n      rankdir: settings.orientation,\n      marginx: settings.marginX,\n      marginy: settings.marginY,\n      edgesep: settings.edgePadding,\n      ranksep: settings.rankPadding,\n      nodesep: settings.nodePadding,\n      align: settings.align,\n      acyclicer: settings.acyclicer,\n      ranker: settings.ranker,\n      multigraph: settings.multigraph,\n      compound: settings.compound\n    });\n\n    // Default to assigning a new object as a label for each new edge.\n    this.dagreGraph.setDefaultEdgeLabel(() => {\n      return {\n        /* empty */\n      };\n    });\n\n    this.dagreNodes = graph.nodes.map(n => {\n      const node: any = Object.assign({}, n);\n      node.width = n.dimension.width;\n      node.height = n.dimension.height;\n      node.x = n.position.x;\n      node.y = n.position.y;\n      return node;\n    });\n\n    this.dagreEdges = graph.edges.map(l => {\n      const newLink: any = Object.assign({}, l);\n      if (!newLink.id) {\n        newLink.id = id();\n      }\n      return newLink;\n    });\n\n    for (const node of this.dagreNodes) {\n      if (!node.width) {\n        node.width = 20;\n      }\n      if (!node.height) {\n        node.height = 30;\n      }\n\n      // update dagre\n      this.dagreGraph.setNode(node.id, node);\n    }\n\n    // update dagre\n    for (const edge of this.dagreEdges) {\n      if (settings.multigraph) {\n        this.dagreGraph.setEdge(edge.source, edge.target, edge, edge.id);\n      } else {\n        this.dagreGraph.setEdge(edge.source, edge.target);\n      }\n    }\n\n    return this.dagreGraph;\n  }\n}\n","import { Layout } from '../../models/layout.model';\nimport { Graph } from '../../models/graph.model';\nimport { Node } from '../../models/node.model';\nimport { id } from '../../utils/id';\nimport { forceCollide, forceLink, forceManyBody, forceSimulation } from 'd3-force';\nimport { Edge } from '../../models/edge.model';\nimport { Observable, Subject } from 'rxjs';\nimport { NodePosition } from '../../models';\n\nexport interface D3ForceDirectedSettings {\n  force?: any;\n  forceLink?: any;\n}\nexport interface D3Node {\n  id?: string;\n  x: number;\n  y: number;\n  width?: number;\n  height?: number;\n  fx?: number;\n  fy?: number;\n}\nexport interface D3Edge {\n  source: string | D3Node;\n  target: string | D3Node;\n  midPoint: NodePosition;\n}\nexport interface D3Graph {\n  nodes: D3Node[];\n  edges: D3Edge[];\n}\nexport interface MergedNode extends D3Node, Node {\n  id: string;\n}\n\nexport function toD3Node(maybeNode: string | D3Node): D3Node {\n  if (typeof maybeNode === 'string') {\n    return {\n      id: maybeNode,\n      x: 0,\n      y: 0\n    };\n  }\n  return maybeNode;\n}\n\nexport class D3ForceDirectedLayout implements Layout {\n  defaultSettings: D3ForceDirectedSettings = {\n    force: forceSimulation<any>().force('charge', forceManyBody().strength(-150)).force('collide', forceCollide(5)),\n    forceLink: forceLink<any, any>()\n      .id(node => node.id)\n      .distance(() => 100)\n  };\n  settings: D3ForceDirectedSettings = {};\n\n  inputGraph: Graph;\n  outputGraph: Graph;\n  d3Graph: D3Graph;\n  outputGraph$: Subject<Graph> = new Subject();\n\n  draggingStart: { x: number; y: number };\n\n  run(graph: Graph): Observable<Graph> {\n    this.inputGraph = graph;\n    this.d3Graph = {\n      nodes: [...this.inputGraph.nodes.map(n => ({ ...n }))] as any,\n      edges: [...this.inputGraph.edges.map(e => ({ ...e }))] as any\n    };\n    this.outputGraph = {\n      nodes: [],\n      edges: [],\n      edgeLabels: []\n    };\n    this.outputGraph$.next(this.outputGraph);\n    this.settings = Object.assign({}, this.defaultSettings, this.settings);\n    if (this.settings.force) {\n      this.settings.force\n        .nodes(this.d3Graph.nodes)\n        .force('link', this.settings.forceLink.links(this.d3Graph.edges))\n        .alpha(0.5)\n        .restart()\n        .on('tick', () => {\n          this.outputGraph$.next(this.d3GraphToOutputGraph(this.d3Graph));\n        });\n    }\n\n    return this.outputGraph$.asObservable();\n  }\n\n  updateEdge(graph: Graph, edge: Edge): Observable<Graph> {\n    const settings = Object.assign({}, this.defaultSettings, this.settings);\n    if (settings.force) {\n      settings.force\n        .nodes(this.d3Graph.nodes)\n        .force('link', settings.forceLink.links(this.d3Graph.edges))\n        .alpha(0.5)\n        .restart()\n        .on('tick', () => {\n          this.outputGraph$.next(this.d3GraphToOutputGraph(this.d3Graph));\n        });\n    }\n\n    return this.outputGraph$.asObservable();\n  }\n\n  d3GraphToOutputGraph(d3Graph: D3Graph): Graph {\n    this.outputGraph.nodes = this.d3Graph.nodes.map((node: MergedNode) => ({\n      ...node,\n      id: node.id || id(),\n      position: {\n        x: node.x,\n        y: node.y\n      },\n      dimension: {\n        width: (node.dimension && node.dimension.width) || 20,\n        height: (node.dimension && node.dimension.height) || 20\n      },\n      transform: `translate(${node.x - ((node.dimension && node.dimension.width) || 20) / 2 || 0}, ${\n        node.y - ((node.dimension && node.dimension.height) || 20) / 2 || 0\n      })`\n    }));\n\n    this.outputGraph.edges = this.d3Graph.edges.map(edge => ({\n      ...edge,\n      source: toD3Node(edge.source).id,\n      target: toD3Node(edge.target).id,\n      points: [\n        {\n          x: toD3Node(edge.source).x,\n          y: toD3Node(edge.source).y\n        },\n        {\n          x: toD3Node(edge.target).x,\n          y: toD3Node(edge.target).y\n        }\n      ]\n    }));\n\n    this.outputGraph.edgeLabels = this.outputGraph.edges;\n    return this.outputGraph;\n  }\n\n  onDragStart(draggingNode: Node, $event: MouseEvent): void {\n    this.settings.force.alphaTarget(0.3).restart();\n    const node = this.d3Graph.nodes.find(d3Node => d3Node.id === draggingNode.id);\n    if (!node) {\n      return;\n    }\n    this.draggingStart = { x: $event.x - node.x, y: $event.y - node.y };\n    node.fx = $event.x - this.draggingStart.x;\n    node.fy = $event.y - this.draggingStart.y;\n  }\n\n  onDrag(draggingNode: Node, $event: MouseEvent): void {\n    if (!draggingNode) {\n      return;\n    }\n    const node = this.d3Graph.nodes.find(d3Node => d3Node.id === draggingNode.id);\n    if (!node) {\n      return;\n    }\n    node.fx = $event.x - this.draggingStart.x;\n    node.fy = $event.y - this.draggingStart.y;\n  }\n\n  onDragEnd(draggingNode: Node, $event: MouseEvent): void {\n    if (!draggingNode) {\n      return;\n    }\n    const node = this.d3Graph.nodes.find(d3Node => d3Node.id === draggingNode.id);\n    if (!node) {\n      return;\n    }\n\n    this.settings.force.alphaTarget(0);\n    node.fx = undefined;\n    node.fy = undefined;\n  }\n}\n","import { Layout } from '../../models/layout.model';\nimport { Graph } from '../../models/graph.model';\nimport { Node, ClusterNode } from '../../models/node.model';\nimport { id } from '../../utils/id';\nimport { d3adaptor, ID3StyleLayoutAdaptor, Layout as ColaLayout, Group, InputNode, Link, Rectangle } from 'webcola';\nimport * as d3Dispatch from 'd3-dispatch';\nimport * as d3Force from 'd3-force';\nimport * as d3Timer from 'd3-timer';\nimport { Edge } from '../../models/edge.model';\nimport { Observable, Subject } from 'rxjs';\nimport { ViewDimensions } from '@swimlane/ngx-charts';\n\nexport interface ColaForceDirectedSettings {\n  force?: ColaLayout & ID3StyleLayoutAdaptor;\n  forceModifierFn?: (force: ColaLayout & ID3StyleLayoutAdaptor) => ColaLayout & ID3StyleLayoutAdaptor;\n  onTickListener?: (internalGraph: ColaGraph) => void;\n  viewDimensions?: ViewDimensions;\n}\nexport interface ColaGraph {\n  groups: Group[];\n  nodes: InputNode[];\n  links: Array<Link<number>>;\n}\nexport function toNode(nodes: InputNode[], nodeRef: InputNode | number): InputNode {\n  if (typeof nodeRef === 'number') {\n    return nodes[nodeRef];\n  }\n  return nodeRef;\n}\n\nexport class ColaForceDirectedLayout implements Layout {\n  defaultSettings: ColaForceDirectedSettings = {\n    force: d3adaptor({\n      ...d3Dispatch,\n      ...d3Force,\n      ...d3Timer\n    })\n      .linkDistance(150)\n      .avoidOverlaps(true),\n    viewDimensions: {\n      width: 600,\n      height: 600,\n      xOffset: 0\n    }\n  };\n  settings: ColaForceDirectedSettings = {};\n\n  inputGraph: Graph;\n  outputGraph: Graph;\n  internalGraph: ColaGraph & { groupLinks?: Edge[] };\n  outputGraph$: Subject<Graph> = new Subject();\n\n  draggingStart: { x: number; y: number };\n\n  run(graph: Graph): Observable<Graph> {\n    this.inputGraph = graph;\n    if (!this.inputGraph.clusters) {\n      this.inputGraph.clusters = [];\n    }\n    this.internalGraph = {\n      nodes: [\n        ...this.inputGraph.nodes.map(n => ({\n          ...n,\n          width: n.dimension ? n.dimension.width : 20,\n          height: n.dimension ? n.dimension.height : 20\n        }))\n      ] as any,\n      groups: [\n        ...this.inputGraph.clusters.map(\n          (cluster): Group => ({\n            padding: 5,\n            groups: cluster.childNodeIds\n              .map(nodeId => <any>this.inputGraph.clusters.findIndex(node => node.id === nodeId))\n              .filter(x => x >= 0),\n            leaves: cluster.childNodeIds\n              .map(nodeId => <any>this.inputGraph.nodes.findIndex(node => node.id === nodeId))\n              .filter(x => x >= 0)\n          })\n        )\n      ],\n      links: [\n        ...this.inputGraph.edges\n          .map(e => {\n            const sourceNodeIndex = this.inputGraph.nodes.findIndex(node => e.source === node.id);\n            const targetNodeIndex = this.inputGraph.nodes.findIndex(node => e.target === node.id);\n            if (sourceNodeIndex === -1 || targetNodeIndex === -1) {\n              return undefined;\n            }\n            return {\n              ...e,\n              source: sourceNodeIndex,\n              target: targetNodeIndex\n            };\n          })\n          .filter(x => !!x)\n      ] as any,\n      groupLinks: [\n        ...this.inputGraph.edges\n          .map(e => {\n            const sourceNodeIndex = this.inputGraph.nodes.findIndex(node => e.source === node.id);\n            const targetNodeIndex = this.inputGraph.nodes.findIndex(node => e.target === node.id);\n            if (sourceNodeIndex >= 0 && targetNodeIndex >= 0) {\n              return undefined;\n            }\n            return e;\n          })\n          .filter(x => !!x)\n      ]\n    };\n    this.outputGraph = {\n      nodes: [],\n      clusters: [],\n      edges: [],\n      edgeLabels: []\n    };\n    this.outputGraph$.next(this.outputGraph);\n    this.settings = Object.assign({}, this.defaultSettings, this.settings);\n    if (this.settings.force) {\n      this.settings.force = this.settings.force\n        .nodes(this.internalGraph.nodes)\n        .groups(this.internalGraph.groups)\n        .links(this.internalGraph.links)\n        .alpha(0.5)\n        .on('tick', () => {\n          if (this.settings.onTickListener) {\n            this.settings.onTickListener(this.internalGraph);\n          }\n          this.outputGraph$.next(this.internalGraphToOutputGraph(this.internalGraph));\n        });\n      if (this.settings.viewDimensions) {\n        this.settings.force = this.settings.force.size([\n          this.settings.viewDimensions.width,\n          this.settings.viewDimensions.height\n        ]);\n      }\n      if (this.settings.forceModifierFn) {\n        this.settings.force = this.settings.forceModifierFn(this.settings.force);\n      }\n      this.settings.force.start();\n    }\n\n    return this.outputGraph$.asObservable();\n  }\n\n  updateEdge(graph: Graph, edge: Edge): Observable<Graph> {\n    const settings = Object.assign({}, this.defaultSettings, this.settings);\n    if (settings.force) {\n      settings.force.start();\n    }\n\n    return this.outputGraph$.asObservable();\n  }\n\n  internalGraphToOutputGraph(internalGraph: any): Graph {\n    this.outputGraph.nodes = internalGraph.nodes.map(node => ({\n      ...node,\n      id: node.id || id(),\n      position: {\n        x: node.x,\n        y: node.y\n      },\n      dimension: {\n        width: (node.dimension && node.dimension.width) || 20,\n        height: (node.dimension && node.dimension.height) || 20\n      },\n      transform: `translate(${node.x - ((node.dimension && node.dimension.width) || 20) / 2 || 0}, ${\n        node.y - ((node.dimension && node.dimension.height) || 20) / 2 || 0\n      })`\n    }));\n\n    this.outputGraph.edges = internalGraph.links\n      .map(edge => {\n        const source: any = toNode(internalGraph.nodes, edge.source);\n        const target: any = toNode(internalGraph.nodes, edge.target);\n        return {\n          ...edge,\n          source: source.id,\n          target: target.id,\n          points: [\n            (source.bounds as Rectangle).rayIntersection(target.bounds.cx(), target.bounds.cy()),\n            (target.bounds as Rectangle).rayIntersection(source.bounds.cx(), source.bounds.cy())\n          ]\n        };\n      })\n      .concat(\n        internalGraph.groupLinks.map(groupLink => {\n          const sourceNode = internalGraph.nodes.find(foundNode => (foundNode as any).id === groupLink.source);\n          const targetNode = internalGraph.nodes.find(foundNode => (foundNode as any).id === groupLink.target);\n          const source =\n            sourceNode || internalGraph.groups.find(foundGroup => (foundGroup as any).id === groupLink.source);\n          const target =\n            targetNode || internalGraph.groups.find(foundGroup => (foundGroup as any).id === groupLink.target);\n          return {\n            ...groupLink,\n            source: source.id,\n            target: target.id,\n            points: [\n              (source.bounds as Rectangle).rayIntersection(target.bounds.cx(), target.bounds.cy()),\n              (target.bounds as Rectangle).rayIntersection(source.bounds.cx(), source.bounds.cy())\n            ]\n          };\n        })\n      );\n\n    this.outputGraph.clusters = internalGraph.groups.map(\n      (group, index): ClusterNode => {\n        const inputGroup = this.inputGraph.clusters[index];\n        return {\n          ...inputGroup,\n          dimension: {\n            width: group.bounds ? group.bounds.width() : 20,\n            height: group.bounds ? group.bounds.height() : 20\n          },\n          position: {\n            x: group.bounds ? group.bounds.x + group.bounds.width() / 2 : 0,\n            y: group.bounds ? group.bounds.y + group.bounds.height() / 2 : 0\n          }\n        };\n      }\n    );\n    this.outputGraph.edgeLabels = this.outputGraph.edges;\n    return this.outputGraph;\n  }\n\n  onDragStart(draggingNode: Node, $event: MouseEvent): void {\n    const nodeIndex = this.outputGraph.nodes.findIndex(foundNode => foundNode.id === draggingNode.id);\n    const node = this.internalGraph.nodes[nodeIndex];\n    if (!node) {\n      return;\n    }\n    this.draggingStart = { x: node.x - $event.x, y: node.y - $event.y };\n    node.fixed = 1;\n    this.settings.force.start();\n  }\n\n  onDrag(draggingNode: Node, $event: MouseEvent): void {\n    if (!draggingNode) {\n      return;\n    }\n    const nodeIndex = this.outputGraph.nodes.findIndex(foundNode => foundNode.id === draggingNode.id);\n    const node = this.internalGraph.nodes[nodeIndex];\n    if (!node) {\n      return;\n    }\n    node.x = this.draggingStart.x + $event.x;\n    node.y = this.draggingStart.y + $event.y;\n  }\n\n  onDragEnd(draggingNode: Node, $event: MouseEvent): void {\n    if (!draggingNode) {\n      return;\n    }\n    const nodeIndex = this.outputGraph.nodes.findIndex(foundNode => foundNode.id === draggingNode.id);\n    const node = this.internalGraph.nodes[nodeIndex];\n    if (!node) {\n      return;\n    }\n\n    node.fixed = 0;\n  }\n}\n","export enum PanningAxis {\n  Both = 'both',\n  Horizontal = 'horizontal',\n  Vertical = 'vertical'\n}\n","import { Injectable } from '@angular/core';\nimport { Layout } from '../../models/layout.model';\nimport { DagreLayout } from './dagre';\nimport { DagreClusterLayout } from './dagreCluster';\nimport { DagreNodesOnlyLayout } from './dagreNodesOnly';\nimport { D3ForceDirectedLayout } from './d3ForceDirected';\nimport { ColaForceDirectedLayout } from './colaForceDirected';\n\nconst layouts = {\n  dagre: DagreLayout,\n  dagreCluster: DagreClusterLayout,\n  dagreNodesOnly: DagreNodesOnlyLayout,\n  d3ForceDirected: D3ForceDirectedLayout,\n  colaForceDirected: ColaForceDirectedLayout\n};\n\n@Injectable()\nexport class LayoutService {\n  getLayout(name: string): Layout {\n    if (layouts[name]) {\n      return new layouts[name]();\n    } else {\n      throw new Error(`Unknown layout type '${name}'`);\n    }\n  }\n}\n","// rename transition due to conflict with d3 transition\nimport { animate, style, transition as ngTransition, trigger } from '@angular/animations';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewChildren,\n  ViewEncapsulation,\n  NgZone,\n  ChangeDetectorRef,\n  OnChanges,\n  SimpleChanges\n} from '@angular/core';\nimport {\n  BaseChartComponent,\n  ChartComponent,\n  ColorHelper,\n  ViewDimensions,\n  calculateViewDimensions\n} from '@swimlane/ngx-charts';\nimport { select } from 'd3-selection';\nimport * as shape from 'd3-shape';\nimport * as ease from 'd3-ease';\nimport 'd3-transition';\nimport { Observable, Subscription, of } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { identity, scale, smoothMatrix, toSVG, transform, translate } from 'transformation-matrix';\nimport { Layout } from '../models/layout.model';\nimport { LayoutService } from './layouts/layout.service';\nimport { Edge } from '../models/edge.model';\nimport { Node, ClusterNode } from '../models/node.model';\nimport { Graph } from '../models/graph.model';\nimport { id } from '../utils/id';\nimport { PanningAxis } from '../enums/panning.enum';\n\n/**\n * Matrix\n */\nexport interface Matrix {\n  a: number;\n  b: number;\n  c: number;\n  d: number;\n  e: number;\n  f: number;\n}\n\n@Component({\n  selector: 'ngx-graph',\n  styleUrls: ['./graph.component.scss'],\n  templateUrl: 'graph.component.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GraphComponent extends BaseChartComponent implements OnInit, OnChanges, OnDestroy, AfterViewInit {\n  @Input() legend: boolean = false;\n  @Input() nodes: Node[] = [];\n  @Input() clusters: ClusterNode[] = [];\n  @Input() links: Edge[] = [];\n  @Input() activeEntries: any[] = [];\n  @Input() curve: any;\n  @Input() draggingEnabled = true;\n  @Input() nodeHeight: number;\n  @Input() nodeMaxHeight: number;\n  @Input() nodeMinHeight: number;\n  @Input() nodeWidth: number;\n  @Input() nodeMinWidth: number;\n  @Input() nodeMaxWidth: number;\n  @Input() panningEnabled: boolean = true;\n  @Input() panningAxis: PanningAxis = PanningAxis.Both;\n  @Input() enableZoom = true;\n  @Input() zoomSpeed = 0.1;\n  @Input() minZoomLevel = 0.1;\n  @Input() maxZoomLevel = 4.0;\n  @Input() autoZoom = false;\n  @Input() panOnZoom = true;\n  @Input() animate? = false;\n  @Input() autoCenter = false;\n  @Input() update$: Observable<any>;\n  @Input() center$: Observable<any>;\n  @Input() zoomToFit$: Observable<any>;\n  @Input() panToNode$: Observable<any>;\n  @Input() layout: string | Layout;\n  @Input() layoutSettings: any;\n  @Input() enableTrackpadSupport = false;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n  @Output() zoomChange: EventEmitter<number> = new EventEmitter();\n  @Output() clickHandler: EventEmitter<MouseEvent> = new EventEmitter();\n\n  @ContentChild('linkTemplate') linkTemplate: TemplateRef<any>;\n  @ContentChild('nodeTemplate') nodeTemplate: TemplateRef<any>;\n  @ContentChild('clusterTemplate') clusterTemplate: TemplateRef<any>;\n  @ContentChild('defsTemplate') defsTemplate: TemplateRef<any>;\n\n  @ViewChild(ChartComponent, { read: ElementRef, static: true }) chart: ElementRef;\n  @ViewChildren('nodeElement') nodeElements: QueryList<ElementRef>;\n  @ViewChildren('linkElement') linkElements: QueryList<ElementRef>;\n\n  private isMouseMoveCalled: boolean = false;\n\n  graphSubscription: Subscription = new Subscription();\n  subscriptions: Subscription[] = [];\n  colors: ColorHelper;\n  dims: ViewDimensions;\n  margin = [0, 0, 0, 0];\n  results = [];\n  seriesDomain: any;\n  transform: string;\n  legendOptions: any;\n  isPanning = false;\n  isDragging = false;\n  draggingNode: Node;\n  initialized = false;\n  graph: Graph;\n  graphDims: any = { width: 0, height: 0 };\n  _oldLinks: Edge[] = [];\n  oldNodes: Set<string> = new Set();\n  oldClusters: Set<string> = new Set();\n  transformationMatrix: Matrix = identity();\n  _touchLastX = null;\n  _touchLastY = null;\n\n  constructor(\n    private el: ElementRef,\n    public zone: NgZone,\n    public cd: ChangeDetectorRef,\n    private layoutService: LayoutService\n  ) {\n    super(el, zone, cd);\n  }\n\n  @Input()\n  groupResultsBy: (node: any) => string = node => node.label;\n\n  /**\n   * Get the current zoom level\n   */\n  get zoomLevel() {\n    return this.transformationMatrix.a;\n  }\n\n  /**\n   * Set the current zoom level\n   */\n  @Input('zoomLevel')\n  set zoomLevel(level) {\n    this.zoomTo(Number(level));\n  }\n\n  /**\n   * Get the current `x` position of the graph\n   */\n  get panOffsetX() {\n    return this.transformationMatrix.e;\n  }\n\n  /**\n   * Set the current `x` position of the graph\n   */\n  @Input('panOffsetX')\n  set panOffsetX(x) {\n    this.panTo(Number(x), null);\n  }\n\n  /**\n   * Get the current `y` position of the graph\n   */\n  get panOffsetY() {\n    return this.transformationMatrix.f;\n  }\n\n  /**\n   * Set the current `y` position of the graph\n   */\n  @Input('panOffsetY')\n  set panOffsetY(y) {\n    this.panTo(null, Number(y));\n  }\n\n  /**\n   * Angular lifecycle event\n   *\n   *\n   * @memberOf GraphComponent\n   */\n  ngOnInit(): void {\n    if (this.update$) {\n      this.subscriptions.push(\n        this.update$.subscribe(() => {\n          this.update();\n        })\n      );\n    }\n\n    if (this.center$) {\n      this.subscriptions.push(\n        this.center$.subscribe(() => {\n          this.center();\n        })\n      );\n    }\n    if (this.zoomToFit$) {\n      this.subscriptions.push(\n        this.zoomToFit$.subscribe(() => {\n          this.zoomToFit();\n        })\n      );\n    }\n\n    if (this.panToNode$) {\n      this.subscriptions.push(\n        this.panToNode$.subscribe((nodeId: string) => {\n          this.panToNodeId(nodeId);\n        })\n      );\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    const { layout, layoutSettings, nodes, clusters, links } = changes;\n    this.setLayout(this.layout);\n    if (layoutSettings) {\n      this.setLayoutSettings(this.layoutSettings);\n    }\n    this.update();\n  }\n\n  setLayout(layout: string | Layout): void {\n    this.initialized = false;\n    if (!layout) {\n      layout = 'dagre';\n    }\n    if (typeof layout === 'string') {\n      this.layout = this.layoutService.getLayout(layout);\n      this.setLayoutSettings(this.layoutSettings);\n    }\n  }\n\n  setLayoutSettings(settings: any): void {\n    if (this.layout && typeof this.layout !== 'string') {\n      this.layout.settings = settings;\n      this.update();\n    }\n  }\n\n  /**\n   * Angular lifecycle event\n   *\n   *\n   * @memberOf GraphComponent\n   */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    for (const sub of this.subscriptions) {\n      sub.unsubscribe();\n    }\n    this.subscriptions = null;\n  }\n\n  /**\n   * Angular lifecycle event\n   *\n   *\n   * @memberOf GraphComponent\n   */\n  ngAfterViewInit(): void {\n    super.ngAfterViewInit();\n    setTimeout(() => this.update());\n  }\n\n  /**\n   * Base class update implementation for the dag graph\n   *\n   * @memberOf GraphComponent\n   */\n  update(): void {\n    super.update();\n    if (!this.curve) {\n      this.curve = shape.curveBundle.beta(1);\n    }\n\n    this.zone.run(() => {\n      this.dims = calculateViewDimensions({\n        width: this.width,\n        height: this.height,\n        margins: this.margin,\n        showLegend: this.legend\n      });\n\n      this.seriesDomain = this.getSeriesDomain();\n      this.setColors();\n      this.legendOptions = this.getLegendOptions();\n\n      this.createGraph();\n      this.updateTransform();\n      this.initialized = true;\n    });\n  }\n\n  /**\n   * Creates the dagre graph engine\n   *\n   * @memberOf GraphComponent\n   */\n  createGraph(): void {\n    this.graphSubscription.unsubscribe();\n    this.graphSubscription = new Subscription();\n    const initializeNode = (n: Node) => {\n      if (!n.meta) {\n        n.meta = {};\n      }\n      if (!n.id) {\n        n.id = id();\n      }\n      if (!n.dimension) {\n        n.dimension = {\n          width: this.nodeWidth ? this.nodeWidth : 30,\n          height: this.nodeHeight ? this.nodeHeight : 30\n        };\n\n        n.meta.forceDimensions = false;\n      } else {\n        n.meta.forceDimensions = n.meta.forceDimensions === undefined ? true : n.meta.forceDimensions;\n      }\n      n.position = {\n        x: 0,\n        y: 0\n      };\n      n.data = n.data ? n.data : {};\n      return n;\n    };\n\n    this.graph = {\n      nodes: this.nodes.length > 0 ? [...this.nodes].map(initializeNode) : [],\n      clusters: this.clusters && this.clusters.length > 0 ? [...this.clusters].map(initializeNode) : [],\n      edges:\n        this.links.length > 0\n          ? [...this.links].map(e => {\n              if (!e.id) {\n                e.id = id();\n              }\n              return e;\n            })\n          : []\n    };\n\n    requestAnimationFrame(() => this.draw());\n  }\n\n  /**\n   * Draws the graph using dagre layouts\n   *\n   *\n   * @memberOf GraphComponent\n   */\n  draw(): void {\n    if (!this.layout || typeof this.layout === 'string') {\n      return;\n    }\n    // Calc view dims for the nodes\n    this.applyNodeDimensions();\n\n    // Recalc the layout\n    const result = this.layout.run(this.graph);\n    const result$ = result instanceof Observable ? result : of(result);\n    this.graphSubscription.add(\n      result$.subscribe(graph => {\n        this.graph = graph;\n        this.tick();\n      })\n    );\n\n    if (this.graph.nodes.length === 0) {\n      return;\n    }\n\n    result$.pipe(first()).subscribe(() => this.applyNodeDimensions());\n  }\n\n  tick() {\n    // Transposes view options to the node\n    const oldNodes: Set<string> = new Set();\n\n    this.graph.nodes.map(n => {\n      n.transform = `translate(${n.position.x - n.dimension.width / 2 || 0}, ${\n        n.position.y - n.dimension.height / 2 || 0\n      })`;\n      if (!n.data) {\n        n.data = {};\n      }\n      n.data.color = this.colors.getColor(this.groupResultsBy(n));\n      oldNodes.add(n.id);\n    });\n\n    const oldClusters: Set<string> = new Set();\n\n    (this.graph.clusters || []).map(n => {\n      n.transform = `translate(${n.position.x - n.dimension.width / 2 || 0}, ${\n        n.position.y - n.dimension.height / 2 || 0\n      })`;\n      if (!n.data) {\n        n.data = {};\n      }\n      n.data.color = this.colors.getColor(this.groupResultsBy(n));\n      oldClusters.add(n.id);\n    });\n\n    // Prevent animations on new nodes\n    setTimeout(() => {\n      this.oldNodes = oldNodes;\n      this.oldClusters = oldClusters;\n    }, 500);\n\n    // Update the labels to the new positions\n    const newLinks = [];\n    for (const edgeLabelId in this.graph.edgeLabels) {\n      const edgeLabel = this.graph.edgeLabels[edgeLabelId];\n\n      const normKey = edgeLabelId.replace(/[^\\w-]*/g, '');\n\n      const isMultigraph =\n        this.layout && typeof this.layout !== 'string' && this.layout.settings && this.layout.settings.multigraph;\n\n      let oldLink = isMultigraph\n        ? this._oldLinks.find(ol => `${ol.source}${ol.target}${ol.id}` === normKey)\n        : this._oldLinks.find(ol => `${ol.source}${ol.target}` === normKey);\n\n      const linkFromGraph = isMultigraph\n        ? this.graph.edges.find(nl => `${nl.source}${nl.target}${nl.id}` === normKey)\n        : this.graph.edges.find(nl => `${nl.source}${nl.target}` === normKey);\n\n      if (!oldLink) {\n        oldLink = linkFromGraph || edgeLabel;\n      } else if (\n        oldLink.data &&\n        linkFromGraph &&\n        linkFromGraph.data &&\n        JSON.stringify(oldLink.data) !== JSON.stringify(linkFromGraph.data)\n      ) {\n        // Compare old link to new link and replace if not equal\n        oldLink.data = linkFromGraph.data;\n      }\n\n      oldLink.oldLine = oldLink.line;\n\n      const points = edgeLabel.points;\n      const line = this.generateLine(points);\n\n      const newLink = Object.assign({}, oldLink);\n      newLink.line = line;\n      newLink.points = points;\n\n      this.updateMidpointOnEdge(newLink, points);\n\n      const textPos = points[Math.floor(points.length / 2)];\n      if (textPos) {\n        newLink.textTransform = `translate(${textPos.x || 0},${textPos.y || 0})`;\n      }\n\n      newLink.textAngle = 0;\n      if (!newLink.oldLine) {\n        newLink.oldLine = newLink.line;\n      }\n\n      this.calcDominantBaseline(newLink);\n      newLinks.push(newLink);\n    }\n\n    this.graph.edges = newLinks;\n\n    // Map the old links for animations\n    if (this.graph.edges) {\n      this._oldLinks = this.graph.edges.map(l => {\n        const newL = Object.assign({}, l);\n        newL.oldLine = l.line;\n        return newL;\n      });\n    }\n\n    // Calculate the height/width total, but only if we have any nodes\n    if (this.graph.nodes && this.graph.nodes.length) {\n      this.graphDims.width = Math.max(...this.graph.nodes.map(n => n.position.x + n.dimension.width));\n      this.graphDims.height = Math.max(...this.graph.nodes.map(n => n.position.y + n.dimension.height));\n    }\n\n    if (this.autoZoom) {\n      this.zoomToFit();\n    }\n\n    if (this.autoCenter) {\n      // Auto-center when rendering\n      this.center();\n    }\n\n    requestAnimationFrame(() => this.redrawLines());\n    this.cd.markForCheck();\n  }\n\n  /**\n   * Measures the node element and applies the dimensions\n   *\n   * @memberOf GraphComponent\n   */\n  applyNodeDimensions(): void {\n    if (this.nodeElements && this.nodeElements.length) {\n      this.nodeElements.map(elem => {\n        const nativeElement = elem.nativeElement;\n        const node = this.graph.nodes.find(n => n.id === nativeElement.id);\n        if (!node) {\n          return;\n        }\n\n        // calculate the height\n        let dims;\n        try {\n          dims = nativeElement.getBBox();\n        } catch (ex) {\n          // Skip drawing if element is not displayed - Firefox would throw an error here\n          return;\n        }\n        if (this.nodeHeight) {\n          node.dimension.height =\n            node.dimension.height && node.meta.forceDimensions ? node.dimension.height : this.nodeHeight;\n        } else {\n          node.dimension.height =\n            node.dimension.height && node.meta.forceDimensions ? node.dimension.height : dims.height;\n        }\n\n        if (this.nodeMaxHeight) {\n          node.dimension.height = Math.max(node.dimension.height, this.nodeMaxHeight);\n        }\n        if (this.nodeMinHeight) {\n          node.dimension.height = Math.min(node.dimension.height, this.nodeMinHeight);\n        }\n\n        if (this.nodeWidth) {\n          node.dimension.width =\n            node.dimension.width && node.meta.forceDimensions ? node.dimension.width : this.nodeWidth;\n        } else {\n          // calculate the width\n          if (nativeElement.getElementsByTagName('text').length) {\n            let maxTextDims;\n            try {\n              for (const textElem of nativeElement.getElementsByTagName('text')) {\n                const currentBBox = textElem.getBBox();\n                if (!maxTextDims) {\n                  maxTextDims = currentBBox;\n                } else {\n                  if (currentBBox.width > maxTextDims.width) {\n                    maxTextDims.width = currentBBox.width;\n                  }\n                  if (currentBBox.height > maxTextDims.height) {\n                    maxTextDims.height = currentBBox.height;\n                  }\n                }\n              }\n            } catch (ex) {\n              // Skip drawing if element is not displayed - Firefox would throw an error here\n              return;\n            }\n            node.dimension.width =\n              node.dimension.width && node.meta.forceDimensions ? node.dimension.width : maxTextDims.width + 20;\n          } else {\n            node.dimension.width =\n              node.dimension.width && node.meta.forceDimensions ? node.dimension.width : dims.width;\n          }\n        }\n\n        if (this.nodeMaxWidth) {\n          node.dimension.width = Math.max(node.dimension.width, this.nodeMaxWidth);\n        }\n        if (this.nodeMinWidth) {\n          node.dimension.width = Math.min(node.dimension.width, this.nodeMinWidth);\n        }\n      });\n    }\n  }\n\n  /**\n   * Redraws the lines when dragged or viewport updated\n   *\n   * @memberOf GraphComponent\n   */\n  redrawLines(_animate = this.animate): void {\n    this.linkElements.map(linkEl => {\n      const edge = this.graph.edges.find(lin => lin.id === linkEl.nativeElement.id);\n\n      if (edge) {\n        const linkSelection = select(linkEl.nativeElement).select('.line');\n        linkSelection\n          .attr('d', edge.oldLine)\n          .transition()\n          .ease(ease.easeSinInOut)\n          .duration(_animate ? 500 : 0)\n          .attr('d', edge.line);\n\n        const textPathSelection = select(this.chartElement.nativeElement).select(`#${edge.id}`);\n        textPathSelection\n          .attr('d', edge.oldTextPath)\n          .transition()\n          .ease(ease.easeSinInOut)\n          .duration(_animate ? 500 : 0)\n          .attr('d', edge.textPath);\n\n        this.updateMidpointOnEdge(edge, edge.points);\n      }\n    });\n  }\n\n  /**\n   * Calculate the text directions / flipping\n   *\n   * @memberOf GraphComponent\n   */\n  calcDominantBaseline(link): void {\n    const firstPoint = link.points[0];\n    const lastPoint = link.points[link.points.length - 1];\n    link.oldTextPath = link.textPath;\n\n    if (lastPoint.x < firstPoint.x) {\n      link.dominantBaseline = 'text-before-edge';\n\n      // reverse text path for when its flipped upside down\n      link.textPath = this.generateLine([...link.points].reverse());\n    } else {\n      link.dominantBaseline = 'text-after-edge';\n      link.textPath = link.line;\n    }\n  }\n\n  /**\n   * Generate the new line path\n   *\n   * @memberOf GraphComponent\n   */\n  generateLine(points: any): any {\n    const lineFunction = shape\n      .line<any>()\n      .x(d => d.x)\n      .y(d => d.y)\n      .curve(this.curve);\n    return lineFunction(points);\n  }\n\n  /**\n   * Zoom was invoked from event\n   *\n   * @memberOf GraphComponent\n   */\n  onZoom($event: WheelEvent, direction): void {\n    if (this.enableTrackpadSupport && !$event.ctrlKey) {\n      this.pan($event.deltaX * -1, $event.deltaY * -1);\n      return;\n    }\n\n    const zoomFactor = 1 + (direction === 'in' ? this.zoomSpeed : -this.zoomSpeed);\n\n    // Check that zooming wouldn't put us out of bounds\n    const newZoomLevel = this.zoomLevel * zoomFactor;\n    if (newZoomLevel <= this.minZoomLevel || newZoomLevel >= this.maxZoomLevel) {\n      return;\n    }\n\n    // Check if zooming is enabled or not\n    if (!this.enableZoom) {\n      return;\n    }\n\n    if (this.panOnZoom === true && $event) {\n      // Absolute mouse X/Y on the screen\n      const mouseX = $event.clientX;\n      const mouseY = $event.clientY;\n\n      // Transform the mouse X/Y into a SVG X/Y\n      const svg = this.chart.nativeElement.querySelector('svg');\n      const svgGroup = svg.querySelector('g.chart');\n\n      const point = svg.createSVGPoint();\n      point.x = mouseX;\n      point.y = mouseY;\n      const svgPoint = point.matrixTransform(svgGroup.getScreenCTM().inverse());\n\n      // Panzoom\n      this.pan(svgPoint.x, svgPoint.y, true);\n      this.zoom(zoomFactor);\n      this.pan(-svgPoint.x, -svgPoint.y, true);\n    } else {\n      this.zoom(zoomFactor);\n    }\n  }\n\n  /**\n   * Pan by x/y\n   *\n   * @param x\n   * @param y\n   */\n  pan(x: number, y: number, ignoreZoomLevel: boolean = false): void {\n    const zoomLevel = ignoreZoomLevel ? 1 : this.zoomLevel;\n    this.transformationMatrix = transform(this.transformationMatrix, translate(x / zoomLevel, y / zoomLevel));\n\n    this.updateTransform();\n  }\n\n  /**\n   * Pan to a fixed x/y\n   *\n   */\n  panTo(x: number, y: number): void {\n    if (x === null || x === undefined || isNaN(x) || y === null || y === undefined || isNaN(y)) {\n      return;\n    }\n\n    const panX = -this.panOffsetX - x * this.zoomLevel + this.dims.width / 2;\n    const panY = -this.panOffsetY - y * this.zoomLevel + this.dims.height / 2;\n\n    this.transformationMatrix = transform(\n      this.transformationMatrix,\n      translate(panX / this.zoomLevel, panY / this.zoomLevel)\n    );\n\n    this.updateTransform();\n  }\n\n  /**\n   * Zoom by a factor\n   *\n   */\n  zoom(factor: number): void {\n    this.transformationMatrix = transform(this.transformationMatrix, scale(factor, factor));\n    this.zoomChange.emit(this.zoomLevel);\n    this.updateTransform();\n  }\n\n  /**\n   * Zoom to a fixed level\n   *\n   */\n  zoomTo(level: number): void {\n    this.transformationMatrix.a = isNaN(level) ? this.transformationMatrix.a : Number(level);\n    this.transformationMatrix.d = isNaN(level) ? this.transformationMatrix.d : Number(level);\n    this.zoomChange.emit(this.zoomLevel);\n    this.updateTransform();\n    this.update();\n  }\n\n  /**\n   * Pan was invoked from event\n   *\n   * @memberOf GraphComponent\n   */\n  onPan(event: MouseEvent): void {\n    this.pan(event.movementX, event.movementY);\n  }\n\n  /**\n   * Drag was invoked from an event\n   *\n   * @memberOf GraphComponent\n   */\n  onDrag(event: MouseEvent): void {\n    if (!this.draggingEnabled) {\n      return;\n    }\n    const node = this.draggingNode;\n    if (this.layout && typeof this.layout !== 'string' && this.layout.onDrag) {\n      this.layout.onDrag(node, event);\n    }\n\n    node.position.x += event.movementX / this.zoomLevel;\n    node.position.y += event.movementY / this.zoomLevel;\n\n    // move the node\n    const x = node.position.x - node.dimension.width / 2;\n    const y = node.position.y - node.dimension.height / 2;\n    node.transform = `translate(${x}, ${y})`;\n\n    for (const link of this.graph.edges) {\n      if (\n        link.target === node.id ||\n        link.source === node.id ||\n        (link.target as any).id === node.id ||\n        (link.source as any).id === node.id\n      ) {\n        if (this.layout && typeof this.layout !== 'string') {\n          const result = this.layout.updateEdge(this.graph, link);\n          const result$ = result instanceof Observable ? result : of(result);\n          this.graphSubscription.add(\n            result$.subscribe(graph => {\n              this.graph = graph;\n              this.redrawEdge(link);\n            })\n          );\n        }\n      }\n    }\n\n    this.redrawLines(false);\n  }\n\n  redrawEdge(edge: Edge) {\n    const line = this.generateLine(edge.points);\n    this.calcDominantBaseline(edge);\n    edge.oldLine = edge.line;\n    edge.line = line;\n  }\n\n  /**\n   * Update the entire view for the new pan position\n   *\n   *\n   * @memberOf GraphComponent\n   */\n  updateTransform(): void {\n    this.transform = toSVG(smoothMatrix(this.transformationMatrix, 100));\n  }\n\n  /**\n   * Node was clicked\n   *\n   *\n   * @memberOf GraphComponent\n   */\n  onClick(event: any): void {\n    this.select.emit(event);\n  }\n\n  /**\n   * Node was focused\n   *\n   *\n   * @memberOf GraphComponent\n   */\n  onActivate(event): void {\n    if (this.activeEntries.indexOf(event) > -1) {\n      return;\n    }\n    this.activeEntries = [event, ...this.activeEntries];\n    this.activate.emit({ value: event, entries: this.activeEntries });\n  }\n\n  /**\n   * Node was defocused\n   *\n   * @memberOf GraphComponent\n   */\n  onDeactivate(event): void {\n    const idx = this.activeEntries.indexOf(event);\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: event, entries: this.activeEntries });\n  }\n\n  /**\n   * Get the domain series for the nodes\n   *\n   * @memberOf GraphComponent\n   */\n  getSeriesDomain(): any[] {\n    return this.nodes\n      .map(d => this.groupResultsBy(d))\n      .reduce((nodes: string[], node): any[] => (nodes.indexOf(node) !== -1 ? nodes : nodes.concat([node])), [])\n      .sort();\n  }\n\n  /**\n   * Tracking for the link\n   *\n   *\n   * @memberOf GraphComponent\n   */\n  trackLinkBy(index: number, link: Edge): any {\n    return link.id;\n  }\n\n  /**\n   * Tracking for the node\n   *\n   *\n   * @memberOf GraphComponent\n   */\n  trackNodeBy(index: number, node: Node): any {\n    return node.id;\n  }\n\n  /**\n   * Sets the colors the nodes\n   *\n   *\n   * @memberOf GraphComponent\n   */\n  setColors(): void {\n    this.colors = new ColorHelper(this.scheme, 'ordinal', this.seriesDomain, this.customColors);\n  }\n\n  /**\n   * Gets the legend options\n   *\n   * @memberOf GraphComponent\n   */\n  getLegendOptions(): any {\n    return {\n      scaleType: 'ordinal',\n      domain: this.seriesDomain,\n      colors: this.colors\n    };\n  }\n\n  /**\n   * On mouse move event, used for panning and dragging.\n   *\n   * @memberOf GraphComponent\n   */\n  @HostListener('document:mousemove', ['$event'])\n  onMouseMove($event: MouseEvent): void {\n    this.isMouseMoveCalled = true;\n    if (this.isPanning && this.panningEnabled) {\n      this.checkEnum(this.panningAxis, $event);\n    } else if (this.isDragging && this.draggingEnabled) {\n      this.onDrag($event);\n    }\n  }\n\n  @HostListener('document:mousedown', ['$event'])\n  onMouseDown(event: MouseEvent): void {\n    this.isMouseMoveCalled = false;\n  }\n\n  @HostListener('document:click', ['$event'])\n  graphClick(event: MouseEvent): void {\n    if (!this.isMouseMoveCalled) this.clickHandler.emit(event);\n  }\n\n  /**\n   * On touch start event to enable panning.\n   *\n   * @memberOf GraphComponent\n   */\n  onTouchStart(event: any): void {\n    this._touchLastX = event.changedTouches[0].clientX;\n    this._touchLastY = event.changedTouches[0].clientY;\n\n    this.isPanning = true;\n  }\n\n  /**\n   * On touch move event, used for panning.\n   *\n   */\n  @HostListener('document:touchmove', ['$event'])\n  onTouchMove($event: any): void {\n    if (this.isPanning && this.panningEnabled) {\n      const clientX = $event.changedTouches[0].clientX;\n      const clientY = $event.changedTouches[0].clientY;\n      const movementX = clientX - this._touchLastX;\n      const movementY = clientY - this._touchLastY;\n      this._touchLastX = clientX;\n      this._touchLastY = clientY;\n\n      this.pan(movementX, movementY);\n    }\n  }\n\n  /**\n   * On touch end event to disable panning.\n   *\n   * @memberOf GraphComponent\n   */\n  onTouchEnd(event: any) {\n    this.isPanning = false;\n  }\n\n  /**\n   * On mouse up event to disable panning/dragging.\n   *\n   * @memberOf GraphComponent\n   */\n  @HostListener('document:mouseup', ['$event'])\n  onMouseUp(event: MouseEvent): void {\n    this.isDragging = false;\n    this.isPanning = false;\n    if (this.layout && typeof this.layout !== 'string' && this.layout.onDragEnd) {\n      this.layout.onDragEnd(this.draggingNode, event);\n    }\n  }\n\n  /**\n   * On node mouse down to kick off dragging\n   *\n   * @memberOf GraphComponent\n   */\n  onNodeMouseDown(event: MouseEvent, node: any): void {\n    if (!this.draggingEnabled) {\n      return;\n    }\n    this.isDragging = true;\n    this.draggingNode = node;\n\n    if (this.layout && typeof this.layout !== 'string' && this.layout.onDragStart) {\n      this.layout.onDragStart(node, event);\n    }\n  }\n\n  /**\n   * Center the graph in the viewport\n   */\n  center(): void {\n    this.panTo(this.graphDims.width / 2, this.graphDims.height / 2);\n  }\n\n  /**\n   * Zooms to fit the entier graph\n   */\n  zoomToFit(): void {\n    const heightZoom = this.dims.height / this.graphDims.height;\n    const widthZoom = this.dims.width / this.graphDims.width;\n    let zoomLevel = Math.min(heightZoom, widthZoom, 1);\n\n    if (zoomLevel < this.minZoomLevel) {\n      zoomLevel = this.minZoomLevel;\n    }\n\n    if (zoomLevel > this.maxZoomLevel) {\n      zoomLevel = this.maxZoomLevel;\n    }\n\n    if (zoomLevel !== this.zoomLevel) {\n      this.zoomLevel = zoomLevel;\n      this.updateTransform();\n      this.zoomChange.emit(this.zoomLevel);\n    }\n  }\n\n  /**\n   * Pans to the node\n   * @param nodeId\n   */\n  panToNodeId(nodeId: string): void {\n    const node = this.graph.nodes.find(n => n.id === nodeId);\n    if (!node) {\n      return;\n    }\n\n    this.panTo(node.position.x, node.position.y);\n  }\n\n  private checkEnum(key: string, event: MouseEvent) {\n    switch (key) {\n      case PanningAxis.Horizontal:\n        this.pan(event.movementX, 0);\n        break;\n      case PanningAxis.Vertical:\n        this.pan(0, event.movementY);\n        break;\n      default:\n        this.onPan(event);\n        break;\n    }\n  }\n\n  private updateMidpointOnEdge(edge: Edge, points: any): void {\n    if (!edge || !points) {\n      return;\n    }\n\n    if (points.length % 2 === 1) {\n      edge.midPoint = points[Math.floor(points.length / 2)];\n    } else {\n      const _first = points[points.length / 2];\n      const _second = points[points.length / 2 - 1];\n      edge.midPoint = {\n        x: (_first.x + _second.x) / 2,\n        y: (_first.y + _second.y) / 2\n      };\n    }\n  }\n}\n","import { Directive, Output, HostListener, EventEmitter } from '@angular/core';\n\n/**\n * Mousewheel directive\n * https://github.com/SodhanaLibrary/angular2-examples/blob/master/app/mouseWheelDirective/mousewheel.directive.ts\n *\n * @export\n */\n// tslint:disable-next-line: directive-selector\n@Directive({ selector: '[mouseWheel]' })\nexport class MouseWheelDirective {\n  @Output()\n  mouseWheelUp = new EventEmitter();\n  @Output()\n  mouseWheelDown = new EventEmitter();\n\n  @HostListener('mousewheel', ['$event'])\n  onMouseWheelChrome(event: any): void {\n    this.mouseWheelFunc(event);\n  }\n\n  @HostListener('DOMMouseScroll', ['$event'])\n  onMouseWheelFirefox(event: any): void {\n    this.mouseWheelFunc(event);\n  }\n\n  @HostListener('wheel', ['$event'])\n  onWheel(event: any): void {\n    this.mouseWheelFunc(event);\n  }\n\n  @HostListener('onmousewheel', ['$event'])\n  onMouseWheelIE(event: any): void {\n    this.mouseWheelFunc(event);\n  }\n\n  mouseWheelFunc(event: any): void {\n    if (window.event) {\n      event = window.event;\n    }\n\n    const delta: number = Math.max(-1, Math.min(1, event.wheelDelta || -event.detail || event.deltaY || event.deltaX));\n    // Firefox don't have native support for wheel event, as a result delta values are reverse\n    const isWheelMouseUp: boolean = event.wheelDelta ? delta > 0 : delta < 0;\n    const isWheelMouseDown: boolean = event.wheelDelta ? delta < 0 : delta > 0;\n    if (isWheelMouseUp) {\n      this.mouseWheelUp.emit(event);\n    } else if (isWheelMouseDown) {\n      this.mouseWheelDown.emit(event);\n    }\n\n    // for IE\n    event.returnValue = false;\n\n    // for Chrome and Firefox\n    if (event.preventDefault) {\n      event.preventDefault();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { GraphComponent } from './graph.component';\nimport { ChartCommonModule } from '@swimlane/ngx-charts';\nimport { MouseWheelDirective } from './mouse-wheel.directive';\nimport { LayoutService } from './layouts/layout.service';\nexport { GraphComponent };\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [GraphComponent, MouseWheelDirective],\n  exports: [GraphComponent, MouseWheelDirective],\n  providers: [LayoutService]\n})\nexport class GraphModule {}\n","import { NgModule } from '@angular/core';\nimport { GraphModule } from './graph/graph.module';\nimport { NgxChartsModule } from '@swimlane/ngx-charts';\n\n@NgModule({\n  imports: [NgxChartsModule],\n  exports: [GraphModule]\n})\nexport class NgxGraphModule {}\n"]}