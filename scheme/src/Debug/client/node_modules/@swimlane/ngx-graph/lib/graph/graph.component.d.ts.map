{"version":3,"file":"graph.component.d.ts","sources":["graph.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { AfterViewInit, ElementRef, EventEmitter, OnDestroy, OnInit, QueryList, TemplateRef, NgZone, ChangeDetectorRef, OnChanges, SimpleChanges } from '@angular/core';\nimport { BaseChartComponent, ColorHelper, ViewDimensions } from '@swimlane/ngx-charts';\nimport 'd3-transition';\nimport { Observable, Subscription } from 'rxjs';\nimport { Layout } from '../models/layout.model';\nimport { LayoutService } from './layouts/layout.service';\nimport { Edge } from '../models/edge.model';\nimport { Node, ClusterNode } from '../models/node.model';\nimport { Graph } from '../models/graph.model';\nimport { PanningAxis } from '../enums/panning.enum';\n/**\n * Matrix\n */\nexport interface Matrix {\n    a: number;\n    b: number;\n    c: number;\n    d: number;\n    e: number;\n    f: number;\n}\nexport declare class GraphComponent extends BaseChartComponent implements OnInit, OnChanges, OnDestroy, AfterViewInit {\n    private el;\n    zone: NgZone;\n    cd: ChangeDetectorRef;\n    private layoutService;\n    legend: boolean;\n    nodes: Node[];\n    clusters: ClusterNode[];\n    links: Edge[];\n    activeEntries: any[];\n    curve: any;\n    draggingEnabled: boolean;\n    nodeHeight: number;\n    nodeMaxHeight: number;\n    nodeMinHeight: number;\n    nodeWidth: number;\n    nodeMinWidth: number;\n    nodeMaxWidth: number;\n    panningEnabled: boolean;\n    panningAxis: PanningAxis;\n    enableZoom: boolean;\n    zoomSpeed: number;\n    minZoomLevel: number;\n    maxZoomLevel: number;\n    autoZoom: boolean;\n    panOnZoom: boolean;\n    animate?: boolean;\n    autoCenter: boolean;\n    update$: Observable<any>;\n    center$: Observable<any>;\n    zoomToFit$: Observable<any>;\n    panToNode$: Observable<any>;\n    layout: string | Layout;\n    layoutSettings: any;\n    enableTrackpadSupport: boolean;\n    activate: EventEmitter<any>;\n    deactivate: EventEmitter<any>;\n    zoomChange: EventEmitter<number>;\n    clickHandler: EventEmitter<MouseEvent>;\n    linkTemplate: TemplateRef<any>;\n    nodeTemplate: TemplateRef<any>;\n    clusterTemplate: TemplateRef<any>;\n    defsTemplate: TemplateRef<any>;\n    chart: ElementRef;\n    nodeElements: QueryList<ElementRef>;\n    linkElements: QueryList<ElementRef>;\n    private isMouseMoveCalled;\n    graphSubscription: Subscription;\n    subscriptions: Subscription[];\n    colors: ColorHelper;\n    dims: ViewDimensions;\n    margin: number[];\n    results: any[];\n    seriesDomain: any;\n    transform: string;\n    legendOptions: any;\n    isPanning: boolean;\n    isDragging: boolean;\n    draggingNode: Node;\n    initialized: boolean;\n    graph: Graph;\n    graphDims: any;\n    _oldLinks: Edge[];\n    oldNodes: Set<string>;\n    oldClusters: Set<string>;\n    transformationMatrix: Matrix;\n    _touchLastX: any;\n    _touchLastY: any;\n    constructor(el: ElementRef, zone: NgZone, cd: ChangeDetectorRef, layoutService: LayoutService);\n    groupResultsBy: (node: any) => string;\n    /**\n     * Get the current zoom level\n     */\n    get zoomLevel(): number;\n    /**\n     * Set the current zoom level\n     */\n    set zoomLevel(level: number);\n    /**\n     * Get the current `x` position of the graph\n     */\n    get panOffsetX(): number;\n    /**\n     * Set the current `x` position of the graph\n     */\n    set panOffsetX(x: number);\n    /**\n     * Get the current `y` position of the graph\n     */\n    get panOffsetY(): number;\n    /**\n     * Set the current `y` position of the graph\n     */\n    set panOffsetY(y: number);\n    /**\n     * Angular lifecycle event\n     *\n     *\n     * @memberOf GraphComponent\n     */\n    ngOnInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    setLayout(layout: string | Layout): void;\n    setLayoutSettings(settings: any): void;\n    /**\n     * Angular lifecycle event\n     *\n     *\n     * @memberOf GraphComponent\n     */\n    ngOnDestroy(): void;\n    /**\n     * Angular lifecycle event\n     *\n     *\n     * @memberOf GraphComponent\n     */\n    ngAfterViewInit(): void;\n    /**\n     * Base class update implementation for the dag graph\n     *\n     * @memberOf GraphComponent\n     */\n    update(): void;\n    /**\n     * Creates the dagre graph engine\n     *\n     * @memberOf GraphComponent\n     */\n    createGraph(): void;\n    /**\n     * Draws the graph using dagre layouts\n     *\n     *\n     * @memberOf GraphComponent\n     */\n    draw(): void;\n    tick(): void;\n    /**\n     * Measures the node element and applies the dimensions\n     *\n     * @memberOf GraphComponent\n     */\n    applyNodeDimensions(): void;\n    /**\n     * Redraws the lines when dragged or viewport updated\n     *\n     * @memberOf GraphComponent\n     */\n    redrawLines(_animate?: boolean): void;\n    /**\n     * Calculate the text directions / flipping\n     *\n     * @memberOf GraphComponent\n     */\n    calcDominantBaseline(link: any): void;\n    /**\n     * Generate the new line path\n     *\n     * @memberOf GraphComponent\n     */\n    generateLine(points: any): any;\n    /**\n     * Zoom was invoked from event\n     *\n     * @memberOf GraphComponent\n     */\n    onZoom($event: WheelEvent, direction: any): void;\n    /**\n     * Pan by x/y\n     *\n     * @param x\n     * @param y\n     */\n    pan(x: number, y: number, ignoreZoomLevel?: boolean): void;\n    /**\n     * Pan to a fixed x/y\n     *\n     */\n    panTo(x: number, y: number): void;\n    /**\n     * Zoom by a factor\n     *\n     */\n    zoom(factor: number): void;\n    /**\n     * Zoom to a fixed level\n     *\n     */\n    zoomTo(level: number): void;\n    /**\n     * Pan was invoked from event\n     *\n     * @memberOf GraphComponent\n     */\n    onPan(event: MouseEvent): void;\n    /**\n     * Drag was invoked from an event\n     *\n     * @memberOf GraphComponent\n     */\n    onDrag(event: MouseEvent): void;\n    redrawEdge(edge: Edge): void;\n    /**\n     * Update the entire view for the new pan position\n     *\n     *\n     * @memberOf GraphComponent\n     */\n    updateTransform(): void;\n    /**\n     * Node was clicked\n     *\n     *\n     * @memberOf GraphComponent\n     */\n    onClick(event: any): void;\n    /**\n     * Node was focused\n     *\n     *\n     * @memberOf GraphComponent\n     */\n    onActivate(event: any): void;\n    /**\n     * Node was defocused\n     *\n     * @memberOf GraphComponent\n     */\n    onDeactivate(event: any): void;\n    /**\n     * Get the domain series for the nodes\n     *\n     * @memberOf GraphComponent\n     */\n    getSeriesDomain(): any[];\n    /**\n     * Tracking for the link\n     *\n     *\n     * @memberOf GraphComponent\n     */\n    trackLinkBy(index: number, link: Edge): any;\n    /**\n     * Tracking for the node\n     *\n     *\n     * @memberOf GraphComponent\n     */\n    trackNodeBy(index: number, node: Node): any;\n    /**\n     * Sets the colors the nodes\n     *\n     *\n     * @memberOf GraphComponent\n     */\n    setColors(): void;\n    /**\n     * Gets the legend options\n     *\n     * @memberOf GraphComponent\n     */\n    getLegendOptions(): any;\n    /**\n     * On mouse move event, used for panning and dragging.\n     *\n     * @memberOf GraphComponent\n     */\n    onMouseMove($event: MouseEvent): void;\n    onMouseDown(event: MouseEvent): void;\n    graphClick(event: MouseEvent): void;\n    /**\n     * On touch start event to enable panning.\n     *\n     * @memberOf GraphComponent\n     */\n    onTouchStart(event: any): void;\n    /**\n     * On touch move event, used for panning.\n     *\n     */\n    onTouchMove($event: any): void;\n    /**\n     * On touch end event to disable panning.\n     *\n     * @memberOf GraphComponent\n     */\n    onTouchEnd(event: any): void;\n    /**\n     * On mouse up event to disable panning/dragging.\n     *\n     * @memberOf GraphComponent\n     */\n    onMouseUp(event: MouseEvent): void;\n    /**\n     * On node mouse down to kick off dragging\n     *\n     * @memberOf GraphComponent\n     */\n    onNodeMouseDown(event: MouseEvent, node: any): void;\n    /**\n     * Center the graph in the viewport\n     */\n    center(): void;\n    /**\n     * Zooms to fit the entier graph\n     */\n    zoomToFit(): void;\n    /**\n     * Pans to the node\n     * @param nodeId\n     */\n    panToNodeId(nodeId: string): void;\n    private checkEnum;\n    private updateMidpointOnEdge;\n}\n"]}